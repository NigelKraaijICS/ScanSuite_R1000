Index: app/release/normal/release/output-metadata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 2,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"nl.icsvertex.scansuite\",\r\n  \"variantName\": \"normalRelease\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"versionCode\": 15899,\r\n      \"versionName\": \"1.5.8.99A\",\r\n      \"outputFile\": \"app-normal-release.apk\"\r\n    }\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/release/normal/release/output-metadata.json	(revision 836f29ad8128e0ef6d560e425d07705680eb5047)
+++ app/release/normal/release/output-metadata.json	(date 1620825670613)
@@ -10,8 +10,8 @@
     {
       "type": "SINGLE",
       "filters": [],
-      "versionCode": 15899,
-      "versionName": "1.5.8.99A",
+      "versionCode": 158100,
+      "versionName": "1.5.8.100A",
       "outputFile": "app-normal-release.apk"
     }
   ]
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    \r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.2.0'\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n        classpath 'com.google.gms:google-services:4.3.5'\r\n        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.2'\r\n        classpath 'com.android.tools.build:gradle:4.2.0'\r\n        classpath 'com.google.firebase:perf-plugin:1.3.5'  // Performance Monitoring plugin\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n        maven { url \"https://jitpack.io\" }\r\n        maven {\r\n            url 'https://maven.google.com/'\r\n        }\r\n        maven {\r\n            url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases/'\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\next {\r\n    androidSupportVersion = '28.0.0'\r\n    roomVersion = '1.1.1'\r\n    archLifecycleVersion = '1.1.1'\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 836f29ad8128e0ef6d560e425d07705680eb5047)
+++ build.gradle	(date 1621424091755)
@@ -8,12 +8,12 @@
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:4.2.0'
+        classpath 'com.android.tools.build:gradle:4.2.1'
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
         classpath 'com.google.gms:google-services:4.3.5'
         classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.2'
-        classpath 'com.android.tools.build:gradle:4.2.0'
+        classpath 'com.android.tools.build:gradle:4.2.1'
         classpath 'com.google.firebase:perf-plugin:1.3.5'  // Performance Monitoring plugin
     }
 }
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/PackAndShip/PackAndShipMultiActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.PackAndShip;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnitAdapter;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentService;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.cPackAndShipAddress;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.cPackAndShipBarcode;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.cPackAndShipLine;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrder;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.cPackAndShipShipment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanDocumentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SendingFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class PackAndShipMultiActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private CardView addressContainer;\r\n    private TextView addressNameText;\r\n    private TextView addressAddressText;\r\n    private TextView addressZipCodeText;\r\n    private TextView addressCityText;\r\n    private TextView addressCountryText;\r\n\r\n    private Spinner shippinAgentSpinner;\r\n    private Spinner shippinAgentServiceSpinner;\r\n\r\n    private RecyclerView recyclerUnitsUsed;\r\n    private TextView actionTextView;\r\n    private ImageView imageViewShippingDone;\r\n\r\n    private CardView documentContainerPackAndShip;\r\n    private TextView documentText;\r\n    private ImageView imageViewDocuments;\r\n\r\n    private cShippingAgentServiceShippingUnitAdapter shippingAgentServiceShippingUnitAdapter;\r\n    private cShippingAgentServiceShippingUnitAdapter getShippingAgentServiceShippingUnitAdapter(){\r\n        if (this.shippingAgentServiceShippingUnitAdapter == null) {\r\n            this.shippingAgentServiceShippingUnitAdapter = new cShippingAgentServiceShippingUnitAdapter();\r\n        }\r\n        return  this.shippingAgentServiceShippingUnitAdapter;\r\n    }\r\n\r\n    private cShippingAgent selectedShippingAgent;\r\n    private cShippingAgentService selectedShippingAgentService;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_packandshiporder_ship_multi);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n        if (pvMenuItem.getItemId() == android.R.id.home) {\r\n            this.pHandleBackToLines();\r\n            return true;\r\n        }\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.pHandleBackToLines();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_packandship_multi));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.addressContainer = findViewById(R.id.articleContainer);\r\n        this.addressNameText = findViewById(R.id.addressNameText);\r\n        this.addressAddressText = findViewById(R.id.addressAddressText);\r\n        this.addressZipCodeText = findViewById(R.id.addressZipCodeText);\r\n        this.addressCityText = findViewById(R.id.addressCityText);\r\n        this.addressCountryText = findViewById(R.id.addressCountryText);\r\n\r\n        this.documentContainerPackAndShip = findViewById(R.id.documentContainerPackAndShip);\r\n        this.documentText = findViewById(R.id.documentText);\r\n        this.imageViewDocuments = findViewById(R.id.imageViewDocuments);\r\n\r\n        this.recyclerUnitsUsed = findViewById(R.id.recyclerUnitsUsed);\r\n        this.actionTextView = findViewById(R.id.actionTextView);\r\n\r\n        this.shippinAgentSpinner = findViewById(R.id.shippinAgentSpinner);\r\n        this.shippinAgentServiceSpinner = findViewById(R.id.shippinAgentServiceSpinner);\r\n\r\n        this.imageViewShippingDone = findViewById(R.id.imageViewShippingDone);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(final String pvScreenTitleStr) {\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n            this.toolbarImage.setImageBitmap(cUser.currentUser.currentAuthorisation.customImageBmp());\r\n            this.toolbarTitle.setText(cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getDescriptionStr());\r\n        }\r\n        else {\r\n            this.toolbarImage.setImageResource(R.drawable.ic_menu_ship);\r\n            this.toolbarTitle.setText(pvScreenTitleStr);\r\n        }\r\n\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        String toolBarSubTitleStr = cAppExtension.activity.getString(R.string.novalueyet);\r\n\r\n        if (cPackAndShipOrder.currentPackAndShipOrder != null) {\r\n            toolBarSubTitleStr = cPackAndShipOrder.currentPackAndShipOrder.getOrderNumberStr();\r\n        }\r\n\r\n        if (cPackAndShipShipment.currentShipment != null) {\r\n            toolBarSubTitleStr += \" \" + cPackAndShipShipment.currentShipment.getSourceNoStr();\r\n        }\r\n\r\n        this.toolbarSubTitle.setText(toolBarSubTitleStr);\r\n\r\n        this.toolbarSubTitle.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                mSetToolbar(getResources().getString(R.string.screentitle_packandship_multi));\r\n                mSetActionText();\r\n                mSetAddress();\r\n                mSetShippingInfo();\r\n                mSetShippingUnits();\r\n                mSetDocumentInfo();\r\n                mSetButtons();\r\n                mCheckEmptyScreen();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetDocumentDoneListener();\r\n        this.mSetShippingAgentSpinnerListener();\r\n        this.mSetShippingAgentServiceSpinnerListener();\r\n        this.mSetDocumentsListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n        if (cWorkplace.currentWorkplace == null) {\r\n            if (cWorkplace.allWorkplacesObl.size() > 1) {\r\n                //Show the workplaceStr fragment\r\n                this.mShowWorkplaceFragment();\r\n            }\r\n            else {\r\n                //Pop-up is not needed, we just select the only workplace there is\r\n                cWorkplace.currentWorkplace = cWorkplace.allWorkplacesObl.get(0);\r\n                this.pWorkplaceSelected(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(final cBarcodeScan pvBarcodeScan) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(new Runnable() {\r\n            public void run() {\r\n                mHandleDocumentScan(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));\r\n            }\r\n        }).start();\r\n\r\n    }\r\n\r\n    public  void pHandleDocumentDone(){\r\n\r\n        if (!this.mCheckShipmentOkeBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_shipment_incomplete),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        mShowSending();\r\n        new Thread(new Runnable() {\r\n            public void run() {\r\n                mDocumentDone();\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    public  void pHandleBackToLines(){\r\n        this.mGoBackToSelectActivity();\r\n    }\r\n\r\n    public  void pWorkplaceSelected(boolean pvShowBln){\r\n\r\n        List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n        for (Fragment fragment : fragments) {\r\n            if (fragment instanceof WorkplaceFragment) {\r\n                FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                fragmentTransaction.remove(fragment);\r\n                fragmentTransaction.commit();\r\n            }\r\n        }\r\n\r\n        //Register barcodeStr receiver, because the workplaceStr fragment has been shown\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n        if (pvShowBln) {\r\n            cUserInterface.pShowSnackbarMessage(this.actionTextView,cAppExtension.activity.getString(R.string.message_workplace_selected) + ' ' + cWorkplace.currentWorkplace.getWorkplaceStr() ,R.raw.headsupsound,false);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    private  void mGoBackToSelectActivity() {\r\n\r\n        if (cPackAndShipOrder.currentPackAndShipOrder != null) {\r\n            cPackAndShipOrder.currentPackAndShipOrder.pDeleteViaWebserviceBln();\r\n        }\r\n\r\n        this.mResetCurrents();\r\n\r\n        PackAndShipSelectActivity.startedViaMenuBln = false;\r\n        Intent intent =new Intent(cAppExtension.context, PackAndShipSelectActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n\r\n    }\r\n\r\n    private void mResetCurrents() {\r\n\r\n        cPackAndShipOrder.currentPackAndShipOrder = null;\r\n        cPackAndShipShipment.currentShipment = null;\r\n\r\n        cPackAndShipAddress.pTruncateTableBln();\r\n        cPackAndShipBarcode.pTruncateTableBln();\r\n        cPackAndShipLine.pTruncateTableBln();\r\n\r\n        for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit : cShippingAgentServiceShippingUnit.allShippingAgentServiceShippingUnitsObl) {\r\n            shippingAgentServiceShippingUnit.ShippingUnitQuantityUsedInt = 0;\r\n        }\r\n\r\n    }\r\n\r\n    private void mSetActionText() {\r\n\r\n        this.actionTextView.setVisibility(View.VISIBLE);\r\n\r\n        if (cPackAndShipShipment.currentShipment  == null) {\r\n            this.actionTextView.setText(getString(R.string.scan_document));\r\n            return;\r\n        }\r\n\r\n        this.actionTextView.setText(getString(R.string.scan_next_document_or_close));\r\n\r\n    }\r\n\r\n    private void mSetAddress() {\r\n\r\n        if (cPackAndShipOrder.currentPackAndShipOrder == null || cPackAndShipShipment.currentShipment == null) {\r\n              this.addressContainer.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.addressContainer.setVisibility(View.VISIBLE);\r\n        this.addressNameText.setText(cPackAndShipShipment.currentShipment.deliveryAddress().getAddressNameStr());\r\n        this.addressAddressText.setText(cPackAndShipShipment.currentShipment.deliveryAddress().getAddressStr());\r\n        this.addressZipCodeText.setText(cPackAndShipShipment.currentShipment .deliveryAddress().getZipcodeStr());\r\n        this.addressCityText.setText(cPackAndShipShipment.currentShipment.deliveryAddress().getCityStr());\r\n        this.addressCountryText.setText(cPackAndShipShipment.currentShipment.deliveryAddress().getCountryStr());\r\n\r\n    }\r\n\r\n    private void mSetShippingInfo() {\r\n\r\n        if (cPackAndShipShipment.currentShipment  == null) {\r\n            this.shippinAgentSpinner.setVisibility(View.GONE);\r\n            this.shippinAgentServiceSpinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.shippinAgentSpinner.setVisibility(View.VISIBLE);\r\n        this.shippinAgentServiceSpinner.setVisibility(View.VISIBLE);\r\n\r\n        this.mFillShippingAgentSpinner();\r\n    }\r\n\r\n    private void mSetButtons() {\r\n\r\n\r\n        this.imageViewShippingDone.setVisibility(View.INVISIBLE);\r\n\r\n        if (cPackAndShipShipment.currentShipment == null) {\r\n            return;\r\n        }\r\n        if (cPackAndShipShipment.currentShipment.isShippingBln() && !this.isReadyToSendBln()) {\r\n            return;\r\n        }\r\n\r\n        this.imageViewShippingDone.setVisibility(View.VISIBLE);\r\n\r\n    }\r\n\r\n    private void mSetDocumentsListener() {\r\n        this.imageViewDocuments.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cPackAndShipBarcode.allPackAndShipOrderBarcodesObl == null || cPackAndShipBarcode.allPackAndShipOrderBarcodesObl.size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                mShowDocumentSelectFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetDocumentDoneListener() {\r\n\r\n        this.imageViewShippingDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                pHandleDocumentDone();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetShippingAgentSpinnerListener() {\r\n\r\n        this.shippinAgentSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                selectedShippingAgent = cShippingAgent.pGetShippingAgentByDescriptionStr(shippinAgentSpinner.getSelectedItem().toString());\r\n                if (selectedShippingAgent != null) {\r\n                    cPackAndShipShipment.currentShipment.shippingAgentCodeStr = selectedShippingAgent.getShippingAgentStr();\r\n                    mShippingAgentChanged();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    private void mSetShippingAgentServiceSpinnerListener() {\r\n\r\n        this.shippinAgentServiceSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                selectedShippingAgentService = selectedShippingAgent.pGetShippingAgentServiceByDescriptionStr(shippinAgentServiceSpinner.getSelectedItem().toString());\r\n                cPackAndShipShipment.currentShipment.shippingAgentServiceCodeStr =selectedShippingAgentService.getServiceStr();\r\n                mSetButtons();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    private void mDocumentDone() {\r\n\r\n        cResult hulpResult;\r\n\r\n        if (cPackAndShipShipment.currentShipment.isShippingBln()) {\r\n\r\n            cPackAndShipOrder.currentPackAndShipOrder.pUpdateWorkplaceViaWebserviceBln();\r\n\r\n            hulpResult = cPackAndShipShipment.currentShipment.pShipViaWebserviceRst(this.selectedShippingAgentService.shippingUnitsObl());\r\n        }\r\n        else\r\n        {\r\n            hulpResult = cPackAndShipShipment.currentShipment.pHandledViaWebserviceRst();\r\n        }\r\n        if  (!hulpResult.resultBln) {\r\n            this.mShowShipmentNotSent(hulpResult.messagesStr());\r\n            return;\r\n        }\r\n\r\n\r\n        hulpResult = cPackAndShipOrder.currentPackAndShipOrder.pHandledViaWebserviceRst();\r\n        if  (!hulpResult.resultBln) {\r\n            this.mShowShipmentNotSent(hulpResult.messagesStr());\r\n            return;\r\n        }\r\n\r\n        //We are done, so show we are done\r\n        this.mShowSent();\r\n\r\n        //Reset currents\r\n        this.mResetCurrents();\r\n\r\n        //Rebuild activity\r\n        this.mFieldsInitialize();\r\n    }\r\n\r\n    private  void mShowSending() {\r\n        final SendingFragment sendingFragment = new SendingFragment();\r\n        sendingFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                sendingFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.SENDING_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mShowSent() {\r\n        Fragment fragment = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.SENDING_TAG);\r\n        if (fragment != null) {\r\n            if (fragment instanceof SendingFragment) {\r\n                ((SendingFragment) fragment).pShowFlyAwayAnimation();\r\n                cUserInterface.pShowSnackbarMessage(this.imageViewShippingDone,cAppExtension.activity.getString(R.string.message_shipment_send), R.raw.headsupsound, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mShowShipmentNotSent(String pvErrorMessageStr) {\r\n        Fragment fragment = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.SENDING_TAG);\r\n        if (fragment != null) {\r\n            if (fragment instanceof SendingFragment) {\r\n                ((SendingFragment) fragment).pShowCrashAnimation(pvErrorMessageStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void mHandleDocumentScan(String pvBarcodeWithoutPrefixStr){\r\n\r\n        cResult hulpRst;\r\n\r\n        // This is the first document\r\n        if (cPackAndShipShipment.currentShipment == null) {\r\n            hulpRst = cPackAndShipOrder.pCreatePackAndShipOrderPSMViaWebserviceRst(pvBarcodeWithoutPrefixStr);\r\n            if (!hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),pvBarcodeWithoutPrefixStr,true,true);\r\n                return;\r\n            }\r\n\r\n            FirebaseCrashlytics.getInstance().setCustomKey(\"Ordernumber\", cPackAndShipOrder.currentPackAndShipOrder.getOrderNumberStr());\r\n\r\n            hulpRst  = cPackAndShipOrder.currentPackAndShipOrder.pLockViaWebserviceRst();\r\n            //Everything was fine, so we are done\r\n            if (!hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),pvBarcodeWithoutPrefixStr,true,true);\r\n                return;\r\n            }\r\n\r\n            hulpRst  = cPackAndShipOrder.currentPackAndShipOrder.pGetOrderDetailsRst();\r\n            //Everything was fine, so we are done\r\n            if (!hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),pvBarcodeWithoutPrefixStr,true,true);\r\n                return;\r\n            }\r\n\r\n            hulpRst =   cPackAndShipOrder.currentPackAndShipOrder.pGetFirstDocumentAndDetailsRst(pvBarcodeWithoutPrefixStr);\r\n            if (!hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\",true,true);\r\n                return;\r\n            }\r\n\r\n            hulpRst = cPackAndShipOrder.currentPackAndShipOrder.pAddShipmentViaWebserviceRst();\r\n            if (!hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(), \"\", true, true);\r\n                return;\r\n            }\r\n\r\n            cUserInterface.pHideGettingData();\r\n            this.mFieldsInitialize();\r\n            return;\r\n        }\r\n\r\n\r\n        hulpRst =   cPackAndShipOrder.currentPackAndShipOrder.pGetNextDocumentAndDetailsRst(pvBarcodeWithoutPrefixStr);\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        hulpRst = cPackAndShipOrder.currentPackAndShipOrder.pAddDocumentToCurrentShipmentViaWebserviceRst(pvBarcodeWithoutPrefixStr);\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(), \"\", true, true);\r\n            return;\r\n        }\r\n\r\n        cUserInterface.pHideGettingData();\r\n        this.mFieldsInitialize();\r\n\r\n    }\r\n\r\n    private void mSetDocumentInfo() {\r\n\r\n        if (cPackAndShipShipment.currentShipment == null || cPackAndShipBarcode.allPackAndShipOrderBarcodesObl == null || cPackAndShipBarcode.allPackAndShipOrderBarcodesObl.size() == 0) {\r\n            this.documentContainerPackAndShip.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.documentContainerPackAndShip.setVisibility(View.VISIBLE);\r\n        this.documentText.setText(cAppExtension.activity.getString(R.string.number_of_documents) + \" \" + cPackAndShipBarcode.allPackAndShipOrderBarcodesObl.size());\r\n\r\n    }\r\n\r\n    private void mSetShippingUnits() {\r\n\r\n        if (cPackAndShipShipment.currentShipment == null || !cPackAndShipShipment.currentShipment.isShippingBln()) {\r\n            this.recyclerUnitsUsed.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        if (cPackAndShipShipment.currentShipment == null || cPackAndShipShipment.currentShipment.shippingAgent() == null || cPackAndShipShipment.currentShipment.shippingAgentService() == null ||\r\n                cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl() == null || cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl().size() == 0) {\r\n            return;\r\n        }\r\n\r\n        this.mFillShippingUnitRecycler(cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl());\r\n    }\r\n\r\n    private void mFillShippingUnitRecycler(List<cShippingAgentServiceShippingUnit> pvDataObl) {\r\n\r\n        if (pvDataObl.size() == 0) {\r\n            this.actionTextView.setVisibility(View.VISIBLE);\r\n            this.actionTextView.setText(cAppExtension.activity.getString(R.string.select_shippingunit));\r\n            return;\r\n        }\r\n\r\n        if (cPackAndShipShipment.currentShipment != null && cPackAndShipShipment.currentShipment.shippingAgent() != null && cPackAndShipShipment.currentShipment.shippingAgentService() != null) {\r\n            if (cPackAndShipShipment.currentShipment.shippingAgent() != null && cPackAndShipShipment.currentShipment.shippingAgentService() != null) {\r\n                if (cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl().size() == 1) {\r\n                    for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit :cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl() ) {\r\n                        shippingAgentServiceShippingUnit.ShippingUnitQuantityUsedInt = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.recyclerUnitsUsed.setVisibility(View.VISIBLE);\r\n        this.getShippingAgentServiceShippingUnitAdapter().pFillData(pvDataObl);\r\n        this.recyclerUnitsUsed.setHasFixedSize(false);\r\n        this.recyclerUnitsUsed.setAdapter(this.getShippingAgentServiceShippingUnitAdapter());\r\n        this.recyclerUnitsUsed.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n\r\n\r\n\r\n    }\r\n\r\n    private boolean mCheckShipmentOkeBln() {\r\n\r\n        if (cPackAndShipShipment.currentShipment == null) {\r\n            return false;\r\n        }\r\n\r\n        if (!cPackAndShipShipment.currentShipment.isShippingBln()) {\r\n            return  true;\r\n        }\r\n\r\n        return this.isReadyToSendBln();\r\n\r\n\r\n    }\r\n\r\n    private void mFillShippingAgentSpinner() {\r\n\r\n        if (cPackAndShipShipment.currentShipment == null || cShippingAgent.allShippingAgentsObl == null ||  cShippingAgent.allShippingAgentsObl.size() == 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> shippingAgentObl = new ArrayList<>();\r\n\r\n        for (cShippingAgent shippingAgent :cShippingAgent.allShippingAgentsObl ) {\r\n            shippingAgentObl.add(shippingAgent.getDescriptionStr());\r\n        }\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                shippingAgentObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        this.shippinAgentSpinner.setAdapter(adapter);\r\n        this.shippinAgentSpinner.setSelection(adapter.getPosition(cPackAndShipShipment.currentShipment.shippingAgent().getDescriptionStr()));\r\n\r\n    }\r\n\r\n    private void mShippingAgentChanged() {\r\n\r\n        if (this.selectedShippingAgent == null || this.selectedShippingAgent.shippingAgentServicesObl() == null ||  this.selectedShippingAgent.shippingAgentServicesObl() .size() == 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> shippingAgentServiceObl = new ArrayList<>();\r\n\r\n        for (cShippingAgentService shippingAgentService :this.selectedShippingAgent.shippingAgentServicesObl() ) {\r\n            shippingAgentServiceObl.add(shippingAgentService.getDescriptionStr());\r\n        }\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                shippingAgentServiceObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        this.shippinAgentServiceSpinner.setAdapter(adapter);\r\n        this.shippinAgentServiceSpinner.setSelection(adapter.getPosition(cPackAndShipShipment.currentShipment.shippingAgentService().getDescriptionStr()));\r\n\r\n        cShippingAgentService shippingAgentService = this.selectedShippingAgent.pGetShippingAgentServiceByDescriptionStr(cPackAndShipShipment.currentShipment.shippingAgentService().getDescriptionStr());\r\n        this.mFillShippingUnitRecycler(shippingAgentService.shippingUnitsObl());\r\n    }\r\n\r\n    public  boolean isReadyToSendBln() {\r\n\r\n        if (this.selectedShippingAgent != null && this.selectedShippingAgentService != null) {\r\n            for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit :this.selectedShippingAgentService.shippingUnitsObl() ) {\r\n                if (shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt() > 0 ) {\r\n                    return  true;\r\n                }\r\n            }\r\n        }\r\n        return  false;\r\n\r\n    }\r\n\r\n    private  void mShowWorkplaceFragment() {\r\n        WorkplaceFragment workplaceFragment = new WorkplaceFragment();\r\n        workplaceFragment.setCancelable(false);\r\n        workplaceFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.WORKPLACEFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mShowDocumentSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mCheckEmptyScreen() {\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                cUserInterface.pHideGettingData();\r\n\r\n                if (cPackAndShipShipment.currentShipment == null) {\r\n                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                    ScanDocumentFragment fragment = new ScanDocumentFragment();\r\n                    fragmentTransaction.replace(R.id.packAndShipMultiConstraintLayout, fragment);\r\n                    fragmentTransaction.commit();\r\n                    actionTextView.setVisibility(View.GONE);\r\n                    return;\r\n                }\r\n\r\n                List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n                for (Fragment fragment : fragments) {\r\n                    if (fragment instanceof ScanDocumentFragment) {\r\n                        FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                        fragmentTransaction.remove(fragment);\r\n                        fragmentTransaction.commit();\r\n                        actionTextView.setVisibility(View.VISIBLE);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/PackAndShip/PackAndShipMultiActivity.java	(revision 836f29ad8128e0ef6d560e425d07705680eb5047)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/PackAndShip/PackAndShipMultiActivity.java	(date 1621599237194)
@@ -241,18 +241,15 @@
     @Override
     public void mFieldsInitialize() {
 
-        cAppExtension.activity.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                mSetToolbar(getResources().getString(R.string.screentitle_packandship_multi));
-                mSetActionText();
-                mSetAddress();
-                mSetShippingInfo();
-                mSetShippingUnits();
-                mSetDocumentInfo();
-                mSetButtons();
-                mCheckEmptyScreen();
-            }
+        cAppExtension.activity.runOnUiThread(() -> {
+            mSetToolbar(getResources().getString(R.string.screentitle_packandship_multi));
+            mSetActionText();
+            mSetAddress();
+            mSetShippingInfo();
+            mSetShippingUnits();
+            mSetDocumentInfo();
+            mSetButtons();
+            mCheckEmptyScreen();
         });
     }
 
@@ -293,11 +290,7 @@
         // Show that we are getting data
         cUserInterface.pShowGettingData();
 
-        new Thread(new Runnable() {
-            public void run() {
-                mHandleDocumentScan(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
-            }
-        }).start();
+        new Thread(() -> mHandleDocumentScan(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()))).start();
 
     }
 
@@ -309,11 +302,7 @@
         }
 
         mShowSending();
-        new Thread(new Runnable() {
-            public void run() {
-                mDocumentDone();
-            }
-        }).start();
+        new Thread(this::mDocumentDone).start();
     }
 
     public  void pHandleBackToLines(){
@@ -322,6 +311,8 @@
 
     public  void pWorkplaceSelected(boolean pvShowBln){
 
+        cAppExtension.dialogFragment.dismiss();
+
         List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();
         for (Fragment fragment : fragments) {
             if (fragment instanceof WorkplaceFragment) {
@@ -433,27 +424,19 @@
     }
 
     private void mSetDocumentsListener() {
-        this.imageViewDocuments.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View pvView) {
+        this.imageViewDocuments.setOnClickListener(pvView -> {
 
-                if (cPackAndShipBarcode.allPackAndShipOrderBarcodesObl == null || cPackAndShipBarcode.allPackAndShipOrderBarcodesObl.size() == 0) {
-                    return;
-                }
+            if (cPackAndShipBarcode.allPackAndShipOrderBarcodesObl == null || cPackAndShipBarcode.allPackAndShipOrderBarcodesObl.size() == 0) {
+                return;
+            }
 
-                mShowDocumentSelectFragment();
-            }
+            mShowDocumentSelectFragment();
         });
     }
 
     private void mSetDocumentDoneListener() {
 
-        this.imageViewShippingDone.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                pHandleDocumentDone();
-            }
-        });
+        this.imageViewShippingDone.setOnClickListener(view -> pHandleDocumentDone());
     }
 
     private void mSetShippingAgentSpinnerListener() {
@@ -533,12 +516,9 @@
     private  void mShowSending() {
         final SendingFragment sendingFragment = new SendingFragment();
         sendingFragment.setCancelable(true);
-        cAppExtension.activity.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                // show my popup
-                sendingFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.SENDING_TAG);
-            }
+        cAppExtension.activity.runOnUiThread(() -> {
+            // show my popup
+            sendingFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.SENDING_TAG);
         });
     }
 
@@ -766,29 +746,26 @@
 
     private void mCheckEmptyScreen() {
 
-        cAppExtension.activity.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
+        cAppExtension.activity.runOnUiThread(() -> {
 
-                cUserInterface.pHideGettingData();
+            cUserInterface.pHideGettingData();
 
-                if (cPackAndShipShipment.currentShipment == null) {
-                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();
-                    ScanDocumentFragment fragment = new ScanDocumentFragment();
-                    fragmentTransaction.replace(R.id.packAndShipMultiConstraintLayout, fragment);
-                    fragmentTransaction.commit();
-                    actionTextView.setVisibility(View.GONE);
-                    return;
-                }
+            if (cPackAndShipShipment.currentShipment == null) {
+                FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();
+                ScanDocumentFragment fragment = new ScanDocumentFragment();
+                fragmentTransaction.replace(R.id.packAndShipMultiConstraintLayout, fragment);
+                fragmentTransaction.commit();
+                actionTextView.setVisibility(View.GONE);
+                return;
+            }
 
-                List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();
-                for (Fragment fragment : fragments) {
-                    if (fragment instanceof ScanDocumentFragment) {
-                        FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();
-                        fragmentTransaction.remove(fragment);
-                        fragmentTransaction.commit();
-                        actionTextView.setVisibility(View.VISIBLE);
-                    }
+            List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();
+            for (Fragment fragment : fragments) {
+                if (fragment instanceof ScanDocumentFragment) {
+                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();
+                    fragmentTransaction.remove(fragment);
+                    fragmentTransaction.commit();
+                    actionTextView.setVisibility(View.VISIBLE);
                 }
             }
         });
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/PackAndShip/PackAndShipSingleActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.PackAndShip;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnitAdapter;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentService;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.cPackAndShipAddress;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.cPackAndShipBarcode;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.cPackAndShipLine;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrder;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.cPackAndShipShipment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanDocumentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SendingFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class PackAndShipSingleActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private ConstraintLayout packAndShipSingleConstraintLayout;\r\n\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private CardView addressContainer;\r\n    private TextView addressNameText;\r\n    private TextView addressAddressText;\r\n    private TextView addressZipCodeText;\r\n    private TextView addressCityText;\r\n    private TextView addressCountryText;\r\n\r\n    private Spinner shippinAgentSpinner;\r\n    private Spinner shippinAgentServiceSpinner;\r\n\r\n    private RecyclerView recyclerUnitsUsed;\r\n\r\n    private ImageView imageViewShippingDone;\r\n    private TextView actionTextView;\r\n\r\n    private String scannedDocumentStr;\r\n    private String scannedDocumentToHandleStr;\r\n\r\n    private cShippingAgentServiceShippingUnitAdapter shippingAgentServiceShippingUnitAdapter;\r\n    private cShippingAgentServiceShippingUnitAdapter getShippingAgentServiceShippingUnitAdapter(){\r\n        if (this.shippingAgentServiceShippingUnitAdapter == null) {\r\n            this.shippingAgentServiceShippingUnitAdapter = new cShippingAgentServiceShippingUnitAdapter();\r\n        }\r\n        return  this.shippingAgentServiceShippingUnitAdapter;\r\n    }\r\n\r\n    private cShippingAgent selectedShippingAgent;\r\n    private cShippingAgentService selectedShippingAgentService;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_packandshiporder_ship_single);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n        if (pvMenuItem.getItemId() == android.R.id.home) {\r\n            this.pHandleBackToLines();\r\n            return true;\r\n        }\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.pHandleBackToLines();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_packandship_single));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.packAndShipSingleConstraintLayout = findViewById(R.id.packAndShipSingleConstraintLayout);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.addressContainer = findViewById(R.id.articleContainer);\r\n        this.addressNameText = findViewById(R.id.addressNameText);\r\n        this.addressAddressText = findViewById(R.id.addressAddressText);\r\n        this.addressZipCodeText = findViewById(R.id.addressZipCodeText);\r\n        this.addressCityText = findViewById(R.id.addressCityText);\r\n        this.addressCountryText = findViewById(R.id.addressCountryText);\r\n\r\n        this.recyclerUnitsUsed = findViewById(R.id.recyclerUnitsUsed);\r\n        this.actionTextView = findViewById(R.id.actionTextView);\r\n\r\n        this.shippinAgentSpinner = findViewById(R.id.shippinAgentSpinner);\r\n        this.shippinAgentServiceSpinner = findViewById(R.id.shippinAgentServiceSpinner);\r\n\r\n        this.imageViewShippingDone = findViewById(R.id.imageViewShippingDone);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(final String pvScreenTitleStr) {\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n            this.toolbarImage.setImageBitmap(cUser.currentUser.currentAuthorisation.customImageBmp());\r\n            this.toolbarTitle.setText(cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getDescriptionStr());\r\n        }\r\n        else {\r\n            this.toolbarImage.setImageResource(R.drawable.ic_menu_ship);\r\n            this.toolbarTitle.setText(pvScreenTitleStr);\r\n        }\r\n\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        String toolBarSubTitleStr = cAppExtension.activity.getString(R.string.novalueyet);\r\n\r\n        if (cPackAndShipOrder.currentPackAndShipOrder != null) {\r\n            toolBarSubTitleStr = cPackAndShipOrder.currentPackAndShipOrder.getOrderNumberStr();\r\n        }\r\n\r\n        if (this.scannedDocumentStr != null && !this.scannedDocumentStr.isEmpty()) {\r\n            toolBarSubTitleStr += \" \" + this.scannedDocumentStr;\r\n        }\r\n\r\n        this.toolbarSubTitle.setText(toolBarSubTitleStr);\r\n        this.toolbarSubTitle.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        if (cPackAndShipOrder.currentPackAndShipOrder != null && cPackAndShipOrder.currentPackAndShipOrder.barcodesObl() != null && cPackAndShipOrder.currentPackAndShipOrder.barcodesObl().size() > 0 ) {\r\n            this.scannedDocumentStr = cPackAndShipOrder.currentPackAndShipOrder.barcodesObl().get(0).getBarcodeStr();\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                mSetToolbar(getResources().getString(R.string.screentitle_packandship_single));\r\n                mSetActionText();\r\n                mSetAddress();\r\n                mSetShippingInfo();\r\n                mSetShippingUnits();\r\n                mSetButtons();\r\n                mCheckEmptyScreen();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetDocumentDoneListener();\r\n        this.mSetShippingAgentSpinnerListener();\r\n        this.mSetShippingAgentServiceSpinnerListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n        if (cWorkplace.currentWorkplace == null) {\r\n            if (cWorkplace.allWorkplacesObl.size() > 1) {\r\n                //Show the workplaceStr fragment\r\n                this.mShowWorkplaceFragment();\r\n            }\r\n            else {\r\n                //Pop-up is not needed, we just select the only workplace there is\r\n                cWorkplace.currentWorkplace = cWorkplace.allWorkplacesObl.get(0);\r\n                this.pWorkplaceSelected(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(final cBarcodeScan pvBarcodeScan) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(new Runnable() {\r\n            public void run() {\r\n                mHandleDocumentScan(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));\r\n            }\r\n        }).start();\r\n\r\n    }\r\n\r\n    public  void pHandleDocumentDone(){\r\n\r\n        if (!this.mCheckShipmentOkeBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_shipment_incomplete),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        mShowSending();\r\n        new Thread(() -> mDocumentDone()).start();\r\n    }\r\n\r\n    public  void pHandleBackToLines(){\r\n        this.mGoBackToSelectActivity();\r\n    }\r\n\r\n    public  void pWorkplaceSelected(boolean pvShowBln){\r\n\r\n        List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n        for (Fragment fragment : fragments) {\r\n            if (fragment instanceof WorkplaceFragment) {\r\n                FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                fragmentTransaction.remove(fragment);\r\n                fragmentTransaction.commit();\r\n            }\r\n        }\r\n\r\n        //Register barcodeStr receiver, because the workplaceStr fragment has been shown\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n        if (pvShowBln) {\r\n            cUserInterface.pShowSnackbarMessage(this.actionTextView,cAppExtension.activity.getString(R.string.message_workplace_selected) + ' ' + cWorkplace.currentWorkplace.getWorkplaceStr() ,R.raw.headsupsound,false);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    private  void mGoBackToSelectActivity() {\r\n\r\n        if (cPackAndShipOrder.currentPackAndShipOrder != null) {\r\n\r\n\r\n            if (cPackAndShipShipment.allShipmentsObl== null || cPackAndShipShipment.allShipmentsObl.size() == 0) {\r\n                cPackAndShipOrder.currentPackAndShipOrder.pDeleteViaWebserviceBln();\r\n            }\r\n            else\r\n            {\r\n                cPackAndShipOrder.currentPackAndShipOrder.pLockReleaseViaWebserviceBln();\r\n            }\r\n\r\n        }\r\n\r\n        this.mResetCurrents();\r\n\r\n       PackAndShipSelectActivity.startedViaMenuBln = false;\r\n       Intent intent =new Intent(cAppExtension.context, PackAndShipSelectActivity.class);\r\n       cAppExtension.activity.startActivity(intent);\r\n       cAppExtension.activity.finish();\r\n\r\n    }\r\n\r\n    private void mResetCurrents() {\r\n        this.scannedDocumentStr = \"\";\r\n\r\n        cPackAndShipOrder.currentPackAndShipOrder = null;\r\n        cPackAndShipShipment.currentShipment = null;\r\n\r\n        cPackAndShipAddress.pTruncateTableBln();\r\n        cPackAndShipBarcode.pTruncateTableBln();\r\n        cPackAndShipLine.pTruncateTableBln();\r\n\r\n        for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit : cShippingAgentServiceShippingUnit.allShippingAgentServiceShippingUnitsObl) {\r\n            shippingAgentServiceShippingUnit.ShippingUnitQuantityUsedInt = 0;\r\n        }\r\n\r\n    }\r\n\r\n    private void mSetActionText() {\r\n\r\n        this.actionTextView.setVisibility(View.VISIBLE);\r\n\r\n        if (cPackAndShipShipment.currentShipment  == null) {\r\n            this.actionTextView.setText(getString(R.string.scan_document));\r\n            return;\r\n        }\r\n\r\n        this.actionTextView.setText(getString(R.string.scan_next_document_to_close_current));\r\n\r\n    }\r\n\r\n    private void mSetAddress() {\r\n\r\n        if (cPackAndShipOrder.currentPackAndShipOrder == null || cPackAndShipShipment.currentShipment == null) {\r\n             this.addressContainer.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.addressContainer.setVisibility(View.VISIBLE);\r\n        this.addressNameText.setText(cPackAndShipShipment.currentShipment.deliveryAddress().getAddressNameStr());\r\n        this.addressAddressText.setText(cPackAndShipShipment.currentShipment.deliveryAddress().getAddressStr());\r\n        this.addressZipCodeText.setText(cPackAndShipShipment.currentShipment .deliveryAddress().getZipcodeStr());\r\n        this.addressCityText.setText(cPackAndShipShipment.currentShipment.deliveryAddress().getCityStr());\r\n        this.addressCountryText.setText(cPackAndShipShipment.currentShipment.deliveryAddress().getCountryStr());\r\n\r\n    }\r\n\r\n    private void mSetShippingInfo() {\r\n\r\n        if (cPackAndShipShipment.currentShipment  == null) {\r\n            this.shippinAgentSpinner.setVisibility(View.GONE);\r\n            this.shippinAgentServiceSpinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.shippinAgentSpinner.setVisibility(View.VISIBLE);\r\n        this.shippinAgentServiceSpinner.setVisibility(View.VISIBLE);\r\n\r\n          this.mFillShippingAgentSpinner();\r\n    }\r\n\r\n    private void mSetButtons() {\r\n\r\n\r\n        this.imageViewShippingDone.setVisibility(View.INVISIBLE);\r\n\r\n       if (cPackAndShipShipment.currentShipment == null) {\r\n           return;\r\n       }\r\n       if (cPackAndShipShipment.currentShipment.isShippingBln() && !this.isReadyToSendBln()) {\r\n           return;\r\n       }\r\n\r\n        this.imageViewShippingDone.setVisibility(View.VISIBLE);\r\n\r\n    }\r\n\r\n    private void mSetDocumentDoneListener() {\r\n\r\n        this.imageViewShippingDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                pHandleDocumentDone();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetShippingAgentSpinnerListener() {\r\n\r\n        this.shippinAgentSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                selectedShippingAgent = cShippingAgent.pGetShippingAgentByDescriptionStr(shippinAgentSpinner.getSelectedItem().toString());\r\n                if (selectedShippingAgent != null) {\r\n                    cPackAndShipShipment.currentShipment.shippingAgentCodeStr = selectedShippingAgent.getShippingAgentStr();\r\n                    mShippingAgentChanged();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    private void mSetShippingAgentServiceSpinnerListener() {\r\n\r\n        this.shippinAgentServiceSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                selectedShippingAgentService = selectedShippingAgent.pGetShippingAgentServiceByDescriptionStr(shippinAgentServiceSpinner.getSelectedItem().toString());\r\n                cPackAndShipShipment.currentShipment.shippingAgentServiceCodeStr =selectedShippingAgentService.getServiceStr();\r\n                mSetButtons();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    private void mDocumentDone() {\r\n\r\n        cResult hulpResult;\r\n\r\n        if (cPackAndShipShipment.currentShipment.isShippingBln()) {\r\n\r\n            cPackAndShipOrder.currentPackAndShipOrder.pUpdateWorkplaceViaWebserviceBln();\r\n\r\n            hulpResult = cPackAndShipShipment.currentShipment.pShipViaWebserviceRst(this.selectedShippingAgentService.shippingUnitsObl());\r\n        }\r\n        else\r\n        {\r\n            hulpResult = cPackAndShipShipment.currentShipment.pHandledViaWebserviceRst();\r\n        }\r\n        if  (!hulpResult.resultBln) {\r\n            this.mShowShipmentNotSent(hulpResult.messagesStr());\r\n            return;\r\n        }\r\n\r\n\r\n        hulpResult = cPackAndShipOrder.currentPackAndShipOrder.pHandledViaWebserviceRst();\r\n        if  (!hulpResult.resultBln) {\r\n            this.mShowShipmentNotSent(hulpResult.messagesStr());\r\n            return;\r\n        }\r\n\r\n        //We are done, so show we are done\r\n        this.mShowSent();\r\n\r\n        //Reset currents\r\n        this.mResetCurrents();\r\n\r\n        //Rebuild activity\r\n        this.mFieldsInitialize();\r\n\r\n        if (this.scannedDocumentToHandleStr != null && !this.scannedDocumentToHandleStr .isEmpty()) {\r\n            //Handle new scan\r\n            this.pHandleScan(cBarcodeScan.pFakeScan(this.scannedDocumentToHandleStr));\r\n            this.scannedDocumentToHandleStr = \"\";\r\n        }\r\n\r\n    }\r\n\r\n    private  void mShowSending() {\r\n        final SendingFragment sendingFragment = new SendingFragment();\r\n        sendingFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                sendingFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.SENDING_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mShowSent() {\r\n        Fragment fragment = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.SENDING_TAG);\r\n        if (fragment != null) {\r\n            if (fragment instanceof SendingFragment) {\r\n                ((SendingFragment) fragment).pShowFlyAwayAnimation();\r\n                cUserInterface.pShowSnackbarMessage(this.imageViewShippingDone,cAppExtension.activity.getString(R.string.message_shipment_send), R.raw.headsupsound, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mShowShipmentNotSent(String pvErrorMessageStr) {\r\n        Fragment fragment = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.SENDING_TAG);\r\n        if (fragment != null) {\r\n            if (fragment instanceof SendingFragment) {\r\n                ((SendingFragment) fragment).pShowCrashAnimation(pvErrorMessageStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void mHandleDocumentScan(String pvBarcodeWithoutPrefixStr){\r\n\r\n        cResult hulpRst;\r\n\r\n        //We scanned a new barcode and we already have a pack and ship order\r\n        if (this.scannedDocumentStr != null && !this.scannedDocumentStr.isEmpty() && !this.scannedDocumentStr.equalsIgnoreCase(pvBarcodeWithoutPrefixStr)) {\r\n\r\n            this.scannedDocumentToHandleStr = pvBarcodeWithoutPrefixStr;\r\n\r\n            //Hide getting data\r\n            cUserInterface.pHideGettingData();\r\n\r\n            //Close current order\r\n            this.pHandleDocumentDone();\r\n\r\n            return;\r\n        }\r\n\r\n        hulpRst = cPackAndShipOrder.pCreatePackAndShipOrderPS1ViaWebserviceRst(pvBarcodeWithoutPrefixStr);\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),pvBarcodeWithoutPrefixStr,true,true);\r\n            return;\r\n        }\r\n\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Ordernumber\", cPackAndShipOrder.currentPackAndShipOrder.getOrderNumberStr());\r\n\r\n        hulpRst  = cPackAndShipOrder.currentPackAndShipOrder.pLockViaWebserviceRst();\r\n        //Everything was fine, so we are done\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),pvBarcodeWithoutPrefixStr,true,true);\r\n            return;\r\n        }\r\n\r\n        hulpRst  = cPackAndShipOrder.currentPackAndShipOrder.pGetOrderDetailsRst();\r\n        //Everything was fine, so we are done\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),pvBarcodeWithoutPrefixStr,true,true);\r\n            return;\r\n        }\r\n\r\n        hulpRst =   cPackAndShipOrder.currentPackAndShipOrder.pGetFirstDocumentAndDetailsRst(pvBarcodeWithoutPrefixStr);\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        hulpRst = cPackAndShipOrder.currentPackAndShipOrder.pAddShipmentViaWebserviceRst();\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(), \"\", true, true);\r\n            return;\r\n        }\r\n\r\n        this.scannedDocumentStr = pvBarcodeWithoutPrefixStr;\r\n        cUserInterface.pHideGettingData();\r\n        this.mFieldsInitialize();\r\n\r\n    }\r\n\r\n    private void mSetShippingUnits() {\r\n\r\n        if (cPackAndShipShipment.currentShipment == null || !cPackAndShipShipment.currentShipment.isShippingBln()) {\r\n            this.recyclerUnitsUsed.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        if (cPackAndShipShipment.currentShipment == null || cPackAndShipShipment.currentShipment.shippingAgent() == null || cPackAndShipShipment.currentShipment.shippingAgentService() == null ||\r\n            cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl() == null || cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl().size() == 0) {\r\n            return;\r\n        }\r\n\r\n        this.mFillShippingUnitRecycler(cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl());\r\n    }\r\n\r\n    private void mFillShippingUnitRecycler(List<cShippingAgentServiceShippingUnit> pvDataObl) {\r\n\r\n        if (pvDataObl.size() == 0) {\r\n            this.actionTextView.setVisibility(View.VISIBLE);\r\n            this.actionTextView.setText(cAppExtension.activity.getString(R.string.select_shippingunit));\r\n            return;\r\n        }\r\n\r\n        if (cPackAndShipShipment.currentShipment != null && cPackAndShipShipment.currentShipment.shippingAgent() != null && cPackAndShipShipment.currentShipment.shippingAgentService() != null) {\r\n            if (cPackAndShipShipment.currentShipment.shippingAgent() != null && cPackAndShipShipment.currentShipment.shippingAgentService() != null) {\r\n                if (cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl().size() == 1) {\r\n                    for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit :cPackAndShipShipment.currentShipment.shippingAgentService().shippingUnitsObl() ) {\r\n                        shippingAgentServiceShippingUnit.ShippingUnitQuantityUsedInt = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.recyclerUnitsUsed.setVisibility(View.VISIBLE);\r\n        this.getShippingAgentServiceShippingUnitAdapter().pFillData(pvDataObl);\r\n        this.recyclerUnitsUsed.setHasFixedSize(false);\r\n        this.recyclerUnitsUsed.setAdapter(this.getShippingAgentServiceShippingUnitAdapter());\r\n        this.recyclerUnitsUsed.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n\r\n\r\n\r\n    }\r\n\r\n    private boolean mCheckShipmentOkeBln() {\r\n\r\n        if (cPackAndShipShipment.currentShipment == null) {\r\n            return false;\r\n        }\r\n\r\n        if (!cPackAndShipShipment.currentShipment.isShippingBln()) {\r\n            return  true;\r\n        }\r\n\r\n       return this.isReadyToSendBln();\r\n\r\n\r\n    }\r\n\r\n    private void mFillShippingAgentSpinner() {\r\n\r\n        if (cPackAndShipShipment.currentShipment == null || cShippingAgent.allShippingAgentsObl == null ||  cShippingAgent.allShippingAgentsObl.size() == 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> shippingAgentObl = new ArrayList<>();\r\n\r\n        for (cShippingAgent shippingAgent :cShippingAgent.allShippingAgentsObl ) {\r\n            shippingAgentObl.add(shippingAgent.getDescriptionStr());\r\n        }\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                                                          android.R.layout.simple_spinner_dropdown_item,\r\n                                                           shippingAgentObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        this.shippinAgentSpinner.setAdapter(adapter);\r\n        this.shippinAgentSpinner.setSelection(adapter.getPosition(cPackAndShipShipment.currentShipment.shippingAgent().getDescriptionStr()));\r\n\r\n    }\r\n\r\n    private void mShippingAgentChanged() {\r\n\r\n        if (this.selectedShippingAgent == null || this.selectedShippingAgent.shippingAgentServicesObl() == null ||  this.selectedShippingAgent.shippingAgentServicesObl() .size() == 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> shippingAgentServiceObl = new ArrayList<>();\r\n\r\n        for (cShippingAgentService shippingAgentService :this.selectedShippingAgent.shippingAgentServicesObl() ) {\r\n            shippingAgentServiceObl.add(shippingAgentService.getDescriptionStr());\r\n        }\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                shippingAgentServiceObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        this.shippinAgentServiceSpinner.setAdapter(adapter);\r\n        this.shippinAgentServiceSpinner.setSelection(adapter.getPosition(cPackAndShipShipment.currentShipment.shippingAgentService().getDescriptionStr()));\r\n\r\n        cShippingAgentService shippingAgentService = this.selectedShippingAgent.pGetShippingAgentServiceByDescriptionStr(cPackAndShipShipment.currentShipment.shippingAgentService().getDescriptionStr());\r\n        this.mFillShippingUnitRecycler(shippingAgentService.shippingUnitsObl());\r\n    }\r\n\r\n    public  boolean isReadyToSendBln() {\r\n\r\n        if (this.selectedShippingAgent != null && this.selectedShippingAgentService != null) {\r\n            for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit :this.selectedShippingAgentService.shippingUnitsObl() ) {\r\n                if (shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt() > 0 ) {\r\n                    return  true;\r\n                }\r\n            }\r\n        }\r\n        return  false;\r\n\r\n    }\r\n\r\n    private  void mShowWorkplaceFragment() {\r\n        WorkplaceFragment workplaceFragment = new WorkplaceFragment();\r\n        workplaceFragment.setCancelable(false);\r\n        workplaceFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.WORKPLACEFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mCheckEmptyScreen() {\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                cUserInterface.pHideGettingData();\r\n\r\n                if (cPackAndShipShipment.currentShipment == null) {\r\n                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                    ScanDocumentFragment fragment = new ScanDocumentFragment();\r\n                    fragmentTransaction.replace(R.id.packAndShipSingleConstraintLayout, fragment);\r\n                    fragmentTransaction.commit();\r\n                    actionTextView.setVisibility(View.GONE);\r\n                    return;\r\n                }\r\n\r\n                List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n                for (Fragment fragment : fragments) {\r\n                    if (fragment instanceof ScanDocumentFragment) {\r\n                        FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                        fragmentTransaction.remove(fragment);\r\n                        fragmentTransaction.commit();\r\n                        actionTextView.setVisibility(View.VISIBLE);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/PackAndShip/PackAndShipSingleActivity.java	(revision 836f29ad8128e0ef6d560e425d07705680eb5047)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/PackAndShip/PackAndShipSingleActivity.java	(date 1621599268444)
@@ -244,17 +244,14 @@
             this.scannedDocumentStr = cPackAndShipOrder.currentPackAndShipOrder.barcodesObl().get(0).getBarcodeStr();
         }
 
-        cAppExtension.activity.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                mSetToolbar(getResources().getString(R.string.screentitle_packandship_single));
-                mSetActionText();
-                mSetAddress();
-                mSetShippingInfo();
-                mSetShippingUnits();
-                mSetButtons();
-                mCheckEmptyScreen();
-            }
+        cAppExtension.activity.runOnUiThread(() -> {
+            mSetToolbar(getResources().getString(R.string.screentitle_packandship_single));
+            mSetActionText();
+            mSetAddress();
+            mSetShippingInfo();
+            mSetShippingUnits();
+            mSetButtons();
+            mCheckEmptyScreen();
         });
     }
 
@@ -294,11 +291,7 @@
         // Show that we are getting data
         cUserInterface.pShowGettingData();
 
-        new Thread(new Runnable() {
-            public void run() {
-                mHandleDocumentScan(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
-            }
-        }).start();
+        new Thread(() -> mHandleDocumentScan(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()))).start();
 
     }
 
@@ -310,7 +303,7 @@
         }
 
         mShowSending();
-        new Thread(() -> mDocumentDone()).start();
+        new Thread(this::mDocumentDone).start();
     }
 
     public  void pHandleBackToLines(){
@@ -319,6 +312,8 @@
 
     public  void pWorkplaceSelected(boolean pvShowBln){
 
+        cAppExtension.dialogFragment.dismiss();
+
         List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();
         for (Fragment fragment : fragments) {
             if (fragment instanceof WorkplaceFragment) {
@@ -441,12 +436,7 @@
 
     private void mSetDocumentDoneListener() {
 
-        this.imageViewShippingDone.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                pHandleDocumentDone();
-            }
-        });
+        this.imageViewShippingDone.setOnClickListener(view -> pHandleDocumentDone());
     }
 
     private void mSetShippingAgentSpinnerListener() {
@@ -533,12 +523,9 @@
     private  void mShowSending() {
         final SendingFragment sendingFragment = new SendingFragment();
         sendingFragment.setCancelable(true);
-        cAppExtension.activity.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                // show my popup
-                sendingFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.SENDING_TAG);
-            }
+        cAppExtension.activity.runOnUiThread(() -> {
+            // show my popup
+            sendingFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.SENDING_TAG);
         });
     }
 
@@ -744,29 +731,26 @@
 
     private void mCheckEmptyScreen() {
 
-        cAppExtension.activity.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
+        cAppExtension.activity.runOnUiThread(() -> {
 
-                cUserInterface.pHideGettingData();
+            cUserInterface.pHideGettingData();
 
-                if (cPackAndShipShipment.currentShipment == null) {
-                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();
-                    ScanDocumentFragment fragment = new ScanDocumentFragment();
-                    fragmentTransaction.replace(R.id.packAndShipSingleConstraintLayout, fragment);
-                    fragmentTransaction.commit();
-                    actionTextView.setVisibility(View.GONE);
-                    return;
-                }
+            if (cPackAndShipShipment.currentShipment == null) {
+                FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();
+                ScanDocumentFragment fragment = new ScanDocumentFragment();
+                fragmentTransaction.replace(R.id.packAndShipSingleConstraintLayout, fragment);
+                fragmentTransaction.commit();
+                actionTextView.setVisibility(View.GONE);
+                return;
+            }
 
-                List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();
-                for (Fragment fragment : fragments) {
-                    if (fragment instanceof ScanDocumentFragment) {
-                        FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();
-                        fragmentTransaction.remove(fragment);
-                        fragmentTransaction.commit();
-                        actionTextView.setVisibility(View.VISIBLE);
-                    }
+            List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();
+            for (Fragment fragment : fragments) {
+                if (fragment instanceof ScanDocumentFragment) {
+                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();
+                    fragmentTransaction.remove(fragment);
+                    fragmentTransaction.commit();
+                    actionTextView.setVisibility(View.VISIBLE);
                 }
             }
         });
Index: app/src/main/java/SSU_WHS/Basics/Workplaces/cWorkplaceAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.Workplaces;\r\n\r\nimport android.text.TextUtils;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cWorkplaceAdapter extends RecyclerView.Adapter<cWorkplaceAdapter.WorkplaceViewHolder>{\r\n\r\n    //Region Public Properties\r\n    public static class WorkplaceViewHolder extends RecyclerView.ViewHolder{\r\n        private TextView textViewDescription;\r\n        private TextView textViewWorkplace;\r\n        public LinearLayout workplaceItemLinearLayout;\r\n\r\n        public WorkplaceViewHolder(View itemView) {\r\n            super(itemView);\r\n            this.textViewDescription = itemView.findViewById(R.id.textViewDescription);\r\n            this.textViewDescription.setEllipsize(TextUtils.TruncateAt.MARQUEE);\r\n            this.textViewDescription.setSingleLine(true);\r\n            this.textViewDescription.setMarqueeRepeatLimit(5);\r\n            this.textViewDescription.setSelected(true);\r\n            this.textViewWorkplace = itemView.findViewById(R.id.textViewWorkplace);\r\n            this.workplaceItemLinearLayout = itemView.findViewById(R.id.workplaceItemLinearLayout);\r\n        }\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n\r\n    public cWorkplaceAdapter() {\r\n        this.LayoutInflaterObject = LayoutInflater.from(cAppExtension.context);\r\n    }\r\n\r\n    //Region Private Properties\r\n    private final LayoutInflater LayoutInflaterObject;\r\n    //End Region Private Propertoes\r\n\r\n    @NonNull\r\n    @Override\r\n    public cWorkplaceAdapter.WorkplaceViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View itemView = this.LayoutInflaterObject.inflate(R.layout.recycler_workplace, parent, false);\r\n        return new WorkplaceViewHolder(itemView);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull cWorkplaceAdapter.WorkplaceViewHolder holder, int position) {\r\n        if (cWorkplace.allWorkplacesObl != null) {\r\n\r\n            final cWorkplace workplace = cWorkplace.allWorkplacesObl.get(position);\r\n\r\n            holder.textViewDescription.setText(workplace.getDescriptionStr());\r\n            holder.textViewWorkplace.setText(workplace.getWorkplaceStr());\r\n\r\n            holder.workplaceItemLinearLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n\r\n                    //Set the current workplaceStr\r\n                    cWorkplace.currentWorkplace = workplace;\r\n\r\n                    if (cAppExtension.context instanceof PickorderLinesActivity) {\r\n                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                        pickorderLinesActivity.pClosePickAndDecideNextStep();\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.context instanceof PickorderLinesGeneratedActivity) {\r\n                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                        pickorderLinesGeneratedActivity.pClosePickAndDecideNextStep(cWorkplace.currentWorkplace.getWorkplaceStr());\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.context instanceof SortorderLinesActivity) {\r\n                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                        sortorderLinesActivity.pCloseSortAndDecideNextStep();\r\n                    }\r\n\r\n                    if (cAppExtension.context instanceof ShiporderLinesActivity) {\r\n                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                        shiporderLinesActivity.pWorkplaceSelected();\r\n\r\n                    }\r\n\r\n                    if (cAppExtension.context instanceof FinishShipLinesActivity) {\r\n                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                        finishShipLinesActivity.pWorkplaceSelected();\r\n\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount () {\r\n        if (cWorkplace.allWorkplacesObl != null)\r\n            return cWorkplace.allWorkplacesObl.size();\r\n        else return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/Workplaces/cWorkplaceAdapter.java	(revision 836f29ad8128e0ef6d560e425d07705680eb5047)
+++ app/src/main/java/SSU_WHS/Basics/Workplaces/cWorkplaceAdapter.java	(date 1621599533125)
@@ -10,20 +10,17 @@
 import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.RecyclerView;
 
+import ICS.Utils.Scanning.cBarcodeScan;
 import ICS.cAppExtension;
-import nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;
-import nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;
-import nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;
-import nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;
-import nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;
+import nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;
 import nl.icsvertex.scansuite.R;
 
 public class cWorkplaceAdapter extends RecyclerView.Adapter<cWorkplaceAdapter.WorkplaceViewHolder>{
 
     //Region Public Properties
     public static class WorkplaceViewHolder extends RecyclerView.ViewHolder{
-        private TextView textViewDescription;
-        private TextView textViewWorkplace;
+        private final TextView textViewDescription;
+        private final TextView textViewWorkplace;
         public LinearLayout workplaceItemLinearLayout;
 
         public WorkplaceViewHolder(View itemView) {
@@ -67,42 +64,14 @@
             holder.textViewDescription.setText(workplace.getDescriptionStr());
             holder.textViewWorkplace.setText(workplace.getWorkplaceStr());
 
-            holder.workplaceItemLinearLayout.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
+            holder.workplaceItemLinearLayout.setOnClickListener(v -> {
 
-                    //Set the current workplaceStr
-                    cWorkplace.currentWorkplace = workplace;
-
-                    if (cAppExtension.context instanceof PickorderLinesActivity) {
-                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;
-                        pickorderLinesActivity.pClosePickAndDecideNextStep();
-                        return;
+                //Set the current workplaceStr
+                cWorkplace.currentWorkplace = workplace;
+                    if (cAppExtension.dialogFragment instanceof WorkplaceFragment) {
+                        WorkplaceFragment workplaceFragment = (WorkplaceFragment)cAppExtension.dialogFragment;
+                        workplaceFragment.pHandleScan(cBarcodeScan.pFakeScan(cWorkplace.currentWorkplace.getWorkplaceStr()));
                     }
-
-                    if (cAppExtension.context instanceof PickorderLinesGeneratedActivity) {
-                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;
-                        pickorderLinesGeneratedActivity.pClosePickAndDecideNextStep(cWorkplace.currentWorkplace.getWorkplaceStr());
-                        return;
-                    }
-
-                    if (cAppExtension.context instanceof SortorderLinesActivity) {
-                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;
-                        sortorderLinesActivity.pCloseSortAndDecideNextStep();
-                    }
-
-                    if (cAppExtension.context instanceof ShiporderLinesActivity) {
-                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;
-                        shiporderLinesActivity.pWorkplaceSelected();
-
-                    }
-
-                    if (cAppExtension.context instanceof FinishShipLinesActivity) {
-                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;
-                        finishShipLinesActivity.pWorkplaceSelected();
-
-                    }
-                }
             });
         }
     }
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/WorkplaceFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceAdapter;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipMultiActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSingleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class WorkplaceFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n    private RecyclerView workplaceRecyclerView;\r\n\r\n\r\n    private cWorkplaceAdapter workplaceAdapter;\r\n    private cWorkplaceAdapter getWorkplaceAdapter(){\r\n        if (this.workplaceAdapter == null) {\r\n            this.workplaceAdapter = new cWorkplaceAdapter();\r\n        }\r\n\r\n        return  workplaceAdapter;\r\n    }\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public WorkplaceFragment() {\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(LayoutInflater pvInflater, ViewGroup pvContainer, Bundle pvSavedInstanceState) {\r\n        View rootview = pvInflater.inflate(R.layout.fragment_workplaces, pvContainer);\r\n        return rootview;\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View pvView, @Nullable Bundle pvSavedInstanceState) {\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n        cAppExtension.dialogFragment = this;\r\n\r\n\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = getResources().getDisplayMetrics().heightPixels - getResources().getDimensionPixelSize(R.dimen.default_double_margin);\r\n\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultFragment methods\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        if (getView() != null) {\r\n            this.workplaceRecyclerView = getView().findViewById(R.id.workplaceRecyclerview);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.mGetData();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultFragment methods\r\n\r\n    //Region Private Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n        String barcodeWithoutPrefixStr ;\r\n\r\n        if (cRegex.pHasPrefix(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            boolean foundBin = false;\r\n\r\n            if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.WORKPLACE)) {\r\n                foundBin = true;\r\n            }\r\n\r\n            if (foundBin) {\r\n                //has prefix, is workPlaceStr\r\n                barcodeWithoutPrefixStr = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n                this.mWorkplaceScanned(barcodeWithoutPrefixStr);\r\n            }\r\n            else {\r\n                //has prefix, isn't workPlaceStr\r\n                cUserInterface.pDoNope(workplaceRecyclerView, true, true);\r\n            }\r\n        }\r\n        else {\r\n            //no prefix, fine\r\n            this.mWorkplaceScanned(pvBarcodeScan.getBarcodeOriginalStr());\r\n        }\r\n    }\r\n\r\n    private  void mWorkplaceScanned(String pvWorkplaceStr) {\r\n\r\n        cWorkplace Workplace = cWorkplace.pGetWorkplaceByName(pvWorkplaceStr);\r\n\r\n        if (Workplace != null) {\r\n\r\n            cWorkplace.currentWorkplace = Workplace;\r\n\r\n            if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n                cAppExtension.dialogFragment.dismiss();\r\n                PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                pickorderLinesActivity.pClosePickAndDecideNextStep();\r\n            }\r\n\r\n            if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n                cAppExtension.dialogFragment.dismiss();\r\n                PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                pickorderLinesGeneratedActivity.pClosePickAndDecideNextStep(cWorkplace.currentWorkplace.getWorkplaceStr());\r\n            }\r\n\r\n            if (cAppExtension.activity instanceof SortorderLinesActivity) {\r\n                SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                sortorderLinesActivity.pCloseSortAndDecideNextStep();\r\n            }\r\n\r\n            if (cAppExtension.context instanceof ShiporderLinesActivity) {\r\n                ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                shiporderLinesActivity.pWorkplaceSelected();\r\n            }\r\n\r\n            if (cAppExtension.context instanceof FinishShipLinesActivity) {\r\n                FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                finishShipLinesActivity.pWorkplaceSelected();\r\n            }\r\n\r\n            if (cAppExtension.context instanceof PackAndShipSingleActivity) {\r\n                PackAndShipSingleActivity packAndShipSingleActivity = (PackAndShipSingleActivity)cAppExtension.activity;\r\n                packAndShipSingleActivity.pWorkplaceSelected(true);\r\n            }\r\n\r\n            if (cAppExtension.context instanceof PackAndShipMultiActivity) {\r\n                PackAndShipMultiActivity packAndShipMultiActivity = (PackAndShipMultiActivity)cAppExtension.activity;\r\n                packAndShipMultiActivity.pWorkplaceSelected(true);\r\n            }\r\n\r\n        }\r\n        else {\r\n            cUserInterface.pDoNope(workplaceRecyclerView, true, true);\r\n        }\r\n    }\r\n\r\n    private void mGetData() {\r\n\r\n        boolean webserviceResult;\r\n        webserviceResult = cWorkplace.pGetWorkplacesViaWebserviceBln();\r\n\r\n        if (webserviceResult) {\r\n            this.mSetWorkplaceRecycler();\r\n        }\r\n    }\r\n\r\n    private void mSetWorkplaceRecycler() {\r\n        this.workplaceRecyclerView.setHasFixedSize(false);\r\n        this.workplaceRecyclerView.setAdapter(this.getWorkplaceAdapter());\r\n        this.workplaceRecyclerView.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/WorkplaceFragment.java	(revision 836f29ad8128e0ef6d560e425d07705680eb5047)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/WorkplaceFragment.java	(date 1621599503207)
@@ -193,6 +193,7 @@
             if (cAppExtension.activity instanceof SortorderLinesActivity) {
                 SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;
                 sortorderLinesActivity.pCloseSortAndDecideNextStep();
+
             }
 
             if (cAppExtension.context instanceof ShiporderLinesActivity) {
