Index: app/src/main/java/SSU_WHS/LineItemProperty/LineProperty/cLineProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.LineItemProperty.LineProperty;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.ListIterator;\r\n\r\nimport ICS.Utils.cResult;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ArticleProperty.cArticleProperty;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cLineProperty implements List<JSONObject> {\r\n\r\n    //Public Properties\r\n    private Integer lineNoInt;\r\n    public Integer getLineNoInt() {return lineNoInt;}\r\n\r\n    private String propertyCodeStr;\r\n    public String getPropertyCodeStr() {return propertyCodeStr;}\r\n\r\n    public cItemProperty getItemProperty() {\r\n\r\n        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {\r\n            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {\r\n                return  itemProperty;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    private Integer sequenceNoHandledInt;\r\n    public Integer getSequenceNoHandledInt() {return sequenceNoHandledInt;}\r\n\r\n    private Integer sortingSequenceNoInt;\r\n    public Integer getSortingSequenceNoInt() {return sortingSequenceNoInt;}\r\n\r\n    private String layoutStr;\r\n    public String getLayoutStr() {return layoutStr;}\r\n\r\n    private boolean isInputBln;\r\n    public boolean getIsInputBln() {return isInputBln;}\r\n\r\n    private boolean isRequiredBln;\r\n    public boolean getIsRequiredBln() {return isRequiredBln;}\r\n\r\n    private String valueHandledStr;\r\n    public String getValueHandledStr() {return valueHandledStr;}\r\n\r\n    private cLinePropertyEntity linePropertyEntity;\r\n\r\n\r\n    public  static cLineProperty currentLineProperty;\r\n    public static ArrayList<cLineProperty> allLinePropertysObl;\r\n\r\n    public List<cLinePropertyValue> propertyValueObl() {\r\n\r\n        List<cLinePropertyValue> resultObl = new ArrayList<>();\r\n\r\n        if (cLinePropertyValue.allLinePropertysValuesObl == null || cLinePropertyValue.allLinePropertysValuesObl.size() == 0)  {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cLinePropertyValue linePropertyValue : cLinePropertyValue.allLinePropertysValuesObl) {\r\n            if (linePropertyValue.getLineNoInt() == this.getLineNoInt() && linePropertyValue.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {\r\n                resultObl.add(linePropertyValue);\r\n            }\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    private cLinePropertyViewModel getLinePropertyViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cLinePropertyViewModel.class);\r\n    }\r\n\r\n    public cLineProperty (JSONObject pvJsonObject) {\r\n        this.linePropertyEntity = new cLinePropertyEntity(pvJsonObject);\r\n        this.lineNoInt = this.linePropertyEntity.getLineNoInt();\r\n        this.propertyCodeStr = this.linePropertyEntity.getPropertyCodeStr();\r\n        this.sequenceNoHandledInt = this.linePropertyEntity.getSequenceNoHandledInt();\r\n        this.sortingSequenceNoInt = this.linePropertyEntity.getSortingSequenceNoInt();\r\n        this.layoutStr = this.linePropertyEntity.getLayoutStr();\r\n        this.isInputBln = this.linePropertyEntity.getIsInputBln();\r\n        this.isRequiredBln = this.linePropertyEntity.getIsRequiredBln();\r\n        this.valueHandledStr = this.linePropertyEntity.getValueHandledStr();\r\n    }\r\n\r\n    public cLineProperty (cArticleProperty articleProperty, int lineNoInt) {\r\n        this.linePropertyEntity = null;\r\n        this.lineNoInt = lineNoInt;\r\n        this.propertyCodeStr = articleProperty.getPropertyCodeStr();\r\n        this.sequenceNoHandledInt = 0;\r\n        this.sortingSequenceNoInt = articleProperty.getSortingSequenceNoInt();\r\n        this.layoutStr = articleProperty.getItemProperty().getLayoutStr();\r\n        this.isInputBln = true;\r\n        this.isRequiredBln = true;\r\n        this.valueHandledStr = \"\";\r\n    }\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n\r\n\r\n        if (cLineProperty.allLinePropertysObl == null) {\r\n            cLineProperty.allLinePropertysObl = new ArrayList<>();\r\n        }\r\n\r\n        if (!this.getValueHandledStr().equals(\"\")){\r\n            for(cLineProperty lineProperty: cLineProperty.allLinePropertysObl){\r\n                if (lineProperty.getLineNoInt().equals(this.getLineNoInt()) && lineProperty.getPropertyCodeStr().equals(this.getPropertyCodeStr())){\r\n                    if (cLinePropertyValue.allLinePropertysValuesObl == null)  {\r\n                        cLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();\r\n                    }\r\n                    for (cLinePropertyValue linePropertyValue : cLinePropertyValue.allLinePropertysValuesObl){\r\n                        //Assign value to lineproperty with value\r\n                        if (linePropertyValue.getPropertyCodeStr().equalsIgnoreCase(lineProperty.getPropertyCodeStr()) && linePropertyValue.getLineNoInt() == this.getLineNoInt() && linePropertyValue.getValueStr().equalsIgnoreCase(this.getValueHandledStr())){\r\n                            linePropertyValue.quantityDbl += 1;\r\n                            return true;\r\n                        }\r\n                    }\r\n                    // Propertyvalue not found so make a new one\r\n                    cLinePropertyValue linePropertyValue = new cLinePropertyValue(this.getLineNoInt(), this.getPropertyCodeStr(), this.getValueHandledStr());\r\n                    linePropertyValue.quantityDbl = 1;\r\n                    cLinePropertyValue.allLinePropertysValuesObl.add(linePropertyValue);\r\n                    return true;\r\n                }\r\n            }\r\n            //New Line with values so add\r\n            this.getLinePropertyViewModel().insert(this.linePropertyEntity);\r\n            cLineProperty.allLinePropertysObl.add(this);\r\n            if (cLinePropertyValue.allLinePropertysValuesObl == null)  {\r\n                cLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();\r\n            }\r\n            // Propertyvalue is always a new one so create\r\n            cLinePropertyValue linePropertyValue = new cLinePropertyValue(this.getLineNoInt(), this.getPropertyCodeStr(), this.getValueHandledStr());\r\n            linePropertyValue.quantityDbl = 1;\r\n            cLinePropertyValue.allLinePropertysValuesObl.add(linePropertyValue);\r\n            return true;\r\n        }\r\n\r\n        //New Line no known values so add\r\n        this.getLinePropertyViewModel().insert(this.linePropertyEntity);\r\n        cLineProperty.allLinePropertysObl.add(this);\r\n        return true;\r\n    }\r\n\r\n    public void pValueAdded(String pvValueStr) {\r\n\r\n        //Try to find value with same value\r\n        for (cLinePropertyValue linePropertyValue : this.propertyValueObl()) {\r\n            if (linePropertyValue.getValueStr().equalsIgnoreCase(pvValueStr)) {\r\n                linePropertyValue.quantityDbl += 1;\r\n                cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (cLinePropertyValue.allLinePropertysValuesObl == null) {\r\n            cLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();\r\n        }\r\n\r\n        //Add a new value\r\n        cLinePropertyValue linePropertyValue = new cLinePropertyValue(this.getLineNoInt(), this.getPropertyCodeStr(),pvValueStr);\r\n        cLinePropertyValue.allLinePropertysValuesObl.add(linePropertyValue);\r\n        cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n    }\r\n\r\n    public void pReceiveLineValueAdded(String pvValueStr) {\r\n        //Try to find value with same value\r\n        for (cLinePropertyValue linePropertyValue : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl) {\r\n            if (linePropertyValue.getValueStr().equalsIgnoreCase(pvValueStr)) {\r\n                linePropertyValue.quantityDbl += 1;\r\n                cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Add a new value\r\n        cLinePropertyValue linePropertyValue = new cLinePropertyValue(this.getLineNoInt(), this.getPropertyCodeStr(),pvValueStr);\r\n        cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl.add(linePropertyValue);\r\n        cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n\r\n        for (cLinePropertyValue propertyValue:  cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl){\r\n            if (propertyValue.getPropertyCodeStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr()) && propertyValue.getValueStr().equals(\"---\")){\r\n                cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl.remove(propertyValue);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void pIntakeLineValueAdded(String pvValueStr) {\r\n        //Try to find value with same value\r\n        for (cLinePropertyValue linePropertyValue : cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl) {\r\n            if (linePropertyValue.getValueStr().equalsIgnoreCase(pvValueStr)) {\r\n                linePropertyValue.quantityDbl += 1;\r\n                cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Add a new value\r\n        cLinePropertyValue linePropertyValue = new cLinePropertyValue(this.getLineNoInt(), this.getPropertyCodeStr(),pvValueStr);\r\n        cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl.add(linePropertyValue);\r\n        cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n\r\n        for (cLinePropertyValue propertyValue:  cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl){\r\n            if (propertyValue.getPropertyCodeStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr()) && propertyValue.getValueStr().equals(\"---\")){\r\n                cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl.remove(propertyValue);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public cResult pCheckScanForUniquePropertyRst(String pvPropertyValueStr) {\r\n\r\n        cResult resultRst = new cResult();\r\n        resultRst.resultBln = true;\r\n\r\n        if (!this.getItemProperty().getUniqueBln() || this.propertyValueObl() == null ||this.propertyValueObl().size() ==0 ) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n\r\n\r\n        for (cLinePropertyValue linePropertyValue : this.propertyValueObl()) {\r\n\r\n            if (linePropertyValue.getValueStr().equalsIgnoreCase(pvPropertyValueStr)) {\r\n\r\n                // We have a match, and this hasn't been scanned already\r\n                if (linePropertyValue.getQuantityDbl() == 0) {\r\n                    resultRst.resultBln = true;\r\n                    return  resultRst;\r\n                }\r\n                else\r\n                {\r\n                    resultRst.resultBln = false;\r\n                    resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_itempropery_value_already_used));\r\n                    return  resultRst;\r\n                }\r\n            }\r\n        }\r\n\r\n        resultRst.resultBln = true;\r\n        return  resultRst;\r\n\r\n    }\r\n\r\n    public boolean pDeleteFromDatabaseBln() {\r\n        if (cLineProperty.allLinePropertysObl != null) {\r\n            cLineProperty.allLinePropertysObl.remove(this);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static boolean pTruncateTableBln() {\r\n\r\n        cLinePropertyViewModel linePropertyViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cLinePropertyViewModel.class);\r\n        linePropertyViewModel.deleteAll();\r\n        cLineProperty.allLinePropertysObl = null;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int size() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty() {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean contains(@Nullable Object o) {\r\n        return false;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public Iterator<JSONObject> iterator() {\r\n        return null;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public Object[] toArray() {\r\n        return new Object[0];\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public <T> T[] toArray(@NonNull T[] ts) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean add(JSONObject jsonObject) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean remove(@Nullable Object o) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean containsAll(@NonNull Collection<?> collection) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean addAll(@NonNull Collection<? extends JSONObject> collection) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean addAll(int i, @NonNull Collection<? extends JSONObject> collection) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeAll(@NonNull Collection<?> collection) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean retainAll(@NonNull Collection<?> collection) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void clear() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public JSONObject get(int i) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public JSONObject set(int i, JSONObject jsonObject) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void add(int i, JSONObject jsonObject) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public JSONObject remove(int i) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public int indexOf(@Nullable Object o) {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public int lastIndexOf(@Nullable Object o) {\r\n        return 0;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ListIterator<JSONObject> listIterator() {\r\n        return null;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ListIterator<JSONObject> listIterator(int i) {\r\n        return null;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public List<JSONObject> subList(int i, int i1) {\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/LineItemProperty/LineProperty/cLineProperty.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/LineItemProperty/LineProperty/cLineProperty.java	(date 1620821261643)
@@ -102,15 +102,15 @@
         this.valueHandledStr = this.linePropertyEntity.getValueHandledStr();
     }
 
-    public cLineProperty (cArticleProperty articleProperty, int lineNoInt) {
+    public cLineProperty (cArticleProperty articleProperty, int lineNoInt, boolean pvInputBln, Boolean pvIsRequiredBln) {
         this.linePropertyEntity = null;
         this.lineNoInt = lineNoInt;
         this.propertyCodeStr = articleProperty.getPropertyCodeStr();
         this.sequenceNoHandledInt = 0;
         this.sortingSequenceNoInt = articleProperty.getSortingSequenceNoInt();
         this.layoutStr = articleProperty.getItemProperty().getLayoutStr();
-        this.isInputBln = true;
-        this.isRequiredBln = true;
+        this.isInputBln = pvInputBln;
+        this.isRequiredBln = pvIsRequiredBln;
         this.valueHandledStr = "";
     }
 
Index: app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValueInputAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.LineItemProperty.LinePropertyValue;\r\n\r\nimport android.text.TextUtils;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.AppCompatImageView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;\r\nimport SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cLinePropertyValueInputAdapter extends RecyclerView.Adapter<cLinePropertyValueInputAdapter.commentViewHolder> {\r\n    public static class commentViewHolder extends RecyclerView.ViewHolder{\r\n\r\n        private final AppCompatImageView imageViewPropertyType;\r\n        private final TextView textViewDescription;\r\n        private final TextView textViewValue;\r\n        private TextView textViewQuantityUsed;\r\n        private final ConstraintLayout primaryContent;\r\n        private final ConstraintLayout secondaryContent;\r\n        private final AppCompatImageButton imageButtonMinus;\r\n        private final AppCompatImageButton imageButtonPlus;\r\n        private final AppCompatImageButton imageButtonZero;\r\n        private final  AppCompatImageButton imageButtonManual;\r\n        private final AppCompatImageView imageChevronDown;\r\n        private final Button imageButtonMax;\r\n\r\n        public LinearLayout itemPropertyValueInputItemLinearLayout;\r\n\r\n        public commentViewHolder(View pvView) {\r\n            super(pvView);\r\n\r\n            this.imageViewPropertyType =  pvView.findViewById(R.id.imageViewPropertyType);\r\n\r\n            this.textViewDescription = pvView.findViewById(R.id.textViewDescription);\r\n            this.textViewDescription.setEllipsize(TextUtils.TruncateAt.MARQUEE);\r\n            this.textViewDescription.setSingleLine(true);\r\n            this.textViewDescription.setMarqueeRepeatLimit(5);\r\n            this.textViewDescription.setSelected(true);\r\n\r\n            this.textViewValue = pvView.findViewById(R.id.textViewValue);\r\n\r\n            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);\r\n\r\n            this.itemPropertyValueInputItemLinearLayout = pvView.findViewById(R.id.itemPropertyValueInputItemLinearLayout);\r\n            this.primaryContent = pvView.findViewById(R.id.primaryContent);\r\n            this.secondaryContent = pvView.findViewById(R.id.secondaryContent);\r\n            this.secondaryContent.setVisibility(View.GONE);\r\n\r\n            this.imageButtonPlus = pvView.findViewById(R.id.imageButtonPlus);\r\n            this.imageButtonMinus = pvView.findViewById(R.id.imageButtonMinus);\r\n            this.imageButtonZero = pvView.findViewById(R.id.imageButtonZero);\r\n            this.imageButtonManual = pvView.findViewById(R.id.imageButtonManual);\r\n            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);\r\n            this.imageChevronDown = pvView.findViewById(R.id.imageChevronDown);\r\n            this.imageButtonMax = pvView.findViewById(R.id.imageButtonMax);\r\n        }\r\n    }\r\n\r\n    //Region Private Properties\r\n    private final LayoutInflater layoutInflaterObject;\r\n    private final List<LinearLayout> itemPropertyValueLinearLayoutObl = new ArrayList<>();\r\n    private List<cLinePropertyValue> localItemPropertyValueObl;\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public cLinePropertyValueInputAdapter() {\r\n        this.layoutInflaterObject = LayoutInflater.from(cAppExtension.context);\r\n    }\r\n    //End Region Constructor\r\n\r\n    @NonNull\r\n    @Override\r\n    public cLinePropertyValueInputAdapter.commentViewHolder onCreateViewHolder(@NonNull ViewGroup pvParentVieGroup, int pvViewTypeInt) {\r\n        View itemView = this.layoutInflaterObject.inflate(R.layout.recycler_itempropertyvalue_input, pvParentVieGroup, false);\r\n        return new cLinePropertyValueInputAdapter.commentViewHolder(itemView);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(final cLinePropertyValueInputAdapter.commentViewHolder pvHolder, int pvPositionInt) {\r\n\r\n        this.itemPropertyValueLinearLayoutObl.add(pvHolder.itemPropertyValueInputItemLinearLayout);\r\n\r\n        if (this.localItemPropertyValueObl != null && this.localItemPropertyValueObl.size() > 0) {\r\n\r\n            final cLinePropertyValue linePropertyValue = this.localItemPropertyValueObl.get(pvPositionInt);\r\n\r\n\r\n            switch (linePropertyValue.getItemProperty().getValueTypeStr().toUpperCase()) {\r\n\r\n                case \"BOOLEAN\":\r\n                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_check_black_24dp);\r\n                    break;\r\n\r\n                case \"DECIMAL\":\r\n                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_counter_black_24dp);\r\n                    break;\r\n\r\n                case \"TEXT\" :\r\n                case \"CODE\":\r\n                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_text_black_24dp);\r\n                    break;\r\n\r\n                case \"DATE\":\r\n                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_calendar_black_24dp);\r\n                    break;\r\n            }\r\n\r\n            pvHolder.textViewDescription.setText(linePropertyValue.getItemProperty().getOmschrijvingStr());\r\n            pvHolder.textViewValue.setText(linePropertyValue.getValueStr());\r\n            pvHolder.textViewQuantityUsed.setText(cText.pDoubleToStringStr(linePropertyValue.getQuantityDbl()));\r\n\r\n            if (linePropertyValue.getQuantityDbl() == 0 ) {\r\n                pvHolder.imageChevronDown.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (linePropertyValue.getItemProperty().getUniqueBln() && linePropertyValue.getQuantityDbl() > 0 ) {\r\n                pvHolder.imageButtonPlus.setVisibility(View.INVISIBLE);\r\n                pvHolder.imageButtonManual.setVisibility(View.INVISIBLE);\r\n                pvHolder.imageButtonMax.setVisibility(View.INVISIBLE);\r\n            }\r\n\r\n            if (linePropertyValue == cLinePropertyValue.currentLinePropertyValue) {\r\n                pvHolder.secondaryContent.setVisibility(View.VISIBLE);\r\n            }\r\n\r\n            pvHolder.primaryContent.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(final View view) {\r\n\r\n                    if (linePropertyValue.getQuantityDbl() == 0) {\r\n                        return;\r\n                    }\r\n\r\n                    AnimationUtils.loadAnimation(cAppExtension.context.getApplicationContext(), R.anim.rotate_180);\r\n\r\n                    //Close all others\r\n                    for (LinearLayout aLayout : itemPropertyValueLinearLayoutObl) {\r\n                        ConstraintLayout secondaryLayout = aLayout.findViewById(R.id.secondaryContent);\r\n                        ConstraintLayout primaryLayout = aLayout.findViewById(R.id.primaryContent);\r\n                        if (secondaryLayout != null) {\r\n                            if (primaryLayout != view) {\r\n                                if (secondaryLayout.getVisibility() == View.VISIBLE) {\r\n                                    ImageView chevronImage = primaryLayout.findViewById(R.id.imageChevronDown);\r\n                                    if (chevronImage != null) {\r\n                                        chevronImage.animate().rotation(0).start();\r\n                                    }\r\n                                }\r\n                                secondaryLayout.animate().scaleY(0).start();\r\n                                secondaryLayout.setVisibility(View.GONE);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    boolean isExpanded;\r\n                    isExpanded = pvHolder.secondaryContent.getVisibility() == View.VISIBLE;\r\n\r\n                    if (isExpanded) {\r\n                        pvHolder.imageChevronDown.animate().rotation(0).start();\r\n                        pvHolder.secondaryContent.animate().scaleY(0).start();\r\n                        pvHolder.secondaryContent.setVisibility(View.GONE);\r\n                    }\r\n                    else {\r\n                        pvHolder.imageChevronDown.animate().rotation(180).start();\r\n                        pvHolder.secondaryContent.animate().scaleY(1).start();\r\n                        pvHolder.secondaryContent.setVisibility(View.VISIBLE);\r\n                    }\r\n\r\n\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonMax.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    double availableDbl = 0.0;\r\n                    if(cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity){\r\n                        availableDbl = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() - cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityHandledDbl();\r\n                    }\r\n                    if(cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){\r\n                        availableDbl = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl() - cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityHandledDbl();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        availableDbl = cPickorderLine.currentPickOrderLine.getQuantityDbl();\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){\r\n                        availableDbl = cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl();\r\n                    }\r\n\r\n                    ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(linePropertyValue.getPropertyCodeStr());\r\n\r\n                    for (cLinePropertyValue linePropertyValue1 : loopList ) {\r\n                        availableDbl -= linePropertyValue1.getQuantityDbl();\r\n                    }\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl += availableDbl;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n                        InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        inventoryLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        inventoryLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n\r\n                        pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity( );\r\n                        pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity){\r\n                        if (linePropertyValue.getQuantityDbl()>= (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() - cReceiveorderSummaryLine.currentReceiveorderSummaryLine.quantityHandledDbl)){\r\n                            if (cIntakeorder.currentIntakeOrder.getReceiveNoExtraPiecesBln() && !cIntakeorder.currentIntakeOrder.isGenerated() && cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() > 0 ) {\r\n                                cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);\r\n                                cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus, cAppExtension.context.getString(R.string.number_cannot_be_higher),R.raw.headsupsound,false);\r\n                                return ;\r\n                            }\r\n                            if (cSetting.RECEIVE_EXTRA_PIECES_PERCENTAGE() > 0 && cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() > 0  && (cSetting.RECEIVE_EXTRA_PIECES_PERCENTAGE_MANDATORY())) {\r\n                                //Check if the new quantity would exceed the allowed quantity\r\n                                if (linePropertyValue.getQuantityDbl() > cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getAllowedQuantityDbl()) {\r\n                                    //We would exceed the allowed quantity so show that this is not allowed\r\n                                    cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);\r\n                                    cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus,  cAppExtension.context.getString(R.string.number_received_total_cant_be_higher_then, cText.pDoubleToStringStr(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getAllowedQuantityDbl())),R.raw.headsupsound,false);\r\n                                    return ;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        if (linePropertyValue.getQuantityDbl()== cPickorderLine.currentPickOrderLine.getQuantityDbl()){\r\n                            cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);\r\n                            cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus, cAppExtension.activity.getString(R.string.message_overpick_not_allowed),R.raw.headsupsound,false);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){\r\n                        if (linePropertyValue.getQuantityDbl()== cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl()&& cSetting.RECEIVE_NO_EXTRA_ITEMS() && cSetting.RECEIVE_NO_EXTRA_PIECES()){\r\n                            cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);\r\n                            cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus,  cAppExtension.context.getString(R.string.number_cannot_be_higher),R.raw.headsupsound,false);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = currentQuantity + 1;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n                        InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        inventoryLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        inventoryLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n\r\n                        pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity();\r\n                        pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n\r\n                    int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());\r\n                    int newQuantity = currentQuantity - 1;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = newQuantity;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity  receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        if (newQuantity == 0) {\r\n                            receiveorderLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        }\r\n\r\n                        receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity  intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        if (newQuantity == 0) {\r\n                            intakeOrderLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        }\r\n\r\n                        intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n                        InventoryLinePropertyInputActivity  inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        if (newQuantity == 0) {\r\n                            inventoryLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        }\r\n\r\n                        inventoryLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        inventoryLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                        if (newQuantity == 0) {\r\n                            pickorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();\r\n                        }\r\n\r\n                        pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity();\r\n                        pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n                    }\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonZero.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    double countDbl =  cLinePropertyValue.currentLinePropertyValue.quantityDbl;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity  receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n\r\n                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;\r\n                        receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        receiveorderLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity  intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;\r\n                        intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        intakeOrderLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n                        InventoryLinePropertyInputActivity  inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;\r\n                        inventoryLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        inventoryLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        inventoryLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                        while (countDbl > 0) {\r\n\r\n                            countDbl--;\r\n                        }\r\n\r\n                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;\r\n                        pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity();\r\n                        pickorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();\r\n                        pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonManual.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = 0;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n                        receiveorderLinePropertyInputActivity.pShowNumericInputFragment();\r\n                    }\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n                        intakeOrderLinePropertyInputActivity.pShowNumericInputFragment();\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n                        InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;\r\n                        inventoryLinePropertyInputActivity.pShowNumericInputFragment();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pShowNumericInputFragment();\r\n                    }\r\n                }\r\n            });\r\n\r\n            pvHolder.imageViewPropertyType.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    cLineProperty.currentLineProperty = cLinePropertyValue.currentLinePropertyValue.getLineProperty();\r\n\r\n                    String propertyValueStr = linePropertyValue.getItemProperty().getValueTypeStr().toUpperCase();\r\n\r\n                    if(propertyValueStr.equals(\"BOOLEAN\") || propertyValueStr.equals(\"DECIMAL\") || propertyValueStr.equals(\"TEXT\") || propertyValueStr.equals(\"CODE\")){\r\n                        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n                            receiveorderLinePropertyInputActivity.pShowTextInputFragment();\r\n                        }\r\n                        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n                            intakeOrderLinePropertyInputActivity.pShowTextInputFragment();\r\n                        }\r\n                        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                            pickorderLineItemPropertyInputActvity.pShowTextInputFragment();\r\n                        }\r\n                        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){\r\n                            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;\r\n                            inventoryLinePropertyInputActivity.pShowTextInputFragment();\r\n                        }\r\n                    }\r\n                    if(propertyValueStr.equals(\"DATE\")){\r\n                        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n                            receiveorderLinePropertyInputActivity.pShowDatePickerDialog();\r\n                        }\r\n                        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n                            intakeOrderLinePropertyInputActivity.pShowDatePickerDialog();\r\n                        }\r\n                        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                            pickorderLineItemPropertyInputActvity.pShowDatePickerDialog();\r\n                        }\r\n                        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){\r\n                            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;\r\n                            inventoryLinePropertyInputActivity.pShowDatePickerDialog();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public void pFillData(List<cLinePropertyValue> pvDataObl) {\r\n        this.localItemPropertyValueObl = pvDataObl;\r\n        notifyDataSetChanged();\r\n    }\r\n\r\n    private LinkedHashMap<String, ArrayList<cLinePropertyValue>> localItemPropertySortObl(){\r\n        LinkedHashMap<String, ArrayList<cLinePropertyValue>> linkedHashMap = new LinkedHashMap<>();;\r\n\r\n        for (cLinePropertyValue linePropertyValue : localItemPropertyValueObl) {\r\n            //Create the hasmap dynammically and fill it\r\n            ArrayList<cLinePropertyValue> loopList = linkedHashMap.get(linePropertyValue.getPropertyCodeStr());\r\n            if (loopList == null) {\r\n                ArrayList<cLinePropertyValue> propertyValues = new ArrayList<>();\r\n                propertyValues.add(linePropertyValue);\r\n                linkedHashMap.put(linePropertyValue.getPropertyCodeStr(), propertyValues);\r\n            }\r\n            else{\r\n                loopList.add(linePropertyValue);\r\n            }\r\n\r\n        }\r\n        return linkedHashMap;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount () {\r\n        if (this.localItemPropertyValueObl != null)\r\n            return this.localItemPropertyValueObl.size();\r\n        else return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValueInputAdapter.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValueInputAdapter.java	(date 1620815592313)
@@ -28,11 +28,13 @@
 import SSU_WHS.Intake.Intakeorders.cIntakeorder;
 import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
 import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
+import SSU_WHS.Move.MoveorderLines.cMoveorderLine;
 import SSU_WHS.Picken.PickorderLines.cPickorderLine;
 import SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;
 import SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;
 import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
+import nl.icsvertex.scansuite.Activities.Move.MoveLineItemPropertyActivity;
 import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
 import nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;
 import nl.icsvertex.scansuite.R;
@@ -152,6 +154,11 @@
                 pvHolder.secondaryContent.setVisibility(View.VISIBLE);
             }
 
+            if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+                pvHolder.imageButtonManual.setVisibility(View.INVISIBLE);
+                pvHolder.imageButtonZero.setVisibility(View.INVISIBLE);
+            }
+
             pvHolder.primaryContent.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(final View view) {
@@ -216,6 +223,9 @@
                     if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){
                         availableDbl = cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl();
                     }
+                    if (cAppExtension.activity instanceof MoveLineItemPropertyActivity){
+                        availableDbl = cMoveorderLine.currentMoveOrderLine.getQuantityDbl();
+                    }
 
                     ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(linePropertyValue.getPropertyCodeStr());
 
@@ -246,6 +256,13 @@
                         inventoryLinePropertyInputActivity.pRefreshActivity();
                     }
 
+                    if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+                        MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+
+                        moveLineItemPropertyActivity.pTryToChangeQuantity(true, false, availableDbl);
+                        moveLineItemPropertyActivity.pRefreshActivity();
+                    }
+
                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
 
@@ -286,6 +303,13 @@
                             return;
                         }
                     }
+                    if (cAppExtension.activity instanceof MoveLineItemPropertyActivity){
+                        if (linePropertyValue.getQuantityDbl()== cMoveorderLine.currentMoveOrderLine.getQuantityDbl()){
+                            cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);
+                            cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus, cAppExtension.activity.getString(R.string.message_overpick_not_allowed),R.raw.headsupsound,false);
+                            return;
+                        }
+                    }
 
                     if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){
                         if (linePropertyValue.getQuantityDbl()== cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl()&& cSetting.RECEIVE_NO_EXTRA_ITEMS() && cSetting.RECEIVE_NO_EXTRA_PIECES()){
@@ -296,7 +320,7 @@
                     }
 
                     int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());
-                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = currentQuantity + 1;
+                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = currentQuantity + cLinePropertyValue.quantityPerUnitOfMeasureDbl;
 
                     if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {
                         ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;
@@ -316,6 +340,12 @@
                         inventoryLinePropertyInputActivity.pTryToChangeQuantity();
                         inventoryLinePropertyInputActivity.pRefreshActivity();
                     }
+                    if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+                        MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+
+                        moveLineItemPropertyActivity.pTryToChangeQuantity(true, false, cLinePropertyValue.quantityPerUnitOfMeasureDbl);
+                        moveLineItemPropertyActivity.pRefreshActivity();
+                    }
                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
 
@@ -333,7 +363,7 @@
                     cLinePropertyValue.currentLinePropertyValue = linePropertyValue;
 
                     int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());
-                    int newQuantity = currentQuantity - 1;
+                    double newQuantity = currentQuantity - cLinePropertyValue.quantityPerUnitOfMeasureDbl;
                     cLinePropertyValue.currentLinePropertyValue.quantityDbl = newQuantity;
 
                     if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {
@@ -367,6 +397,16 @@
                         inventoryLinePropertyInputActivity.pTryToChangeQuantity();
                         inventoryLinePropertyInputActivity.pRefreshActivity();
                     }
+                    if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+                        MoveLineItemPropertyActivity  moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+
+                        if (newQuantity == 0) {
+                            moveLineItemPropertyActivity.pDeleteValueFromRecyler();
+                        }
+
+                        moveLineItemPropertyActivity.pTryToChangeQuantity(false,false, cLinePropertyValue.quantityPerUnitOfMeasureDbl);
+                        moveLineItemPropertyActivity.pRefreshActivity();
+                    }
                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
                         if (newQuantity == 0) {
@@ -411,6 +451,14 @@
                         inventoryLinePropertyInputActivity.pDeleteValueFromRecyler();
                         inventoryLinePropertyInputActivity.pRefreshActivity();
                     }
+//                    if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+//                        MoveLineItemPropertyActivity  moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+//
+//                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;
+//                        moveLineItemPropertyActivity.pTryToChangeQuantity();
+//                        moveLineItemPropertyActivity.pDeleteValueFromRecyler();
+//                        moveLineItemPropertyActivity.pRefreshActivity();
+//                    }
                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
                         while (countDbl > 0) {
@@ -446,6 +494,10 @@
                         InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
                         inventoryLinePropertyInputActivity.pShowNumericInputFragment();
                     }
+                    if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+                        MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+                        moveLineItemPropertyActivity.pShowNumericInputFragment();
+                    }
                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
                         pickorderLineItemPropertyInputActvity.pShowNumericInputFragment();
@@ -479,6 +531,10 @@
                             InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
                             inventoryLinePropertyInputActivity.pShowTextInputFragment();
                         }
+                        if (cAppExtension.activity instanceof MoveLineItemPropertyActivity){
+                            MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+                            moveLineItemPropertyActivity.pShowTextInputFragment();
+                        }
                     }
                     if(propertyValueStr.equals("DATE")){
                         if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {
@@ -497,6 +553,10 @@
                             InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
                             inventoryLinePropertyInputActivity.pShowDatePickerDialog();
                         }
+                        if (cAppExtension.activity instanceof MoveLineItemPropertyActivity){
+                            MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+                            moveLineItemPropertyActivity.pShowDatePickerDialog();
+                        }
                     }
                 }
             });
@@ -512,7 +572,7 @@
         LinkedHashMap<String, ArrayList<cLinePropertyValue>> linkedHashMap = new LinkedHashMap<>();;
 
         for (cLinePropertyValue linePropertyValue : localItemPropertyValueObl) {
-            //Create the hasmap dynammically and fill it
+            //Create the hashmap dynammically and fill it
             ArrayList<cLinePropertyValue> loopList = linkedHashMap.get(linePropertyValue.getPropertyCodeStr());
             if (loopList == null) {
                 ArrayList<cLinePropertyValue> propertyValues = new ArrayList<>();
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/DatePickerFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\n\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic  class DatePickerFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    public DatePickerFragment(ArrayList<cLinePropertyValue> pvLinePropertyValues){\r\n        if (pvLinePropertyValues != null){\r\n            this.propertyObl = new ArrayList<>();\r\n            for (cLinePropertyValue propertyValue : pvLinePropertyValues){\r\n                this.propertyObl.add(propertyValue.getValueStr());\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private ArrayList<String> propertyObl;\r\n    private Button buttonCancel;\r\n    private  Button buttonOk;\r\n    private DatePicker datePicker;\r\n    private String dateStr;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_select_date, container, false);\r\n\r\n    }\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n\r\n        mFindViews();\r\n        mSetListeners();\r\n        mFieldsInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        if (getView() != null) {\r\n            this.buttonCancel = getView().findViewById(R.id.buttonCancel);\r\n            this.buttonOk = getView().findViewById(R.id.buttonOk);\r\n            this.datePicker = getView().findViewById(R.id.datePicker);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        Calendar calendar;\r\n\r\n        if (cLinePropertyValue.currentLinePropertyValue.getValueStr() != null) {\r\n            calendar = Calendar(cLinePropertyValue.currentLinePropertyValue.getValueStr());\r\n            if (calendar == null){\r\n                calendar = Calendar.getInstance();\r\n            }\r\n            this.datePicker.init(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH), null);\r\n        }\r\n        else{\r\n            calendar = Calendar.getInstance();\r\n            this.datePicker.init(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH), null);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetCancelListener();\r\n        this.mSetOKListener();\r\n    }\r\n\r\n    private void mSetOKListener() {\r\n\r\n        this.buttonOk.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                int year = datePicker.getYear();\r\n                int month = datePicker.getMonth();\r\n                int day = datePicker.getDayOfMonth();\r\n\r\n                Calendar calendar = Calendar.getInstance();\r\n                calendar.set(year, month, day);\r\n\r\n                @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat format = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n                dateStr = format.format(calendar.getTime());\r\n                mHandleOk();\r\n            }\r\n        });\r\n    }\r\n\r\n    private Calendar Calendar (String strDate)\r\n    {\r\n\r\n        try\r\n        {\r\n            @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yyyy\");// this is your date format \"12/24/2013\" = \"MM/dd/yyy\"\r\n            java.util.Date date = formatter.parse(strDate);//convert to date\r\n            Calendar cal = Calendar.getInstance();// get calendar instance\r\n            cal.setTime(date);//set the calendar date to your date\r\n            return cal;\r\n        }\r\n        catch (ParseException e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private void mSetCancelListener() {\r\n        this.buttonCancel.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n        this.dateStr= pvBarcodeScan.getBarcodeOriginalStr();\r\n        mHandleOk();\r\n    }\r\n\r\n    private void mHandleOk() {\r\n        if (!this.mCheckValueAllowedBln()) {return;}\r\n\r\n        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));\r\n            dismiss();\r\n        }\r\n        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity){\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));\r\n            dismiss();\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));\r\n            dismiss();\r\n        }\r\n        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){\r\n            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;\r\n            inventoryLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));\r\n            dismiss();\r\n        }\r\n    }\r\n\r\n    private boolean mCheckValueAllowedBln(){\r\n        if (this.propertyObl == null || this.propertyObl.size() < 1){\r\n            return true;\r\n        }\r\n\r\n        for (String string: this.propertyObl) {\r\n            if (string.equalsIgnoreCase(this.dateStr)){\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        cUserInterface.pDoNope(this.datePicker, true, true);\r\n        cUserInterface.pShowSnackbarMessage(this.buttonOk, cAppExtension.activity.getString(R.string.message_property_not_allowed),R.raw.headsupsound,false);\r\n\r\n        return false;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/DatePickerFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/DatePickerFragment.java	(date 1621412696371)
@@ -25,6 +25,7 @@
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
+import nl.icsvertex.scansuite.Activities.Move.MoveLineItemPropertyActivity;
 import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
 import nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;
 import nl.icsvertex.scansuite.R;
@@ -35,7 +36,8 @@
         if (pvLinePropertyValues != null){
             this.propertyObl = new ArrayList<>();
             for (cLinePropertyValue propertyValue : pvLinePropertyValues){
-                this.propertyObl.add(propertyValue.getValueStr());
+                if(propertyValue.getPropertyCodeStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){
+                this.propertyObl.add(propertyValue.getValueStr());}
             }
         }
 
@@ -201,6 +203,12 @@
             InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
             inventoryLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));
             dismiss();
+        }
+        if (cAppExtension.activity instanceof MoveLineItemPropertyActivity){
+            dismiss();
+            MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+            moveLineItemPropertyActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));
+
         }
     }
 
@@ -208,7 +216,13 @@
         if (this.propertyObl == null || this.propertyObl.size() < 1){
             return true;
         }
-
+        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){
+            return true;
+        }
+        //Check if allowed in activity
+        if (cAppExtension.activity instanceof MoveLineItemPropertyActivity){
+            return true;
+        }
         for (String string: this.propertyObl) {
             if (string.equalsIgnoreCase(this.dateStr)){
                 return  true;
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Packaging.PackagingActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class AcceptRejectFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private  Button cancelButton;\r\n    private  ImageView acceptImageView;\r\n    private  ImageView rejectImageView;\r\n    private  TextView acceptRejectHeader;\r\n    private  TextView acceptRejectText;\r\n    private  TextView textReject;\r\n    private  TextView textAccept;\r\n\r\n    private final String  titleStr;\r\n    private final String  messageStr;\r\n    private final String  acceptStr;\r\n    private final String rejectStr;\r\n    private final boolean ignoreAcceptBln;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public AcceptRejectFragment(String pvTitleStr, String pvMessageStr, String pvRejectStr, String pvAcceptStr, boolean pvIgnoreAccept) {\r\n        this.titleStr = pvTitleStr;\r\n        this.messageStr = pvMessageStr;\r\n\r\n        this.acceptStr = pvAcceptStr;\r\n        this.rejectStr = pvRejectStr;\r\n\r\n        this.ignoreAcceptBln = pvIgnoreAccept;\r\n    }\r\n    //End Region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n    @Override\r\n    public View onCreateView(LayoutInflater pvInflater, ViewGroup pvViewGroup,\r\n                             Bundle pvSavedInstanceState) {\r\n\r\n        // Inflate the layout for this fragment\r\n        return pvInflater.inflate(R.layout.fragment_accept_reject, pvViewGroup, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        if (getView() != null) {\r\n            this.acceptImageView = getView().findViewById(R.id.acceptImageView);\r\n            this.rejectImageView = getView().findViewById(R.id.rejectImageView);\r\n            this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n            this.textReject = getView().findViewById(R.id.textReject);\r\n            this.textAccept = getView().findViewById(R.id.textAccept);\r\n            this.acceptRejectHeader = getView().findViewById(R.id.textViewAcceptRejectHeader);\r\n            this.acceptRejectText = getView().findViewById(R.id.textViewAcceptRejectText);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                acceptRejectHeader.setText(titleStr);\r\n                acceptRejectText.setText(messageStr);\r\n                textReject.setText(rejectStr);\r\n                textAccept.setText(acceptStr);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetAcceptListener();\r\n        this.mSetRejectListener();\r\n        this.mSetCancelListener();\r\n    }\r\n    //End Region Default Methods\r\n\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                if (cAppExtension.activity instanceof  PickorderPickActivity) {\r\n                    PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                    pickorderPickActivity.pAcceptRejectDialogDismissed();\r\n                }\r\n\r\n\r\n                if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                    ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                    returnorderDocumentActivity.pHandleFragmentDismissed();\r\n                }\r\n                if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                    ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                    returnorderDocumentsActivity.pHandleFragmentDismissed();\r\n                }\r\n\r\n                if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                    ReturnArticleDetailActivity pickorderPickActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                    pickorderPickActivity.pHandleFragmentDismissed();\r\n                }\r\n\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetAcceptListener() {\r\n\r\n        this.acceptImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mAccept();\r\n            }\r\n        });\r\n\r\n        this.textAccept.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mAccept();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetRejectListener() {\r\n        this.rejectImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mReject();\r\n            }\r\n        });\r\n        this.textReject.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mReject();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mAccept() {\r\n\r\n        if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n            PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n            pickorderLinesActivity.pLeaveActivity();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n            PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n            pickorderLinesGeneratedActivity.pLeaveActivity();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  PickorderPickActivity) {\r\n            PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n            pickorderPickActivity.pAcceptPick(ignoreAcceptBln);\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.amountHandledBln = true;\r\n            pickorderLineItemPropertyInputActvity.pHandled();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof SortorderSortActivity) {\r\n            SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n            sortorderSortActivity.pAcceptPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderQCActivity) {\r\n            PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n            pickorderQCActivity.pAcceptQC(ignoreAcceptBln);\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n            PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n            pickorderPickGeneratedActivity.pAcceptPick(true);\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof InventoryorderBinActivity) {\r\n            InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n            inventoryorderBinActivity.pCloseBin();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof InventoryorderBinsActivity) {\r\n            InventoryorderBinsActivity inventoryorderBinsActivity = new InventoryorderBinsActivity();\r\n            inventoryorderBinsActivity.pCloseOrder();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;\r\n            inventoryLinePropertyInputActivity.amountHandledBln = true;\r\n            inventoryLinePropertyInputActivity.pHandled();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.pSendScansBln();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeorderMATLinesActivity) {\r\n            IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n            intakeorderMATLinesActivity.pDone();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeorderMASLinesActivity) {\r\n            IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n            intakeorderMASLinesActivity.pDone();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity) {\r\n            IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n            intakeOrderIntakeGeneratedActivity.pAcceptStore();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeActivity) {\r\n            IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n            intakeOrderIntakeActivity.pAcceptStore();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReturnorderDocumentActivity) {\r\n            ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n            returnorderDocumentActivity.pCloseDocument();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReturnorderDocumentsActivity) {\r\n            ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n            returnorderDocumentsActivity.pCloseOrder();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  ReturnArticleDetailActivity) {\r\n            ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n            returnArticleDetailActivity.pDone();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveLinesActivity) {\r\n\r\n            ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n\r\n            if (ReceiveLinesActivity.closeOrderClickedBln) {\r\n                receiveLinesActivity.pDone();\r\n                this.dismiss();\r\n                return;\r\n            }\r\n\r\n            if (ReceiveLinesActivity.packagingClickedBln) {\r\n                receiveLinesActivity.pPackaging();\r\n            }\r\n\r\n            else {\r\n                receiveLinesActivity.pAddUnknownScan(ReceiveLinesActivity.barcodeScanToHandle);\r\n            }\r\n            this.dismiss();\r\n            return;\r\n\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity) {\r\n            ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n            receiveOrderReceiveActivity.pAcceptReceive();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.amountHandledBln = true;\r\n            receiveorderLinePropertyInputActivity.pHandled();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PackagingActivity) {\r\n            PackagingActivity packagingActivity = (PackagingActivity)cAppExtension.activity;\r\n            packagingActivity.pHandlePackagingDone();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n            MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n\r\n            if (!moveLinesActivity.closeOrderClickedBln) {\r\n                moveLinesActivity.pLeaveActivity();\r\n                return;\r\n            }\r\n\r\n            moveLinesActivity.pDone();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLineTakeActivity) {\r\n            MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n            moveLineTakeActivity.pAcceptMove(true);\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n            MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n            moveLinesTakeMTActivity.pLeaveActivity();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n            MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n            if (!moveLinesPlaceMTActivity.closeOrderClickedBln) {\r\n                moveLinesPlaceMTActivity.pLeaveActivity();\r\n                return;\r\n            }\r\n            moveLinesPlaceMTActivity.pDone();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n            MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n            moveLineTakeMTActivity.pAcceptMove();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n            MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n            moveLinePlaceMTActivity.pAcceptMove();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity) {\r\n            MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n            moveLinePlaceGeneratedActivity.pAcceptMove();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity) {\r\n            MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n            moveorderLinesPlaceGeneratedActivity.pDone();\r\n        }\r\n\r\n    }\r\n\r\n    private void mReject() {\r\n\r\n        if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  PickorderPickActivity) {\r\n            PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n            pickorderPickActivity.pCancelPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.pCancelPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof SortorderSortActivity) {\r\n            SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n            sortorderSortActivity.pCancelPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderQCActivity) {\r\n            PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n            pickorderQCActivity.pCancelQC();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n            PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n            pickorderPickGeneratedActivity.pCancelPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof InventoryorderBinActivity) {\r\n            InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n            inventoryorderBinActivity.pAcceptRejectDialogDismissed();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  InventoryorderBinsActivity) {\r\n            InventoryorderBinsActivity inventoryorderBinsActivity = new InventoryorderBinsActivity();\r\n            inventoryorderBinsActivity.pAcceptRejectDialogDismissed();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  InventoryLinePropertyInputActivity) {\r\n            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;\r\n            inventoryLinePropertyInputActivity.pCancel();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeActivity) {\r\n            IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n            intakeOrderIntakeActivity.pCancelStore();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.pCancelReceive();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeorderMATLinesActivity) {\r\n            IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n            intakeorderMATLinesActivity.pLeaveActivity();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeorderMASLinesActivity) {\r\n            IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n            intakeorderMASLinesActivity.pLeaveActivity();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity) {\r\n            IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n            intakeOrderIntakeGeneratedActivity.pCancelStore();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveLinesActivity) {\r\n\r\n            if (ReceiveLinesActivity.closeOrderClickedBln) {\r\n                ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                receiveLinesActivity.pLeaveActivity();\r\n                return;\r\n            }\r\n\r\n            if (ReceiveLinesActivity.packagingClickedBln) {\r\n                ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                ReceiveLinesActivity.packagingHandledBln = true;\r\n                receiveLinesActivity.pDone();\r\n                return;\r\n            }\r\n\r\n            ReceiveLinesActivity.barcodeScanToHandle = null;\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity) {\r\n            ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n            receiveOrderReceiveActivity.pCancelReceive();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.pCancelReceive();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n            ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n            returnorderDocumentActivity.pHandleFragmentDismissed();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  ReturnArticleDetailActivity) {\r\n            ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n            returnArticleDetailActivity.pHandleFragmentDismissed();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PackagingActivity){\r\n            this.dismiss();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinesActivity){\r\n            this.dismiss();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLineTakeActivity) {\r\n            MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n            moveLineTakeActivity.pCancelMove();\r\n            return;\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n            MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n            moveLinesPlaceMTActivity.closeOrderClickedBln = false;\r\n            return;\r\n        }\r\n\r\n\r\n        if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n            MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n            moveLineTakeMTActivity.pCancelMove();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n            MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n            moveLinePlaceMTActivity.pCancelMove();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  MoveLinePlaceGeneratedActivity) {\r\n            MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n            moveLinePlaceGeneratedActivity.pCancelMove();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity) {\r\n            MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n            moveorderLinesPlaceGeneratedActivity.pLeaveActivity();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectFragment.java	(date 1620720016852)
@@ -24,6 +24,7 @@
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;
+import nl.icsvertex.scansuite.Activities.Move.MoveLineItemPropertyActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;
@@ -425,6 +426,13 @@
             MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;
             moveorderLinesPlaceGeneratedActivity.pDone();
         }
+        if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+            MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity)cAppExtension.activity;
+            moveLineItemPropertyActivity.amountHandledBln = true;
+            moveLineItemPropertyActivity.pHandled();
+            this.dismiss();
+            return;
+        }
 
     }
 
@@ -578,6 +586,13 @@
         if (cAppExtension.activity instanceof MoveLinesActivity){
             this.dismiss();
         }
+
+        if (cAppExtension.activity instanceof  MoveLineItemPropertyActivity) {
+            MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity)cAppExtension.activity;
+            moveLineItemPropertyActivity.pCancel();
+            this.dismiss();
+            return;
+        }
 
         if (cAppExtension.activity instanceof MoveLineTakeActivity) {
             MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;
Index: app/src/main/java/SSU_WHS/Move/MoveorderLines/cMoveorderLine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Move.MoveorderLines;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.cResult;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.Move.MoveItemVariant.cMoveItemVariant;\r\nimport SSU_WHS.Move.Moveorders.cMoveorder;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcode;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cMoveorderLine implements Comparable {\r\n\r\n    public String actionTypeCodeStr;\r\n    public String getActionTypeCodeStr() { return actionTypeCodeStr; }\r\n\r\n    public int lineNoInt;\r\n    public int getLineNoInt() {\r\n        return lineNoInt;\r\n    }\r\n\r\n    public String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return itemNoStr;\r\n    }\r\n\r\n    public String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return variantCodeStr;\r\n    }\r\n\r\n    public  String getItemNoAndVariantCodeStr(){\r\n\r\n        String resultStr = this.getItemNoStr();\r\n\r\n        if (!this.getVariantCodeStr().isEmpty()) {\r\n            resultStr += \" \" + this.getVariantCodeStr();\r\n        }\r\n\r\n        return  resultStr;\r\n    }\r\n\r\n    public String descriptionStr;\r\n    public String getDescriptionStr() {\r\n        return descriptionStr;\r\n    }\r\n\r\n    public String description2Str;\r\n    public String getDescription2Str() {\r\n        return description2Str;\r\n    }\r\n\r\n    public  String getDescriptionExtendedStr(){\r\n\r\n        String resultStr = this.getDescriptionStr();\r\n\r\n        if (!this.getDescription2Str().isEmpty()) {\r\n            resultStr += \" \" + this.getDescription2Str();\r\n        }\r\n\r\n        return  resultStr;\r\n    }\r\n\r\n    public String binCodeStr;\r\n    public String getBinCodeStr() {\r\n        return binCodeStr;\r\n    }\r\n\r\n    public double quantityDbl;\r\n    public double getQuantityDbl() {\r\n        return quantityDbl;\r\n    }\r\n\r\n    public double quantityHandledDbl;\r\n    public double getQuantityHandledDbl() {\r\n        return quantityHandledDbl;\r\n    }\r\n\r\n    public double quantityTakenDbl;\r\n    public double getQuantityTakenDbl() {\r\n        return quantityTakenDbl;\r\n    }\r\n\r\n    public double quantityPlacedDbl;\r\n    public double getQuantityPlacedDbl() {\r\n        return quantityPlacedDbl;\r\n    }\r\n\r\n    public String handledTimeStampStr;\r\n    public String getHandledTimeStampStr() { return handledTimeStampStr; }\r\n\r\n    public String sourceNoStr;\r\n    public String getSourceNoStr() { return sourceNoStr; }\r\n\r\n    public int statusInt;\r\n    public int getStatusInt() { return statusInt; }\r\n\r\n    public int localStatusInt;\r\n    public int getLocalStatusInt() { return localStatusInt; }\r\n\r\n    public  int sortingSequenceInt;\r\n    public  int getSortingSequenceInt(){\r\n        return  this.sortingSequenceInt;\r\n    }\r\n\r\n    public String extraField1Str;\r\n    public String getExtraField1Str() {\r\n        return extraField1Str;\r\n    }\r\n\r\n    public String extraField2Str;\r\n    public String getExtraField2Str() {\r\n        return extraField2Str;\r\n    }\r\n\r\n    public String extraField3Str;\r\n    public String getExtraField3Str() {\r\n        return extraField3Str;\r\n    }\r\n\r\n    public String extraField4Str;\r\n    public String getExtraField4Str() {\r\n        return extraField4Str;\r\n    }\r\n\r\n    public String extraField5Str;\r\n    public String getExtraField5Str() {\r\n        return extraField5Str;\r\n    }\r\n\r\n    public String extraField6Str;\r\n    public String getExtraField6Str() {\r\n        return extraField6Str;\r\n    }\r\n\r\n    public String extraField7Str;\r\n    public String getExtraField7Str() {\r\n        return extraField7Str;\r\n    }\r\n\r\n    public String extraField8Str;\r\n    public String getExtraField8Str() {\r\n        return extraField8Str;\r\n    }\r\n\r\n    public  Double getQuantityPlaceable() {\r\n\r\n        if(this.moveItemVariant() == null) {\r\n            return Double.valueOf(0);\r\n        }\r\n\r\n\r\n        if (this.moveItemVariant().getQuantityTodoPlaceDbl() >  this.getQuantityDbl()) {\r\n           return  this.getQuantityDbl();\r\n        }\r\n        else\r\n        {\r\n            return  this.moveItemVariant().getQuantityTodoPlaceDbl();\r\n        }\r\n\r\n    }\r\n\r\n    public  boolean handledBln = false;\r\n    public boolean isHandledBln() {\r\n        return handledBln;\r\n    }\r\n\r\n    public  String getKeyStr() {\r\n        return  this.getItemNoStr() + \"þ\" + this.getVariantCodeStr();\r\n    }\r\n\r\n    public  cMoveItemVariant moveItemVariant() {\r\n      return   cMoveItemVariant.allMoveItemVariantObl.get(this.getKeyStr());\r\n    }\r\n\r\n    private cMoveorderLineEntity moveorderLineEntity;\r\n\r\n    public static List<cMoveorderLine> allLinesObl;\r\n    public static cMoveorderLine currentMoveOrderLine;\r\n\r\n    private cMoveorderLineViewModel getMoveorderLineViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderLineViewModel.class);\r\n    }\r\n\r\n    public List<cMoveorderLineBarcode> lineBarcodeObl(){\r\n\r\n        List<cMoveorderLineBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cMoveorderLineBarcode.allMoveorderLineBarcodesObl == null || cMoveorderLineBarcode.allMoveorderLineBarcodesObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cMoveorderLineBarcode moveorderLineBarcode : cMoveorderLineBarcode.allMoveorderLineBarcodesObl ) {\r\n\r\n            if (moveorderLineBarcode.getLineNoInt() == this.getLineNoInt()) {\r\n                resultObl.add(moveorderLineBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n\r\n    }\r\n\r\n    public boolean isUniqueBln() {\r\n\r\n        if (this.barcodesObl == null || this.barcodesObl.size() == 0) {\r\n            return  false;\r\n        }\r\n\r\n        for (cMoveorderBarcode moveorderBarcode : this.barcodesObl) {\r\n            if (moveorderBarcode.getIsUniqueBarcodeBln()) {\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        return  false;\r\n\r\n    }\r\n\r\n\r\n    //Region Public Properties\r\n\r\n    public cArticleImage articleImage;\r\n\r\n    public  List<cMoveorderBarcode> barcodesObl;\r\n    public List<cMoveorderBarcode> orderBarcodesObl(){\r\n\r\n        List<cMoveorderBarcode> resultObl = new ArrayList<>();\r\n\r\n        //We have a different barcode, so check if this barcode belong to the current article\r\n        for (cMoveorderBarcode moveorderBarcode : cMoveorderBarcode.allMoveorderBarcodesObl) {\r\n\r\n            if (moveorderBarcode.getItemNoStr().equalsIgnoreCase(this.getItemNoStr()) && moveorderBarcode.getVariantCodeStr().equalsIgnoreCase(this.getVariantCodeStr())) {\r\n                resultObl.add((moveorderBarcode));\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cMoveorderLine(JSONObject pvJsonObject) {\r\n        this.moveorderLineEntity = new cMoveorderLineEntity(pvJsonObject);\r\n\r\n        this.lineNoInt = this.moveorderLineEntity.getLineNoInt();\r\n        this.actionTypeCodeStr = this.moveorderLineEntity.getActiontypecodeStr();\r\n\r\n        this.itemNoStr = this.moveorderLineEntity.getItemNoStr();\r\n        this.variantCodeStr = this.moveorderLineEntity.getVariantCodeStr();\r\n        this.descriptionStr = this.moveorderLineEntity.getDescriptionStr();\r\n        this.description2Str = this.moveorderLineEntity.getDescription2Str();\r\n        this.binCodeStr = this.moveorderLineEntity.getBincodeStr();\r\n\r\n        this.quantityDbl = this.moveorderLineEntity.getQuantityDbl();\r\n        this.quantityHandledDbl = this.moveorderLineEntity.getQuantityhandledDbl();\r\n        this.quantityTakenDbl = this.moveorderLineEntity.getQuantityTakenDbl();\r\n        this.quantityPlacedDbl = this.moveorderLineEntity.getQuantityPlacedDbl();\r\n\r\n        this.handledTimeStampStr = this.moveorderLineEntity.getHandledtimestampStr();\r\n        this.sourceNoStr = this.moveorderLineEntity.getSourcenoStr();\r\n        this.statusInt = this.moveorderLineEntity.getStatusInt();\r\n        this.sortingSequenceInt = this.moveorderLineEntity.getSortingSequenceNoInt();\r\n\r\n        this.extraField1Str =  this.moveorderLineEntity.getExtraField1Str();\r\n        this.extraField2Str = this.moveorderLineEntity.getExtraField2Str();\r\n        this.extraField3Str =  this.moveorderLineEntity.getExtraField3Str();\r\n        this.extraField4Str =  this.moveorderLineEntity.getExtraField4Str();\r\n        this.extraField5Str =  this.moveorderLineEntity.getExtraField5Str();\r\n        this.extraField6Str =  this.moveorderLineEntity.getExtraField6Str();\r\n        this.extraField7Str =  this.moveorderLineEntity.getExtraField7Str();\r\n        this.extraField8Str =  this.moveorderLineEntity.getExtraField8Str();\r\n\r\n        if (cMoveorder.currentMoveOrder.getOrderTypeStr().equalsIgnoreCase(\"MT\")) {\r\n            if (this.getStatusInt() > cWarehouseorder.MoveStatusEnu.Move_Take ) {\r\n                this.handledBln = true;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public cMoveorderLine(String pvItemNoStr, String pvVariantCodeStr) {\r\n        this.moveorderLineEntity = null;\r\n\r\n        this.lineNoInt = 0;\r\n        this.actionTypeCodeStr = cWarehouseorder.ActionTypeEnu.PLACE.toString();\r\n\r\n        this.itemNoStr = pvItemNoStr;\r\n        this.variantCodeStr = pvVariantCodeStr;\r\n        this.descriptionStr = \"\";\r\n        this.description2Str = \"\";\r\n        this.binCodeStr = \"\";\r\n\r\n        this.quantityDbl = 0;\r\n        this.quantityHandledDbl = 0;\r\n        this.quantityTakenDbl = 0;\r\n        this.quantityPlacedDbl = 0;\r\n\r\n        this.handledTimeStampStr = \"\";\r\n        this.sourceNoStr = \"\";\r\n        this.statusInt = cWarehouseorder.MovelineLocalStatusEnu.LOCALSTATUS_NEW;\r\n        this.sortingSequenceInt = 0;\r\n\r\n        this.extraField1Str =  \"\";\r\n        this.extraField2Str = \"\";\r\n        this.extraField3Str =  \"\";\r\n        this.extraField4Str =  \"\";\r\n        this.extraField5Str =  \"\";\r\n        this.extraField6Str =  \"\";\r\n        this.extraField7Str =  \"\";\r\n        this.extraField8Str =  \"\";\r\n    }\r\n\r\n\r\n    //End Region Constructor\r\n\r\n    public static cMoveorderLine pGetLineByLineNo(int pvLineNoLInt){\r\n\r\n        if (cMoveorderLine.allLinesObl == null) {\r\n            return  null;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine : cMoveorderLine.allLinesObl ) {\r\n\r\n            if (moveorderLine.getLineNoInt() == pvLineNoLInt) {\r\n                return  moveorderLine;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n\r\n        if (cMoveorderLine.allLinesObl == null){\r\n            cMoveorderLine.allLinesObl = new ArrayList<>();\r\n        }\r\n        cMoveorderLine.allLinesObl.add(this);\r\n        return  true;\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cMoveorderLineViewModel moveorderLineViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderLineViewModel.class);\r\n        moveorderLineViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public boolean pGetArticleImageBln(){\r\n\r\n        if (this.articleImage != null) {\r\n            return  true;\r\n        }\r\n\r\n        this.articleImage = cArticleImage.pGetArticleImageByItemNoAndVariantCode(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (this.articleImage != null){\r\n            return  true;\r\n        }\r\n\r\n        cWebresult Webresult;\r\n\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        Webresult = articleImageViewModel.pGetArticleImageFromWebserviceWrs(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (!Webresult.getSuccessBln() || !Webresult.getResultBln()) {\r\n            return  false;\r\n        }\r\n\r\n        for (JSONObject jsonObject : Webresult.getResultDtt()) {\r\n            cArticleImage articleImage = new cArticleImage(jsonObject);\r\n            articleImage.pInsertInDatabaseBln();\r\n            this.articleImage = articleImage;\r\n            return true;\r\n\r\n        }\r\n        return  false;\r\n\r\n    }\r\n\r\n    public cResult pResetRst() {\r\n\r\n        cResult resultRst = new cResult();\r\n        resultRst.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getMoveorderLineViewModel().pResetLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            if (!cMoveorder.currentMoveOrder.pGetLinesViaWebserviceBln(true)) {\r\n                resultRst.resultBln = false;\r\n                resultRst.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_movelines_failed));\r\n                return resultRst;\r\n            }\r\n\r\n            if (!cMoveorder.currentMoveOrder.pGetBarcodesViaWebserviceBln(true)) {\r\n                resultRst.resultBln = false;\r\n                resultRst.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n                return resultRst;\r\n            }\r\n\r\n            if (!cMoveorder.currentMoveOrder.pGetLineBarcodesViaWebserviceBln(true)) {\r\n                resultRst.resultBln = false;\r\n                resultRst.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n                return resultRst;\r\n            }\r\n\r\n            if (cMoveorder.currentMoveOrder.getOrderTypeStr().equalsIgnoreCase(\"MI\")) {\r\n                if (!cMoveorder.currentMoveOrder.pMatchBarcodesAndLinesBln()) {\r\n                    resultRst.resultBln = false;\r\n                    resultRst.pAddErrorMessage(cAppExtension.context.getString(R.string.error_matching_lines_and_barcodes_failed));\r\n                    return resultRst;\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            resultRst.resultBln = false;\r\n            resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_reset_line_via_webservice_failed));\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_MOVELINERESET);\r\n            return resultRst;\r\n        }\r\n\r\n        return resultRst;\r\n\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Object o) {\r\n\r\n        int compareint =((cMoveorderLine)o).getSortingSequenceInt();\r\n        return compareint-this.getSortingSequenceInt();\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Move/MoveorderLines/cMoveorderLine.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Move/MoveorderLines/cMoveorderLine.java	(date 1621417126935)
@@ -12,7 +12,11 @@
 import ICS.cAppExtension;
 import SSU_WHS.Basics.ArticleImages.cArticleImage;
 import SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;
+import SSU_WHS.Basics.ArticlePropertyValue.cArticlePropertyValue;
+import SSU_WHS.Basics.ArticleStock.cArticleStock;
 import SSU_WHS.General.Warehouseorder.cWarehouseorder;
+import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Move.MoveItemVariant.cMoveItemVariant;
 import SSU_WHS.Move.Moveorders.cMoveorder;
 import SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;
@@ -325,6 +329,37 @@
         this.extraField8Str =  "";
     }
 
+    public cMoveorderLine(cArticleStock pvArticleStock) {
+        this.moveorderLineEntity = null;
+
+        this.lineNoInt = 0;
+        this.actionTypeCodeStr = cWarehouseorder.ActionTypeEnu.TAKE.toString();
+
+        this.itemNoStr = pvArticleStock.getItemNoStr();
+        this.variantCodeStr = pvArticleStock.getVariantCodeStr();
+        this.descriptionStr = "";
+        this.description2Str = "";
+        this.binCodeStr = pvArticleStock.getBincodeStr();
+
+        this.quantityDbl = pvArticleStock.getQuantityDbl();
+        this.quantityHandledDbl = 0;
+        this.quantityTakenDbl = 0;
+        this.quantityPlacedDbl = 0;
+
+        this.handledTimeStampStr = "";
+        this.sourceNoStr = "";
+        this.statusInt = cWarehouseorder.MovelineLocalStatusEnu.LOCALSTATUS_NEW;
+        this.sortingSequenceInt = 0;
+
+        this.extraField1Str =  "";
+        this.extraField2Str = "";
+        this.extraField3Str =  "";
+        this.extraField4Str =  "";
+        this.extraField5Str =  "";
+        this.extraField6Str =  "";
+        this.extraField7Str =  "";
+        this.extraField8Str =  "";
+    }
 
     //End Region Constructor
 
@@ -444,5 +479,116 @@
         int compareint =((cMoveorderLine)o).getSortingSequenceInt();
         return compareint-this.getSortingSequenceInt();
 
+    }
+
+    public ArrayList<cLinePropertyValue> presetValueObl;
+    public ArrayList<cLinePropertyValue> generatedValueObl;
+
+    private  List<cLineProperty> linePropertyCachedObl;
+    private List<cLineProperty> linePropertyObl(boolean pvRefreshBln) {
+
+        if (pvRefreshBln){this.linePropertyCachedObl = null;}
+
+        if (this.linePropertyCachedObl != null) {
+            return  this.linePropertyCachedObl;
+        }
+
+        this.linePropertyCachedObl = new ArrayList<>();
+
+        if (cLineProperty.allLinePropertysObl == null || cLineProperty.allLinePropertysObl.size() == 0) {
+            return  this.linePropertyCachedObl;
+        }
+
+        for (cLineProperty lineProperty :cLineProperty.allLinePropertysObl ) {
+            if (lineProperty.getLineNoInt().equals(this.getLineNoInt())) {
+                this.linePropertyCachedObl.add(lineProperty);
+            }
+        }
+
+        return  this.linePropertyCachedObl;
+
+    }
+
+    private  List<cLineProperty> linePropertyNoInputCachedObl;
+    public List<cLineProperty> linePropertyNoInputObl() {
+
+        if (this.linePropertyNoInputCachedObl != null) {
+            return  this.linePropertyNoInputCachedObl;
+        }
+
+        this.linePropertyNoInputCachedObl = new ArrayList<>();
+
+        if (this.linePropertyObl(true) == null || this.linePropertyObl(false).size() == 0) {
+            return  this.linePropertyNoInputCachedObl;
+        }
+
+        for (cLineProperty lineProperty :this.linePropertyObl(false)) {
+            if (!lineProperty.getIsInputBln() &&  !lineProperty.getIsRequiredBln()) {
+                this.linePropertyNoInputCachedObl.add(lineProperty);
+            }
+        }
+
+        return  this.linePropertyNoInputCachedObl;
+    }
+
+    public List<cLineProperty> linePropertyInputObl() {
+
+        List<cLineProperty> resultObl = new ArrayList<>();
+
+        if (this.linePropertyObl(true) == null || this.linePropertyObl(false).size() == 0) {
+            return  resultObl;
+        }
+
+        for (cLineProperty lineProperty :this.linePropertyObl(false)) {
+            if (lineProperty.getIsInputBln() &&  lineProperty.getIsRequiredBln()) {
+                resultObl.add(lineProperty);
+            }
+        }
+
+        return  resultObl;
+    }
+
+    public  cLineProperty getLineProperty(String pvPropertyCodeStr){
+
+        if (this.linePropertyInputObl().size() == 0) {
+            return  null;
+        }
+
+        for (cLineProperty lineProperty : this.linePropertyObl(true) ) {
+            if (lineProperty.getLineNoInt().equals(this.getLineNoInt()) && lineProperty.getPropertyCodeStr().equalsIgnoreCase(pvPropertyCodeStr)) {
+                return lineProperty;
+            }
+        }
+
+        return  null;
+
+    }
+
+    public void pAddPropertyValue(cArticlePropertyValue pvPropertyValue, double pvAvailableDbl){
+        if (this.generatedValueObl == null){
+            this.generatedValueObl = new ArrayList<>();
+        }
+        cLinePropertyValue linePropertyValue = new cLinePropertyValue(this.lineNoInt, pvPropertyValue.getPropertyCodeStr(), pvPropertyValue.getValueStr());
+        linePropertyValue.quantityAvailableDbl = pvAvailableDbl;
+        this.generatedValueObl.add(linePropertyValue);
+        if (cLinePropertyValue.allLinePropertysValuesObl == null) {
+            cLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();
+        }
+        cLinePropertyValue.allLinePropertysValuesObl.add(linePropertyValue);
+    }
+
+    public  List<cLinePropertyValue> linePropertyValuesObl() {
+
+        List<cLinePropertyValue> resultObl = new ArrayList<>();
+
+        for (cLineProperty inputLineProperty : this.linePropertyInputObl()) {
+            resultObl.addAll(inputLineProperty.propertyValueObl());
+        }
+
+        return  resultObl;
+
+    }
+    public  boolean hasPropertysBln() {
+        return this.linePropertyObl(true).size() != 0;
     }
 }
Index: app/src/main/java/SSU_WHS/Intake/Intakeorders/cIntakeorder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Intake.Intakeorders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.SortedMap;\r\nimport java.util.TreeMap;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleProperty.cArticleProperty;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Packaging.cPackaging;\r\nimport SSU_WHS.Basics.Scanners.cScanner;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.cIntakeorderMATLineBarcode;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLine;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLineViewModel;\r\nimport SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cIntakeorder {\r\n\r\n    private String ordernumberStr;\r\n    public String getOrderNumberStr() {return this.ordernumberStr;}\r\n\r\n    private String ordertypeStr;\r\n    public String getOrderTypeStr() {return this.ordertypeStr;}\r\n\r\n    private String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {return this.assignedUserIdStr;}\r\n\r\n    private String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {return this.currentUserIdStr;}\r\n\r\n    private int statusInt;\r\n    public int getStatusInt() {return this.statusInt;}\r\n\r\n    private String binCodeStr;\r\n    public String getBinCodeStr() {return this.binCodeStr;}\r\n\r\n    private String externalReferenceStr;\r\n    public String getExternalReferenceStr() {return this.externalReferenceStr;}\r\n\r\n    private String stockownerStr;\r\n    public String getStockownerStr() {\r\n        return stockownerStr;\r\n    }\r\n\r\n    private String documentStr;\r\n    public  String getDocumentStr(){ return this.documentStr;\r\n    }\r\n\r\n    private int sourceDocumentInt;\r\n    private int getSourceDocumentInt(){return  this.sourceDocumentInt;}\r\n\r\n    private boolean receiveAmountManualEOBln;\r\n    public boolean getReceiveAmountManualEOBln() {return this.receiveAmountManualEOBln;}\r\n\r\n    private boolean receiveStoreAutoAcceptAtRequestedBln;\r\n    public boolean getReceiveStoreAutoAcceptAtRequestedBln() {return this.receiveStoreAutoAcceptAtRequestedBln;}\r\n\r\n    private boolean receiveNoExtraBinsBln;\r\n    public boolean getReceiveNoExtraBinsBln() {return this.receiveNoExtraBinsBln;}\r\n\r\n    private boolean receiveNoExtraItemsBln;\r\n    public boolean getReceiveNoExtraItemsBln() {return this.receiveNoExtraItemsBln;}\r\n\r\n    private boolean receiveNoExtraPiecesBln;\r\n    public boolean getReceiveNoExtraPiecesBln() {return this.receiveNoExtraPiecesBln;}\r\n\r\n    public   boolean isBINScanPossible(){\r\n        return this.getReceiveNoExtraBinsBln() && this.getReceiveNoExtraItemsBln();\r\n\r\n    }\r\n\r\n    private String receivedDateTime;\r\n    public String getReceivedDateTime() {return this.receivedDateTime;}\r\n\r\n    private Boolean isProcessingOrParkedBln;\r\n    public Boolean getProcessingOrParkedBln() {\r\n        return isProcessingOrParkedBln;\r\n    }\r\n\r\n    private boolean receiveWithPictureBln;\r\n    public boolean isReceiveWithPictureBln() {\r\n        return receiveWithPictureBln;\r\n    }\r\n\r\n    private boolean receiveWithPictureAutoOpenBln;\r\n    public boolean isReceiveWithPictureAutoOpenBln() {\r\n        return receiveWithPictureAutoOpenBln;\r\n    }\r\n\r\n    private boolean receiveIntakeEOPackagingIntakeBln;\r\n    public boolean isReceiveIntakeEOPackagingIntakeBln() {\r\n        return receiveIntakeEOPackagingIntakeBln;\r\n    }\r\n\r\n    private boolean receiveIntakeEOPackagingshippedBln;\r\n    public boolean isReceiveIntakeEOPackagingShippedBln() {\r\n        return receiveIntakeEOPackagingshippedBln;\r\n    }\r\n\r\n    public  boolean isGenerated(){\r\n        return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n    }\r\n\r\n    private cIntakeorderEntity intakeorderEntity;\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    private cIntakeorderViewModel getIntakeorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n    }\r\n\r\n    private cReceiveorderLineViewModel getReceiveorderLineViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cReceiveorderLineViewModel.class);\r\n    }\r\n\r\n    public static List<cIntakeorder> allIntakeordersObl;\r\n    public static cIntakeorder currentIntakeOrder;\r\n    public SortedMap<String, cArticle> articleObl;\r\n\r\n    public List<cLineProperty> linePropertysObl() { return  cLineProperty.allLinePropertysObl; }\r\n\r\n    private int unknownVariantCounterInt = 0;\r\n    public int getUnknownVariantCounterInt() {\r\n        return unknownVariantCounterInt;\r\n    }\r\n\r\n    public List<cIntakeorderMATSummaryLine> summaryMATLinesObl(){\r\n        return  cIntakeorderMATSummaryLine.sortedMATSummaryLinesObl();\r\n    }\r\n\r\n    public List<cIntakeorderMATLine> linesMATObl(){\r\n        return  cIntakeorderMATLine.allIntakeorderMATLinesObl;\r\n    }\r\n\r\n    public List<cIntakeorderMATLine> linesHandledMATForBinObl(String pvBinCodeStr){\r\n\r\n        List<cIntakeorderMATLine> resultObl = new ArrayList<>();\r\n\r\n        if ( cIntakeorderMATLine.allIntakeorderMATLinesObl == null) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cIntakeorderMATLine intakeorderMATLine : cIntakeorderMATLine.allIntakeorderMATLinesObl) {\r\n\r\n            if (intakeorderMATLine.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr) && intakeorderMATLine.getQuantityHandledDbl() > 0) {\r\n                resultObl.add(intakeorderMATLine);\r\n            }\r\n\r\n        }\r\n\r\n        if (resultObl.size() > 1) {\r\n            Collections.reverse(resultObl);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cReceiveorderSummaryLine> summaryReceiveLinesObl(){\r\n        return  cReceiveorderSummaryLine.allReceiveorderSummaryLinesObl;\r\n    }\r\n\r\n    private List<cComment> commentsObl(){\r\n        return  cComment.allCommentsObl;\r\n    }\r\n    public List<cIntakeorderBarcode> barcodesObl () {return  cIntakeorderBarcode.allBarcodesObl;}\r\n    public List<cPackaging> packagingInObl;\r\n    public List<cPackaging> packagingOutObl;\r\n\r\n    public cIntakeorderBarcode intakeorderBarcodeScanned;\r\n\r\n    public List<String> sourceNoObl;\r\n    public boolean showDeviationsBln = true;\r\n    public cBranchBin currentBin;\r\n\r\n    //Region Constructor\r\n\r\n    public cIntakeorder(JSONObject pvJsonObject) {\r\n\r\n        this.intakeorderEntity = new cIntakeorderEntity(pvJsonObject);\r\n        this.ordernumberStr = this.intakeorderEntity.getOrdernumberStr();\r\n        this.ordertypeStr = this.intakeorderEntity.getOrderTypeStr();\r\n\r\n        this.assignedUserIdStr = this.intakeorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.intakeorderEntity.getCurrentUserIdStr();\r\n\r\n        this.stockownerStr = this.intakeorderEntity.getStockOwnerStr();\r\n        this.statusInt = this.intakeorderEntity.getStatusInt();\r\n        this.binCodeStr = this.intakeorderEntity.getBinCodeStr();\r\n        this.externalReferenceStr = this.intakeorderEntity.getExternalReferenceStr();\r\n        this.documentStr = this.intakeorderEntity.getDocumentStr();\r\n\r\n        this.receiveAmountManualEOBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveAmountManualEOStr(), false);\r\n\r\n        this.receiveStoreAutoAcceptAtRequestedBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveStoreAutoAcceptAtRequestedStr(), false);\r\n\r\n\r\n        this.receivedDateTime = this.intakeorderEntity.getReceivedDateTime();\r\n        this.isProcessingOrParkedBln = this.intakeorderEntity.getIsProcessingOrParkedStr();\r\n\r\n        this.sourceDocumentInt = this.intakeorderEntity.getSourceDocumentInt();\r\n\r\n        this.receiveWithPictureBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveWithPictureStr(),false);\r\n        this.receiveWithPictureAutoOpenBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveWithPictureAutoOpenStr(),false);\r\n        this.receiveNoExtraBinsBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraBinsStr(), false);\r\n        this.receiveNoExtraItemsBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraItemsStr(), false);\r\n        this.receiveNoExtraPiecesBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraPiecesStr(), false);\r\n        this.receiveIntakeEOPackagingIntakeBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveIntakeEOPackagingIntake(), false);\r\n        this.receiveIntakeEOPackagingshippedBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveIntakeEOPackagingshipped(), false);\r\n    }\r\n\r\n    public cIntakeorder(cIntakeorderEntity pvIntakeorderEntity) {\r\n\r\n        this.intakeorderEntity = pvIntakeorderEntity;\r\n        this.ordernumberStr = this.intakeorderEntity.getOrdernumberStr();\r\n        this.ordertypeStr = this.intakeorderEntity.getOrderTypeStr();\r\n\r\n        this.assignedUserIdStr = this.intakeorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.intakeorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.intakeorderEntity.getStockOwnerStr();\r\n        this.statusInt = this.intakeorderEntity.getStatusInt();\r\n        this.binCodeStr = this.intakeorderEntity.getBinCodeStr();\r\n        this.externalReferenceStr = this.intakeorderEntity.getExternalReferenceStr();\r\n        this.documentStr = this.intakeorderEntity.getDocumentStr();\r\n\r\n        this.receiveAmountManualEOBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveAmountManualEOStr(), false);\r\n\r\n        this.receiveWithPictureBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveWithPictureStr(),false);\r\n        this.receiveWithPictureAutoOpenBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveWithPictureAutoOpenStr(),false);\r\n        this.receiveStoreAutoAcceptAtRequestedBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveStoreAutoAcceptAtRequestedStr(), false);\r\n        this.receiveNoExtraBinsBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraBinsStr(), false);\r\n        this.receiveNoExtraItemsBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraItemsStr(), false);\r\n        this.receiveNoExtraPiecesBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraPiecesStr(), false);\r\n        this.receiveIntakeEOPackagingIntakeBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveIntakeEOPackagingIntake(), false);\r\n        this.receiveIntakeEOPackagingshippedBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveIntakeEOPackagingshipped(), false);\r\n\r\n        this.receivedDateTime = this.intakeorderEntity.getReceivedDateTime();\r\n        this.isProcessingOrParkedBln = this.intakeorderEntity.getIsProcessingOrParkedStr();\r\n\r\n\r\n        this.sourceDocumentInt = this.intakeorderEntity.getSourceDocumentInt();\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getIntakeorderViewModel().insert(this.intakeorderEntity);\r\n\r\n        if (cIntakeorder.allIntakeordersObl == null) {\r\n            cIntakeorder.allIntakeordersObl = new ArrayList<>();\r\n        }\r\n        cIntakeorder.allIntakeordersObl.add(this);\r\n        return true;\r\n    }\r\n\r\n    public static boolean pGetIntakeOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cIntakeorder.allIntakeordersObl = null;\r\n            cIntakeorder.mTruncateTable();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        cIntakeorderViewModel intakeorderViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        WebResult = intakeorderViewModel.pGetIntakeordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cIntakeorder intakeorder = new cIntakeorder(jsonObject);\r\n                intakeorder.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static List<cIntakeorder> pGetIntakesWithFilterFromDatabasObl() {\r\n\r\n        List<cIntakeorder> resultObl = new ArrayList<>();\r\n        List<cIntakeorderEntity> hulpResultObl;\r\n\r\n        cIntakeorderViewModel intakeorderViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        hulpResultObl =  intakeorderViewModel.pGetIntakeordersFromDatabaseWithFilterObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cIntakeorderEntity intakeorderEntity : hulpResultObl ) {\r\n            cIntakeorder intakeorder = new cIntakeorder(intakeorderEntity);\r\n            resultObl.add(intakeorder);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public cResult pInvalidateViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n\r\n        webresult =  this.getIntakeorderViewModel().pInvalidateViaWebserviceWrs();\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_could_not_invalidate_order));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    public cResult pPackagingHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n        webresult =  this.getIntakeorderViewModel().pPackagingHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cIntakeorder.currentIntakeOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    public cResult pMATHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n\r\n        webresult =  this.getIntakeorderViewModel().pMATHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cIntakeorder.currentIntakeOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    public cResult pReceiveHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n\r\n        webresult =  this.getIntakeorderViewModel().pReceiveHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cIntakeorder.currentIntakeOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    public List<cComment> pCommentObl(){\r\n\r\n        if (this.commentsObl() == null || this.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.RECEIVE);\r\n\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (this.commentsObl() == null || this.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst()        {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        cWarehouseorder.StepCodeEnu stepCodeEnu = cWarehouseorder.StepCodeEnu.Unkown;\r\n        int workflowStepInt = 0;\r\n\r\n\r\n        switch (this.getOrderTypeStr()){\r\n            case \"MAT\":\r\n            case \"MAS\":\r\n                stepCodeEnu = cWarehouseorder.StepCodeEnu.Receive_Store;\r\n                workflowStepInt = cWarehouseorder.WorkflowReceiveStoreStepEnu.Receive_Store;\r\n                break;\r\n\r\n\r\n            case \"EOS\":\r\n                stepCodeEnu = cWarehouseorder.StepCodeEnu.Receive_InTake;\r\n                workflowStepInt = cWarehouseorder.WorkflowExternalReceiveStepEnu.Receive_External;\r\n                break;\r\n        }\r\n\r\n\r\n        if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n            ignoreBusyBln = true;\r\n        }\r\n\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.ONTVANGST.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), stepCodeEnu.toString(), workflowStepInt, ignoreBusyBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n            Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln()&& Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n            Webresult.getResultObl().size() > 0 && !Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getNameStr())) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            //TODO WTF is this?\r\n            //cIntakeorder.currentIntakeOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln() {\r\n\r\n        cWebresult Webresult = null;\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAT\") || cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\")) {\r\n            Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.ONTVANGST.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), cWarehouseorder.StepCodeEnu.Receive_Store.toString(), cWarehouseorder.WorkflowReceiveStoreStepEnu.Receive_Store);\r\n        }\r\n\r\n        //We try to release an order thats not created\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"EOR\")){\r\n            return  true;\r\n        }\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"EOS\")){\r\n            Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.ONTVANGST.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), cWarehouseorder.StepCodeEnu.Receive_InTake.toString(), cWarehouseorder.WorkflowExternalReceiveStepEnu.Receive_External);\r\n        }\r\n\r\n\r\n        return Objects.requireNonNull(Webresult).getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n\r\n    public boolean pDeleteViaWebserviceBln() {\r\n\r\n        cWebresult Webresult;\r\n\r\n        Webresult =  this.getIntakeorderViewModel().pDeleteViaWebserviceWrs();\r\n        return Webresult.getResultBln() && Webresult.getSuccessBln();\r\n    }\r\n\r\n    private boolean mGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n        cWebresult webresult;\r\n        webresult = this.getIntakeorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : webresult.getResultDtt()) {\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mMatchBarcodesAndLinesBln() {\r\n\r\n      if (cIntakeorderBarcode.allBarcodesObl == null || cIntakeorderBarcode.allBarcodesObl.size() == 0 ||\r\n         cIntakeorderMATLineBarcode.allMATLineBarcodesObl == null || cIntakeorderMATLineBarcode.allMATLineBarcodesObl.size() == 0 ||\r\n         cIntakeorderMATLine.allIntakeorderMATLinesObl == null ||  cIntakeorderMATLine.allIntakeorderMATLinesObl.size() == 0 )  {\r\n          return true;\r\n      }\r\n\r\n      for (cIntakeorderMATLineBarcode intakeorderMATLineBarcode : cIntakeorderMATLineBarcode.allMATLineBarcodesObl) {\r\n\r\n        cIntakeorderBarcode intakeorderBarcode =   cIntakeorderBarcode.pGetIntakeOrderBarcodeByBarcode(intakeorderMATLineBarcode.getBarcodeStr());\r\n          if (intakeorderBarcode == null) {\r\n              continue;\r\n          }\r\n\r\n        cIntakeorderMATLine intakeorderMATLine =   cIntakeorderMATLine.pGetLineByLineNo(intakeorderMATLineBarcode.getLineNoLng().intValue());\r\n          if (intakeorderMATLine == null) {\r\n              continue;\r\n          }\r\n\r\n          if (intakeorderMATLine.barcodesObl == null) {\r\n              intakeorderMATLine.barcodesObl = new ArrayList<>();\r\n          }\r\n\r\n          intakeorderMATLine.barcodesObl.add(intakeorderBarcode);\r\n      }\r\n\r\n      return  true;\r\n    }\r\n\r\n    public double pQuantityHandledDbl() {\r\n\r\n        Double resultDbl =this.getIntakeorderViewModel().pQuantityHandledDbl();\r\n\r\n        if (resultDbl == null) {\r\n            resultDbl  = 0.0;\r\n        }\r\n\r\n        return  resultDbl;\r\n    }\r\n\r\n    public boolean pDeleteDetailsBln(){\r\n\r\n        cIntakeorderBarcode.pTruncateTableBln();\r\n        cIntakeorderMATLineBarcode.pTruncateTableBln();\r\n        cIntakeorderMATLine.pTruncateTableBln();\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cIntakeorderBarcode.allBarcodesObl = null;\r\n            cIntakeorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        if (this.articleObl == null) {\r\n            this.articleObl = new TreeMap<>();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderBarcodesFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(jsonObject);\r\n                intakeorderBarcode.pInsertInDatabaseBln();\r\n                if (!cIntakeorder.currentIntakeOrder.articleObl.containsKey(intakeorderBarcode.getItemNoAndVariantCodeStr())) {\r\n                    cArticle article = new cArticle(jsonObject);\r\n                    article.descriptionStr = intakeorderBarcode.getBarcodeStr();\r\n                    this.articleObl.put(intakeorderBarcode.getItemNoAndVariantCodeStr(), article);\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pReceiveAddUnkownBarcodeAndItemVariantBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cIntakeorder.currentIntakeOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        //First create Item Varianr\r\n        WebResult =  this.getReceiveorderLineViewModel().pReceiveAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n\r\n                cReceiveorderLine receiveorderLine = new cReceiveorderLine(WebResult.getResultDtt().get(0),true);\r\n                cReceiveorderSummaryLine receiveorderSummaryLine = new cReceiveorderSummaryLine(WebResult.getResultDtt().get(0));\r\n                cReceiveorderSummaryLine.pAddSummaryLine(receiveorderSummaryLine);\r\n                cReceiveorderSummaryLine.currentReceiveorderSummaryLine = receiveorderSummaryLine;\r\n                cReceiveorderSummaryLine.currentReceiveorderSummaryLine.pAddLine(receiveorderLine);\r\n                if (cArticle.currentArticle.propertyObl != null){\r\n                    int lineNoInt = receiveorderLine.getLineNoInt();\r\n\r\n                    for (cArticleProperty articleProperty:cArticle.currentArticle.propertyObl ){\r\n                        cLineProperty lineProperty = new cLineProperty(articleProperty, lineNoInt);\r\n\r\n                        if(cLineProperty.allLinePropertysObl == null){\r\n                            cLineProperty.allLinePropertysObl = new ArrayList<>();\r\n                        }\r\n                        cLineProperty.allLinePropertysObl.add(lineProperty);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            cIntakeorder.currentIntakeOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        //Then add barcode\r\n        WebResult =  this.getReceiveorderLineViewModel().pReceiveAddUnknownBarcodeViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                if (cIntakeorderBarcode.allBarcodesObl == null) {\r\n                    cIntakeorderBarcode.allBarcodesObl = new ArrayList<>();\r\n                }\r\n\r\n                cIntakeorderBarcode.allBarcodesObl.add(intakeorderBarcode);\r\n                cIntakeorderBarcode.currentIntakeOrderBarcode = intakeorderBarcode;\r\n                cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = intakeorderBarcode;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pIntakeAddUnkownBarcodeAndItemVariantBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cIntakeorder.currentIntakeOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        //First create Item Varianr\r\n        WebResult =  this.getReceiveorderLineViewModel().pIntakeAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cIntakeorderMATSummaryLine intakeorderMATSummaryLine = new cIntakeorderMATSummaryLine(WebResult.getResultDtt().get(0));\r\n                cIntakeorderMATSummaryLine.pAddSummaryLine(intakeorderMATSummaryLine);\r\n                cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine = intakeorderMATSummaryLine;\r\n            }\r\n        }\r\n\r\n        else {\r\n            cIntakeorder.currentIntakeOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        //Then add barcode\r\n        WebResult =  this.getReceiveorderLineViewModel().pIntakeAddUnknownBarcodeViaWebserviceWrs(pvBarcodeScan, false);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                if (cIntakeorderBarcode.allBarcodesObl == null) {\r\n                    cIntakeorderBarcode.allBarcodesObl = new ArrayList<>();\r\n                }\r\n\r\n                cIntakeorderBarcode.allBarcodesObl.add(intakeorderBarcode);\r\n                cIntakeorderBarcode.currentIntakeOrderBarcode = intakeorderBarcode;\r\n                cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = intakeorderBarcode;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if (cArticle.currentArticle == null) {\r\n            return false;\r\n        }\r\n\r\n        //Get barcodes for this article\r\n        if (!cArticle.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"EOS\")) {\r\n            WebResult =  this.getReceiveorderLineViewModel().pAddERPItemViaWebserviceWrs(pvBarcodeScan);\r\n\r\n            if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n                if (WebResult.getResultDtt().size() == 1) {\r\n                    cReceiveorderLine receiveorderLine = new cReceiveorderLine(WebResult.getResultDtt().get(0),true);\r\n                    cReceiveorderSummaryLine receiveorderSummaryLine = new cReceiveorderSummaryLine(WebResult.getResultDtt().get(0));\r\n                    cReceiveorderSummaryLine.pAddSummaryLine(receiveorderSummaryLine);\r\n                    cReceiveorderSummaryLine.currentReceiveorderSummaryLine = receiveorderSummaryLine;\r\n                    this.mGetLinePropertysViaWebserviceBln();\r\n                    cReceiveorderSummaryLine.currentReceiveorderSummaryLine.pAddLine(receiveorderLine);\r\n\r\n                }\r\n            }\r\n\r\n            else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n                return  false;\r\n            }\r\n\r\n            //Then add barcode\r\n            WebResult =  this.getReceiveorderLineViewModel().pReceiveAddERPBarcodeViaWebserviceWrs(pvBarcodeScan);\r\n            if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n                if (WebResult.getResultDtt().size() == 1) {\r\n                    cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                    if (cIntakeorderBarcode.allBarcodesObl == null) {\r\n                        cIntakeorderBarcode.allBarcodesObl = new ArrayList<>();\r\n                    }\r\n\r\n                    cIntakeorderBarcode.allBarcodesObl.add(intakeorderBarcode);\r\n                    cIntakeorderBarcode.currentIntakeOrderBarcode = intakeorderBarcode;\r\n                    cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = intakeorderBarcode;\r\n                }\r\n            }\r\n            else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEBARCODECREATE);\r\n                return  false;\r\n            }\r\n        }\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\")) {\r\n            WebResult =  this.getReceiveorderLineViewModel().pIntakeAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n\r\n            if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n                if (WebResult.getResultDtt().size() == 1) {\r\n                    cIntakeorderMATSummaryLine intakeorderMATSummaryLine = new cIntakeorderMATSummaryLine(WebResult.getResultDtt().get(0));\r\n                    cIntakeorderMATSummaryLine.pAddSummaryLine(intakeorderMATSummaryLine);\r\n                    cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine = intakeorderMATSummaryLine;\r\n                }\r\n            }\r\n\r\n            else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n                return  false;\r\n            }\r\n\r\n            boolean isUniqueBarcodeBln = false;\r\n\r\n            if (cArticle.currentArticle.barcodesObl != null &&  cArticle.currentArticle.barcodesObl.size() > 0 &&  cArticle.currentArticle.barcodesObl.get(0).getUniqueBarcodeBln()) {\r\n                isUniqueBarcodeBln = true;\r\n            }\r\n\r\n            //Then add barcode\r\n            WebResult =  this.getReceiveorderLineViewModel().pIntakeAddUnknownBarcodeViaWebserviceWrs(pvBarcodeScan, isUniqueBarcodeBln);\r\n\r\n            if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n                if (WebResult.getResultDtt().size() == 1) {\r\n                    cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                    if (cIntakeorderBarcode.allBarcodesObl == null) {\r\n                        cIntakeorderBarcode.allBarcodesObl = new ArrayList<>();\r\n                    }\r\n\r\n                    cIntakeorderBarcode.allBarcodesObl.add(intakeorderBarcode);\r\n                    cIntakeorderBarcode.currentIntakeOrderBarcode = intakeorderBarcode;\r\n                    cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = intakeorderBarcode;\r\n                }\r\n            }\r\n            else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEBARCODECREATE);\r\n                return  false;\r\n            }\r\n        }\r\n\r\n\r\n        return  true;\r\n    }\r\n\r\n    public cIntakeorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cIntakeorderBarcode intakeorderBarcode : this.barcodesObl()) {\r\n\r\n            if (intakeorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr()) ||\r\n                intakeorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr())) {\r\n                return  intakeorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    public static cResult pCreateReceiveOrderViaWebserviceRst(String pvDocumentStr, String pvPackingSlipStr, String pvBinCodeStr, boolean pvCheckBarcodesBln) {\r\n\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cIntakeorderViewModel intakeorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        WebResult = intakeorderViewModel.pCreateReceiverOderViaWebserviceWrs(pvDocumentStr, pvPackingSlipStr, pvBinCodeStr, pvCheckBarcodesBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (WebResult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n\r\n            // We got a succesfull response, but we need to do something with this activity\r\n\r\n            Long actionLng = WebResult.getResultLng();\r\n\r\n            if (WebResult.getResultLng() < 10 ) {\r\n                actionLng = WebResult.getResultLng();\r\n            }\r\n\r\n            if (WebResult.getResultLng() > 100) {\r\n                actionLng  = WebResult.getResultLng()/100;\r\n            }\r\n\r\n\r\n\r\n            //Try to convert action long to action enumerate\r\n            result.activityActionEnu= cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n                return  result;\r\n            }\r\n\r\n            if (result.activityActionEnu== cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_has_deleted_by_erp)));\r\n                return  result;\r\n            }\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Next) {\r\n                result.resultBln = true;\r\n                result.pSetResultAction(WebResult.pGetNextActivityObl());\r\n                return  result;\r\n            }\r\n\r\n            //No activty created\r\n            if (WebResult.getResultDtt() == null || WebResult.getResultDtt().size() == 0) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_order_not_created)));\r\n                return  result;\r\n            }\r\n\r\n            //Something went wrong, we received a comment\r\n            if (actionLng == 80) {\r\n                result.resultBln = false;\r\n                cComment comment = new cComment(WebResult.getResultDtt().get(0));\r\n                result.pAddErrorMessage(comment.commentTextStr);\r\n                return  result;\r\n            }\r\n\r\n            cIntakeorder intakeorder = new cIntakeorder(WebResult.getResultDtt().get(0));\r\n            intakeorder.pInsertInDatabaseBln();\r\n            cIntakeorder.currentIntakeOrder = intakeorder;\r\n\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVECREATE);\r\n            result.resultBln = false;\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n    public static cResult pCreateIntakeOrderViaWebserviceRst(String pvDocumentStr, String pvBinStr, boolean pvCheckBarcodesBln) {\r\n\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cIntakeorderViewModel intakeorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        WebResult = intakeorderViewModel.pCreateIntakeOrderViaWebserviceWrs(pvDocumentStr, pvBinStr, pvCheckBarcodesBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (WebResult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n\r\n            // We got a succesfull response, but we need to do something with this activity\r\n\r\n            Long actionLng = WebResult.getResultLng();\r\n\r\n            if (WebResult.getResultLng() < 10 ) {\r\n                actionLng = WebResult.getResultLng();\r\n            }\r\n\r\n            if (WebResult.getResultLng() > 100) {\r\n                actionLng  = WebResult.getResultLng()/100;\r\n            }\r\n\r\n\r\n\r\n            //Try to convert action long to action enumerate\r\n            result.activityActionEnu= cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n                return  result;\r\n            }\r\n\r\n            if (result.activityActionEnu== cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_has_deleted_by_erp)));\r\n                return  result;\r\n            }\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Next) {\r\n                result.resultBln = true;\r\n                result.pSetResultAction(WebResult.pGetNextActivityObl());\r\n                return  result;\r\n            }\r\n\r\n            //No activty created\r\n            if (WebResult.getResultDtt() == null || WebResult.getResultDtt().size() == 0) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_order_not_created)));\r\n                return  result;\r\n            }\r\n\r\n            //Something went wrong, we received a comment\r\n            if (actionLng == 80) {\r\n                result.resultBln = false;\r\n                cComment comment = new cComment(WebResult.getResultDtt().get(0));\r\n                result.pAddErrorMessage(comment.commentTextStr);\r\n                return  result;\r\n            }\r\n\r\n            cIntakeorder intakeorder = new cIntakeorder(WebResult.getResultDtt().get(0));\r\n            intakeorder.pInsertInDatabaseBln();\r\n            cIntakeorder.currentIntakeOrder = intakeorder;\r\n\r\n\r\n\r\n            return result;\r\n\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVECREATE);\r\n            result.resultBln = false;\r\n            return result;\r\n        }\r\n\r\n    }\r\n\r\n    public  cResult pGetOrderDetailsRst(){\r\n\r\n\r\n        if (this.getOrderTypeStr().equalsIgnoreCase(\"MAT\") || this.getOrderTypeStr().equalsIgnoreCase(\"MAS\")) {\r\n            return  this.mGetMATOrderDetailsRst();\r\n        }\r\n\r\n        else {\r\n            return  this.mGetReceiveOrderDetailsRst();\r\n        }\r\n\r\n     }\r\n\r\n    private   cResult mGetReceiveOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all Items for current order, if size = 0 or webservice error then stop\r\n        if (!cIntakeorder.currentIntakeOrder.mGetReceiveItemsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_intakelines_failed));\r\n            return result;\r\n        }\r\n\r\n        int indexInt = 0;\r\n\r\n        for (cScanner scanner : cScanner.allScannerObl ) {\r\n\r\n            boolean refreshBln = false;\r\n\r\n            if (indexInt == 0) {\r\n                refreshBln = true;\r\n            }\r\n\r\n            //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n            if (!cIntakeorder.currentIntakeOrder.mGetReceiveLinesViaWebserviceBln(refreshBln, scanner.getScannerStr()) ) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_intakelines_failed));\r\n                return result;\r\n            }\r\n\r\n            indexInt += 1;\r\n\r\n        }\r\n\r\n        //Provided lines have no scanner so also retrieve the lines.\r\n        if(!cIntakeorder.currentIntakeOrder.isGenerated()){\r\n            if (!cIntakeorder.currentIntakeOrder.mGetReceiveLinesViaWebserviceBln(false, \"\") ) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_intakelines_failed));\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // Get all barcodes, if size =0 or webservice error then stop\r\n        if (!cIntakeorder.currentIntakeOrder.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get packaging\r\n        if (!cIntakeorder.currentIntakeOrder.mGetPackagingViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_packaging_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!cIntakeorder.currentIntakeOrder.mGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all propertys, if webservice error then stop\r\n        if (!this.mGetLinePropertysViaWebserviceBln( )) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all property values, if webservice error then stop\r\n        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    private boolean mGetReceiveLinesViaWebserviceBln(Boolean pvRefreshBln, String pvScannerStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cReceiveorderLine.allReceiveorderLines = null;\r\n            cIntakeorderMATLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderReceiveLinesFromWebserviceWrs(pvScannerStr);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cReceiveorderLine receiveorderLine = new cReceiveorderLine(jsonObject);\r\n\r\n                if (receiveorderLine.getHandledTimeStampStr().equalsIgnoreCase(\"null\") && cIntakeorder.currentIntakeOrder.isGenerated()) {\r\n                    continue;\r\n                }\r\n\r\n                receiveorderLine.pInsertInDatabaseBln();\r\n\r\n                cReceiveorderSummaryLine receiveorderSummaryLine = cReceiveorderSummaryLine.pGetSummaryLine(receiveorderLine.getItemNoStr(),\r\n                        receiveorderLine.getVariantCodeStr());\r\n\r\n                if (receiveorderSummaryLine == null ) {\r\n                    //Thats weird, but continue\r\n                    continue;\r\n                }\r\n\r\n                receiveorderSummaryLine.pAddLine(receiveorderLine);\r\n            }\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetReceiveItemsViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cReceiveorderSummaryLine.allReceiveorderSummaryLinesObl = null;\r\n            cReceiveorderLine.pTruncateTableBln();\r\n        }\r\n\r\n        cReceiveorderSummaryLine.allReceiveorderSummaryLinesObl = new ArrayList<>();\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderReceiveItemsFromWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cReceiveorderSummaryLine receiveorderSummaryLine  = new cReceiveorderSummaryLine(jsonObject);\r\n                cReceiveorderSummaryLine.pAddSummaryLine(receiveorderSummaryLine);\r\n\r\n                if (receiveorderSummaryLine.getItemNoStr().equalsIgnoreCase(\"UNKNOWN\")) {\r\n                    cIntakeorder.currentIntakeOrder.unknownVariantCounterInt += 1;\r\n                }\r\n\r\n            }\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetPackagingViaWebserviceBln() {\r\n\r\n\r\n        this.packagingInObl = new ArrayList<>();\r\n        this.packagingOutObl = new ArrayList<>();\r\n\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderPackagingFromWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cPackaging packaging  = new cPackaging(jsonObject);\r\n                this.packagingInObl.add(packaging);\r\n                this.packagingOutObl.add(packaging);\r\n            }\r\n\r\n\r\n\r\n            //If there is no packaging defined, use the general list from the BASICS as a starting point\r\n            if (cPackaging.allPackaging == null)  {\r\n                return true;\r\n            }\r\n\r\n            if ( this.packagingInObl.size() == 0 || this.packagingOutObl.size() ==0 ) {\r\n\r\n                for (cPackaging packaging : cPackaging.allPackaging ) {\r\n                    packaging.quantityInUsedInt = 0;\r\n                    packaging.quantityOutUsedInt = 0;\r\n                }\r\n\r\n                this.packagingInObl.addAll(cPackaging.allPackaging);\r\n                this.packagingOutObl.addAll(cPackaging.allPackaging);\r\n            }\r\n\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private cResult mGetMATOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!cIntakeorder.currentIntakeOrder.mGetMATLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_intakelines_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get line barcodes for current order\r\n        if (!cIntakeorder.currentIntakeOrder.mGetMATLineBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_linebarcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all barcodes, if size =0 or webservice error then stop\r\n        if (!cIntakeorder.currentIntakeOrder.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        if (!cIntakeorder.currentIntakeOrder.mMatchBarcodesAndLinesBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_matching_lines_and_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!cIntakeorder.currentIntakeOrder.mGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\") && cIntakeorder.currentIntakeOrder.isGenerated()) {\r\n            if (cIntakeorderMATSummaryLine.allIntakeorderMATSummaryLinesObl == null) {\r\n                cIntakeorderMATSummaryLine.allIntakeorderMATSummaryLinesObl = new ArrayList<>();\r\n            }\r\n        }\r\n        // Get all propertys, if webservice error then stop\r\n        if (!this.mGetLinePropertysViaWebserviceBln( )) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all property values, if webservice error then stop\r\n        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));\r\n            return result;\r\n        }\r\n\r\n\r\n        return  result;\r\n    }\r\n\r\n    private boolean mGetMATLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cIntakeorderMATLine.allIntakeorderMATLinesObl = null;\r\n            cIntakeorderMATSummaryLine.allIntakeorderMATSummaryLinesObl = null;\r\n            cIntakeorderMATLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderMATLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n            this.sourceNoObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cIntakeorderMATLine intakeorderMATLine = new cIntakeorderMATLine(jsonObject);\r\n\r\n                if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\") && intakeorderMATLine.getQuantityHandledDbl() == 0) {\r\n                    continue;\r\n                }\r\n\r\n                intakeorderMATLine.pInsertInDatabaseBln();\r\n\r\n                if (!this.sourceNoObl.contains(intakeorderMATLine.getSourceNoStr())) {\r\n                    this.sourceNoObl.add(intakeorderMATLine.getSourceNoStr());\r\n                }\r\n\r\n                cIntakeorderMATSummaryLine intakeorderMATSummaryLine = cIntakeorderMATSummaryLine.pGetSummaryLine(intakeorderMATLine.getItemNoStr(),\r\n                        intakeorderMATLine.getVariantCodeStr(),\r\n                        intakeorderMATLine.getSourceNoStr());\r\n\r\n                if (intakeorderMATSummaryLine == null ) {\r\n                    cIntakeorderMATSummaryLine summaryLineToAdd = new cIntakeorderMATSummaryLine(intakeorderMATLine.getItemNoStr(),\r\n                            intakeorderMATLine.getVariantCodeStr(),\r\n                            intakeorderMATLine.getSourceNoStr());\r\n\r\n                    summaryLineToAdd.sortingSequenceInt = intakeorderMATLine.getSortingSequenceInt();\r\n                    summaryLineToAdd.containerStr = intakeorderMATLine.getContainerStr();\r\n\r\n                    cIntakeorderMATSummaryLine.pAddSummaryLine(summaryLineToAdd);\r\n\r\n                    if (!intakeorderMATLine.getBinCodeStr().isEmpty()){\r\n                        summaryLineToAdd.binCodeStr = intakeorderMATLine.getBinCodeStr();\r\n                    }\r\n\r\n\r\n\r\n                    summaryLineToAdd.pAddMATLine(intakeorderMATLine);\r\n                    continue;\r\n                }\r\n\r\n                intakeorderMATSummaryLine.pAddMATLine(intakeorderMATLine);\r\n            }\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetMATLineBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cIntakeorderMATLineBarcode.allMATLineBarcodesObl = null;\r\n            cIntakeorderMATLineBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderMATLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cIntakeorderMATLineBarcode cIntakeorderMATLineBarcode = new cIntakeorderMATLineBarcode(jsonObject);\r\n                cIntakeorderMATLineBarcode.pInsertInDatabaseBln();\r\n            }\r\n\r\n            return true;\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private static void mTruncateTable() {\r\n        cIntakeorderViewModel intakeorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        intakeorderViewModel.deleteAll();\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n\r\n        for (JSONObject jsonObject : pvResultDtt) {\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n    }\r\n    private boolean mGetLinePropertysViaWebserviceBln() {\r\n\r\n        cLineProperty.allLinePropertysObl = null;\r\n        cLineProperty.pTruncateTableBln();\r\n\r\n        cLinePropertyValue.allLinePropertysValuesObl = null;\r\n        cLinePropertyValue.pTruncateTableBln();\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getIntakeorderViewModel().pGetLinePropertysViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cLineProperty lineProperty = new cLineProperty(jsonObject);\r\n                lineProperty.pInsertInDatabaseBln();\r\n            }\r\n\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetLinePropertyValuesViaWebserviceBln() {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getIntakeorderViewModel().pGetLinePropertyValuesViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cLinePropertyValue linePropertyValue = new cLinePropertyValue(jsonObject);\r\n                linePropertyValue.pInsertInDatabaseBln();\r\n                if (linePropertyValue.getValueStr() !=null){\r\n                    if (this.getOrderTypeStr().equalsIgnoreCase(\"MAT\") || this.getOrderTypeStr().equalsIgnoreCase(\"MAS\")){\r\n                        for (cIntakeorderMATLine intakeorderMATLine : cIntakeorderMATLine.allIntakeorderMATLinesObl){\r\n                            if (intakeorderMATLine.getLineNoInt() == linePropertyValue.getLineNoInt()){\r\n                                if (intakeorderMATLine.presetValueObl == null) {\r\n                                    intakeorderMATLine.presetValueObl = new ArrayList<>();\r\n                                }\r\n                                intakeorderMATLine.presetValueObl.add(linePropertyValue);\r\n                            }\r\n                        }\r\n                    }else {\r\n\r\n                    for (cReceiveorderLine receiveorderLine : cReceiveorderLine.allReceiveorderLines){\r\n                        if (receiveorderLine.getLineNoInt() == linePropertyValue.getLineNoInt()){\r\n                            if (receiveorderLine.presetValueObl == null) {\r\n                                receiveorderLine.presetValueObl = new ArrayList<>();\r\n                            }\r\n                            receiveorderLine.presetValueObl.add(linePropertyValue);\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Intake/Intakeorders/cIntakeorder.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Intake/Intakeorders/cIntakeorder.java	(date 1620821538863)
@@ -827,7 +827,10 @@
                     int lineNoInt = receiveorderLine.getLineNoInt();
 
                     for (cArticleProperty articleProperty:cArticle.currentArticle.propertyObl ){
-                        cLineProperty lineProperty = new cLineProperty(articleProperty, lineNoInt);
+                        cLineProperty lineProperty = new cLineProperty(articleProperty,
+                                                                       lineNoInt,
+                                                                       articleProperty.InputWorkflowObl().contains(cIntakeorder.currentIntakeOrder.getOrderTypeStr()),
+                                                                       articleProperty.RequiredWorkflowObl().contains(cIntakeorder.currentIntakeOrder.getOrderTypeStr()));
 
                         if(cLineProperty.allLinePropertysObl == null){
                             cLineProperty.allLinePropertysObl = new ArrayList<>();
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Move/MoveLineTakeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Move;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.ArticleStock.cArticleStock;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Move.Moveorders.cMoveorder;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcode;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLine;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BinItemsFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemStockFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.cText.pDoubleToStringStr;\r\n\r\npublic class MoveLineTakeActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Private Properties\r\n    private int counterMinusHelperInt;\r\n    private int counterPlusHelperInt;\r\n    private Handler minusHandler;\r\n    private Handler plusHandler;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n    private AppCompatImageButton imageButtonDone;\r\n\r\n    private ConstraintLayout moveLineTakeContainer;\r\n\r\n    private  Toolbar toolbar;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubtext;\r\n\r\n    private TextView articleDescriptionText;\r\n    private TextView articleDescription2Text;\r\n    private TextView articleItemText;\r\n    private TextView articleBarcodeText;\r\n    private ImageView articleThumbImageView;\r\n\r\n    private ImageView imageButtonBarcode;\r\n    private ImageView imageButtonNoInputPropertys;\r\n\r\n    private CardView binContainer;\r\n    private TextView binText;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n\r\n    private TextView textViewAction;\r\n\r\n    private Double quantityScannedDbl = 0.0;\r\n    private List<cMoveorderBarcode> scannedBarcodesObl;\r\n    private cArticleStock articleStock = null;\r\n\r\n    private cMoveorderLine moveorderLineToUpdate = null;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n\r\n    private  CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.activity_moveline_take);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n\r\n        //Set listeners here, so click listeners only work after activity is shown\r\n        this.mSetListeners();\r\n\r\n        //Init the screen\r\n        this.mInitScreen();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_stockactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n        invalidateOptionsMenu();\r\n\r\n        if (!cMoveorder.currentMoveOrder.isMoveValidateStockBln())  {\r\n            return true;\r\n        }\r\n\r\n        pvMenu.findItem(R.id.item_bin_stock).setVisible(cMoveorder.currentMoveOrder.currentBranchBin != null);\r\n        pvMenu.findItem(R.id.item_article_stock).setVisible(cMoveorder.currentMoveOrder.currentArticle != null);\r\n        if (cSetting.GENERIC_PRINT_BINLABEL()){\r\n            MenuItem item_print_bin = pvMenu.findItem(R.id.item_print_bin);\r\n            item_print_bin.setVisible(cMoveorder.currentMoveOrder.currentBranchBin != null);\r\n        }\r\n\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(cMoveorder.currentMoveOrder.currentMoveorderBarcode != null);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                if (this.quantityScannedDbl == 0) {\r\n                    this.mResetCurrents();\r\n                    this.mGoBackToLinesActivity();\r\n                    return  true;\r\n                }\r\n\r\n                this.mShowAcceptFragment();\r\n                return true;\r\n\r\n            case R.id.item_bin_stock:\r\n                selectedFragment = new BinItemsFragment(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n                break;\r\n\r\n            case R.id.item_article_stock:\r\n\r\n                cArticle.currentArticle= cMoveorder.currentMoveOrder.currentArticle;\r\n                selectedFragment = new ItemStockFragment();\r\n                break;\r\n\r\n            case R.id.item_print_bin:\r\n                selectedFragment = new PrintBinLabelFragment();\r\n                break;\r\n\r\n            case R.id.item_print_item:\r\n                cArticle.currentArticle= cMoveorder.currentMoveOrder.currentArticle;\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n\r\n        if (cAppExtension.activity instanceof  MoveLineTakeActivity) {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n\r\n        if (this.quantityScannedDbl == 0 ) {\r\n            this.mResetCurrents();\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        this.mShowAcceptFragment();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity Methods\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_moveline_take));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.moveLineTakeContainer = findViewById(R.id.moveLineTakeContainer);\r\n\r\n        this.toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.binContainer = findViewById(R.id.binContainer);\r\n        this.binText = findViewById(R.id.binText);\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.textViewAction = findViewById(R.id.textViewAction);\r\n\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_move);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        cMoveorder.currentMoveOrder.currenLineModusEnu = cMoveorder.lineModusEnu.TAKE;\r\n\r\n        this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n\r\n        this.counterPlusHelperInt = 0;\r\n        this.counterMinusHelperInt = 0;\r\n        this.toolbarSubtext.setText(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n\r\n        this.mSetArticleInfo();\r\n        this.mSetBinInfo();\r\n        this.mSetQuantityInfo();\r\n\r\n        this.mEnablePlusMinusAndBarcodeSelectViews();\r\n        this.mShowArticleImage();\r\n        this.mShowOrHideGenericExtraFields();\r\n        this.mShowBarcodeInfo();\r\n        this.mSetInstructions();\r\n\r\n        this.mHideArticleInfo();\r\n\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n\r\n        this.mSetArticleImageListener();\r\n        this.mSetImageButtonBarcodeListener();\r\n\r\n        if (cMoveorder.currentMoveOrder.getMoveAmountManualBln()) {\r\n            this.mSetNumberListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n\r\n    }\r\n\r\n    // End Region iICSDefaultActivity Methods\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        //BIN scan is not allowed here\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.BIN)) {\r\n            cUserInterface.pShowSnackbarMessage(this.moveLineTakeContainer,cAppExtension.activity.getString(R.string.message_bin_not_allowed),null,true);\r\n            return;\r\n        }\r\n\r\n        //Scan must be an article, so handle the scan\r\n        cResult hulpRst = this.mHandleScanRst(pvBarcodeScan);\r\n        if (! hulpRst.resultBln) {\r\n            cUserInterface.pShowSnackbarMessage(this.moveLineTakeContainer,hulpRst.messagesStr(),null,true);\r\n           this.mSetInstructions();\r\n           this.mFieldsInitialize();\r\n        }\r\n\r\n    }\r\n\r\n    public void pAcceptMove(boolean pvResetAndCloseBln) {\r\n\r\n        if (cMoveorder.currentMoveOrder.currentBranchBin == null) {\r\n            cUserInterface.pShowSnackbarMessage(moveLineTakeContainer, cAppExtension.activity.getString(R.string.message_bin_required),null, true);\r\n            return;\r\n        }\r\n\r\n        if (cMoveorder.currentMoveOrder.currentArticle == null) {\r\n            cUserInterface.pShowSnackbarMessage(moveLineTakeContainer, cAppExtension.activity.getString(R.string.message_article_required),null, true);\r\n            return;\r\n        }\r\n\r\n        if (this.quantityScannedDbl == 0 ) {\r\n            this.mResetCurrents();\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        cResult result = this.mMoveDoneRst(pvResetAndCloseBln);\r\n        if (!result.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(result.messagesStr(),\"\",null, true);\r\n        }\r\n    }\r\n\r\n    public  void pCancelMove() {\r\n        this.mResetCurrents();\r\n        this.mGoBackToLinesActivity();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    //Views\r\n\r\n    private void mSetArticleImageListener() {\r\n        this.articleThumbImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowFullArticleFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cMoveorder.currentMoveOrder.currentArticle.barcodesObl == null || cMoveorder.currentMoveOrder.currentArticle.barcodesObl.size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                mEnablePlusMinusAndBarcodeSelectViews();\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cMoveorder.currentMoveOrder.currentArticle.barcodesObl.size() == 1) {\r\n                    pHandleScan(cBarcodeScan.pFakeScan(cMoveorder.currentMoveOrder.currentArticle.barcodesObl.get(0).getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowOrHideGenericExtraFields() {\r\n\r\n    }\r\n\r\n    private void mShowBarcodeInfo() {\r\n\r\n        if (cMoveorder.currentMoveOrder.currentMoveorderBarcode == null) {\r\n            this.articleBarcodeText.setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            return;\r\n        }\r\n\r\n        this.articleBarcodeText.setText((cMoveorder.currentMoveOrder.currentMoveorderBarcode.getBarcodeAndQuantityStr()));\r\n\r\n    }\r\n\r\n    private void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cSetting.MOVE_WITH_PICTURE()) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.articleThumbImageView.setVisibility(View.VISIBLE);\r\n        this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (cMoveorder.currentMoveOrder.currentArticle == null ||  cMoveorder.currentMoveOrder.currentArticle .pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cMoveorder.currentMoveOrder.currentArticle .articleImage == null || cMoveorder.currentMoveOrder.currentArticle.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cMoveorder.currentMoveOrder.currentArticle .articleImage.imageBitmap());\r\n\r\n        //Open the image\r\n        if ((cSetting.MOVE_WITH_PICTURE_AUTO_OPEN())) {\r\n            this.mShowFullArticleFragment();\r\n        }\r\n\r\n    }\r\n\r\n    private void mEnablePlusMinusAndBarcodeSelectViews() {\r\n\r\n        if (cMoveorder.currentMoveOrder.currentMoveorderBarcode == null) {\r\n            this.imageButtonMinus.setVisibility(View.INVISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.INVISIBLE);\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        if (!cSetting.MOVE_AMOUNT_MANUAL()) {\r\n            this.imageButtonMinus.setVisibility(View.INVISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.INVISIBLE);\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonMinus.setVisibility(View.VISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.VISIBLE);\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private void mShowExtraPiecesNotAllowed(){\r\n        this.quantityText.setText(this.quantityRequiredText.getText());\r\n        cUserInterface.pShowSnackbarMessage(this.moveLineTakeContainer, cAppExtension.context.getString(R.string.number_cannot_be_higher_than_stock), null, false);\r\n        cUserInterface.pDoNope(this.quantityText, true, true);\r\n        cUserInterface.pDoNope(this.quantityRequiredText, false, false);\r\n    }\r\n\r\n    private void mStepFailed(String pvErrorMessageStr) {\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, \"\", true, true);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(this.moveLineTakeContainer);\r\n        constraintSetSpace.connect(this.articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(this.moveLineTakeContainer);\r\n\r\n    }\r\n\r\n\r\n    //Scans and manual input\r\n\r\n    private cResult mHandleScanRst(cBarcodeScan pvBarcodeScan){\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        boolean scanHandledBln = false;\r\n\r\n        //We scanned an article, so first check if we already have a current baroce\r\n\r\n        //We have a current barcode\r\n        if (cMoveorder.currentMoveOrder.currentMoveorderBarcode != null) {\r\n            //Handle the scan for the current barcode\r\n            result = this.mHandleBarcodeScanForCurrentItemRst(pvBarcodeScan);\r\n            if (!result.resultBln) {\r\n                scanHandledBln = true;\r\n            }\r\n            else {\r\n\r\n                //We scanned a different article then the current articke, so check if we already have a line for this BIN\r\n                result = this.mCheckForPreviousLineRst();\r\n                if (!result.resultBln) {\r\n                    return  result;\r\n                }\r\n\r\n\r\n                //We scanned a new article for this BIN, so handle it\r\n                this.mHandleNewArticleScanned(pvBarcodeScan);\r\n                return result;\r\n            }\r\n        }\r\n\r\n        //If we still need to handle the scan, do this\r\n        if (!scanHandledBln){\r\n\r\n            //Check if we already know the barcode\r\n            cMoveorder.currentMoveOrder.currentMoveorderBarcode = cMoveorder.currentMoveOrder.pGetOrderBarcode(pvBarcodeScan);\r\n\r\n            //This is a new barcode\r\n            if (cMoveorder.currentMoveOrder.currentMoveorderBarcode == null) {\r\n                //if something went wrong we are done, so return result\r\n                result = this.mHandleUnknownBarcodeScanRst(pvBarcodeScan);\r\n                if (!result.resultBln) {\r\n                    return  result;\r\n                }\r\n\r\n                //Adding item went well, check for previous line and return result if false\r\n                result = this.mCheckForPreviousLineRst();\r\n                if (!result.resultBln) {\r\n                    return  result;\r\n                }\r\n\r\n            }\r\n\r\n            else {\r\n                //This is a barcode we already know\r\n\r\n                //Check for previous line and return result if false\r\n                result = this.mCheckForPreviousLineRst();\r\n                if (!result.resultBln) {\r\n                    return  result;\r\n                }\r\n\r\n                //Get article from cache\r\n                cMoveorder.currentMoveOrder.currentArticle = cMoveorder.currentMoveOrder.articleObl.get(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getItemNoAndVariantCodeStr());\r\n                if (cMoveorder.currentMoveOrder.currentArticle == null) {\r\n                    result.resultBln = false;\r\n                    result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_unknown_article));\r\n                    return  result;\r\n                }\r\n            }\r\n        }\r\n\r\n        //Scanned barcode matches current barcode so raise barcode scanned\r\n        this.mBarcodeScanned();\r\n        this.mFieldsInitialize();\r\n\r\n        //if we receive false, we are done and scan is handled\r\n        result.resultBln = true;\r\n        return  result;\r\n\r\n    }\r\n\r\n    private cResult mHandleBarcodeScanForCurrentItemRst(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Check if scanned barcode matched the current barcode\r\n        if (cMoveorder.currentMoveOrder.currentMoveorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            result.resultBln = false;\r\n            return  result;\r\n        }\r\n\r\n        if (cMoveorder.currentMoveOrder.currentArticle == null || cMoveorder.currentMoveOrder.currentArticle.barcodesObl == null)  {\r\n            return result;\r\n        }\r\n\r\n        //We have a different barcode, so check if this barcode belong to the current article\r\n        for (cArticleBarcode articleBarcode : cMoveorder.currentMoveOrder.currentArticle.barcodesObl) {\r\n            if (articleBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                articleBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n\r\n                //We have a match, try to get this barcode from the order\r\n                cMoveorder.currentMoveOrder.currentMoveorderBarcode = cMoveorder.currentMoveOrder.pGetOrderBarcode(pvBarcodeScan);\r\n\r\n                // We are done\r\n                if (cMoveorder.currentMoveOrder.currentMoveorderBarcode != null) {\r\n                    result.resultBln = false;\r\n                    return result;\r\n                }\r\n\r\n                //We don't have a match, so add new barcode to the order originated from article barcode\r\n                cMoveorderBarcode moveorderBarcode = new cMoveorderBarcode(articleBarcode);\r\n                cMoveorderBarcode.allMoveorderBarcodesObl.add(moveorderBarcode);\r\n                cMoveorder.currentMoveOrder.currentMoveorderBarcode= moveorderBarcode;\r\n\r\n                //Set result to false, so we know that we just can raise the quantity\r\n                result.resultBln = false;\r\n                return result;\r\n            }\r\n        }\r\n\r\n        result.resultBln = true;\r\n        return result;\r\n\r\n    }\r\n\r\n    private cResult mHandleUnknownBarcodeScanRst(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n        result = this.mAddUnknownScanRst(pvBarcodeScan);\r\n        return  result;\r\n    }\r\n\r\n    private cResult mAddUnknownScanRst(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //We can add a line, but we don't check with the ERP, so add line and open it\r\n        if (!cMoveorder.currentMoveOrder.isMoveBarcodeCheckBln()) {\r\n            result = this.mAddUnkownArticleRst(pvBarcodeScan);\r\n            return result;\r\n        }\r\n\r\n        //We can add a line, and we need to check with the ERP, so check, add and open it\r\n        result = this.mAddERPArticleRst(pvBarcodeScan);\r\n        return  result;\r\n    }\r\n\r\n    private cResult mAddUnkownArticleRst(cBarcodeScan pvBarcodeScan){\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        if (!cMoveorder.currentMoveOrder.pAddUnkownBarcodeAndItemVariantBln(pvBarcodeScan)){\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_adding_unkown_article_failed));\r\n            cUserInterface.pHideGettingData();\r\n            return  result;\r\n        }\r\n\r\n        //Refresh the activity\r\n        this.mFieldsInitialize();\r\n        cUserInterface.pHideGettingData();\r\n        return  result;\r\n\r\n    }\r\n\r\n    private cResult mAddERPArticleRst (final cBarcodeScan pvBarcodeScan){\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        Callable<cResult>  hulpRst = new Callable<cResult>() {\r\n            @Override\r\n            public cResult call() {\r\n                cResult resultTje;\r\n                cUserInterface.pShowGettingData();\r\n                boolean localBln = cMoveorder.currentMoveOrder.pAddERPBarcodeBln(pvBarcodeScan);\r\n                if (!localBln) {\r\n                    resultTje = new cResult();\r\n                    resultTje.resultBln = false;\r\n                     cUserInterface.pHideGettingData();\r\n                    return resultTje;\r\n                }\r\n                resultTje = new cResult();\r\n                 cUserInterface.pHideGettingData();\r\n                resultTje.resultBln = true;\r\n                return  resultTje;\r\n\r\n            }\r\n        };\r\n\r\n        try {\r\n            Future<cResult> callableResultBln = executorService.submit((Callable<cResult>) hulpRst);\r\n            result = callableResultBln.get();\r\n\r\n            if (!result.resultBln) {\r\n                quantityRequiredText.setVisibility(View.GONE);\r\n                result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_barcode_unknown_ERP,pvBarcodeScan.barcodeOriginalStr));\r\n                 cUserInterface.pHideGettingData();\r\n                return  result;\r\n            }\r\n        }\r\n        catch (InterruptedException | ExecutionException ignored) {\r\n        }\r\n\r\n        //Refresh the activity\r\n        this.mFieldsInitialize();\r\n        cUserInterface.pHideGettingData();\r\n        return  result;\r\n    }\r\n\r\n    private void mHandleNewArticleScanned(cBarcodeScan pvBarcodeScan){\r\n\r\n        this.pAcceptMove(false);\r\n\r\n        //Clear currents, except for current BIN\r\n        cMoveorder.currentMoveOrder.currentMoveorderBarcode = null;\r\n        cMoveorder.currentMoveOrder.currentArticle = null;\r\n        articleStock = null;\r\n        this.quantityScannedDbl = (double) 0;\r\n        this.scannedBarcodesObl = null;\r\n\r\n        //Raise the new scan\r\n        this.pHandleScan(pvBarcodeScan);\r\n    }\r\n\r\n    private cResult mGetArticleStockForBINRst(){\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        if (!cMoveorder.currentMoveOrder.isMoveValidateStockBln() || cMoveorder.currentMoveOrder.currentBranchBin == null || cMoveorder.currentMoveOrder.currentArticle == null) {\r\n            this.quantityRequiredText.setVisibility(View.GONE);\r\n            return result;\r\n        }\r\n\r\n        if ( this.articleStock != null) {\r\n            return  result;\r\n        }\r\n\r\n        this.quantityRequiredText.setVisibility(View.VISIBLE);\r\n\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        Callable<cResult>  hulpRst = new Callable<cResult>() {\r\n            @Override\r\n            public cResult call() {\r\n                cResult resultTje;\r\n                cUserInterface.pShowGettingData();\r\n                articleStock = cMoveorder.currentMoveOrder.currentArticle.pGetStockForBINViaWebservice(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n                if (articleStock == null) {\r\n                    resultTje = new cResult();\r\n                    resultTje.resultBln = false;\r\n                      cUserInterface.pHideGettingData();\r\n                    return resultTje;\r\n                }\r\n                resultTje = new cResult();\r\n                 cUserInterface.pHideGettingData();\r\n                resultTje.resultBln = true;\r\n                return  resultTje;\r\n\r\n            }\r\n        };\r\n\r\n\r\n        try {\r\n            Future<cResult> callableResultBln = executorService.submit((Callable<cResult>) hulpRst);\r\n            result = callableResultBln.get();\r\n\r\n            if (!result.resultBln) {\r\n                quantityRequiredText.setVisibility(View.GONE);\r\n                result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_no_stock_available));\r\n                cUserInterface.pHideGettingData();\r\n                return  result;\r\n            }\r\n        }\r\n        catch (InterruptedException | ExecutionException ignored) {\r\n        }\r\n\r\n\r\n        this.quantityRequiredText.setText(cText.pDoubleToStringStr(articleStock.getQuantityDbl()));\r\n         cUserInterface.pHideGettingData();\r\n        return  result;\r\n    }\r\n\r\n    private cResult mCheckForPreviousLineRst(){\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        this.moveorderLineToUpdate = cMoveorder.currentMoveOrder.pGetTakeLineForCurrentArticleAndBin(cMoveorder.currentMoveOrder.currentMoveorderBarcode);\r\n        if (   this.moveorderLineToUpdate == null) {\r\n            return  result;\r\n        }\r\n\r\n        this.scannedBarcodesObl = new ArrayList<>();\r\n\r\n        int quantityInt = 0;\r\n\r\n        for (cMoveorderLineBarcode moveorderLineBarcode : this.moveorderLineToUpdate.lineBarcodeObl()) {\r\n\r\n            while (quantityInt < moveorderLineBarcode.getQuantityHandled()) {\r\n                cMoveorderBarcode moveorderBarcode = new cMoveorderBarcode(   this.moveorderLineToUpdate,moveorderLineBarcode);\r\n                this.scannedBarcodesObl.add(moveorderBarcode);\r\n\r\n                quantityInt += 1;\r\n            }\r\n\r\n            this.quantityScannedDbl += moveorderLineBarcode.getQuantityHandled();\r\n        }\r\n\r\n\r\n        this.mFieldsInitialize();\r\n        return  result;\r\n\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (cMoveorder.currentMoveOrder.currentMoveorderBarcode== null) {\r\n            cUserInterface.pDoNope(quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(moveLineTakeContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cMoveorder.currentMoveOrder.currentMoveorderBarcode.getQuantityPerUnitOfMeasureDbl() > 1) {\r\n            cUserInterface.pDoNope(quantityText, true, true);\r\n            cUserInterface.pShowSnackbarMessage(moveLineTakeContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n            return;\r\n        }\r\n\r\n        this.mShowNumberFragment();\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n\r\n        this.mTryToChangeQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n\r\n    }\r\n\r\n    private void mTryToChangeQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n      double newQuantityDbl;\r\n\r\n\r\n        if ( this.scannedBarcodesObl == null) {\r\n            this.scannedBarcodesObl = new ArrayList<>();\r\n        }\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n                newQuantityDbl = pvAmountDbl;\r\n\r\n                //Check if we would exceed amount stock available, then show message\r\n                if (this.articleStock != null &&  newQuantityDbl > this.articleStock.getQuantityDbl()) {\r\n                    this.mShowExtraPiecesNotAllowed();\r\n                    return;\r\n                }\r\n\r\n                //Clear the barcodeStr list and refill it\r\n                this.scannedBarcodesObl.clear();\r\n                int countInt = 0;\r\n                do{\r\n                    countInt += 1;\r\n                    //Add a barcodeStr to the scanned barcodeStr list, so you can use it later when line is determined\r\n                    this.scannedBarcodesObl.add(cMoveorder.currentMoveOrder.currentMoveorderBarcode);\r\n                }\r\n                while(countInt < newQuantityDbl);\r\n\r\n                //Update activity and Check if this line is done\r\n                this.quantityScannedDbl = newQuantityDbl;\r\n                this.quantityText.setText(cText.pDoubleToStringStr(this.quantityScannedDbl));\r\n                this.mFieldsInitialize();\r\n                return;\r\n\r\n\r\n            } else {\r\n                newQuantityDbl = this.quantityScannedDbl + pvAmountDbl;\r\n            }\r\n\r\n            //Check if we would exceed amount stock available, then show message\r\n            if (this.articleStock != null &&  newQuantityDbl > this.articleStock.getQuantityDbl()) {\r\n                this.mShowExtraPiecesNotAllowed();\r\n                return;\r\n            }\r\n\r\n            //Set the new quantityDbl and show in Activity\r\n            this.quantityScannedDbl = newQuantityDbl;\r\n            this.quantityText.setText(pDoubleToStringStr(this.quantityScannedDbl));\r\n\r\n            //Add a barcodeStr to the scanned barcodeStr list, so you can use it later when line is determined\r\n            this.scannedBarcodesObl.add(cMoveorder.currentMoveOrder.currentMoveorderBarcode);\r\n\r\n            //Check if this line is done\r\n            this.mFieldsInitialize();\r\n            return;\r\n        }\r\n\r\n        //negative\r\n\r\n        //Check if value already is zero\r\n        if ( this.quantityScannedDbl < 1 ) {\r\n\r\n            //If we have a decimal, correct it to zero\r\n            if (this.quantityScannedDbl > 0 ) {\r\n                pvAmountDbl = 0;\r\n                pvAmountFixedBln = true;\r\n\r\n            } else {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (pvAmountDbl < 0) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n        if (pvAmountFixedBln) {\r\n            newQuantityDbl = pvAmountDbl;\r\n\r\n            //Clear the barcodeStr list and refill it\r\n            this.scannedBarcodesObl.clear();\r\n            int countInt = 0;\r\n            do{\r\n                countInt += 1;\r\n                //Add a barcodeStr to the scanned barcodeStr list, so you can use it later when line is determined\r\n                this.scannedBarcodesObl.add(cMoveorder.currentMoveOrder.currentMoveorderBarcode);\r\n                            }while(countInt < newQuantityDbl);\r\n\r\n            //Set the new quantityDbl and show in Activity\r\n            this.quantityScannedDbl = newQuantityDbl;\r\n            this.quantityText.setText(pDoubleToStringStr(this.quantityScannedDbl));\r\n            return;\r\n\r\n\r\n        }else {\r\n            //Remove the last barcodeStr in the list\r\n            this.scannedBarcodesObl.remove( this.scannedBarcodesObl.size()-1);\r\n            newQuantityDbl= this.quantityScannedDbl - pvAmountDbl;\r\n        }\r\n\r\n        if (newQuantityDbl <= 0) {\r\n            this.quantityScannedDbl = (double) 0;\r\n        }else {\r\n            //Set the new quantityDbl and show in Activity\r\n            this.quantityScannedDbl = newQuantityDbl;\r\n        }\r\n\r\n        this.quantityText.setText(pDoubleToStringStr(this.quantityScannedDbl));\r\n        this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n    }\r\n\r\n    private void mBarcodeScanned() {\r\n\r\n        cResult result;\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        result = this.mGetArticleStockForBINRst();\r\n        if (!result.resultBln) {\r\n            this.mStepFailed(result.messagesStr());\r\n            this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n            result.resultBln = false;\r\n            return;\r\n        }\r\n\r\n        this.mShowBarcodeInfo();\r\n        this.mTryToChangeQuantity(true, false, cMoveorder.currentMoveOrder.currentMoveorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n    }\r\n\r\n    private void mSetInstructions() {\r\n\r\n        cResult result =  new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Start with complete\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n\r\n        //If we don't have a current barcode, you can't close the line\r\n        if (cMoveorder.currentMoveOrder.currentArticle == null) {\r\n            this.textViewAction.setText(cAppExtension.activity.getString(R.string.message_scan_article));\r\n            this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.textViewAction.setText(cAppExtension.activity.getString(R.string.message_scan_article_or_close_line));\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n        this.imageButtonDone.setImageResource(R.drawable.ic_doublecheck_black_24dp);\r\n    }\r\n\r\n    private cResult mSendLineRst(boolean pvResetAndCloseBln) {\r\n\r\n        cResult result =  new cResult();\r\n        result.resultBln = true;\r\n\r\n        //If internet is not connected\r\n        if (!cConnection.isInternetConnectedBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.couldnt_send_line_no_connection));\r\n            return result;\r\n        }\r\n\r\n        if (this.moveorderLineToUpdate != null) {\r\n\r\n            cMoveorderLine.currentMoveOrderLine = this.moveorderLineToUpdate;\r\n\r\n            //First reset the original line\r\n            result =  cMoveorderLine.currentMoveOrderLine.pResetRst();\r\n            if (!result.resultBln) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_reset_line));\r\n                return result;\r\n            }\r\n\r\n        }\r\n\r\n       if(!cMoveorder.currentMoveOrder.pMoveTakeItemHandledBln(this.scannedBarcodesObl)) {\r\n           result.resultBln = false;\r\n           result.pAddErrorMessage(cAppExtension.context.getString(R.string.couldnt_send_line));\r\n           return result;\r\n        }\r\n\r\n       if (!pvResetAndCloseBln) {\r\n           cUserInterface.pShowSnackbarMessage(this.moveLineTakeContainer,cAppExtension.activity.getString(R.string.message_previous_line_send),null,false);\r\n       }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    private cResult mMoveDoneRst (boolean pvResetAndCloseBln) {\r\n\r\n        cResult result = this.mSendLineRst(pvResetAndCloseBln);\r\n        if (!result.resultBln ) {\r\n            return result;\r\n        }\r\n\r\n        if (pvResetAndCloseBln) {\r\n            this.mResetCurrents();\r\n            this.mGoBackToLinesActivity();\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n     }\r\n\r\n    //Listeners\r\n    private void mSetDoneListener() {\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                pAcceptMove(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    counterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cMoveorder.currentMoveOrder.currentMoveorderBarcode  == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n                pHandleScan(cBarcodeScan.pFakeScan(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getBarcodeStr()));\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    counterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cMoveorder.currentMoveOrder.currentMoveorderBarcode  == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n\r\n                mTryToChangeQuantity(false, false, cMoveorder.currentMoveOrder.currentMoveorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n    }\r\n\r\n    //Dialogs and Activitys\r\n\r\n    private void mShowFullArticleFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        ArticleFullViewFragment articleFullViewFragment = new ArticleFullViewFragment();\r\n        articleFullViewFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ARTICLEFULL_TAG);\r\n\r\n\r\n\r\n    }\r\n\r\n    private void mShowAcceptFragment(){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_orderbusy_header),\r\n                                                                                   cAppExtension.activity.getString(R.string.message_orderbusy_text),\r\n                                                                                   cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line), false);\r\n        acceptRejectFragment.setCancelable(true);\r\n\r\n        runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mGoBackToLinesActivity() {\r\n        Intent intent = new Intent(cAppExtension.context, MoveLinesActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mResetCurrents() {\r\n\r\n        cMoveorderLine.currentMoveOrderLine = null;\r\n        cMoveorder.currentMoveOrder.currentArticle = null;\r\n        cMoveorder.currentMoveOrder.currentBranchBin = null;\r\n        cMoveorder.currentMoveOrder.currentMoveorderBarcode = null;\r\n        this.moveorderLineToUpdate = null;\r\n\r\n        this.scannedBarcodesObl = null;\r\n        this.quantityScannedDbl = 0.0;\r\n        this.articleStock = null;\r\n\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mShowNumberFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cMoveorder.currentMoveOrder.currentMoveorderBarcode.getQuantityHandledDbl().intValue());\r\n\r\n\r\n        if (this.articleStock == null) {\r\n            bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,99999);\r\n        }\r\n        else\r\n        {\r\n            bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,this.articleStock.getQuantityDbl());\r\n        }\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mSetArticleInfo(){\r\n\r\n        if (cMoveorder.currentMoveOrder.currentArticle == null) {\r\n            this.articleDescriptionText.setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            this.articleDescription2Text.setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            this.articleItemText.setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            return;\r\n        }\r\n        this.articleDescriptionText.setText(cMoveorder.currentMoveOrder.currentArticle.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cMoveorder.currentMoveOrder.currentArticle.getDescription2Str());\r\n        this.articleItemText.setText(cMoveorder.currentMoveOrder.currentArticle.getItemNoAndVariantCodeStr());\r\n\r\n        if (cMoveorder.currentMoveOrder.currentArticle.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private void mSetQuantityInfo(){\r\n\r\n        if (cMoveorder.currentMoveOrder.currentBranchBin == null) {\r\n            this.quantityRequiredText.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (cMoveorder.currentMoveOrder.currentMoveorderBarcode == null) {\r\n            this.quantityText.setText(\"0\");\r\n            return;\r\n        }\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(this.quantityScannedDbl));\r\n\r\n    }\r\n\r\n    private void mSetBinInfo(){\r\n\r\n        if (cMoveorder.currentMoveOrder.currentBranchBin == null) {\r\n            this.binContainer.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.binContainer.setVisibility(View.VISIBLE);\r\n        this.binText.setText(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (counterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (counterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (counterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (counterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (counterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (counterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (counterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (counterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.counterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.counterPlusHelperInt += 1;\r\n    }\r\n\r\n    //End Region Number Broadcaster\r\n\r\n    //End Regin Private Methods\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Move/MoveLineTakeActivity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Move/MoveLineTakeActivity.java	(date 1620822889530)
@@ -50,6 +50,7 @@
 import SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;
 import SSU_WHS.Basics.Settings.cSetting;
 import SSU_WHS.General.cPublicDefinitions;
+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Move.Moveorders.cMoveorder;
 import SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;
 import SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcode;
@@ -58,6 +59,8 @@
 import nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.BinItemsFragment;
+import nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyStockFragment;
+import nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.ItemStockFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;
@@ -233,9 +236,9 @@
         super.onDestroy();
         LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);
 
-        if (cAppExtension.activity instanceof  MoveLineTakeActivity) {
-            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());
-        }
+//        if (cAppExtension.activity instanceof  MoveLineTakeActivity) {
+//            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());
+//        }
 
     }
 
@@ -654,6 +657,11 @@
 
                 //Get article from cache
                 cMoveorder.currentMoveOrder.currentArticle = cMoveorder.currentMoveOrder.articleObl.get(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getItemNoAndVariantCodeStr());
+                //Double check for properties possibly not yet in cache
+                assert cMoveorder.currentMoveOrder.currentArticle != null;
+                if (cMoveorder.currentMoveOrder.currentArticle.propertyObl == null){
+                    cMoveorder.currentMoveOrder.currentArticle.pGetPropertyViaWebservice();
+                }
                 if (cMoveorder.currentMoveOrder.currentArticle == null) {
                     result.resultBln = false;
                     result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_unknown_article));
@@ -881,6 +889,13 @@
         return  result;
     }
 
+    private void mGetStockWithProperty(){
+        ItemPropertyStockFragment itemPropertyStockFragment = new ItemPropertyStockFragment(cMoveorder.currentMoveOrder.currentArticle);
+        itemPropertyStockFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYSTOCKFRAGMENT_TAG);
+
+
+    }
+
     private cResult mCheckForPreviousLineRst(){
 
         cResult result = new cResult();
@@ -1059,6 +1074,12 @@
 
         cUserInterface.pCheckAndCloseOpenDialogs();
 
+        if (cMoveorder.currentMoveOrder.currentArticle.propertyObl != null){
+            //Search with propertyvalues for stock
+            this.mGetStockWithProperty();
+            return;
+        }
+
         result = this.mGetArticleStockForBINRst();
         if (!result.resultBln) {
             this.mStepFailed(result.messagesStr());
Index: .idea/shelf/Uncommitted_changes_before_Merge_at_30-4-2021_09_27__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Merge_at_30-4-2021_09_27__Default_Changelist_.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ .idea/shelf/Uncommitted_changes_before_Merge_at_30-4-2021_09_27__Default_Changelist_.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Merge_at_30-4-2021_09_27_[Default_Changelist]" date="1619767669739" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_30-4-2021_09_27_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Merge at 30-4-2021 09:27 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37_[Default_Changelist]/app-normal-release.apk" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/caches/build_file_checksums.ser" />
-    <option name="AFTER_PATH" value=".idea/caches/build_file_checksums.ser" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_30-4-2021_09_27_[Default_Changelist]/build_file_checksums.ser" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Merge_at_4-5-2021_13_02__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Merge_at_4-5-2021_13_02__Default_Changelist_.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ .idea/shelf/Uncommitted_changes_before_Merge_at_4-5-2021_13_02__Default_Changelist_.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
@@ -1,14 +0,0 @@
-<changelist name="Uncommitted_changes_before_Merge_at_4-5-2021_13_02_[Default_Changelist]" date="1620126135195" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_4-5-2021_13_02_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Merge at 4-5-2021 13:02 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="app/release/normal/release/scansuite.apk" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".idea/caches/build_file_checksums.ser" />
-    <option name="AFTER_PATH" value=".idea/caches/build_file_checksums.ser" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_4-5-2021_13_02_[Default_Changelist]/build_file_checksums.ser" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Merge_at_30-4-2021_09_27_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Merge_at_30-4-2021_09_27_[Default_Changelist]/shelved.patch	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ .idea/shelf/Uncommitted_changes_before_Merge_at_30-4-2021_09_27_[Default_Changelist]/shelved.patch	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
@@ -1,14779 +0,0 @@
-Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package SSU_WHS.Inventory.InventoryorderLines;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cInventoryorderLine {\r\n\r\n    public cInventoryorderLineEntity inventoryorderLineEntity;\r\n\r\n    public static List<cInventoryorderLine> allLinesObl;\r\n    public static cInventoryorderLine currentInventoryOrderLine;\r\n\r\n    public List<cInventoryorderBarcode> barcodesObl(){\r\n\r\n        List<cInventoryorderBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cInventoryorder.currentInventoryOrder.barcodesObl() == null || cInventoryorder.currentInventoryOrder.barcodesObl().size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        //Loop through all barcodes, and if item matches add it to the list\r\n        for (cInventoryorderBarcode inventoryorderBarcode : cInventoryorder.currentInventoryOrder.barcodesObl()) {\r\n                        if (inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(this.getItemNoStr()) &&\r\n                            inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(this.getVariantCodeStr())) {\r\n                resultObl.add(inventoryorderBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n\r\n    }\r\n    public List<cInventoryorderLineBarcode> lineBarcodesObl(){\r\n\r\n        List<cInventoryorderLineBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cInventoryorderLineBarcode.allLineBarcodesObl == null || cInventoryorderLineBarcode.allLineBarcodesObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        //Loop through all barcodes, and if item matches add it to the list\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLineBarcode.allLineBarcodesObl) {\r\n            if (cText.pLongToStringStr(inventoryorderLineBarcode.getLineNoLng()).equalsIgnoreCase(cText.pIntToStringStr(this.getLineNoInt()))) {\r\n                resultObl.add(inventoryorderLineBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    private cInventoryorderLineViewModel getInventoryorderLineViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n    }\r\n\r\n    //Region Public Properties\r\n    private final int lineNoInt;\r\n    public int getLineNoInt() {\r\n        return lineNoInt;\r\n    }\r\n\r\n    private final String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return itemNoStr;\r\n    }\r\n\r\n    private final String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return variantCodeStr;\r\n    }\r\n\r\n    private final String descriptionStr;\r\n    public String getDescriptionStr() {\r\n        return descriptionStr;\r\n    }\r\n\r\n    private final String description2Str;\r\n    public String getDescription2Str() {\r\n        return description2Str;\r\n    }\r\n\r\n    private final String binCodeStr;\r\n    public String getBinCodeStr() {\r\n        return binCodeStr;\r\n    }\r\n\r\n    private final Double quantityDbl;\r\n    public Double getQuantityDbl() {\r\n        return quantityDbl;\r\n    }\r\n\r\n    private final String vendorItemNoStr;\r\n    public String getVendorItemNoStr() { return vendorItemNoStr; }\r\n\r\n    private final String vendorItemDescriptionStr;\r\n    public String getVendorItemDescriptionStr() { return vendorItemDescriptionStr; }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() { return statusInt; }\r\n\r\n    private final String handeledTimeStampStr;\r\n    public String getHandeledTimeStampStr() { return handeledTimeStampStr; }\r\n\r\n    public Double quantityHandledDbl;\r\n    public Double getQuantityHandledDbl() { return quantityHandledDbl; }\r\n\r\n    private final Double quantityHandledAllScannersDbl;\r\n    public Double getQuantityHandledAllScannersDbl() { return quantityHandledAllScannersDbl; }\r\n\r\n    public String getItemNoAndVariantCodeStr(){\r\n        return  this.getItemNoStr() + \"~\"  + this.getVariantCodeStr();\r\n    }\r\n\r\n    public cArticleImage articleImage;\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderLine(JSONObject pvJsonObject) {\r\n        this.inventoryorderLineEntity = new cInventoryorderLineEntity(pvJsonObject);\r\n        this.lineNoInt = this.inventoryorderLineEntity.getLineNoInt();\r\n        this.itemNoStr = this.inventoryorderLineEntity.getItemNoStr();\r\n        this.variantCodeStr = this.inventoryorderLineEntity.getVariantCodeStr();\r\n        this.descriptionStr = this.inventoryorderLineEntity.getDescriptionStr();\r\n        this.description2Str = this.inventoryorderLineEntity.getDescription2Str();\r\n        this.binCodeStr = this.inventoryorderLineEntity.getBincodeStr();\r\n        this.quantityDbl = this.inventoryorderLineEntity.getQuantityDbl();\r\n        this.vendorItemNoStr = this.inventoryorderLineEntity.getVendorItemNoStr();\r\n        this.vendorItemDescriptionStr = this.inventoryorderLineEntity.getVendorItemDescriptionStr();\r\n        this.statusInt = this.inventoryorderLineEntity.getStatusInt();\r\n        this.handeledTimeStampStr = this.inventoryorderLineEntity.getHandledtimestampStr();\r\n        this.quantityHandledDbl = this.inventoryorderLineEntity.getQuantityHandledDbl();\r\n        this.quantityHandledAllScannersDbl = this.inventoryorderLineEntity.getQuantityHandledAllScannersDbl();\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderLineViewModel().insert(this.inventoryorderLineEntity);\r\n\r\n        if (cInventoryorderLine.allLinesObl == null){\r\n            cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n        }\r\n        cInventoryorderLine.allLinesObl.add(this);\r\n        return  true;\r\n    }\r\n\r\n    public static void pInsertAllInDatabase(List<cInventoryorderLine> pvInventoryOrderLinesObl, List<cInventoryorderLineEntity> pvInventoryOrderLineEntityObl ) {\r\n\r\n        cInventoryorderLine.allLinesObl.addAll(pvInventoryOrderLinesObl);\r\n        cInventoryorderLineViewModel  inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        inventoryorderLineViewModel.insertAll (pvInventoryOrderLineEntityObl);\r\n\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cInventoryorderLineViewModel  inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        inventoryorderLineViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public cInventoryorderLineBarcode pAddLineBarcode(String pvBarcodeStr, Double pvQuantityDbl, boolean pvSkipQuantityBln) {\r\n\r\n        cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode((long) this.getLineNoInt(),pvBarcodeStr,pvQuantityDbl);\r\n\r\n        if (pvSkipQuantityBln){\r\n            inventoryorderLineBarcode.quantityHandledDbl = 0;\r\n        }\r\n\r\n        if (cInventoryorderLineBarcode.allLineBarcodesObl == null){\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = new ArrayList<>();\r\n        }\r\n\r\n        cInventoryorderLineBarcode.allLineBarcodesObl.add(inventoryorderLineBarcode);\r\n\r\n        return  inventoryorderLineBarcode;\r\n    }\r\n\r\n    public boolean pGetArticleImageBln(){\r\n\r\n        if (this.articleImage != null) {\r\n            return  true;\r\n        }\r\n\r\n        this.articleImage = cArticleImage.pGetArticleImageByItemNoAndVariantCode(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (this.articleImage != null){\r\n            return  true;\r\n        }\r\n\r\n        cWebresult Webresult;\r\n\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        Webresult = articleImageViewModel.pGetArticleImageFromWebserviceWrs(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (!Webresult.getSuccessBln() || !Webresult.getResultBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (Webresult.getResultDtt().size() == 1) {\r\n            cArticleImage articleImage = new cArticleImage(Webresult.getResultDtt().get(0));\r\n            articleImage.pInsertInDatabaseBln();\r\n            this.articleImage = articleImage;\r\n            return true;\r\n        }\r\n\r\n\r\n        return  false;\r\n\r\n    }\r\n\r\n    public boolean pSaveLineViaWebserviceBln (){\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderLineViewModel().pSaveLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n                return  true;\r\n            }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINESAVE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public void pUpdateQuantityInDatabase(){\r\n        getInventoryorderLineViewModel().pUpdateQuantity();\r\n    }\r\n\r\n    public cInventoryorderLineBarcode pGetLineBarcodeByScannedBarcode(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        if (this.lineBarcodesObl().size() == 0) {\r\n            this.quantityHandledDbl = 0.0;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : this.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set the current line\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                return inventoryorderLineBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pResetRst(){\r\n\r\n        //nit the result\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderLineViewModel().pResetLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            for (cInventoryorderLineBarcode inventoryorderLineBarcode : this.lineBarcodesObl()) {\r\n                inventoryorderLineBarcode.pDeleteFromDatabaseBln();\r\n            }\r\n\r\n            //Reset this line\r\n            this.quantityHandledDbl = 0.0;\r\n            this.pUpdateQuantityInDatabase();\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINERESET);\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_reset_line_via_webservice_failed));\r\n        }\r\n        return  result;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java	(date 1619705971724)
-@@ -17,6 +17,9 @@
- import SSU_WHS.Inventory.InventoryOrders.cInventoryorder;
- import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
- import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
-+import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
-+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
-+import SSU_WHS.Picken.Pickorders.cPickorder;
- import SSU_WHS.Webservice.cWebresult;
- import SSU_WHS.Webservice.cWebserviceDefinitions;
- import nl.icsvertex.scansuite.R;
-@@ -292,7 +295,100 @@
-         return  result;
-     }
- 
-+    public  boolean hasPropertysBln() {
-+        return this.linePropertyObl().size() != 0;
-+    }
-+    public ArrayList<cLinePropertyValue> presetValueObl;
-+
-+    private  List<cLineProperty> linePropertyCachedObl;
-+    private List<cLineProperty> linePropertyObl() {
-+
-+        if (this.linePropertyCachedObl != null) {
-+            return  this.linePropertyCachedObl;
-+        }
-+
-+        this.linePropertyCachedObl = new ArrayList<>();
-+
-+        if (cPickorder.currentPickOrder.linePropertysObl() == null || cPickorder.currentPickOrder.linePropertysObl().size() == 0) {
-+            return  this.linePropertyCachedObl;
-+        }
-+
-+        for (cLineProperty lineProperty :cPickorder.currentPickOrder.linePropertysObl() ) {
-+            if (lineProperty.getLineNoInt().equals(this.getLineNoInt())) {
-+                this.linePropertyCachedObl.add(lineProperty);
-+            }
-+        }
-+
-+        return  this.linePropertyCachedObl;
-+
-+    }
-+
-+    private  List<cLineProperty> linePropertyNoInputCachedObl;
-+    public List<cLineProperty> linePropertyNoInputObl() {
-+
-+        if (this.linePropertyNoInputCachedObl != null) {
-+            return  this.linePropertyNoInputCachedObl;
-+        }
-+
-+        this.linePropertyNoInputCachedObl = new ArrayList<>();
- 
-+        if (this.linePropertyObl() == null || this.linePropertyObl().size() == 0) {
-+            return  this.linePropertyNoInputCachedObl;
-+        }
-+
-+        for (cLineProperty lineProperty :this.linePropertyObl()) {
-+            if (!lineProperty.getIsInputBln() &&  !lineProperty.getIsRequiredBln()) {
-+                this.linePropertyNoInputCachedObl.add(lineProperty);
-+            }
-+        }
-+
-+        return  this.linePropertyNoInputCachedObl;
-+    }
-+
-+    public List<cLineProperty> linePropertyInputObl() {
-+
-+        List<cLineProperty> resultObl = new ArrayList<>();
-+
-+        if (this.linePropertyObl() == null || this.linePropertyObl().size() == 0) {
-+            return  resultObl;
-+        }
-+
-+        for (cLineProperty lineProperty :this.linePropertyObl()) {
-+            if (lineProperty.getIsInputBln() &&  lineProperty.getIsRequiredBln()) {
-+                resultObl.add(lineProperty);
-+            }
-+        }
-+
-+        return  resultObl;
-+    }
-+
-+    public  cLineProperty getLineProperty(String pvPropertyCodeStr){
-+
-+        if (this.linePropertyInputObl().size() == 0) {
-+            return  null;
-+        }
-+
-+        for (cLineProperty lineProperty : this.linePropertyObl() ) {
-+            if (lineProperty.getLineNoInt().equals(this.getLineNoInt()) && lineProperty.getPropertyCodeStr().equalsIgnoreCase(pvPropertyCodeStr)) {
-+                return lineProperty;
-+            }
-+        }
-+
-+        return  null;
-+
-+    }
-+
-+    public  List<cLinePropertyValue> linePropertyValuesObl() {
-+
-+        List<cLinePropertyValue> resultObl = new ArrayList<>();
-+
-+        for (cLineProperty inputLineProperty : this.linePropertyInputObl()) {
-+            resultObl.addAll(inputLineProperty.propertyValueObl());
-+        }
-+
-+        return  resultObl;
-+
-+    }
- 
- 
- 
-Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLineRepository.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package SSU_WHS.Inventory.InventoryorderLines;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.cDateAndTime;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\n\r\npublic class cInventoryorderLineRepository {\r\n    //Region Public Properties\r\n    private iInventoryorderLineDao inventoryorderLineDao;\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n\r\n    private static class UpdateInventorylineQuantityParams {\r\n        Long lineNoLng;\r\n        Double quantityDbl;\r\n\r\n        UpdateInventorylineQuantityParams(Long pvLineNoLng, Double pvQuantityDbl) {\r\n            this.lineNoLng = pvLineNoLng;\r\n            this.quantityDbl = pvQuantityDbl;\r\n        }\r\n    }\r\n\r\n    //Region Constructor\r\n    cInventoryorderLineRepository(Application pvApplication) {\r\n        acScanSuiteDatabase db= acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.inventoryorderLineDao = db.inventoryorderLineDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public void insert(cInventoryorderLineEntity inventoryorderLineEntity) {\r\n        new mInsertAsyncTask(inventoryorderLineDao).execute(inventoryorderLineEntity);\r\n    }\r\n\r\n    public void insertAll(List<cInventoryorderLineEntity>  pvInventoryorderLineEntities) {\r\n        new mInsertAllAsyncTask(inventoryorderLineDao).execute(pvInventoryorderLineEntities);\r\n    }\r\n\r\n    public void delete(cInventoryorderLineEntity inventoryorderLineEntity) {\r\n        new mDeleteAsyncTask(inventoryorderLineDao).execute(inventoryorderLineEntity);\r\n    }\r\n\r\n    public void deleteAll() {\r\n        new mDeleteAllAsyncTask(inventoryorderLineDao).execute();\r\n    }\r\n\r\n    private static class mInsertAsyncTask extends AsyncTask<cInventoryorderLineEntity, Void, Void> {\r\n        private iInventoryorderLineDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iInventoryorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @Override\r\n        protected Void doInBackground(final cInventoryorderLineEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAllAsyncTask extends AsyncTask<List<cInventoryorderLineEntity>, Void, Void> {\r\n        private iInventoryorderLineDao mAsyncTaskDao;\r\n\r\n        mInsertAllAsyncTask(iInventoryorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @SafeVarargs\r\n        @Override\r\n        protected final Void doInBackground(final List<cInventoryorderLineEntity>... params) {\r\n            mAsyncTaskDao.insertAll(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAsyncTask extends AsyncTask<cInventoryorderLineEntity, Void, Void> {\r\n        private iInventoryorderLineDao mAsyncTaskDao;\r\n\r\n        mDeleteAsyncTask(iInventoryorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @Override\r\n        protected Void doInBackground(final cInventoryorderLineEntity... params) {\r\n            mAsyncTaskDao.delete(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private iInventoryorderLineDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iInventoryorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public Double pGetTotalCountDbl() {\r\n        Double resultDbl = (double) 0;\r\n        try {\r\n            resultDbl = new pGetTotalCountFromDatabaseAsyncTask(inventoryorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetCountForBinCodeDbl(String pvBincode) {\r\n        Double resultDbl = (double) 0;\r\n        try {\r\n            resultDbl = new pGetCountForBincodeFromDatabaseAsyncTask(inventoryorderLineDao).execute(pvBincode).get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public cWebresult pSaveLineViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mSaveLineViaViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pResetLineViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mResetLineViaViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public boolean pUpdateQuantity() {\r\n\r\n        Integer integerValue;\r\n        UpdateInventorylineQuantityParams updateInventorylineQuantityParams = new UpdateInventorylineQuantityParams((long) cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),\r\n                                                                                                                     cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl());\r\n\r\n\r\n        try {\r\n            integerValue = new mUpdateQuantityHandledAsyncTask(inventoryorderLineDao).execute(updateInventorylineQuantityParams).get();\r\n\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private static class pGetCountForBincodeFromDatabaseAsyncTask extends AsyncTask<String, Void, Double> {\r\n        private iInventoryorderLineDao mAsyncTaskDao;\r\n        pGetCountForBincodeFromDatabaseAsyncTask(iInventoryorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Double doInBackground(final String... params) {\r\n            return mAsyncTaskDao.getCountForBincodeDbl(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class pGetTotalCountFromDatabaseAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iInventoryorderLineDao mAsyncTaskDao;\r\n        pGetTotalCountFromDatabaseAsyncTask(iInventoryorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Double doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getTotalCountDbl();\r\n        }\r\n    }\r\n\r\n    private static class mSaveLineViaViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo2Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_LINENO;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo6Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                SoapObject barcodesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODESLIST);\r\n\r\n                //Only loop through handled barcodes, of there are any\r\n                if (cInventoryorderLine.currentInventoryOrderLine.lineBarcodesObl() != null) {\r\n                    for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLine.currentInventoryOrderLine.lineBarcodesObl()) {\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODEHANDLED_COMPLEX);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_BARCODE_COMPLEX, inventoryorderLineBarcode.getBarcodeStr());\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_QUANTITYHANDLED_COMPLEX, inventoryorderLineBarcode.getQuantityhandledDbl());\r\n                        barcodesHandledList.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODELIST;\r\n                l_PropertyInfo7Pin.setValue(barcodesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                SoapObject propertiesHandledObl = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLED);\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLED;\r\n                l_PropertyInfo8Pin.setValue(propertiesHandledObl);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINESAVE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mResetLineViaViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo2Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_LINENO;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINERESET, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mUpdateQuantityHandledAsyncTask extends AsyncTask<UpdateInventorylineQuantityParams, Void, Integer> {\r\n        private iInventoryorderLineDao mAsyncTaskDao;\r\n        mUpdateQuantityHandledAsyncTask(iInventoryorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdateInventorylineQuantityParams... params) {\r\n            return mAsyncTaskDao.updateOrderLineQuantity(params[0].lineNoLng, params[0].quantityDbl);\r\n        }\r\n    }\r\n}\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLineRepository.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLineRepository.java	(date 1619704585258)
-@@ -17,6 +17,7 @@
- import SSU_WHS.General.acScanSuiteDatabase;
- import SSU_WHS.Inventory.InventoryOrders.cInventoryorder;
- import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
-+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
- import SSU_WHS.Webservice.cWebresult;
- import SSU_WHS.Webservice.cWebservice;
- import SSU_WHS.Webservice.cWebserviceDefinitions;
-@@ -270,6 +271,34 @@
-                 l_PropertyInfoObl.add(l_PropertyInfo7Pin);
- 
-                 SoapObject propertiesHandledObl = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLED);
-+
-+                //Only loop through handled properties, of there are any
-+                if (cInventoryorderLine.currentInventoryOrderLine.linePropertyValuesObl() != null) {
-+
-+                    int countForPropertyInt = 0;
-+                    int countForValueInt;
-+                    String propertyCodeStr = "";
-+
-+                    for (cLinePropertyValue linePropertyValue: cInventoryorderLine.currentInventoryOrderLine.linePropertyValuesObl()) {
-+
-+                        countForValueInt = 1;
-+
-+                        if (!propertyCodeStr.equalsIgnoreCase(linePropertyValue.getPropertyCodeStr())) {
-+                            propertyCodeStr = linePropertyValue.getPropertyCodeStr();
-+                            countForPropertyInt = 1;
-+                        }
-+
-+                        while (countForValueInt <= linePropertyValue.getQuantityDbl()) {
-+                            SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTYHANDLED_COMPLEX);
-+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_PROPERTYCODE, linePropertyValue.getPropertyCodeStr());
-+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_SEQUENCENOHANDLED, countForPropertyInt);
-+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_VALUEHANDLED, linePropertyValue.getValueStr());
-+                            propertiesHandledObl.addSoapObject(soapObject);
-+                            countForValueInt++;
-+                            countForPropertyInt++;
-+                        }
-+                    }
-+                }
-                 PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();
-                 l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLED;
-                 l_PropertyInfo8Pin.setValue(propertiesHandledObl);
-Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Packaging.PackagingActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class AcceptRejectFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private  Button cancelButton;\r\n    private  ImageView acceptImageView;\r\n    private  ImageView rejectImageView;\r\n    private  TextView acceptRejectHeader;\r\n    private  TextView acceptRejectText;\r\n    private  TextView textReject;\r\n    private  TextView textAccept;\r\n\r\n    private final String  titleStr;\r\n    private final String  messageStr;\r\n    private final String  acceptStr;\r\n    private final String rejectStr;\r\n    private final boolean ignoreAcceptBln;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public AcceptRejectFragment(String pvTitleStr, String pvMessageStr, String pvRejectStr, String pvAcceptStr, boolean pvIgnoreAccept) {\r\n        this.titleStr = pvTitleStr;\r\n        this.messageStr = pvMessageStr;\r\n\r\n        this.acceptStr = pvAcceptStr;\r\n        this.rejectStr = pvRejectStr;\r\n\r\n        this.ignoreAcceptBln = pvIgnoreAccept;\r\n    }\r\n    //End Region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n    @Override\r\n    public View onCreateView(LayoutInflater pvInflater, ViewGroup pvViewGroup,\r\n                             Bundle pvSavedInstanceState) {\r\n\r\n        // Inflate the layout for this fragment\r\n        return pvInflater.inflate(R.layout.fragment_accept_reject, pvViewGroup, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        if (getView() != null) {\r\n            this.acceptImageView = getView().findViewById(R.id.acceptImageView);\r\n            this.rejectImageView = getView().findViewById(R.id.rejectImageView);\r\n            this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n            this.textReject = getView().findViewById(R.id.textReject);\r\n            this.textAccept = getView().findViewById(R.id.textAccept);\r\n            this.acceptRejectHeader = getView().findViewById(R.id.textViewAcceptRejectHeader);\r\n            this.acceptRejectText = getView().findViewById(R.id.textViewAcceptRejectText);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                acceptRejectHeader.setText(titleStr);\r\n                acceptRejectText.setText(messageStr);\r\n                textReject.setText(rejectStr);\r\n                textAccept.setText(acceptStr);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetAcceptListener();\r\n        this.mSetRejectListener();\r\n        this.mSetCancelListener();\r\n    }\r\n    //End Region Default Methods\r\n\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                if (cAppExtension.activity instanceof  PickorderPickActivity) {\r\n                    PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                    pickorderPickActivity.pAcceptRejectDialogDismissed();\r\n                }\r\n\r\n\r\n                if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                    ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                    returnorderDocumentActivity.pHandleFragmentDismissed();\r\n                }\r\n                if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                    ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                    returnorderDocumentsActivity.pHandleFragmentDismissed();\r\n                }\r\n\r\n                if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                    ReturnArticleDetailActivity pickorderPickActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                    pickorderPickActivity.pHandleFragmentDismissed();\r\n                }\r\n\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetAcceptListener() {\r\n\r\n        this.acceptImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mAccept();\r\n            }\r\n        });\r\n\r\n        this.textAccept.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mAccept();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetRejectListener() {\r\n        this.rejectImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mReject();\r\n            }\r\n        });\r\n        this.textReject.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mReject();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mAccept() {\r\n\r\n        if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n            PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n            pickorderLinesActivity.pLeaveActivity();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n            PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n            pickorderLinesGeneratedActivity.pLeaveActivity();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  PickorderPickActivity) {\r\n            PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n            pickorderPickActivity.pAcceptPick(ignoreAcceptBln);\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.amountHandledBln = true;\r\n            pickorderLineItemPropertyInputActvity.pHandled();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof SortorderSortActivity) {\r\n            SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n            sortorderSortActivity.pAcceptPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderQCActivity) {\r\n            PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n            pickorderQCActivity.pAcceptQC(ignoreAcceptBln);\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n            PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n            pickorderPickGeneratedActivity.pAcceptPick(true);\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof InventoryorderBinActivity) {\r\n            InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n            inventoryorderBinActivity.pCloseBin();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof InventoryorderBinsActivity) {\r\n            InventoryorderBinsActivity inventoryorderBinsActivity = new InventoryorderBinsActivity();\r\n            inventoryorderBinsActivity.pCloseOrder();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.pSendScansBln();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeorderMATLinesActivity) {\r\n            IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n            intakeorderMATLinesActivity.pDone();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeorderMASLinesActivity) {\r\n            IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n            intakeorderMASLinesActivity.pDone();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity) {\r\n            IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n            intakeOrderIntakeGeneratedActivity.pAcceptStore();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeActivity) {\r\n            IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n            intakeOrderIntakeActivity.pAcceptStore();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReturnorderDocumentActivity) {\r\n            ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n            returnorderDocumentActivity.pCloseDocument();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReturnorderDocumentsActivity) {\r\n            ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n            returnorderDocumentsActivity.pCloseOrder();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  ReturnArticleDetailActivity) {\r\n            ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n            returnArticleDetailActivity.pDone();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveLinesActivity) {\r\n\r\n            ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n\r\n            if (ReceiveLinesActivity.closeOrderClickedBln) {\r\n                receiveLinesActivity.pDone();\r\n                this.dismiss();\r\n                return;\r\n            }\r\n\r\n            if (ReceiveLinesActivity.packagingClickedBln) {\r\n                receiveLinesActivity.pPackaging();\r\n            }\r\n\r\n            else {\r\n                receiveLinesActivity.pAddUnknownScan(ReceiveLinesActivity.barcodeScanToHandle);\r\n            }\r\n            this.dismiss();\r\n            return;\r\n\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity) {\r\n            ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n            receiveOrderReceiveActivity.pAcceptReceive();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.amountHandledBln = true;\r\n            receiveorderLinePropertyInputActivity.pHandled();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PackagingActivity) {\r\n            PackagingActivity packagingActivity = (PackagingActivity)cAppExtension.activity;\r\n            packagingActivity.pHandlePackagingDone();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n            MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n\r\n            if (!moveLinesActivity.closeOrderClickedBln) {\r\n                moveLinesActivity.pLeaveActivity();\r\n                return;\r\n            }\r\n\r\n            moveLinesActivity.pDone();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLineTakeActivity) {\r\n            MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n            moveLineTakeActivity.pAcceptMove(true);\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n            MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n            moveLinesTakeMTActivity.pLeaveActivity();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n            MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n            if (!moveLinesPlaceMTActivity.closeOrderClickedBln) {\r\n                moveLinesPlaceMTActivity.pLeaveActivity();\r\n                return;\r\n            }\r\n            moveLinesPlaceMTActivity.pDone();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n            MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n            moveLineTakeMTActivity.pAcceptMove();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n            MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n            moveLinePlaceMTActivity.pAcceptMove();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity) {\r\n            MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n            moveLinePlaceGeneratedActivity.pAcceptMove();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity) {\r\n            MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n            moveorderLinesPlaceGeneratedActivity.pDone();\r\n        }\r\n\r\n    }\r\n\r\n    private void mReject() {\r\n\r\n        if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  PickorderPickActivity) {\r\n            PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n            pickorderPickActivity.pCancelPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.pCancelPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof SortorderSortActivity) {\r\n            SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n            sortorderSortActivity.pCancelPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderQCActivity) {\r\n            PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n            pickorderQCActivity.pCancelQC();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n            PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n            pickorderPickGeneratedActivity.pCancelPick();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof InventoryorderBinActivity) {\r\n            InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n            inventoryorderBinActivity.pAcceptRejectDialogDismissed();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  InventoryorderBinsActivity) {\r\n            InventoryorderBinsActivity inventoryorderBinsActivity = new InventoryorderBinsActivity();\r\n            inventoryorderBinsActivity.pAcceptRejectDialogDismissed();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeActivity) {\r\n            IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n            intakeOrderIntakeActivity.pCancelStore();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.pCancelReceive();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeorderMATLinesActivity) {\r\n            IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n            intakeorderMATLinesActivity.pLeaveActivity();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeorderMASLinesActivity) {\r\n            IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n            intakeorderMASLinesActivity.pLeaveActivity();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity) {\r\n            IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n            intakeOrderIntakeGeneratedActivity.pCancelStore();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveLinesActivity) {\r\n\r\n            if (ReceiveLinesActivity.closeOrderClickedBln) {\r\n                ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                receiveLinesActivity.pLeaveActivity();\r\n                return;\r\n            }\r\n\r\n            if (ReceiveLinesActivity.packagingClickedBln) {\r\n                ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                ReceiveLinesActivity.packagingHandledBln = true;\r\n                receiveLinesActivity.pDone();\r\n                return;\r\n            }\r\n\r\n            ReceiveLinesActivity.barcodeScanToHandle = null;\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity) {\r\n            ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n            receiveOrderReceiveActivity.pCancelReceive();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.pCancelReceive();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n            ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n            returnorderDocumentActivity.pHandleFragmentDismissed();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  ReturnArticleDetailActivity) {\r\n            ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n            returnArticleDetailActivity.pHandleFragmentDismissed();\r\n            this.dismiss();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof PackagingActivity){\r\n            this.dismiss();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinesActivity){\r\n            this.dismiss();\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLineTakeActivity) {\r\n            MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n            moveLineTakeActivity.pCancelMove();\r\n            return;\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n            MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n            moveLinesPlaceMTActivity.closeOrderClickedBln = false;\r\n            return;\r\n        }\r\n\r\n\r\n        if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n            MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n            moveLineTakeMTActivity.pCancelMove();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n            MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n            moveLinePlaceMTActivity.pCancelMove();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof  MoveLinePlaceGeneratedActivity) {\r\n            MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n            moveLinePlaceGeneratedActivity.pCancelMove();\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity) {\r\n            MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n            moveorderLinesPlaceGeneratedActivity.pLeaveActivity();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectFragment.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectFragment.java	(date 1619709127962)
-@@ -21,6 +21,7 @@
- import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;
-+import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;
- import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;
- import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
-@@ -270,6 +271,14 @@
-             this.dismiss();
-             return;
-         }
-+
-+        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;
-+            inventoryLinePropertyInputActivity.amountHandledBln = true;
-+            inventoryLinePropertyInputActivity.pHandled();
-+            this.dismiss();
-+            return;
-+        }
- 
-         if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {
-             IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;
-@@ -472,6 +481,13 @@
-             inventoryorderBinsActivity.pAcceptRejectDialogDismissed();
-             return;
-         }
-+
-+        if (cAppExtension.activity instanceof  InventoryLinePropertyInputActivity) {
-+            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;
-+            inventoryLinePropertyInputActivity.pCancel();
-+            this.dismiss();
-+            return;
-+        }
- 
-         if (cAppExtension.activity instanceof IntakeOrderIntakeActivity) {
-             IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;
-Index: .idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37_[Default_Changelist]/shelved.patch
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37_[Default_Changelist]/shelved.patch	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ .idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37_[Default_Changelist]/shelved.patch	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-@@ -1,14086 +0,0 @@
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch
--===================================================================
----- .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch	(revision 2d394166f7aefdd7dd0045032e90c52d5d086e88)
--+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch	(revision 2d394166f7aefdd7dd0045032e90c52d5d086e88)
--@@ -1,2329 +0,0 @@
---Index: app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Picken.Pickorders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyRepository;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.Shipment.cShipment;\r\nimport SSU_WHS.Picken.Storement.cStorement;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cPickorderRepository {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    private final iPickorderDao pickorderDao;\r\n    private final iPickorderLineDao pickorderLineDao;\r\n\r\n    private static class PickorderStepHandledParams {\r\n        String userStr;\r\n        String languageStr;\r\n        String branchStr;\r\n        String orderNumberStr;\r\n        String deviceStr;\r\n        String workPlaceStr;\r\n        String workflowStepcodeStr;\r\n        Integer workflowStepInt;\r\n        String cultureStr;\r\n\r\n        PickorderStepHandledParams(String pvUserStr, String pvLanguageStr, String pvBranchStr, String pvOrderNumberStr, String pvDeviceStr, String pvWorkplaceStr, String pvWorkflowStepCodeStr, Integer pvWorkflowStepStr, String pvCultureStr) {\r\n            this.userStr = pvUserStr;\r\n            this.languageStr = pvLanguageStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.deviceStr = pvDeviceStr;\r\n            this.workPlaceStr = pvWorkplaceStr;\r\n            this.workflowStepcodeStr = pvWorkflowStepCodeStr;\r\n            this.workflowStepInt = pvWorkflowStepStr;\r\n            this.cultureStr = pvCultureStr;\r\n        }\r\n    }\r\n\r\n    private static class PickorderUpdateWorkplaceParams {\r\n        String user;\r\n        String branch;\r\n        String ordernumber;\r\n        String workplace;\r\n\r\n        PickorderUpdateWorkplaceParams(String pvUserStr, String pvBranchStr, String pvOrdernumberStr, String pvWorkplaceStr) {\r\n            this.user = pvUserStr;\r\n            this.branch = pvBranchStr;\r\n            this.ordernumber = pvOrdernumberStr;\r\n            this.workplace = pvWorkplaceStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdatePickorderCurrentLocationLocalParams {\r\n        String orderNumberStr;\r\n        String currentLocationStr;\r\n\r\n        UpdatePickorderCurrentLocationLocalParams(String pvOrderNumberStr, String pvCurrentLocationStr) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.currentLocationStr = pvCurrentLocationStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdateSelectedLocalParams {\r\n        String orderNumberStr;\r\n        Boolean selectedBln;\r\n\r\n        UpdateSelectedLocalParams(String pvOrderNumberStr, Boolean pvSelectedBln) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.selectedBln = pvSelectedBln;\r\n        }\r\n    }\r\n\r\n    private static class CreateOrderLocalParams {\r\n        String documentStr;\r\n        Boolean  checkBarcodesBln;\r\n\r\n        CreateOrderLocalParams(String pvDocumentStr, Boolean checkBarcodesBln) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = checkBarcodesBln;\r\n        }\r\n    }\r\n\r\n\r\n    private static class PickorderLocalParams {\r\n        String userNameStr;\r\n        String branchStr;\r\n        Boolean inProgressBln;\r\n        int pickStep;\r\n        String searchTextStr;\r\n        String mainTypeStr;\r\n\r\n\r\n        PickorderLocalParams(String pvUserNameStr, String pvBranchStr, Boolean pvInProgressBln, int pvPickStepInt, String pvSearchTextStr, String pvMainTypeStr) {\r\n            this.userNameStr = pvUserNameStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.inProgressBln = pvInProgressBln;\r\n            this.pickStep = pvPickStepInt;\r\n            this.searchTextStr = pvSearchTextStr;\r\n            this.mainTypeStr = pvMainTypeStr;\r\n        }\r\n    }\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    cPickorderRepository(Application pvApplication) {\r\n        //Region Private Properties\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.pickorderDao = db.pickorderDao();\r\n        this.pickorderLineDao = db.pickorderLineDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public void insert (cPickorderEntity pickorderEntity) {\r\n        new mInsertAsyncTask(pickorderDao).execute(pickorderEntity);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(pickorderDao).execute();\r\n    }\r\n\r\n    public void pAbortOrder() {\r\n        new mAbortOrderAsyncTask(pickorderLineDao).execute();\r\n    }\r\n\r\n    public cWebresult pGetPickordersFromWebserviceWrs(Boolean pvInprogressBln, String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        String mainTypeStr = \"\";\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n\r\n\r\n        switch (cUser.currentUser.currentAuthorisation.getAutorisationEnu()){\r\n\r\n            case PICK:\r\n                break;\r\n\r\n            case PICK_PF:\r\n                mainTypeStr = \"Transfer\";\r\n                break;\r\n\r\n            case PICK_PV:\r\n                mainTypeStr = \"Sales\";\r\n                break;\r\n\r\n            default:\r\n                mainTypeStr = \"\";\r\n                break;\r\n        }\r\n\r\n        pickorderLocalParams = new PickorderLocalParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), pvInprogressBln, 0, pvSearchTextStr, mainTypeStr);\r\n\r\n        try {\r\n            webResultWrs = new mGetPickordersFromWebserviceAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPickorderstPickordersNextStepFromWebserviceWrs(String pvUsernameStr, cWarehouseorder.StepCodeEnu pvStepCodeEnu, String pvSearchTextStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n         int stepCodeInt= 0 ;\r\n\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Sorting) {\r\n            stepCodeInt = 20;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_QualityContol) {\r\n            stepCodeInt = 30;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_PackAndShip) {\r\n            stepCodeInt = 40;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Storage) {\r\n            stepCodeInt = 60;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Finish_Packing) {\r\n            stepCodeInt = 70;\r\n        }\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n        pickorderLocalParams = new PickorderLocalParams(pvUsernameStr, cUser.currentUser.currentBranch.getBranchStr(), false, stepCodeInt, pvSearchTextStr, \"\");\r\n\r\n        try {\r\n            webResultWrs = new mPickordersNextStepFromWebserviceGetAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderEntity> pGetPickordersFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cPickorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder(\"SELECT * FROM Pickorders \");\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n            if (cSharedPreferences.showSingleArticlesBln()) {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 1 \");\r\n            }\r\n            else\r\n            {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 0 \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 1 \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 0 \");\r\n            }\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (PickorderSelectActivity.currentModusEnu == PickorderSelectActivity.ModusEnu.COMBINE) {\r\n            if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                SQLStatementStr.append(\"WHERE SourceDocument <> '95' \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND SourceDocument <> '95' \");\r\n            }\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Ordernumber ASC\");\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new mGetPickordersFromDatabaseWithFilterAsyncTask(pickorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pPickHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickGeneratedHandledViaWebserviceBln(String pvShipBinStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvShipBinStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderGeneratedHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pStoreHandledViaWebserviceBln() {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), \"\", cWarehouseorder.StepCodeEnu.Pick_Storage.toString(), cWarehouseorder.WorkflowPickStepEnu.PickStorage, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pSortHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Sorting.toString(), cWarehouseorder.WorkflowPickStepEnu.PickSorting, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pQCHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_QualityContol.toString(), cWarehouseorder.WorkflowPickStepEnu.PickQualityControl, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pShipHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Pick_PackAndShip.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pFinishSinglePiecesHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Finish_Packing.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickFinishPacking,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentShippedViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentShippedAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentStoredViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentStoredAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public Boolean pPickorderUpdateWorkplaceViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderUpdateWorkplaceParams pickorderUpdateWorkplaceParams;\r\n        pickorderUpdateWorkplaceParams   = new PickorderUpdateWorkplaceParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), pvWorkplaceStr);\r\n\r\n        try {\r\n            webResult = new mPickorderUpdateWorkplaceViaWebserviceAsyncTask().execute(pickorderUpdateWorkplaceParams).get();\r\n            return webResult.getSuccessBln() && webResult.getResultBln();\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pUpdateCurrentLocationViaWebserviceWrs(String pvCurrentLocationStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mUpdateCurrentLocationViaWebserviceAsyncTask().execute(pvCurrentLocationStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public Boolean pPickorderUpdatCurrentLocationInDatabaseBln(String pvCurrentLocationStr) {\r\n\r\n        Integer integerValue;\r\n        UpdatePickorderCurrentLocationLocalParams updatePickorderCurrentLocationLocalParams = new UpdatePickorderCurrentLocationLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), pvCurrentLocationStr);\r\n        try {\r\n            integerValue = new mUpdatePickorderCurrentLocationInDatabaseAsyncTask(pickorderDao).execute(updatePickorderCurrentLocationLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public Boolean pPickorderUpdatIsSelectedInDatabaseBln() {\r\n\r\n        Integer integerValue;\r\n        UpdateSelectedLocalParams updateSelectedLocalParams = new UpdateSelectedLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), cPickorder.currentPickOrder.getIsSelectedBln());\r\n        try {\r\n            integerValue = new mUpdateIsSelectedInDatabaseAsyncTask(pickorderDao).execute(updateSelectedLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public cWebresult pCreatePickOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        CreateOrderLocalParams orderLocalParams = new CreateOrderLocalParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new cPickorderRepository.mCreatePickorderViaWebserviceAsyncTask().execute(orderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //Pick Lines\r\n    public cWebresult pGetLinesFromWebserviceWrs(cWarehouseorder.ActionTypeEnu pvActionTypeEnu) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetAllLinesFromDatabaseObl() {\r\n\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetAllLinesFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetPickorderLinesToSendFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetPickorderLinesToSendFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledForBranchFromDatabaseObl(String pvBranchStr) {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesForBranchAsyncTask(pickorderLineDao).execute(pvBranchStr).get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesBusyFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetBusyLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetHandledLinesOblAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    //Pick quantityDbl's\r\n    public Double pQuantityNotHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityNotHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pQuantityHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetTotalQuantityDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetTotalQuanitityAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (resultDbl== null) {\r\n            resultDbl = (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    //Pick Order details\r\n\r\n    public cWebresult pGetAddressesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderAdressesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetSettingsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderSettingsFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCompositeBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLineBarcodesFromWebservice(cWarehouseorder.ActionTypeEnu pvActionTypeEnu){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderLineBarcodesGetFromWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertysViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertysViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertyValuesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPackagesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderPackagesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Pack and Ship\r\n\r\n\r\n\r\n    public cWebresult pGetPackAndShipLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPackAndShipLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetFinishPackSinglePieceLinesViaWebserviceWrsWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Storage\r\n    public cWebresult pGetStorageLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetStorageLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n    //End Storage\r\n\r\n    public cWebresult pCreateCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mCreateCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddOrderToCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mAddOrderToCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveOrderFromCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveOrderFromCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAsyncTask extends AsyncTask<cPickorderEntity, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cPickorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromWebserviceAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_INPROGRESS;\r\n            l_PropertyInfo3Pin.setValue(params[0].inProgressBln);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr.toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickordersNextStepFromWebserviceGetAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKSTEP;\r\n            l_PropertyInfo3Pin.setValue(params[0].pickStep);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSSEQUELSTEP, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cPickorderEntity>> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n\r\n        mGetPickordersFromDatabaseWithFilterAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredPickorders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mPickorderStepHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LANGUAGEASCULTURE;\r\n                l_PropertyInfo2Pin.setValue(params[0].languageStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo5Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo6Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo7Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPINT;\r\n                l_PropertyInfo8Pin.setValue(params[0].workflowStepInt);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSTEPHANDLED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderGeneratedHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPBINSTR;\r\n                l_PropertyInfo8Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERHANDLEDGENERATED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentShippedAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cShipment.currentShipment.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo5Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGAGENT;\r\n                l_PropertyInfo6Pin.setValue(cShipment.currentShipment.shippingAgent().getShippingAgentStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGSERVICE;\r\n                l_PropertyInfo7Pin.setValue(cShipment.currentShipment.shippingAgentService().getServiceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGOPTIONS;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                SoapObject shippingpackages = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES);\r\n\r\n                int sequencenumberInt = 0;\r\n                String packageTypeToRememberStr = \"\";\r\n                int counterForTypeInt = 0;\r\n\r\n                for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit : cShipment.currentShipment.shippingAgentService().shippingUnitsObl()) {\r\n\r\n                    //If we didn't use this, continue\r\n                    if (shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt() <= 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    //New packageype, so reset sequenceNumber\r\n                    if (!packageTypeToRememberStr.equalsIgnoreCase(shippingAgentServiceShippingUnit.getShippingUnitStr())) {\r\n                        packageTypeToRememberStr = shippingAgentServiceShippingUnit.getShippingUnitStr();\r\n                        sequencenumberInt = 0;\r\n                        counterForTypeInt = 0;\r\n                    }\r\n\r\n                    while (counterForTypeInt < shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt()) {\r\n                        counterForTypeInt += 1;\r\n                        sequencenumberInt += 10;\r\n\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_PACKAGE, packageTypeToRememberStr);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_SEQUENCENUMBER, sequencenumberInt);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_WEIGHTING, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_ITEMCOUNT, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINERTYPE, \"\");\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINER, \"\");\r\n                        shippingpackages.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES;\r\n                l_PropertyInfo9Pin.setValue(shippingpackages);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSHIPPED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentStoredAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cStorement.currentStorement.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_STORAGEBINCODE;\r\n                l_PropertyInfo5Pin.setValue(cStorement.currentStorement.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSTORED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderUpdateWorkplaceViaWebserviceAsyncTask extends AsyncTask<PickorderUpdateWorkplaceParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderUpdateWorkplaceParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].user);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branch);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].ordernumber);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo4Pin.setValue(params[0].workplace);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERUPDATEWORKPLACE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mUpdatePickorderCurrentLocationInDatabaseAsyncTask extends AsyncTask<UpdatePickorderCurrentLocationLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdatePickorderCurrentLocationInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdatePickorderCurrentLocationLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderCurrentLocation(params[0].orderNumberStr, params[0].currentLocationStr);\r\n        }\r\n    }\r\n\r\n    private static class mUpdateIsSelectedInDatabaseAsyncTask extends AsyncTask<UpdateSelectedLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdateIsSelectedInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdateSelectedLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderIsSelected(params[0].orderNumberStr, params[0].selectedBln);\r\n        }\r\n    }\r\n\r\n    private static class mAbortOrderAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mAbortOrderAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Void doInBackground(Void... params) {\r\n            mAsyncTaskDao.abortOrder();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n                l_PropertyInfo3Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPackAndShipLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESPACKANDSHIP, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetStorageLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESSTORAGE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESFINISHSINGLEPIECE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreateCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_CREATEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mAddOrderToCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOADD;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADDORDERTOMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveOrderFromCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOREMOVE;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEORDERFROMMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetAllLinesFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetAllLinesFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getAll();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderLinesToSendFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetPickorderLinesToSendFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getPickorderLineEntitiesToSend();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesForBranchAsyncTask extends AsyncTask<String, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesForBranchAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final String... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineForBranchEntitiesLin(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mGetBusyLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetBusyLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getBusyPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetHandledLinesOblAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetHandledLinesOblAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getHandledPickorderLineEntities();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityNotHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityNotHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getQuantityNotHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getNumberHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetTotalQuanitityAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetTotalQuanitityAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getTotalQuantityDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderAdressesFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERADDRESSES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderSettingsFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SETTINGTYPE;\r\n            l_PropertyInfo4Pin.setValue(\"Pick_PackAndShip\");\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTSETTINGSGET, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderPackagesFromWebserviceTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult =  cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSHIPPACKAGES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString().toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSEORDERCOMPOSITEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderLineBarcodesGetFromWebserviceAsyncTask extends AsyncTask <String, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n            l_PropertyInfo3Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mUpdateCurrentLocationViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_CURRENTLOCATION;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_UPDATECURRENTORDERLOCATION, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreatePickorderViaWebserviceAsyncTask extends AsyncTask<CreateOrderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(CreateOrderLocalParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.PF.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(date 1617285222079)
---@@ -2176,6 +2176,8 @@
---         }
---     }
--- 
---+
---+
---     //End Region Private Methods
--- 
--- }
---Index: .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch
---===================================================================
------ .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---@@ -1,17 +0,0 @@
----Index: app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java
----IDEA additional info:
----Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
----<+>package SSU_WHS.Basics.Branches;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwner;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.BranchReason.cBranchReason;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceViewModel;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\n\r\npublic class cBranch {\r\n\r\n    //Region Public Properties\r\n    private String branchStr;\r\n    public String getBranchStr() {\r\n        return branchStr;\r\n    }\r\n\r\n    private String branchTypeStr;\r\n    public String getBranchTypeStr() {\r\n        return branchTypeStr;\r\n    }\r\n\r\n    private String branchNameStr;\r\n    public String getBranchNameStr() {\r\n        return branchNameStr;\r\n    }\r\n\r\n    private boolean binMandatoryBln;\r\n    public  boolean isBinMandatoryBln() {return  binMandatoryBln;}\r\n\r\n    private String returnDefaultBinStr;\r\n    public String getReturnDefaultBinStr(){\r\n        return   returnDefaultBinStr;\r\n    }\r\n\r\n    private String receiveDefaultBinStr;\r\n    public String getReceiveDefaultBinStr(){\r\n        return   receiveDefaultBinStr;\r\n    }\r\n\r\n    private String pickDefaultStorageBinStr;\r\n    public String getPickDefaultStorageBinStr(){\r\n        return pickDefaultStorageBinStr;\r\n    }\r\n\r\n    private String moveDefaultBinStr;\r\n    public String getMoveDefaultBinStr(){\r\n        return   moveDefaultBinStr;\r\n    }\r\n\r\n    private cBranchEntity branchEntity;\r\n\r\n    public ArrayList<cWorkplace>  workplacesObl() {\r\n        return  cWorkplace.allWorkplacesObl;\r\n\r\n    }\r\n    public ArrayList<cBranchBin>  binsObl;\r\n    public ArrayList<cBranchReason>  returnReasonObl;\r\n    public ArrayList<cStockOwner> stockOwnerObl;\r\n\r\n    private cBranchViewModel getBranchViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n    }\r\n\r\n\r\n    public static List<cBranch> allBranchesObl;\r\n    public  List<cBranchBin> receiveBinsObl;\r\n    public  List<cBranchBin> shipBinsObl;\r\n\r\n    public  static  boolean BranchesAvailableBln;\r\n\r\n       public enum brachTypeEnum {\r\n        INTRANSIT,\r\n        STORE,\r\n        UNKNOWN,\r\n        WAREHOUSE\r\n    }\r\n    //end region Public Propties\r\n\r\n    //Region Constructor\r\n    public cBranch(JSONObject pvJsonObject) {\r\n        this.branchEntity = new cBranchEntity(pvJsonObject);\r\n        this.branchStr = branchEntity.getBranchStr();\r\n        this.branchTypeStr = branchEntity.getBranchtypeStr();\r\n        this.branchNameStr = branchEntity.getBranchnameStr();\r\n        this.returnDefaultBinStr = branchEntity.getReturndefaultbinStr();\r\n        this.receiveDefaultBinStr = branchEntity.getReceivedefaultbinStr();\r\n        this.moveDefaultBinStr = branchEntity.getMovedefaultbinStr();\r\n        this.pickDefaultStorageBinStr = branchEntity.getPickDefaultStorageBinStr();\r\n        this.binMandatoryBln = cText.pStringToBooleanBln(branchEntity.getBinmandatoryStr(),false) ;\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public static boolean pGetBranchesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cBranch.allBranchesObl = null;\r\n            cBranch.pTruncateTableBln();\r\n        }\r\n\r\n        if (cBranch.allBranchesObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        cBranchViewModel branchViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n        WebResult =  branchViewModel.pGetBranchesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranch branch = new cBranch(jsonObject);\r\n                branch.pInsertInDatabaseBln();\r\n            }\r\n\r\n            cBranch.BranchesAvailableBln = true;\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean pGetReceiveBinsViaWebserviceBln() {\r\n\r\n        if (this.receiveBinsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetReceiveBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            this.receiveBinsObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                this.receiveBinsObl.add(branchBin);\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pGetShipBinsViaWebserviceBln() {\r\n\r\n        if (this.shipBinsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetShipBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            this.shipBinsObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                this.shipBinsObl.add(branchBin);\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getBranchViewModel().insert(this.branchEntity);\r\n\r\n        if (cBranch.allBranchesObl == null){\r\n            cBranch.allBranchesObl = new ArrayList<>();\r\n        }\r\n        cBranch.allBranchesObl .add(this);\r\n\r\n        return true;\r\n    }\r\n\r\n    public static cBranch pGetBranchByCode(String pvBranchStr){\r\n        if(cBranch.allBranchesObl == null || cBranch.allBranchesObl.size() == 0){\r\n            return null;\r\n        }\r\n\r\n        for (cBranch branch :  cBranch.allBranchesObl )\r\n        {\r\n            if(branch.branchStr.equalsIgnoreCase(pvBranchStr)){\r\n                return  branch;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static cBranch pGetUserBranchByCode(String pvBranchStr){\r\n        if(cUser.currentUser == null || cUser.currentUser.branchesObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cBranch branch :  cUser.currentUser.branchesObl)\r\n        {\r\n            if(branch.branchStr.equalsIgnoreCase(pvBranchStr)){\r\n                return  branch;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public cBranchBin pGetBinByCode(String pvBinCodeStr){\r\n\r\n        //Search for the BIN in the cache\r\n        if (this.binsObl != null && this.binsObl.size() > 0 ) {\r\n            for (cBranchBin branchBin : this.binsObl) {\r\n                if (branchBin.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr)) {\r\n                    return  branchBin;\r\n                }\r\n            }\r\n        }\r\n\r\n        return   this.mGetBinViaWebservice(pvBinCodeStr);\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cBranchViewModel branchViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n        branchViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public boolean pGetWorkplacesBln(boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cWorkplace.allWorkplacesObl = null;\r\n        }\r\n\r\n        if (this.workplacesObl() != null){\r\n            return  true;\r\n        }\r\n\r\n        cWorkplace.pTruncateTableBln();\r\n        cWorkplace.allWorkplacesObl = null;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cWorkplaceViewModel  workplaceViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cWorkplaceViewModel.class);\r\n        WebResult =  workplaceViewModel.pGetWorkplacesFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n            if( cWorkplace.allWorkplacesObl == null) {\r\n                cWorkplace.allWorkplacesObl =  new ArrayList<>();\r\n            }\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cWorkplace workplace = new cWorkplace(jsonObject);\r\n                workplace.pInsertInDatabaseBln();\r\n            }\r\n\r\n            return  true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean pGetReasonBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln){\r\n            this.returnReasonObl = null;\r\n            this.returnReasonObl = new ArrayList<>();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetReasonFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            if (this.returnReasonObl == null){\r\n                this.returnReasonObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cBranchReason branchReason = new cBranchReason(jsonObject);\r\n                if(branchReason.isReturn()) {\r\n                    this.returnReasonObl.add(branchReason);\r\n                }\r\n            }\r\n            return  true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n    public boolean pGetAuthorizedStockOwnerBln(Boolean pvRefreshBln) {\r\n        if (pvRefreshBln){\r\n            this.stockOwnerObl = null;\r\n            this.stockOwnerObl = new ArrayList<>();\r\n        }\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetAuthorizedStockOwnerFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            if (this.stockOwnerObl == null){\r\n                this.stockOwnerObl = new ArrayList<>();\r\n            }\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cAuthorizedStockOwner authorizedStockOwner = new cAuthorizedStockOwner(jsonObject);\r\n                cStockOwner stockOwner = cStockOwner.pGetStockOwnerByCodeStr(authorizedStockOwner.getStockownerStr());\r\n                    this.stockOwnerObl.add(stockOwner);\r\n                    \r\n            }\r\n            return  true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static cBranch pGetBranchByDescriptionStr(String pvScannedBranchStr){\r\n\r\n        if (cBranch.allBranchesObl == null || cBranch.allBranchesObl.size() == 0 ) {\r\n            return  null;\r\n        }\r\n\r\n        for (cBranch branch : cBranch.allBranchesObl) {\r\n\r\n            if (branch.getBranchNameStr().equalsIgnoreCase(pvScannedBranchStr)) {\r\n                return branch;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cBranchReason pGetReasonByName(String pvReasonStr){\r\n        if(cUser.currentUser.currentBranch.returnReasonObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cBranchReason branchReason : cUser.currentUser.currentBranch.returnReasonObl)\r\n        {\r\n            if(branchReason.getReasonStr().equalsIgnoreCase(pvReasonStr)){\r\n                return  branchReason;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private cBranchBin mGetBinViaWebservice(String pvBinCodeStr) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetBinFromWebserviceWrs(pvBinCodeStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            if (WebResult.getResultDtt() != null && WebResult.getResultDtt().size() == 1) {\r\n                cBranchBin branchBin = new cBranchBin(WebResult.getResultDtt().get(0));\r\n                if (this.binsObl == null) {\r\n                    this.binsObl = new ArrayList<>();\r\n                }\r\n\r\n                this.binsObl.add(branchBin);\r\n                return  branchBin;\r\n            }\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSELOCATIONS);\r\n        }\r\n        return  null;\r\n    }\r\n    //End Region Private Methods\r\n}\r\n
----Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
----<+>UTF-8
----===================================================================
------- app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java	(revision 1c0b4132251ab66a445d9938c4b6f21c38dbfcd0)
----+++ app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java	(date 1614154486419)
----@@ -83,6 +83,7 @@
----     public  List<cBranchBin> receiveBinsObl;
----     public  List<cBranchBin> shipBinsObl;
---- 
----+    
----     public  static  boolean BranchesAvailableBln;
---- 
----        public enum brachTypeEnum {
---Index: .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml
---===================================================================
------ .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---@@ -1,4 +0,0 @@
----<changelist name="Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]" date="1615451853475" recycled="true" deleted="true">
----  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch" />
----  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11-3-2021 09:37 [Default Changelist]" />
----</changelist>
---\ No newline at end of file
---Index: app/src/main/AndroidManifest.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"nl.icsvertex.scansuite\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n\r\n    <application\r\n        android:name=\"ICS.cAppExtension\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"false\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        android:largeHeap=\"true\">\r\n        <provider\r\n            android:name=\".cGenericFileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n        <activity\r\n            android:name=\".Activities.General.MainDefaultActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.MenuActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.General.LoginActivity\"\r\n\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".Activities.General.BarcodeInfoActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.LoginActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderPickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLineItemPropertyInputActvity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Pick.CreatePickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderLinesGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderPickGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSortActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n        <activity android:name=\".Activities.Sort.SortorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShipLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.QualityControl.QualityControlLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.QualityControl.PickorderQCActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.CreateInventoryActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryArticleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Receive.CreateReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.CreateIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMASLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveOrderReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Returns.ReturnorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.CreateReturnActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnArticleDetailActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Move.MoveorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.CreateMoveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesPlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveMISinglepieceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveorderLinesPlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Packaging.PackagingActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.CreatePackAndShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSingleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipMultiActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n\r\n        <meta-data\r\n            android:name=\"io.fabric.ApiKey\"\r\n            android:value=\"0a3a15057e61fb1e84d5024bd01b5657d9a4c76e\" />\r\n    </application>\r\n\r\n</manifest>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/AndroidManifest.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/AndroidManifest.xml	(date 1617289926784)
---@@ -248,6 +248,12 @@
---             android:screenOrientation="portrait"
---             android:windowSoftInputMode="adjustPan">
---         </activity>
---+        <activity android:name=".Activities.Inventory.InventoryorderLineItemPropertyInputActvity"
---+            android:configChanges="keyboardHidden|orientation|screenSize"
---+            android:parentActivityName=".Activities.Inventory.InventoryArticleActivity"
---+            android:screenOrientation="portrait"
---+            android:windowSoftInputMode="adjustPan">
---+        </activity>
---         <activity
---             android:name=".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity"
---             android:configChanges="keyboardHidden|orientation|screenSize"
---@@ -533,9 +539,6 @@
---                 android:name="android.support.PARENT_ACTIVITY"
---                 android:value="nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity" />
---         </activity>
----
----
----
---         <meta-data
---             android:name="io.fabric.ApiKey"
---             android:value="0a3a15057e61fb1e84d5024bd01b5657d9a4c76e" />
---Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java	(date 1617290613930)
---+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java	(date 1617290613930)
---@@ -0,0 +1,509 @@
---+package nl.icsvertex.scansuite.Activities.Inventory;
---+
---+
---+import android.content.BroadcastReceiver;
---+import android.content.Context;
---+import android.content.Intent;
---+import android.content.IntentFilter;
---+import android.os.Bundle;
---+import android.view.MenuItem;
---+import android.view.View;
---+import android.widget.ImageView;
---+import android.widget.TextView;
---+
---+import androidx.appcompat.app.ActionBar;
---+import androidx.appcompat.app.AppCompatActivity;
---+import androidx.appcompat.widget.AppCompatImageButton;
---+import androidx.appcompat.widget.Toolbar;
---+import androidx.localbroadcastmanager.content.LocalBroadcastManager;
---+import androidx.recyclerview.widget.LinearLayoutManager;
---+import androidx.recyclerview.widget.RecyclerView;
---+
---+import java.util.ArrayList;
---+import java.util.Collections;
---+import java.util.List;
---+
---+import ICS.Interfaces.iICSDefaultActivity;
---+import ICS.Utils.Scanning.cBarcodeScan;
---+import ICS.Utils.cConnection;
---+import ICS.Utils.cRegex;
---+import ICS.Utils.cResult;
---+import ICS.Utils.cText;
---+import ICS.Utils.cUserInterface;
---+import ICS.cAppExtension;
---+import SSU_WHS.General.cPublicDefinitions;
---+import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
---+import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
---+import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
---+import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
---+import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
---+import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValueInputAdapter;
---+import nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;
---+import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
---+import nl.icsvertex.scansuite.R;
---+
---+public class InventoryorderLineItemPropertyInputActvity extends AppCompatActivity implements iICSDefaultActivity {
---+
---+   //Region Private Properties
---+   private  ImageView toolbarImage;
---+   private  TextView toolbarTitle;
---+
---+   private AppCompatImageButton imageButtonNoInputPropertys;
---+   private TextView articleDescriptionCompactText;
---+   private TextView articleDescription2CompactText;
---+   private TextView articleItemCompactText;
---+   private TextView articleBarcodeCompactText;
---+   private TextView quantityCompactText;
---+
---+    private  RecyclerView itemPropertyRecyclerview;
---+    private AppCompatImageButton imageButtonDone;
---+
---+    private  List<cInventoryorderLinePropertyValue> localItemPropertyValueObl (){
---+
---+        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
---+
---+        if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl() != null && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl() .size() > 0 ) {
---+            resultObl = cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl();
---+
---+            if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().get(0).getItemProperty().getUniqueBln()) {
---+                Collections.sort(resultObl);
---+                Collections.reverse(resultObl);
---+            }
---+
---+            return resultObl;
---+        }
---+
---+
---+        for (cInventoryorderLineProperty inputInventoryorderLineProperty : cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl()) {
---+            resultObl.add(new cInventoryorderLinePropertyValue(inputInventoryorderLineProperty));
---+        }
---+
---+        return resultObl;
---+
---+    }
---+
---+    public double getQuantityHandledDbl(){
---+
---+        double quantityDbl = 0;
---+
---+        if (this.localItemPropertyValueObl() == null || this.localItemPropertyValueObl().size() == 0) {
---+            return quantityDbl;
---+        }
---+
---+        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.localItemPropertyValueObl() ) {
---+            quantityDbl += inventoryorderLinePropertyValue.getQuantityDbl();
---+        }
---+
---+        return  quantityDbl;
---+
---+    }
---+
---+
---+
---+    private cInventoryorderLinePropertyValueInputAdapter inventoryorderLinePropertyValueInputAdapter;
---+    private cInventoryorderLinePropertyValueInputAdapter getInventoryorderLinePropertyValueInputAdapter (){
---+        if (this.inventoryorderLinePropertyValueInputAdapter == null) {
---+            this.inventoryorderLinePropertyValueInputAdapter = new cInventoryorderLinePropertyValueInputAdapter();
---+        }
---+
---+        return  inventoryorderLinePropertyValueInputAdapter;
---+    }
---+
---+    //End Region Private Properties
---+
---+
---+    //Region Constructor
---+    public InventoryorderLineItemPropertyInputActvity() {
---+
---+    }
---+
---+
---+    //End Region Constructor
---+
---+    //Region Default Methods
---+
---+    @Override
---+    protected void onCreate(Bundle pvSavedInstanceState) {
---+        super.onCreate(pvSavedInstanceState);
---+        setContentView(R.layout.activity_inventoryorderlineitemproperty_input);
---+        this.mActivityInitialize();
---+    }
---+
---+    @Override
---+    protected void onPostCreate(Bundle savedInstanceState) {
---+        super.onPostCreate(savedInstanceState);
---+
---+        //Set listeners here, so click listeners only work after activity is shown
---+        this.mSetListeners();
---+    }
---+
---+    @Override
---+    protected void onResume() {
---+        super.onResume();
---+        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));
---+        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());
---+        cConnection.pRegisterWifiChangedReceiver();
---+        cUserInterface.pEnableScanner();
---+    }
---+
---+    @Override
---+    protected void onPause() {
---+        try {
---+            LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);
---+            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());
---+            cConnection.pUnregisterWifiChangedReceiver();
---+        } catch (Exception e) {
---+            e.printStackTrace();
---+        }
---+        super.onPause();
---+    }
---+
---+    @Override
---+    protected void onDestroy() {
---+        super.onDestroy();
---+        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);
---+    }
---+
---+    @Override
---+    protected void onStop() {
---+        super.onStop();
---+        finish();
---+    }
---+
---+    @Override
---+    public boolean onOptionsItemSelected(MenuItem item) {
---+
---+        if (item.getItemId() == android.R.id.home) {
---+            this.mGoBackToArticleActivity(true);
---+            return true;
---+        }
---+
---+        return super.onOptionsItemSelected(item);
---+
---+    }
---+
---+    @Override
---+    public void onBackPressed() {
---+        mGoBackToArticleActivity(true);
---+    }
---+
---+    //End Region Default Methods
---+
---+    //Region iICSDefaultFragment methods
---+
---+    @Override
---+    public void mActivityInitialize() {
---+
---+        this.mSetAppExtensions();
---+
---+        this.mFindViews();
---+
---+        this.mSetToolbar(getResources().getString(R.string.screentitle_itemproperty_input));
---+
---+        this.mFieldsInitialize();
---+
---+        this.mInitScreen();
---+
---+        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());
---+    }
---+
---+    @Override
---+    public void mSetAppExtensions() {
---+        cAppExtension.context = this;
---+        cAppExtension.fragmentActivity  = this;
---+        cAppExtension.activity = this;
---+        cAppExtension.fragmentManager  = getSupportFragmentManager();
---+    }
---+
---+    @Override
---+    public void mFindViews() {
---+
---+            this.toolbarImage = findViewById(R.id.toolbarImage);
---+            this.toolbarTitle = findViewById(R.id.toolbarTitle);
---+
---+            this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);
---+            this.articleDescriptionCompactText = findViewById(R.id.articleDescriptionCompactText);
---+            this.articleDescription2CompactText = findViewById(R.id.articleDescription2CompactText);
---+            this.articleItemCompactText = findViewById(R.id.articleItemCompactText);
---+            this.articleBarcodeCompactText = findViewById(R.id.articleBarcodeCompactText);
---+            this.quantityCompactText = findViewById(R.id.quantityCompactText);
---+            this.itemPropertyRecyclerview = findViewById(R.id.itemPropertyRecyclerview);
---+            this.imageButtonDone = findViewById(R.id.imageButtonDone);
---+    }
---+
---+    @Override
---+    public void mSetToolbar(String pvScreenTitleStr) {
---+
---+        this.toolbarImage.setImageResource(R.drawable.ic_info);
---+        this.toolbarTitle.setText(pvScreenTitleStr);
---+        this.toolbarTitle.setSelected(true);
---+
---+        Toolbar toolbar = findViewById(R.id.toolbar);
---+        setSupportActionBar(toolbar);
---+        ActionBar actionBar = getSupportActionBar();
---+        if (actionBar != null) {
---+            actionBar.setDisplayHomeAsUpEnabled(true);
---+        }
---+    }
---+
---+    @Override
---+    public void mFieldsInitialize() {
---+        this.mSetItemPropertyValueRecycler();
---+        this.mSetArticleInfo();
---+        this.mSetQuantityText();
---+        this.mShowHideOKButton();
---+
---+
---+
---+    }
---+
---+    @Override
---+    public void mSetListeners() {
---+        this.mSetHeaderListener();
---+        this.mSetCloseListener();
---+    }
---+
---+    @Override
---+    public void mInitScreen() {
---+
---+    }
---+
---+    //End Regioni ICSDefaultFragment methods
---+
---+    //Region Public Methods
---+
---+    public void pHandleScan(cBarcodeScan pvBarcodeScan) {
---+
---+        if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().size() == 1) {
---+            cInventoryorderLineProperty.currentInventoryorderLineProperty = cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().get(0);
---+
---+            if (cInventoryorderLineProperty.currentInventoryorderLineProperty.getItemProperty()== null ) {
---+                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_unknown),"",true, true);
---+                return;
---+            }
---+
---+
---+            if (!cRegex.pCheckRegexBln( cInventoryorderLineProperty.currentInventoryorderLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {
---+                cUserInterface.pShowSnackbarMessage(this.itemPropertyRecyclerview,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);
---+                return;
---+            }
---+
---+
---+            //Check unique values if needed
---+            cResult hulpRst = cInventoryorderLineProperty.currentInventoryorderLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());
---+            if (!hulpRst.resultBln) {
---+                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),"",true, true);
---+                return;
---+            }
---+
---+            cInventoryorderLineProperty.currentInventoryorderLineProperty.pValueAdded(pvBarcodeScan.getBarcodeOriginalStr());
---+            cUserInterface.pShowSnackbarMessage(this.itemPropertyRecyclerview, pvBarcodeScan.getBarcodeOriginalStr() + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
---+            this.pTryToChangeCountedQuantity(true,false,1);
---+            this.pRefreshActivity();
---+        }
---+    }
---+
---+    public void pHandled() {
---+        InventoryArticleActivity.handledViaPropertysBln = true;
---+        this.mGoBackToArticleActivity(false);
---+    }
---+
---+    public void pRefreshActivity(){
---+        this.mSetItemPropertyValueRecycler();
---+        this.mSetQuantityText();
---+        this.mShowHideOKButton();
---+    }
---+
---+    public void pDeleteValueFromRecyler() {
---+        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.remove(cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue);
---+        cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = null;
---+    }
---+
---+    public void pShowNumericInputFragment() {
---+        mShowNumberPickerFragment();
---+    }
---+
---+    public void pShowTextInputFragment() {
---+        mShowTextInputFragment();
---+    }
---+
---+    //End Region Public Methods
---+
---+    //Region Private Methods
---+
---+    private void mSetCloseListener() {
---+        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {
---+            @Override
---+            public void onClick(View view) {
---+               pHandled();
---+            }
---+        });
---+    }
---+
---+    private void mSetHeaderListener() {
---+
---+        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {
---+            @Override
---+            public void onClick(View view) {
---+                mScrollToBottom();
---+            }
---+        });
---+
---+        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {
---+            @Override
---+            public boolean onLongClick(View view) {
---+                mScrollToTop();
---+                return true;
---+            }
---+        });
---+    }
---+
---+    private void mScrollToTop() {
---+        this.itemPropertyRecyclerview.smoothScrollToPosition(0);
---+    }
---+
---+    private void mScrollToBottom() {
---+        if (this.getInventoryorderLinePropertyValueInputAdapter()!= null) {
---+            if (this.getInventoryorderLinePropertyValueInputAdapter().getItemCount() > 0) {
---+                this.itemPropertyRecyclerview.smoothScrollToPosition(this.getInventoryorderLinePropertyValueInputAdapter().getItemCount() -1 );
---+            }
---+        }
---+    }
---+
---+    private void mSetItemPropertyValueRecycler() {
---+        this.itemPropertyRecyclerview.setHasFixedSize(false);
---+        this.itemPropertyRecyclerview.setAdapter(this.getInventoryorderLinePropertyValueInputAdapter());
---+        this.itemPropertyRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));
---+        this.getInventoryorderLinePropertyValueInputAdapter().pFillData(this.localItemPropertyValueObl());
---+    }
---+
---+    private void mSetArticleInfo(){
---+        this.articleDescriptionCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());
---+        this.articleDescription2CompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());
---+        this.articleItemCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());
---+        this.articleBarcodeCompactText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeAndQuantityStr());
---+        this.imageButtonNoInputPropertys.setVisibility(View.GONE);
---+
---+    }
---+
---+    private  void mSetQuantityText() {
---+        this.quantityCompactText.setText( cText.pDoubleToStringStr(this.getQuantityHandledDbl()));
---+    }
---+
---+    private  void mShowHideOKButton() {
---+
---+        if (this.getQuantityHandledDbl() == 0) {
---+            this.imageButtonDone.setVisibility(View.INVISIBLE);
---+            return;
---+        }
---+
---+        this.imageButtonDone.setVisibility(View.VISIBLE);
---+
---+    }
---+
---+
---+    public   void pTryToChangeCountedQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {
---+
---+        if (pvIsPositiveBln) {
---+
---+            //Determine the new amount
---+            if (pvAmountFixedBln) {
---+
---+                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),
---+                        cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );
---+
---+                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;
---+                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;
---+            } else {
---+                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;
---+                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;
---+            }
---+
---+            return;
---+        }
---+
---+        //negative
---+
---+        //Check if value already is zero
---+        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {
---+
---+            //If we have a decimal, correct it to zero
---+            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {
---+                pvAmountDbl = 0;
---+                pvAmountFixedBln = true;
---+
---+            } else {
---+                cUserInterface.pDoNope(this.quantityCompactText, true, true);
---+                return;
---+            }
---+        }
---+
---+        if (pvAmountDbl < 0) {
---+            cUserInterface.pDoNope(this.quantityCompactText, true, true);
---+            return;
---+        }
---+
---+        //Determine the new amount
---+        if (pvAmountFixedBln) {
---+            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;
---+            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;
---+        }else {
---+            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;
---+            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;
---+        }
---+
---+    }
---+
---+    private void mShowNumberPickerFragment() {
---+
---+        cUserInterface.pCheckAndCloseOpenDialogs();
---+
---+        Bundle bundle = new Bundle();
---+        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, (int) cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.getQuantityDbl());
---+
---+
---+
---+        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, 99999);
---+        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();
---+        numberpickerFragment.setArguments(bundle);
---+        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERFRAGMENT_TAG);
---+    }
---+
---+    private void mShowTextInputFragment() {
---+        cUserInterface.pCheckAndCloseOpenDialogs();
---+        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment();
---+        itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);
---+    }
---+
---+    private  void mGoBackToArticleActivity(Boolean pvCancelledBln) {
---+
---+        Intent intent = new Intent(cAppExtension.context, InventoryArticleActivity.class);
---+        InventoryArticleActivity.cancelledViaPropertysBln = pvCancelledBln;
---+        cAppExtension.activity.startActivity(intent);
---+        cAppExtension.activity.finish();
---+    }
---+
---+    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {
---+        @Override
---+        public void onReceive(Context context, Intent intent) {
---+            int numberChosenInt = 0;
---+            Bundle extras = intent.getExtras();
---+
---+            if (extras != null) {
---+                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);
---+            }
---+            mHandleQuantityChosen(numberChosenInt);
---+        }
---+    };
---+
---+    private void mHandleQuantityChosen(double pvQuantityDbl) {
---+        this.pTryToChangeCountedQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);
---+        this.pRefreshActivity();
---+    }
---+
---+
---+
---+
---+
---+    //End Region Private Methods
---+}
---Index: app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617287800334)
---+++ app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617287800334)
---@@ -0,0 +1,34 @@
---+<?xml version="1.0" encoding="utf-8"?>
---+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
---+    xmlns:app="http://schemas.android.com/apk/res-auto"
---+    xmlns:tools="http://schemas.android.com/tools"
---+    android:id="@+id/inventoryorderlineItemPropertyInputContainer"
---+    tools:context=".Activities.Inventory.InventoryorderLineItemPropertyInputActvity"
---+    style="@style/defaultScreen"
---+    android:background="@color/colorBart">
---+    <include layout="@layout/toolbar_default" />
---+    <include layout="@layout/default_articleinfo_compact"
---+        android:layout_width="match_parent"
---+        android:layout_height="0dp"
---+        android:layout_margin="@dimen/default_margin"
---+        app:layout_constraintTop_toBottomOf="@id/toolbar"
---+        />
---+    <androidx.recyclerview.widget.RecyclerView
---+        android:id="@+id/itemPropertyRecyclerview"
---+        android:layout_width="match_parent"
---+        android:layout_height="0dp"
---+        android:layout_margin="@dimen/default_margin"
---+        android:scrollbars="vertical"
---+        app:layout_constraintTop_toBottomOf="@id/articleInfoCompactContainer"
---+        app:layout_constraintEnd_toEndOf="parent"
---+        app:layout_constraintStart_toStartOf="parent"
---+        app:layout_constraintBottom_toTopOf="@id/imageButtonDone"
---+        />
---+    <androidx.appcompat.widget.AppCompatImageButton
---+        android:id="@+id/imageButtonDone"
---+        style="@style/smallButton"
---+        app:srcCompat="@drawable/ic_check_black_24dp"
---+        app:layout_constraintEnd_toEndOf="parent"
---+        app:layout_constraintBottom_toBottomOf="parent"
---+        />
---+</androidx.constraintlayout.widget.ConstraintLayout>
---\ No newline at end of file
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDateAndTime;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cInventoryorderRepository {\r\n    //Region Public Properties\r\n    private final iInventoryorderDao inventoryorderDao;\r\n    private final iInventoryorderBinDao inventoryorderBinDao;\r\n\r\n    private static class InventoryCreateParams {\r\n        String documentStr;\r\n        boolean checkBarcodesBln;\r\n\r\n        InventoryCreateParams(String pvDocumentStr, boolean pvCheckBarcodesBln ) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = pvCheckBarcodesBln;\r\n        }\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    cInventoryorderRepository(Application pvApplication) {\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.inventoryorderDao = db.inventoryorderDao();\r\n        this.inventoryorderBinDao = db.inventoryorderBinDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Order\r\n\r\n    public void insert (cInventoryorderEntity inventoryorderEntity) {\r\n        new mInsertAsyncTask(inventoryorderDao).execute(inventoryorderEntity);\r\n    }\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryOrderEntities) {\r\n        new mInsertAllAsyncTask(inventoryorderDao).execute(pvInventoryOrderEntities);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(inventoryorderDao).execute();\r\n    }\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        InventoryCreateParams inventoryCreateParams = new InventoryCreateParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        try {\r\n            webResultWrs = new mCreateInventoryOrderViaWebserviceAsyncTask().execute(inventoryCreateParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetInventoryordersFromWebserviceAsyncTask().execute(pvSearchTextStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cInventoryorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder( \"SELECT * FROM \" + cDatabase.TABLENAME_INVENTORYORDER);\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) \");\r\n            }\r\n        }\r\n\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Opdrachtnummer ASC\");\r\n\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new cInventoryorderRepository.mGetInventoriesFromDatabaseWithFilterAsyncTask(inventoryorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pHandledViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderHandledViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Lines\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderAddLineViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region BINS\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPossibleBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinAddViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinCloseViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinNotDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinTotalFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new pGetInventoryorderBinTotalFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    //Region Items\r\n\r\n    public cWebresult pAddUnkownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderUnknownItemAddViaWebserviceAsyncTask().execute(pvBarcodeScan).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderERPItemAddViaWebserviceAsyncTask().execute(pvArticleBarcode).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Line Barcodes\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLineBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Barcodes\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Comments\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Endregion Public Methods\r\n\r\n    //Region Orders\r\n    private static class mInsertAsyncTask extends AsyncTask<cInventoryorderEntity, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cInventoryorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAllAsyncTask extends AsyncTask<List<cInventoryorderEntity>, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @SafeVarargs\r\n        @Override\r\n        protected final Void doInBackground(final List<cInventoryorderEntity>... params) {\r\n            mAsyncTaskDao.insertAll(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mCreateInventoryOrderViaWebserviceAsyncTask extends AsyncTask<InventoryCreateParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(InventoryCreateParams... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.IVS.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_INVENTORYBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                new cWebresult();\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryordersFromWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            try {\r\n                new cWebresult();\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoriesFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cInventoryorderEntity>> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mGetInventoriesFromDatabaseWithFilterAsyncTask(iInventoryorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cInventoryorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredInventoryOrders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderHandledViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(cWarehouseorder.WorkflowInventoryStepEnu.InventoryHandled);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYHANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Lines\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetLineBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderAddLineViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo6Pin.setValue(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo7Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo8Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region BINS\r\n    private static class mGetBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPossibleBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERPOSSIBLEBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinNotDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinNotDone();\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinDone();\r\n        }\r\n    }\r\n\r\n    private static class pGetInventoryorderBinTotalFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        pGetInventoryorderBinTotalFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinTotal();\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinAddViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODE;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADD_BIN, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinCloseViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo4Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo5Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBINCLOSE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Items\r\n    private static class mInventoryorderUnknownItemAddViaWebserviceAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cBarcodeScan... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(\"UNKNOWN\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorder.currentInventoryOrder.getUnknownVariantCounterInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeOriginalStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(cText.pStringToIntegerInt(params[0].getBarcodeTypeStr()));\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(false);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(1);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(\"???\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderERPItemAddViaWebserviceAsyncTask extends AsyncTask<cArticleBarcode, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cArticleBarcode... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cArticle.currentArticle.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cArticle.currentArticle.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(params[0].getBarcodeTypeInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(params[0].isUniqueBarcodeBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].getQuantityPerUnitOfMeasureDbl());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(params[0].getUnitOfMeasureStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Barcodes\r\n    private static class mGetBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Comments\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(date 1617285222001)
---@@ -29,6 +29,8 @@
--- import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
--- import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;
--- import SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;
---+import SSU_WHS.Picken.Pickorders.cPickorder;
---+import SSU_WHS.Picken.Pickorders.cPickorderRepository;
--- import SSU_WHS.Webservice.cWebresult;
--- import SSU_WHS.Webservice.cWebserviceDefinitions;
--- import nl.icsvertex.scansuite.R;
---@@ -439,6 +441,41 @@
---         return webResultWrs;
---     }
--- 
---+    //Region Propertys
---+    public cWebresult pGetLinePropertysViaWebserviceWrs() {
---+
---+        List<String> resultObl = new ArrayList<>();
---+        cWebresult webResultWrs = new cWebresult();
---+
---+        try {
---+            webResultWrs = new cInventoryorderRepository.mGetPropertysViaWebserviceAsyncTask().execute().get();
---+        } catch (ExecutionException | InterruptedException e) {
---+            webResultWrs.setResultBln(false);
---+            webResultWrs.setSuccessBln(false);
---+            resultObl.add(e.getLocalizedMessage());
---+            webResultWrs.setResultObl(resultObl);
---+            e.printStackTrace();
---+        }
---+        return webResultWrs;
---+    }
---+
---+    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {
---+
---+        List<String> resultObl = new ArrayList<>();
---+        cWebresult webResultWrs = new cWebresult();
---+
---+        try {
---+            webResultWrs = new cInventoryorderRepository.mGetPropertyValuesViaWebserviceAsyncTask().execute().get();
---+        } catch (ExecutionException | InterruptedException e) {
---+            webResultWrs.setResultBln(false);
---+            webResultWrs.setSuccessBln(false);
---+            resultObl.add(e.getLocalizedMessage());
---+            webResultWrs.setResultObl(resultObl);
---+            e.printStackTrace();
---+        }
---+        return webResultWrs;
---+    }
---+
---     //Endregion Public Methods
--- 
---     //Region Orders
---@@ -1142,4 +1179,68 @@
---         }
---     }
--- 
---+    //Region Properties
---+    //Region Propertys
---+    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
---+        @Override
---+        protected cWebresult doInBackground(String... params) {
---+            cWebresult webresult = new cWebresult();
---+            try {
---+                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
---+
---+                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
---+                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
---+                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
---+                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
---+
---+                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
---+                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
---+                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
---+                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
---+
---+                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
---+                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
---+                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
---+                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
---+
---+                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);
---+            } catch (JSONException e) {
---+                webresult.setSuccessBln(false);
---+                webresult.setResultBln(false);
---+            }
---+            return webresult;
---+        }
---+    }
---+
---+    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
---+        @Override
---+        protected cWebresult doInBackground(String... params) {
---+            cWebresult webresult = new cWebresult();
---+            try {
---+                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
---+
---+                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
---+                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
---+                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
---+                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
---+
---+                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
---+                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
---+                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
---+                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
---+
---+                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
---+                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
---+                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
---+                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
---+
---+                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);
---+            } catch (JSONException e) {
---+                webresult.setSuccessBln(false);
---+                webresult.setResultBln(false);
---+            }
---+            return webresult;
---+        }
---+    }
---+
--- }
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class cInventoryorder {\r\n\r\n    private final String orderNumberStr;\r\n    public String getOrderNumberStr() {\r\n        return orderNumberStr;\r\n    }\r\n\r\n    private final String orderTypeStr;\r\n    public String getOrderTypeStr() {\r\n        return orderTypeStr;\r\n    }\r\n\r\n    private final int numberOfBinsInt;\r\n    public int getNumberOfBinsInt() {\r\n        return numberOfBinsInt;\r\n    }\r\n\r\n    private final String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {\r\n        return assignedUserIdStr;\r\n    }\r\n\r\n    private final String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {\r\n        return currentUserIdStr;\r\n    }\r\n\r\n    private String stockownerStr;\r\n    public String getStockownerStr() {\r\n        return stockownerStr;\r\n    }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() {\r\n        return statusInt;\r\n    }\r\n\r\n    private final boolean invAmountManualBln;\r\n    public boolean isInvAmountManualBln() {\r\n        return invAmountManualBln;\r\n    }\r\n\r\n    private final boolean invBarcodeCheckBln;\r\n    public boolean isInvBarcodeCheckBln() {\r\n        return invBarcodeCheckBln;\r\n    }\r\n\r\n    private final boolean invAddExtraBinBln;\r\n    public boolean isInvAddExtraBinBln() {\r\n        return invAddExtraBinBln;\r\n    }\r\n\r\n    private final String externalReferenceStr;\r\n    public String getExternalReferenceStr() {\r\n        return externalReferenceStr;\r\n    }\r\n\r\n    private final int sourceDocumentInt;\r\n    private int getSourceDocumentInt() { return sourceDocumentInt; }\r\n\r\n    private final String documentStr;\r\n    public String getDocumentStr() {\r\n        return documentStr;\r\n    }\r\n\r\n    private final boolean inventoryWithPictureBln;\r\n    public boolean isInventoryWithPictureBln() {\r\n        return inventoryWithPictureBln;\r\n    }\r\n\r\n    private final boolean inventoryWithPicturePrefetchBln;\r\n    private boolean isInventoryWithPicturePrefetchBln() {\r\n        return inventoryWithPicturePrefetchBln;\r\n    }\r\n\r\n    public Boolean isGeneratedBln() {\r\n        return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n    }\r\n\r\n    public int unknownVariantCounterInt = 0;\r\n    public int getUnknownVariantCounterInt() {\r\n        return unknownVariantCounterInt;\r\n    }\r\n\r\n    private final cInventoryorderEntity inventoryorderEntity;\r\n\r\n    private cInventoryorderViewModel getInventoryorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n    }\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    public List<cComment> commentsObl() {\r\n        return cComment.allCommentsObl;\r\n    }\r\n    public List<cInventoryorderBarcode> barcodesObl () {return  cInventoryorderBarcode.allInventoryorderBarcodesObl;}\r\n    private List<cInventoryorderLine> linesObl() {return  cInventoryorderLine.allLinesObl;}\r\n    private List<cArticleImage> imagesObl()  {\r\n        return  cArticleImage.allImages;\r\n    }\r\n\r\n    private static List<cInventoryorder> allCachedOrdersObl;\r\n    public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){\r\n\r\n        if (pvRefreshBln) {\r\n             cInventoryorder.allCachedOrdersObl = null;\r\n        }\r\n\r\n        if (cInventoryorder.allCachedOrdersObl != null) {\r\n            return  cInventoryorder.allCachedOrdersObl;\r\n        }\r\n\r\n        cInventoryorder.allCachedOrdersObl  = new ArrayList<>();\r\n\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        List<cInventoryorderEntity> hulpObl  =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), false);\r\n\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpObl) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            cInventoryorder.allCachedOrdersObl.add(inventoryorder);\r\n        }\r\n\r\n        return  cInventoryorder.allCachedOrdersObl;\r\n\r\n\r\n    }\r\n\r\n    private static List<String> binsObl;\r\n\r\n    public static cInventoryorder currentInventoryOrder;\r\n\r\n    //Region Public Properties\r\n\r\n    //Region Constructor\r\n\r\n    public cInventoryorder(JSONObject pvJsonObject) {\r\n\r\n        this.inventoryorderEntity = new cInventoryorderEntity(pvJsonObject);\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr()) ;\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n    }\r\n\r\n    public cInventoryorder(cInventoryorderEntity pvInventoryorderEntity) {\r\n\r\n        this.inventoryorderEntity = pvInventoryorderEntity;\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt =  cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr());\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Orders\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderViewModel().insert(this.inventoryorderEntity);\r\n        return true;\r\n    }\r\n\r\n    public static Boolean pCreateInventoryOrderViaWebserviceBln(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        cWebresult WebResult;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(WebResult.getResultDtt().get(0));\r\n                inventoryorder.pInsertInDatabaseBln();\r\n                cInventoryorder.currentInventoryOrder = inventoryorder;\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS);\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static boolean pGetInventoryOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorder.mTruncateTable();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            List<cInventoryorderEntity> insertObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(jsonObject);\r\n                insertObl.add(inventoryorder.inventoryorderEntity);\r\n            }\r\n\r\n            //Batch insert in database\r\n            cInventoryorder.mInsertAllInDatabase(insertObl);\r\n\r\n            //Make sure memory is filled\r\n            cInventoryorder.allInventoryOrdersObl(true);\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS);\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n            ignoreBusyBln = true;\r\n        }\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(),\r\n                this.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvStepCodeEnu.toString(),\r\n                pvWorkFlowStepInt,\r\n                ignoreBusyBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() > 0 && ! Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getUsernameStr())) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln()&& Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        cWebresult Webresult;\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvStepCodeEnu.toString(), pvWorkFlowStepInt);\r\n\r\n        return Webresult.getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n    public void pDeleteDetails() {\r\n        cInventoryorderLine.pTruncateTableBln();\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorderBarcode.pTruncateTableBln();\r\n        cInventoryorderLineBarcode.pTruncateTableBln();\r\n    }\r\n\r\n    public cResult pOrderHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n\r\n        cWebresult webresult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        webresult =  inventoryorderViewModel.pHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n\r\n    }\r\n\r\n    public static List<cInventoryorder> pGetInventoriesWithFilterFromDatabasObl() {\r\n\r\n        List<cInventoryorder> resultObl = new ArrayList<>();\r\n        List<cInventoryorderEntity> hulpResultObl;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        hulpResultObl =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpResultObl ) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            resultObl.add(inventoryorder);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public  boolean pCheckBarcodeWithLineBarcodesBln(cBarcodeScan pvBarcodeScan){\r\n\r\n        //If scanned value matches the current barcodeStr, then we have a match\r\n        if (pvBarcodeScan.getBarcodeOriginalStr().equalsIgnoreCase(cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr()) ||\r\n            pvBarcodeScan.getBarcodeFormattedStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeWithoutCheckDigitStr()) ) {\r\n            //We have a match, so leave\r\n            return  true;\r\n        }\r\n\r\n        //Check if this is a barcodeStr we already know\r\n        cInventoryorderBarcode inventoryorderBarcode = cInventoryorder.currentInventoryOrder.pGetOrderBarcode(pvBarcodeScan);\r\n\r\n        //We scanned a barcodeStr unknown to the order\r\n        if (inventoryorderBarcode == null) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr for a different article\r\n        if (!inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) ||\r\n            ! inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLine.currentInventoryOrderLine.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode = inventoryorderLineBarcode;\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        //Scanned barcodeStr is correct, but we need to create a line barcodeStr\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode =  cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(inventoryorderBarcode.getBarcodeStr(),inventoryorderBarcode.getQuantityPerUnitOfMeasureDbl(), true);\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n        return  true;\r\n\r\n    }\r\n\r\n    private static  void mTruncateTable() {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.deleteAll();\r\n    }\r\n\r\n    //End Region Orders\r\n\r\n    //Region Lines\r\n\r\n    public boolean pGetLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderLine.allLinesObl = null;\r\n            cInventoryorderLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n\r\n        WebResult = getInventoryorderViewModel().pGetLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderLine.allLinesObl == null) {\r\n                cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderLineEntity> importObl = new ArrayList<>();\r\n            List<cInventoryorderLine> objectObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cInventoryorderLine inventoryorderLine = new cInventoryorderLine(jsonObject);\r\n\r\n                if (inventoryorderLine.getQuantityHandledAllScannersDbl() > inventoryorderLine.getQuantityDbl()) {\r\n                    inventoryorderLine.quantityHandledDbl = inventoryorderLine.getQuantityHandledAllScannersDbl();\r\n                }\r\n\r\n\r\n                importObl.add(inventoryorderLine.inventoryorderLineEntity);\r\n                objectObl.add((inventoryorderLine));\r\n\r\n                if (! inventoryorderLine.getHandeledTimeStampStr().isEmpty()) {\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin  =   cInventoryorder.currentInventoryOrder.pGetBin(inventoryorderLine.getBinCodeStr());\r\n                    if ( cInventoryorderBin.currentInventoryOrderBin == null) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                        cInventoryorderBin.currentInventoryOrderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.InventoryDone;\r\n                    }\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin.pUpdateStatusAndTimeStampInDatabase();\r\n                    cInventoryorderBin.currentInventoryOrderBin = null;\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderLine.pInsertAllInDatabase(objectObl,importObl);\r\n\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddLineBln() {\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pAddLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderLine.currentInventoryOrderLine= new cInventoryorderLine(WebResult.getResultDtt().get(0));\r\n                cInventoryorderLine.currentInventoryOrderLine.pInsertInDatabaseBln();\r\n                cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr(),cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl(), false);\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public List<cInventoryorderLine> pGetLinesForBinObl(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderLine> resultObl = new ArrayList<>();\r\n        for (cInventoryorderLine inventoryorderLine : cInventoryorder.currentInventoryOrder.linesObl()) {\r\n            if (inventoryorderLine.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                resultObl.add((inventoryorderLine));\r\n            }\r\n        }\r\n\r\n        if (resultObl.size() > 1) {\r\n            Collections.reverse(resultObl);\r\n        }\r\n\r\n        return resultObl;\r\n    }\r\n\r\n    public Double pGetTotalItemCountDbl() {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetTotalCountDbl();\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetItemCountForBinDbl(String pvBincodeStr) {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetCountForBinCodeDbl(pvBincodeStr);\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public cInventoryorderLine pGetLineForArticleAndBin() {\r\n\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            //Check if BIN matches current BIN\r\n            if (! inventoryorderLine.getBinCodeStr().equalsIgnoreCase(   cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr())) {\r\n                continue;\r\n            }\r\n\r\n            //Check if item matches scanned item\r\n            if (inventoryorderLine.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) &&\r\n                    inventoryorderLine.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n                return  inventoryorderLine;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pGetOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all bins for current order, if webservice error then stop\r\n        if (!this.mGetBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.pGetLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_lines_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.mGetPossibleBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_possible_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!this.pGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all barcodes\r\n        if (!this.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all inventorylinebarcodes\r\n        if (!this.mGetLineBarcodesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all article images, only if neccesary\r\n        if (!this.mGetArticleImagesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    private cInventoryorderLine mGetLineWithLineNo(Long pvLineNoLng) {\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            if (cText.pIntToStringStr(inventoryorderLine.getLineNoInt()).equalsIgnoreCase(cText.pLongToStringStr(pvLineNoLng))) {\r\n                return  inventoryorderLine;\r\n            }\r\n\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Lines\r\n\r\n    //Region BINS\r\n\r\n    private boolean mGetBinsViaWebserviceBln() {\r\n\r\n        cInventoryorderBin.allInventoryorderBinsObl = null;\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorder.binsObl = new ArrayList<>();\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            List<cInventoryorderBinEntity> insertObl = new ArrayList<>();\r\n            List<cInventoryorderBin> closedBinsObl = new ArrayList<>();\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n\r\n                insertObl.add(inventoryorderBin.inventoryorderBinEntity);\r\n\r\n                if (inventoryorderBin.getStatusInt() ==  cWarehouseorder.InventoryBinStatusEnu.InventoryDoneOnServer && !cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                    closedBinsObl.add(inventoryorderBin);\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderBin.pInsertAllInDatabase(insertObl);\r\n\r\n            //Close all BINS in database after they got inserted\r\n            for (cInventoryorderBin inventoryorderBin : closedBinsObl) {\r\n                inventoryorderBin.pCloseBln(false);\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetPossibleBinsViaWebserviceBln() {\r\n\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetPossibleBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n\r\n                if (cInventoryorder.binsObl.contains(inventoryorderBin.getBinCodeStr())) {\r\n                    continue;\r\n                }\r\n\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n                inventoryorderBin.pInsertInDatabaseBln();\r\n                inventoryorderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.New;\r\n                inventoryorderBin.pUpdateStatusAndTimeStampInDatabase();\r\n\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsNotDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsNotDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsTotalFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsTotalFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public cInventoryorderBin pGetBin(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderBin> hulpObl;\r\n\r\n        hulpObl = this.pGetBinsTotalFromDatabasObl();\r\n\r\n        if (hulpObl == null || hulpObl.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        for (cInventoryorderBin inventoryorderBin : hulpObl) {\r\n            if (inventoryorderBin.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                return  inventoryorderBin;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cInventoryorderBin pAddInventoryBin(cBranchBin pvBranchBin) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddBinViaWebserviceWrs(pvBranchBin.getBinCodeStr());\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBin InventoryorderBin = new cInventoryorderBin(WebResult.getResultDtt().get(0));\r\n                InventoryorderBin.pInsertInDatabaseBln();\r\n                return  InventoryorderBin;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  null;\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    //End Region BINS\r\n\r\n    //Region Barcodes\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderBarcode.allInventoryorderBarcodesObl = null;\r\n            cInventoryorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pGetBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln() ){\r\n\r\n            if (cInventoryorderBarcode.allInventoryorderBarcodesObl == null) {\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderBarcodeEntity> inventoryorderEntities = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject :WebResult.getResultDtt() ) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(jsonObject);\r\n                inventoryorderEntities.add(inventoryorderBarcode.inventoryorderBarcodeEntity);\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl.add(inventoryorderBarcode);\r\n            }\r\n\r\n            cInventoryorderBarcode.pInsertAllInDatabase(inventoryorderEntities);\r\n            return true;\r\n        }\r\n\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddUnkownBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cInventoryorder.currentInventoryOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(WebResult.getResultDtt().get(0));\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if (cArticle.currentArticle == null) {\r\n            return false;\r\n        }\r\n\r\n        //Get barcodes for this article\r\n        if (!cArticle.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        //Search for the scanned barcodeStr in the article barcodes\r\n        cArticleBarcode matchedArticleBarcode = null;\r\n        for (cArticleBarcode articleBarcode : cArticle.currentArticle.barcodesObl) {\r\n            if (articleBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    articleBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                matchedArticleBarcode = articleBarcode;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //We didn't find a match, so no use in adding the line\r\n        if (matchedArticleBarcode == null) {\r\n            return  false;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddERPItemViaWebserviceWrs(matchedArticleBarcode);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            for (cArticleBarcode articleBarcode :  cArticle.currentArticle.barcodesObl) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(articleBarcode);\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n\r\n                if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                        inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                    cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Barcodes\r\n\r\n    //Region Line Barcode\r\n\r\n    private boolean mGetLineBarcodesViaWebserviceBln() {\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = null;\r\n            cInventoryorderLineBarcode.pTruncateTableBln();\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pGetLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<cInventoryorderLineBarcodeEntity> insertObl = new ArrayList<>();\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode(jsonObject);\r\n                insertObl.add((inventoryorderLineBarcode.inventoryorderLineBarcodeEntity));\r\n\r\n                //Search for line that belongs to this barcodeStr\r\n                cInventoryorderLine inventoryorderLine = cInventoryorder.currentInventoryOrder.mGetLineWithLineNo(inventoryorderLineBarcode.getLineNoLng());\r\n\r\n                //If we can't find it, skip this\r\n                if (inventoryorderLine == null) {\r\n                    continue;\r\n                }\r\n\r\n                //Add barcodeStr to line\r\n                inventoryorderLine.pAddLineBarcode(inventoryorderLineBarcode.getBarcodeStr(),inventoryorderLineBarcode.getQuantityhandledDbl(), false);\r\n\r\n            }\r\n\r\n            cInventoryorderLineBarcode.pInsertAllInDatabase(insertObl);\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Line Barcode\r\n\r\n    //Region Barcode\r\n\r\n    public cInventoryorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderBarcode inventoryorderBarcode : this.barcodesObl()) {\r\n\r\n            if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr())) {\r\n                return  inventoryorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Barcode\r\n\r\n    //Region Images\r\n\r\n    private boolean mGetArticleImagesViaWebserviceBln() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()  || !cInventoryorder.currentInventoryOrder.isInventoryWithPicturePrefetchBln()) {\r\n            return  true;\r\n        }\r\n\r\n\r\n            cArticleImage.allImages = null;\r\n            cArticleImage.pTruncateTableBln();\r\n\r\n\r\n        if (this.imagesObl()  != null) {\r\n            return  true;\r\n        }\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  false;\r\n        }\r\n\r\n        List<String> itemNoAndVariantCodeObl;\r\n        itemNoAndVariantCodeObl = new ArrayList<>();\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n            String itemNoAndVariantCodeStr = inventoryorderLine.getItemNoStr() + \";\" + inventoryorderLine.getVariantCodeStr();\r\n\r\n            if (!itemNoAndVariantCodeObl.contains(itemNoAndVariantCodeStr)) {\r\n                itemNoAndVariantCodeObl.add(itemNoAndVariantCodeStr);\r\n            }\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        WebResult =  articleImageViewModel.pGetArticleImagesFromWebserviceWrs(itemNoAndVariantCodeObl);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            cArticleImage.allImages = new ArrayList<>();\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cArticleImage articleImage = new cArticleImage(jsonObject);\r\n\r\n                if ( !cArticleImage.allImages.contains(articleImage)) {\r\n                    articleImage.pInsertInDatabaseBln();\r\n                    cArticleImage.allImages.add((articleImage));\r\n                }\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEIMAGESMULTIPLE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    //End Region Images\r\n\r\n    //Region Comments\r\n\r\n    public boolean pGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n        cWebresult webresult;\r\n        webresult = getInventoryorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln()&& webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            List<JSONObject> myList = webresult.getResultDtt();\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (cInventoryorder.currentInventoryOrder.commentsObl() == null || cInventoryorder.currentInventoryOrder.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    private static  void mInsertAllInDatabase(List<cInventoryorderEntity> pvInventoryOrderEntityObl ) {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.insertAll (pvInventoryOrderEntityObl);\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n        for (JSONObject jsonObject : pvResultDtt) {\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //End Region Comments\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(date 1617287546910)
---@@ -2,10 +2,12 @@
--- 
--- import androidx.lifecycle.ViewModelProvider;
--- 
---+import org.json.JSONException;
--- import org.json.JSONObject;
--- 
--- import java.util.ArrayList;
--- import java.util.Collections;
---+import java.util.LinkedHashMap;
--- import java.util.List;
--- 
--- import ICS.Utils.Scanning.cBarcodeScan;
---@@ -20,10 +22,13 @@
--- import SSU_WHS.Basics.ArticleImages.cArticleImage;
--- import SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;
--- import SSU_WHS.Basics.BranchBin.cBranchBin;
---+import SSU_WHS.Basics.PropertyGroup.cPropertyGroup;
---+import SSU_WHS.Basics.PropertyGroup.cPropertyGroupViewModel;
--- import SSU_WHS.Basics.Users.cUser;
--- import SSU_WHS.General.Comments.cComment;
--- import SSU_WHS.General.Warehouseorder.cWarehouseorder;
--- import SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;
---+import SSU_WHS.General.cDatabase;
--- import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
--- import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;
--- import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
---@@ -33,6 +38,10 @@
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;
---+import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
---+import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
---+import SSU_WHS.Picken.PickorderLineProperty.cPickorderLineProperty;
---+import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValue;
--- import SSU_WHS.Webservice.cWebresult;
--- import SSU_WHS.Webservice.cWebserviceDefinitions;
--- import nl.icsvertex.scansuite.R;
---@@ -122,6 +131,7 @@
---         return unknownVariantCounterInt;
---     }
--- 
---+    public  LinkedHashMap<Integer, List<JSONObject>>  itemProperyDataObl;
---     private final cInventoryorderEntity inventoryorderEntity;
--- 
---     private cInventoryorderViewModel getInventoryorderViewModel() {
---@@ -140,6 +150,7 @@
---     private List<cArticleImage> imagesObl()  {
---         return  cArticleImage.allImages;
---     }
---+    public List<cInventoryorderLineProperty> linePropertysObl() { return  cInventoryorderLineProperty.allLinePropertysObl; }
--- 
---     private static List<cInventoryorder> allCachedOrdersObl;
---     public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){
---@@ -736,6 +747,20 @@
---             result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));
---             return result;
---         }
---+
---+        // Get all propertys, if webservice error then stop
---+        if (!this.mGetLinePropertysViaWebserviceBln( )) {
---+            result.resultBln = false;
---+            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));
---+            return result;
---+        }
---+
---+        // Get all property values, if webservice error then stop
---+        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {
---+            result.resultBln = false;
---+            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));
---+            return result;
---+        }
--- 
---         return  result;
---     }
---@@ -1236,6 +1261,52 @@
--- 
---     }
--- 
---+    //Properties
---+    private boolean mGetLinePropertysViaWebserviceBln() {
---+
---+        cInventoryorderLineProperty.allLinePropertysObl = null;
---+        cInventoryorderLineProperty.pTruncateTableBln();
---+
---+        cWebresult WebResult;
---+        WebResult =  this.getInventoryorderViewModel().pGetLinePropertysViaWebserviceWrs();
---+        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
---+
---+            for (JSONObject jsonObject : WebResult.getResultDtt()) {
---+                cInventoryorderLineProperty inventoryorderLineProperty = new cInventoryorderLineProperty(jsonObject);
---+                inventoryorderLineProperty.pInsertInDatabaseBln();
---+            }
---+
---+            return  true;
---+        }
---+        else {
---+            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET);
---+            return  false;
---+        }
---+    }
---+
---+    private boolean mGetLinePropertyValuesViaWebserviceBln() {
---+
---+
---+        cPickorderLinePropertyValue.allLinePropertysValuesObl = null;
---+        cPickorderLinePropertyValue.pTruncateTableBln();
---+
---+        cWebresult WebResult;
---+        WebResult =  this.getInventoryorderViewModel().pGetLinePropertyValuesViaWebserviceWrs();
---+        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
---+
---+            for (JSONObject jsonObject : WebResult.getResultDtt()) {
---+                cInventoryorderLinePropertyValue inventoryorderLinePropertyValue = new cInventoryorderLinePropertyValue(jsonObject);
---+                inventoryorderLinePropertyValue.pInsertInDatabaseBln();
---+            }
---+
---+            return  true;
---+        }
---+        else {
---+            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET);
---+            return  false;
---+        }
---+    }
---+
---     //End Region Comments
--- 
--- }
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.lifecycle.AndroidViewModel;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Webservice.cWebresult;\r\n\r\npublic class cInventoryorderViewModel extends AndroidViewModel {\r\n    //Region Public Properties\r\n    private cInventoryorderRepository Repository;\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderViewModel(Application pvApplication) {\r\n        super(pvApplication);\r\n        this.Repository = new cInventoryorderRepository(pvApplication);\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n    public void insert(cInventoryorderEntity pvInventoryorderEntity) {this.Repository.insert(pvInventoryorderEntity);}\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryorderEntities) {this.Repository.insertAll(pvInventoryorderEntities);}\r\n\r\n    public void deleteAll() {this.Repository.deleteAll();}\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {return this.Repository.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);}\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {return this.Repository.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);}\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesWithFilterFromDatabaseObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {return this.Repository.pGetInventoriesFromDatabaseWithFilterObl(pvCurrentUserStr, pvUseFiltersBln);}\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pAddBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pCloseBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pAddUnknownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {return this.Repository.pAddUnkownItemViaWebserviceWrs(pvBarcodeScan);}\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {return this.Repository.pAddERPItemViaWebserviceWrs(pvArticleBarcode);}\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {return this.Repository.pAddLineViaWebserviceWrs();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsNotDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinNotDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsTotalFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinTotalFromDatabaseObl();}\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs( ) {return this.Repository.pGetLinesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs( ) {return this.Repository.pGetBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs( ) {return this.Repository.pGetPossibleBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetCommentsFromWebserviceWrs() {return this.Repository.pGetCommentsFromWebservice(); }\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {return this.Repository.pGetBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {return this.Repository.pGetLineBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(date 1617285222046)
---@@ -66,4 +66,8 @@
--- 
---     public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}
--- 
---+    public cWebresult pGetLinePropertysViaWebserviceWrs() {return this.Repository.pGetLinePropertysViaWebserviceWrs(); }
---+
---+    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {return this.Repository.pGetLinePropertyValuesViaWebserviceWrs(); }
---+
--- }
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Inventory.InventoryorderLines;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cInventoryorderLine {\r\n\r\n    public cInventoryorderLineEntity inventoryorderLineEntity;\r\n\r\n    public static List<cInventoryorderLine> allLinesObl;\r\n    public static cInventoryorderLine currentInventoryOrderLine;\r\n\r\n    public List<cInventoryorderBarcode> barcodesObl(){\r\n\r\n        List<cInventoryorderBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cInventoryorder.currentInventoryOrder.barcodesObl() == null || cInventoryorder.currentInventoryOrder.barcodesObl().size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        //Loop through all barcodes, and if item matches add it to the list\r\n        for (cInventoryorderBarcode inventoryorderBarcode : cInventoryorder.currentInventoryOrder.barcodesObl()) {\r\n                        if (inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(this.getItemNoStr()) &&\r\n                            inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(this.getVariantCodeStr())) {\r\n                resultObl.add(inventoryorderBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n\r\n    }\r\n    public List<cInventoryorderLineBarcode> lineBarcodesObl(){\r\n\r\n        List<cInventoryorderLineBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cInventoryorderLineBarcode.allLineBarcodesObl == null || cInventoryorderLineBarcode.allLineBarcodesObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        //Loop through all barcodes, and if item matches add it to the list\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLineBarcode.allLineBarcodesObl) {\r\n            if (cText.pLongToStringStr(inventoryorderLineBarcode.getLineNoLng()).equalsIgnoreCase(cText.pIntToStringStr(this.getLineNoInt()))) {\r\n                resultObl.add(inventoryorderLineBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    private cInventoryorderLineViewModel getInventoryorderLineViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n    }\r\n\r\n    //Region Public Properties\r\n    private final int lineNoInt;\r\n    public int getLineNoInt() {\r\n        return lineNoInt;\r\n    }\r\n\r\n    private final String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return itemNoStr;\r\n    }\r\n\r\n    private final String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return variantCodeStr;\r\n    }\r\n\r\n    private final String descriptionStr;\r\n    public String getDescriptionStr() {\r\n        return descriptionStr;\r\n    }\r\n\r\n    private final String description2Str;\r\n    public String getDescription2Str() {\r\n        return description2Str;\r\n    }\r\n\r\n    private final String binCodeStr;\r\n    public String getBinCodeStr() {\r\n        return binCodeStr;\r\n    }\r\n\r\n    private final Double quantityDbl;\r\n    public Double getQuantityDbl() {\r\n        return quantityDbl;\r\n    }\r\n\r\n    private final String vendorItemNoStr;\r\n    public String getVendorItemNoStr() { return vendorItemNoStr; }\r\n\r\n    private final String vendorItemDescriptionStr;\r\n    public String getVendorItemDescriptionStr() { return vendorItemDescriptionStr; }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() { return statusInt; }\r\n\r\n    private final String handeledTimeStampStr;\r\n    public String getHandeledTimeStampStr() { return handeledTimeStampStr; }\r\n\r\n    public Double quantityHandledDbl;\r\n    public Double getQuantityHandledDbl() { return quantityHandledDbl; }\r\n\r\n    private final Double quantityHandledAllScannersDbl;\r\n    public Double getQuantityHandledAllScannersDbl() { return quantityHandledAllScannersDbl; }\r\n\r\n    public String getItemNoAndVariantCodeStr(){\r\n        return  this.getItemNoStr() + \"~\"  + this.getVariantCodeStr();\r\n    }\r\n\r\n    public cArticleImage articleImage;\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderLine(JSONObject pvJsonObject) {\r\n        this.inventoryorderLineEntity = new cInventoryorderLineEntity(pvJsonObject);\r\n        this.lineNoInt = this.inventoryorderLineEntity.getLineNoInt();\r\n        this.itemNoStr = this.inventoryorderLineEntity.getItemNoStr();\r\n        this.variantCodeStr = this.inventoryorderLineEntity.getVariantCodeStr();\r\n        this.descriptionStr = this.inventoryorderLineEntity.getDescriptionStr();\r\n        this.description2Str = this.inventoryorderLineEntity.getDescription2Str();\r\n        this.binCodeStr = this.inventoryorderLineEntity.getBincodeStr();\r\n        this.quantityDbl = this.inventoryorderLineEntity.getQuantityDbl();\r\n        this.vendorItemNoStr = this.inventoryorderLineEntity.getVendorItemNoStr();\r\n        this.vendorItemDescriptionStr = this.inventoryorderLineEntity.getVendorItemDescriptionStr();\r\n        this.statusInt = this.inventoryorderLineEntity.getStatusInt();\r\n        this.handeledTimeStampStr = this.inventoryorderLineEntity.getHandledtimestampStr();\r\n        this.quantityHandledDbl = this.inventoryorderLineEntity.getQuantityHandledDbl();\r\n        this.quantityHandledAllScannersDbl = this.inventoryorderLineEntity.getQuantityHandledAllScannersDbl();\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderLineViewModel().insert(this.inventoryorderLineEntity);\r\n\r\n        if (cInventoryorderLine.allLinesObl == null){\r\n            cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n        }\r\n        cInventoryorderLine.allLinesObl.add(this);\r\n        return  true;\r\n    }\r\n\r\n    public static void pInsertAllInDatabase(List<cInventoryorderLine> pvInventoryOrderLinesObl, List<cInventoryorderLineEntity> pvInventoryOrderLineEntityObl ) {\r\n\r\n        cInventoryorderLine.allLinesObl.addAll(pvInventoryOrderLinesObl);\r\n        cInventoryorderLineViewModel  inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        inventoryorderLineViewModel.insertAll (pvInventoryOrderLineEntityObl);\r\n\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cInventoryorderLineViewModel  inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        inventoryorderLineViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public cInventoryorderLineBarcode pAddLineBarcode(String pvBarcodeStr, Double pvQuantityDbl, boolean pvSkipQuantityBln) {\r\n\r\n        cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode((long) this.getLineNoInt(),pvBarcodeStr,pvQuantityDbl);\r\n\r\n        if (pvSkipQuantityBln){\r\n            inventoryorderLineBarcode.quantityHandledDbl = 0;\r\n        }\r\n\r\n        if (cInventoryorderLineBarcode.allLineBarcodesObl == null){\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = new ArrayList<>();\r\n        }\r\n\r\n        cInventoryorderLineBarcode.allLineBarcodesObl.add(inventoryorderLineBarcode);\r\n\r\n        return  inventoryorderLineBarcode;\r\n    }\r\n\r\n    public boolean pGetArticleImageBln(){\r\n\r\n        if (this.articleImage != null) {\r\n            return  true;\r\n        }\r\n\r\n        this.articleImage = cArticleImage.pGetArticleImageByItemNoAndVariantCode(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (this.articleImage != null){\r\n            return  true;\r\n        }\r\n\r\n        cWebresult Webresult;\r\n\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        Webresult = articleImageViewModel.pGetArticleImageFromWebserviceWrs(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (!Webresult.getSuccessBln() || !Webresult.getResultBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (Webresult.getResultDtt().size() == 1) {\r\n            cArticleImage articleImage = new cArticleImage(Webresult.getResultDtt().get(0));\r\n            articleImage.pInsertInDatabaseBln();\r\n            this.articleImage = articleImage;\r\n            return true;\r\n        }\r\n\r\n\r\n        return  false;\r\n\r\n    }\r\n\r\n    public boolean pSaveLineViaWebserviceBln (){\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderLineViewModel().pSaveLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n                return  true;\r\n            }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINESAVE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public void pUpdateQuantityInDatabase(){\r\n        getInventoryorderLineViewModel().pUpdateQuantity();\r\n    }\r\n\r\n    public cInventoryorderLineBarcode pGetLineBarcodeByScannedBarcode(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        if (this.lineBarcodesObl().size() == 0) {\r\n            this.quantityHandledDbl = 0.0;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : this.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set the current line\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                return inventoryorderLineBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pResetRst(){\r\n\r\n        //nit the result\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderLineViewModel().pResetLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            for (cInventoryorderLineBarcode inventoryorderLineBarcode : this.lineBarcodesObl()) {\r\n                inventoryorderLineBarcode.pDeleteFromDatabaseBln();\r\n            }\r\n\r\n            //Reset this line\r\n            this.quantityHandledDbl = 0.0;\r\n            this.pUpdateQuantityInDatabase();\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINERESET);\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_reset_line_via_webservice_failed));\r\n        }\r\n        return  result;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java	(date 1617289072199)
---@@ -17,6 +17,11 @@
--- import SSU_WHS.Inventory.InventoryOrders.cInventoryorder;
--- import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
--- import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
---+import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
---+import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
---+import SSU_WHS.Picken.PickorderLineProperty.cPickorderLineProperty;
---+import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValue;
---+import SSU_WHS.Picken.Pickorders.cPickorder;
--- import SSU_WHS.Webservice.cWebresult;
--- import SSU_WHS.Webservice.cWebserviceDefinitions;
--- import nl.icsvertex.scansuite.R;
---@@ -127,6 +132,10 @@
---         return  this.getItemNoStr() + "~"  + this.getVariantCodeStr();
---     }
--- 
---+    public  boolean hasPropertysBln() {
---+        return this.inventoryorderLinePropertyObl().size() != 0;
---+    }
---+
---     public cArticleImage articleImage;
--- 
---     //End Region Public Properties
---@@ -193,6 +202,59 @@
---         return  inventoryorderLineBarcode;
---     }
--- 
---+    private  List<cInventoryorderLineProperty> inventoryorderLinePropertyCachedObl;
---+    private List<cInventoryorderLineProperty> inventoryorderLinePropertyObl() {
---+
---+        if (this.inventoryorderLinePropertyCachedObl != null) {
---+            return  this.inventoryorderLinePropertyCachedObl;
---+        }
---+
---+        this. inventoryorderLinePropertyCachedObl = new ArrayList<>();
---+
---+        if (cInventoryorder.currentInventoryOrder.linePropertysObl() == null || cInventoryorder.currentInventoryOrder.linePropertysObl().size() == 0) {
---+            return  this.inventoryorderLinePropertyCachedObl;
---+        }
---+
---+        for (cInventoryorderLineProperty inventoryorderLineProperty :cInventoryorder.currentInventoryOrder.linePropertysObl() ) {
---+            if (inventoryorderLineProperty.getLineNoInt().equals(this.getLineNoInt())) {
---+                this.inventoryorderLinePropertyCachedObl.add(inventoryorderLineProperty);
---+            }
---+        }
---+
---+        return  this.inventoryorderLinePropertyCachedObl;
---+
---+    }
---+
---+    public List<cInventoryorderLineProperty> inventoryorderLinePropertyInputObl() {
---+
---+        List<cInventoryorderLineProperty> resultObl = new ArrayList<>();
---+
---+        if (this.inventoryorderLinePropertyObl() == null || this.inventoryorderLinePropertyObl().size() == 0) {
---+            return  resultObl;
---+        }
---+
---+        for (cInventoryorderLineProperty inventoryorderLineProperty :this.inventoryorderLinePropertyObl()) {
---+            if (inventoryorderLineProperty.getIsInputBln() &&  inventoryorderLineProperty.getIsRequiredBln()) {
---+                resultObl.add(inventoryorderLineProperty);
---+            }
---+        }
---+
---+        return  resultObl;
---+    }
---+
---+    public  List<cInventoryorderLinePropertyValue> inventoryorderLinePropertyValuesObl() {
---+
---+        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
---+
---+        for (cInventoryorderLineProperty inputInventoryorderLineProperty : this.inventoryorderLinePropertyInputObl()) {
---+            resultObl.addAll(inputInventoryorderLineProperty.propertyValueObl());
---+        }
---+
---+        return  resultObl;
---+
---+    }
---+
---+
---     public boolean pGetArticleImageBln(){
--- 
---         if (this.articleImage != null) {
---Index: app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package nl.icsvertex.scansuite.Activities.General;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.app.AppCompatDelegate;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\n\r\n\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Environments.cEnvironment;\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cPermissions;\r\nimport ICS.Utils.cPower;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Branches.cBranch;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcode;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisation;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplate;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroup;\r\nimport SSU_WHS.Basics.Scanners.cScanner;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentService;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentShipMethod;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Translations.cTranslation;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.ScannerLogon.cScannerLogon;\r\nimport SSU_WHS.Webservice.cWebservice;\r\n\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoConnectionFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.DateTimeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.HomeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.LanguageFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Support.SupportFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class MainDefaultActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //region views\r\n    private  ImageView imageHome;\r\n    private  Toolbar Toolbar;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private  FrameLayout mainFramelayout;\r\n    private  DrawerLayout menuMainDrawer;\r\n    private  NavigationView mainmenuNavigation;\r\n\r\n\r\n    //End region views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\r\n        super.onCreate(savedInstanceState);\r\n\r\n        this.setContentView(R.layout.activity_main);\r\n\r\n        // Standard methods to initialize the Activity\r\n        this.mActivityInitialize();\r\n\r\n        //check permissions first\r\n        cPermissions.checkPermissions();\r\n\r\n        //set environment from preferences/by QR code\r\n        this.mSetEnviroment();\r\n\r\n        //Try to set the serialnumber\r\n        this.mSetSerialNumberIfPossible();\r\n\r\n        //Set darmode\r\n        this.pChangeDarkModus();\r\n\r\n         //set Crashlytics, otherwise Firebase wont work\r\n        FirebaseAnalytics.getInstance(this);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cPower.pRegisterPowerConnectReceiver();\r\n        cPower.pRegisterPowerLevelChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cPower.pUnregisterConnectPowerReceiver();\r\n        cPower.pUnregisterPowerLevelChangedReceiver();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int pvRequestCodeInt, int pvResultCodeInt, Intent data) {\r\n\r\n        super.onActivityResult(pvRequestCodeInt, pvResultCodeInt, data);\r\n        if (pvRequestCodeInt == cPublicDefinitions.CHANGELANGUAGE_REQUESTCODE) {\r\n            //we've changed the language, or not, who cares, but go back to language\r\n            this.setTitle(R.string.screentitle_language);\r\n            this.toolbarTitle.setText(R.string.screentitle_language);\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.mainFramelayout, new LanguageFragment());\r\n            transaction.commit();\r\n        }\r\n\r\n        //internet set?\r\n        if (pvRequestCodeInt == cPublicDefinitions.ACTIVITY_WIFI_SETTINGS) {\r\n\r\n            if (!cConnection.isInternetConnectedBln()) {\r\n                cUserInterface.pCheckAndCloseOpenDialogs();\r\n                final NoConnectionFragment noConnectionFragment = new NoConnectionFragment();\r\n                noConnectionFragment.setCancelable(true);\r\n                noConnectionFragment.show(((MainDefaultActivity) cAppExtension.context).getSupportFragmentManager(), \"NOCONNECTION\");\r\n                return;\r\n            }\r\n            try {\r\n                this.pLetsGetThisPartyStartedOrNot();\r\n            } catch (ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        //Set App Extensions\r\n        this.mSetAppExtensions();\r\n\r\n        //Find all views in Activity\r\n        this.mFindViews();\r\n\r\n        // Show and set toolbar\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_main));\r\n\r\n        // Don't do shit\r\n        this.mFieldsInitialize();\r\n\r\n        // Set event listeners\r\n        this.mSetListeners();\r\n\r\n        // Init screen\r\n        this.mInitScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.Toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.imageHome = findViewById(R.id.imageHome);\r\n\r\n        this.mainFramelayout = findViewById(R.id.mainFramelayout);\r\n        this.menuMainDrawer = findViewById(R.id.menuMainDrawer);\r\n        this.mainmenuNavigation = findViewById(R.id.mainMenuNavigation);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        this.Toolbar.showOverflowMenu();\r\n\r\n        setSupportActionBar(this.Toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_black_24dp);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHomeListener();\r\n        this.mSetMenuListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n    public void pLetsGetThisPartyStartedOrNot() throws ExecutionException {\r\n\r\n        // If scanner had different interface version then web service, then stop\r\n        if (!cWebservice.pWebserviceIsAvailableAndRightVersionBln()) {\r\n\r\n            cAppExtension.activity.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mShowHomeFragment();\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // If we already have everything we need, then next fragment\r\n        if (this.mAllBasicsAvailableBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n\r\n        // Get all basic data via webservice, then next fragment\r\n        if (this.mGetBasicDataBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n    }\r\n\r\n    public void pChangeDarkModus() {\r\n                if (cSharedPreferences.getDarkModusBln()) {\r\n                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\r\n                    return;\r\n                }\r\n\r\n                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\r\n    }\r\n\r\n    public  void pSetChosenEnvironment() {\r\n\r\n        Fragment FragmentFrg = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n        if (FragmentFrg != null) {\r\n            DialogFragment DialogFragmentDfr = (DialogFragment) FragmentFrg;\r\n            DialogFragmentDfr.dismiss();\r\n        }\r\n\r\n        toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        cUserInterface.pShowSnackbarMessage(mainFramelayout, cAppExtension.context.getString(R.string.environment_set_to_parameter1, cEnvironment.currentEnvironment.getDescriptionStr()), R.raw.goodsound, false );\r\n\r\n    }\r\n\r\n    public void pPasswordCancelled() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    public  void pPasswordSuccess(){\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private boolean mAllBasicsAvailableBln() {\r\n        return cScannerLogon.scannerLoggedOnBln &&\r\n                cUser.usersAvailableBln &&\r\n                cBarcodeLayout.barcodeLayoutsAvailableBln &&\r\n                cSetting.settingsAvailableBln &&\r\n                cBranch.BranchesAvailableBln &&\r\n                cShippingAgent.shippingAgentsAvailableBln &&\r\n                cShippingAgentService.shippingAgentServicesAvailableBln &&\r\n                cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln &&\r\n                cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln &&\r\n                cItemProperty.itemPropertiesAvaliableBln &&\r\n                cPropertyGroup.propertyGroupsAvailableBln &&\r\n                cCompositeBarcode.compositeBarcodesAvailableBln &&\r\n                cScanner.scannersAvailableBln &&\r\n                cCustomAuthorisation.customAutorisationsAvailableBln &&\r\n                cTranslation.translationsAvailableBln &&\r\n                cStockOwner.stockOwnersAvailableBln;\r\n    }\r\n\r\n    private boolean mGetBasicDataBln() throws ExecutionException {\r\n\r\n        if (!cScannerLogon.pScannerLogonViaWebserviceBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cScannerLogon.currentScannerLogon.pScannerVersionCheckBln(mainFramelayout)){\r\n            return  false;\r\n        }\r\n\r\n        if (!cSetting.pGetSettingsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBranch.pGetBranchesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cUser.pGetUsersViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBarcodeLayout.pGetBarcodeLayoutsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cItemProperty.pGetItemPropertiesViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){\r\n            return false;\r\n        }\r\n\r\n        if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cCompositeBarcode.pGetCompositeBarcodesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!mGetshippingInfoViawebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cScanner.pGetScannersViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cCustomAuthorisation.pGetCustomAutorisationsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)){\r\n            return false;\r\n        }\r\n\r\n        if (!cTranslation.pGetTranslationsViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        return  mAllBasicsAvailableBln();\r\n\r\n    }\r\n\r\n    private boolean mGetshippingInfoViawebserviceBln() throws ExecutionException {\r\n\r\n        cShippingAgent.pGetShippingAgentsViaWebservice(true);\r\n        if (!cShippingAgent.shippingAgentsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentService.pGetShippingAgentServicesViaWebservice(true);\r\n        if (!cShippingAgentService.shippingAgentServicesAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentServiceShippingUnit.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        if (!cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentShipMethod.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        return cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln;\r\n    }\r\n\r\n    public  void pSetAddedEnvironment() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    private void mSetEnviroment(){\r\n        cEnvironment.pSetEnvironment();\r\n        if (cEnvironment.currentEnvironment != null) {\r\n            toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        }\r\n    }\r\n\r\n    private void mShowHomeFragment() {\r\n        this.imageHome.setVisibility(View.GONE);\r\n        this.toolbarTitle.setText(R.string.screentitle_main);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        FragmentTransaction transaction =  getSupportFragmentManager().beginTransaction();\r\n        transaction.replace(R.id.mainFramelayout, new HomeFragment());\r\n        transaction.commit();\r\n    }\r\n\r\n    private  void mShowEnvironmentFragment() {\r\n        final EnvironmentFragment environmentFragment = new EnvironmentFragment();\r\n        environmentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n    //Region Listeners\r\n    private void mSetHomeListener() {\r\n        this.imageHome.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowHomeFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void mSetMenuListener() {\r\n        this.mainmenuNavigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n                Fragment selectedFragment = null;\r\n                switch (menuItem.getItemId()) {\r\n\r\n                    case R.id.action_home:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n\r\n                    case R.id.action_settings:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        toolbarTitle.setText(R.string.screentitle_settings);\r\n                        toolbarImage.setImageResource(R.drawable.ic_settings);\r\n                        break;\r\n\r\n                    case R.id.action_support:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new SupportFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_support);\r\n                        toolbarImage.setImageResource(R.drawable.ic_support);\r\n                        break;\r\n\r\n                    case R.id.action_language:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new LanguageFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_language);\r\n                        toolbarImage.setImageResource(R.drawable.ic_language);\r\n                        break;\r\n\r\n                    case R.id.action_datetime:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new DateTimeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_datetime);\r\n                        toolbarImage.setImageResource(R.drawable.ic_calendar);\r\n                        break;\r\n                    case R.id.action_environments:\r\n                        cUserInterface.pShowpasswordDialog(cAppExtension.context.getString(R.string.password_header_default) ,cAppExtension.context.getString(R.string.dialog_password_settings_text),false);\r\n                        break;\r\n\r\n                    case R.id.action_proglove:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        mShowPairGlove();\r\n                        return true;\r\n\r\n                    default:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n                }\r\n\r\n                if (selectedFragment != null) {\r\n                    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n                    transaction.replace(R.id.mainFramelayout, selectedFragment);\r\n                    transaction.commit();\r\n                }\r\n\r\n                // deselect everything\r\n                int size = mainmenuNavigation.getMenu().size();\r\n                for (int i = 0; i < size; i++) {\r\n                    mainmenuNavigation.getMenu().getItem(i).setChecked(false);\r\n                }\r\n\r\n                // set item as selected to persist highlight\r\n                menuItem.setChecked(true);\r\n                // close drawer when item is tapped\r\n                menuMainDrawer.closeDrawers();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //endregion Listeners\r\n\r\n    //region Event handlers\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            this.menuMainDrawer.openDrawer(GravityCompat.START);\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void mStartLoginActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, LoginActivity.class);\r\n        cAppExtension.context.startActivity(intent);\r\n    }\r\n\r\n    private void mSetSerialNumberIfPossible(){\r\n\r\n        if (!cSharedPreferences.getSerialNumerStr().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && !cDeviceInfo.getSerialnumberStr().isEmpty()) {\r\n            cSharedPreferences.setSerialNumerStr(cDeviceInfo.getSerialnumberStr());\r\n        }\r\n\r\n    }\r\n\r\n    private void mShowPairGlove() {\r\n        Intent i = new Intent();\r\n        i.setAction(cPublicDefinitions.PROGLOVE_CONNECT_ACTION);\r\n        cAppExtension.context.sendBroadcast(i);\r\n    }\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(date 1617286717208)
---@@ -364,9 +364,9 @@
---             return false;
---         }
--- 
----        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
----            return false;
----        }
---+//        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
---+//            return false;
---+//        }
--- 
---         if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {
---             return  false;
---Index: app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package ICS.Utils.Scanning;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.BarcodeInfoActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.CreateIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveMISinglepieceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipMultiActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSingleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.CreateReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.CreateReturnActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderShipActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddEnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BranchFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SetBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PasswordFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ReasonFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.CreateInventoryActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\n\r\npublic class cBarcodeScan {\r\n\r\n    private static String currentActivityContextStr = \"\";\r\n\r\n    public static class BarcodeType {\r\n\r\n        public static final int Unknown = 0;\r\n        public static final int EAN8 = 1;\r\n        public static final int EAN13 = 2;\r\n    }\r\n\r\n    private String barcodeFormattedStr;\r\n    public String getBarcodeFormattedStr() {\r\n        return barcodeFormattedStr;\r\n    }\r\n\r\n    public String barcodeOriginalStr;\r\n    public String getBarcodeOriginalStr() {\r\n        return barcodeOriginalStr;\r\n    }\r\n\r\n    public String barcodeTypeStr;\r\n    public String getBarcodeTypeStr() {\r\n        return barcodeTypeStr;\r\n    }\r\n\r\n    private   Boolean containsCrlf = false;\r\n    public Boolean getContainsCrlfBln() {\r\n        return containsCrlf;\r\n    }\r\n\r\n    public cBarcodeScan(){\r\n\r\n    }\r\n\r\n    private static IntentFilter BarcodeIntentFilter;\r\n    private static void getBarcodeIntentFilter() {\r\n        if (BarcodeIntentFilter == null) {\r\n            BarcodeIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static IntentFilter BarcodeFragmentIntentFilter;\r\n    private static void getBarcodeFragmentIntentFilter() {\r\n        if (BarcodeFragmentIntentFilter == null) {\r\n            BarcodeFragmentIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeFragmentIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeFragmentIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeReceiver;\r\n    private static void getBarcodeReceiver() {\r\n        if (BarcodeReceiver == null) {\r\n            BarcodeReceiver = new BroadcastReceiver(){\r\n                @Override\r\n                public void onReceive(Context pvContext, Intent pvIntent) {\r\n\r\n                    if (pvContext != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(pvIntent);\r\n\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    //Login\r\n                    if (cAppExtension.activity instanceof LoginActivity) {\r\n                        LoginActivity loginActivity = (LoginActivity)cAppExtension.activity;\r\n                        loginActivity.pHandleScan(barcodeScan);\r\n                       }\r\n\r\n                    //BarcodeInfo\r\n                    if (cAppExtension.activity instanceof BarcodeInfoActivity) {\r\n                        BarcodeInfoActivity barcodeInfoActivity = (BarcodeInfoActivity)cAppExtension.activity;\r\n                        barcodeInfoActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Pick\r\n                    if (cAppExtension.activity instanceof PickorderSelectActivity){\r\n                        PickorderSelectActivity pickorderSelectActivity = (PickorderSelectActivity)cAppExtension.activity;\r\n                        pickorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                        pickorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                        pickorderLinesGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n                        PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                        pickorderPickActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n                        PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n                        pickorderPickGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Sort\r\n                    if (cAppExtension.activity instanceof SortorderSelectActivity){\r\n                        SortorderSelectActivity sortorderSelectActivity = (SortorderSelectActivity)cAppExtension.activity;\r\n                        sortorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderLinesActivity){\r\n                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                        sortorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderSortActivity){\r\n                        SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n                        sortorderSortActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Ship\r\n                    if (cAppExtension.activity instanceof ShiporderSelectActivity){\r\n                        ShiporderSelectActivity shiporderSelectActivity = (ShiporderSelectActivity)cAppExtension.activity;\r\n                        shiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderLinesActivity){\r\n                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                        shiporderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderShipActivity){\r\n                        ShiporderShipActivity shiporderShipActivity = (ShiporderShipActivity)cAppExtension.activity;\r\n                        shiporderShipActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Finish Single Pieces\r\n                    if (cAppExtension.activity instanceof FinishShiporderSelectActivity){\r\n                        FinishShiporderSelectActivity finishShiporderSelectActivity = (FinishShiporderSelectActivity)cAppExtension.activity;\r\n                        finishShiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof FinishShipLinesActivity){\r\n                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                        finishShipLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //QC\r\n                    if (cAppExtension.activity instanceof QualityControlLinesActivity){\r\n                        QualityControlLinesActivity qualityControlLinesActivity = (QualityControlLinesActivity)cAppExtension.activity;\r\n                        qualityControlLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderQCActivity){\r\n                        PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n                        pickorderQCActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Inventory\r\n                    if (cAppExtension.activity instanceof CreateInventoryActivity) {\r\n                        CreateInventoryActivity createInventoryActivity = (CreateInventoryActivity)cAppExtension.activity;\r\n                        createInventoryActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderSelectActivity){\r\n                        InventoryorderSelectActivity inventoryorderSelectActivity = (InventoryorderSelectActivity)cAppExtension.activity;\r\n                        inventoryorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinsActivity){\r\n                        InventoryorderBinsActivity inventoryorderBinsActivity = (InventoryorderBinsActivity)cAppExtension.activity;\r\n                        inventoryorderBinsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinActivity){\r\n                        InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n                        inventoryorderBinActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n                        InventoryArticleActivity inventoryArticleDetailActivity = (InventoryArticleActivity)cAppExtension.activity;\r\n                        inventoryArticleDetailActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n\r\n                    //Intake\r\n                    if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){\r\n                        IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;\r\n                        intakeAndReceiveSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReceiveActivity){\r\n                        CreateReceiveActivity createReceiveActivity = (CreateReceiveActivity)cAppExtension.activity;\r\n                        createReceiveActivity.pHandleScan(barcodeScan,false,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateIntakeActivity){\r\n                        CreateIntakeActivity createIntakeActivity = (CreateIntakeActivity)cAppExtension.activity;\r\n                        createIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveLinesActivity){\r\n                        ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                        receiveLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n                        ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n                        receiveOrderReceiveActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n                        IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n                        intakeorderMATLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n                        IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n                        intakeorderMASLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n                        IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n                        IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeGeneratedActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    //Return\r\n                    if (cAppExtension.activity instanceof ReturnorderSelectActivity){\r\n                        ReturnorderSelectActivity returnorderSelectActivity = (ReturnorderSelectActivity)cAppExtension.activity;\r\n                        returnorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                        ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                        returnorderDocumentsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                        ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                        returnorderDocumentActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReturnActivity) {\r\n                        CreateReturnActivity createReturnActivity = (CreateReturnActivity)cAppExtension.activity;\r\n                        createReturnActivity.pHandleScan(barcodeScan,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                        ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                        returnArticleDetailActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Move\r\n                    if (cAppExtension.activity instanceof MoveorderSelectActivity){\r\n                        MoveorderSelectActivity moveorderSelectActivity = (MoveorderSelectActivity)cAppExtension.activity;\r\n                        moveorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateMoveActivity){\r\n                        CreateMoveActivity createMoveActivity = (CreateMoveActivity)cAppExtension.activity;\r\n                        createMoveActivity.pHandleScan(barcodeScan, false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n                        MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n                        moveLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n                        MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n                        moveLinesTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n                        MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n                        moveLineTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n                        MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n                        moveLinesPlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n                        MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n                        moveLinePlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLineTakeActivity){\r\n                        MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n                        moveLineTakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceActivity){\r\n                        MoveLinePlaceActivity moveLinePlaceActivity = (MoveLinePlaceActivity)cAppExtension.activity;\r\n                        moveLinePlaceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveMISinglepieceActivity){\r\n                        MoveMISinglepieceActivity moveMISinglepieceActivity = (MoveMISinglepieceActivity)cAppExtension.activity;\r\n                        moveMISinglepieceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity){\r\n                        MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveorderLinesPlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity){\r\n                        MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveLinePlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipSingleActivity){\r\n                        PackAndShipSingleActivity packAndShipSingleActivity = (PackAndShipSingleActivity)cAppExtension.activity;\r\n                        packAndShipSingleActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipMultiActivity){\r\n                        PackAndShipMultiActivity packAndShipMultiActivity = (PackAndShipMultiActivity)cAppExtension.activity;\r\n                        packAndShipMultiActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderSelectActivity){\r\n                        StoreorderSelectActivity storeorderSelectActivity = (StoreorderSelectActivity)cAppExtension.activity;\r\n                        storeorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderLinesActivity){\r\n                        StoreorderLinesActivity storeorderLinesActivity = (StoreorderLinesActivity)cAppExtension.activity;\r\n                        storeorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeFragmentReceiver;\r\n    private static void getBarcodeFragmentReceiver() {\r\n        if (BarcodeFragmentReceiver == null) {\r\n            BarcodeFragmentReceiver = new BroadcastReceiver(){\r\n\r\n                @Override\r\n                public void onReceive(Context context, Intent intent) {\r\n\r\n                    if (context != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(intent);\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    if (cAppExtension.dialogFragment instanceof BranchFragment) {\r\n                        BranchFragment branchFragment = (BranchFragment)cAppExtension.dialogFragment;\r\n                        branchFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof StepDoneFragment) {\r\n                        StepDoneFragment stepDoneFragment = (StepDoneFragment)cAppExtension.dialogFragment;\r\n                        stepDoneFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof WorkplaceFragment) {\r\n                        WorkplaceFragment workplaceFragment = (WorkplaceFragment)cAppExtension.dialogFragment;\r\n                        workplaceFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof CurrentLocationFragment) {\r\n                        CurrentLocationFragment currentLocationFragment = (CurrentLocationFragment)cAppExtension.dialogFragment;\r\n                        currentLocationFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof ArticleFullViewFragment) {\r\n                        ArticleFullViewFragment articleFullViewFragment = (ArticleFullViewFragment)cAppExtension.dialogFragment;\r\n                        articleFullViewFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof EnvironmentFragment) {\r\n                        EnvironmentFragment environmentFragment = (EnvironmentFragment)cAppExtension.dialogFragment;\r\n                        environmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddEnvironmentFragment) {\r\n                        AddEnvironmentFragment addEnvironmentFragment = (AddEnvironmentFragment)cAppExtension.dialogFragment;\r\n                        addEnvironmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddBinFragment) {\r\n                        AddBinFragment addBinFragment = (AddBinFragment)cAppExtension.dialogFragment;\r\n                        addBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof SetBinFragment) {\r\n                        SetBinFragment setBinFragment = (SetBinFragment)cAppExtension.dialogFragment;\r\n                        setBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddArticleFragment) {\r\n                        AddArticleFragment addArticleFragment = (AddArticleFragment)cAppExtension.dialogFragment;\r\n                        addArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanArticleFragment) {\r\n                        ScanArticleFragment scanArticleFragment = (ScanArticleFragment)cAppExtension.dialogFragment;\r\n                        scanArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanBinFragment) {\r\n                        ScanBinFragment scanBinFragment = (ScanBinFragment)cAppExtension.dialogFragment;\r\n                        scanBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof PasswordFragment) {\r\n                        PasswordFragment passwordFragment = (PasswordFragment)cAppExtension.dialogFragment;\r\n                        passwordFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ReasonFragment) {\r\n                        ReasonFragment reasonFragment = (ReasonFragment)cAppExtension.dialogFragment;\r\n                        reasonFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public static void pRegisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeIntentFilter();\r\n        cBarcodeScan.getBarcodeReceiver();\r\n\r\n        //Prevent multiple receivers on same context\r\n        if (cBarcodeScan.currentActivityContextStr.equalsIgnoreCase(cAppExtension.context.getClass().getSimpleName())) {\r\n             return;\r\n        }\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeReceiver,BarcodeIntentFilter);\r\n        cBarcodeScan.currentActivityContextStr  = cAppExtension.context.getClass().getSimpleName();\r\n\r\n\r\n\r\n    }\r\n\r\n    public static void pRegisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeFragmentIntentFilter();\r\n        cBarcodeScan.getBarcodeFragmentReceiver();\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeFragmentReceiver,BarcodeFragmentIntentFilter);\r\n\r\n    }\r\n\r\n    public static void pUnregisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n         cAppExtension.context.unregisterReceiver(BarcodeReceiver);\r\n            cBarcodeScan.currentActivityContextStr = \"\";\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void pUnregisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n            cAppExtension.context.unregisterReceiver(BarcodeFragmentReceiver);\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static cBarcodeScan pFakeScan(String pvBarcodeStr) {\r\n        cBarcodeScan result = new cBarcodeScan();\r\n        result.barcodeOriginalStr = pvBarcodeStr;\r\n        result.barcodeFormattedStr = pvBarcodeStr;\r\n        result.barcodeTypeStr = cText.pIntToStringStr( BarcodeType.Unknown);\r\n        return  result;\r\n    }\r\n\r\n    private static cBarcodeScan mGetBarcode(Intent pvIntent) {\r\n\r\n        cBarcodeScan resultBarcodeScan;\r\n\r\n        Bundle extras = pvIntent.getExtras();\r\n        String returnBarcodeStr;\r\n        String scannedBarcodeStr = \"\";\r\n        String barcodeTypeStr = \"\";\r\n\r\n\r\n        if (extras != null) {\r\n\r\n            //so who is sending us this?\r\n            if (Objects.requireNonNull(pvIntent.getAction()).equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_TC55_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODE);\r\n                String honeywellBarcodeType = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODETYPE);\r\n                barcodeTypeStr = cBarcodeScanDefinitions.pGetHoneyWellBarcodeTypeStr(honeywellBarcodeType);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        assert scannedBarcodeStr != null;\r\n\r\n        scannedBarcodeStr = mCleanBarcodeStr(scannedBarcodeStr);\r\n        returnBarcodeStr =  mCleanBarcodeStr(scannedBarcodeStr) ;\r\n\r\n        //If it's an EAN barcodeStr cut off checkdigit\r\n        assert barcodeTypeStr != null;\r\n        if (barcodeTypeStr.toUpperCase().contains(\"EAN\") ) {\r\n\r\n            if (returnBarcodeStr.length() == 13) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,12);\r\n            }\r\n\r\n            if (returnBarcodeStr.length() == 8) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,8);\r\n            }\r\n        }\r\n\r\n        if (barcodeTypeStr.contains(\"GS1\")) {\r\n            barcodeTypeStr = \"GS1-128\";\r\n        }\r\n\r\n        resultBarcodeScan = new cBarcodeScan();\r\n        resultBarcodeScan.barcodeOriginalStr = scannedBarcodeStr;\r\n        resultBarcodeScan.barcodeFormattedStr = returnBarcodeStr;\r\n        resultBarcodeScan.barcodeTypeStr = barcodeTypeStr;\r\n        resultBarcodeScan.containsCrlf = scannedBarcodeStr.contains(\"\\\\n\");\r\n\r\n\r\n\r\n        return resultBarcodeScan;\r\n    }\r\n\r\n    private static String mCleanBarcodeStr(String pvDirtyBarcodeStr) {\r\n        return  pvDirtyBarcodeStr.replaceAll(\"([\\\\r\\\\n\\\\t])\",\"\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(date 1617290036800)
---@@ -22,6 +22,7 @@
--- import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;
--- import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;
--- import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;
---+import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderLineItemPropertyInputActvity;
--- import nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;
--- import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;
--- import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
---@@ -276,7 +277,11 @@
---                         inventoryArticleDetailActivity.pHandleScan(barcodeScan);
---                         return;
---                     }
----
---+                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---+                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity)cAppExtension.activity;
---+                        inventoryorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);
---+                        return;
---+                    }
--- 
---                     //Intake
---                     if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){
---Index: app/src/main/java/SSU_WHS/General/cDatabase.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.General;\r\n\r\npublic class cDatabase {\r\n    //region Tables\r\n\r\n    public static final String TABLENAME_USERS = \"Users\";\r\n    public static final String TABLENAME_SETTINGS = \"Settings\";\r\n    public static final String TABLENAME_SCANNERLOGON = \"ScannerLogon\";\r\n    public static final String TABLENAME_BARCODELAYOUTS = \"BarcodeLayouts\";\r\n    public static final String TABLENAME_BINITEM = \"BinItem\";\r\n    public static final String TABLENAME_TRANSLATION = \"Translations\";\r\n    public static final String TABLENAME_WORKPLACE = \"Workplaces\";\r\n    public static final String TABLENAME_SCANNERS = \"Scanners\";\r\n    public static final String TABLENAME_BRANCH = \"Branches\";\r\n    public static final String TABLENAME_BRANCHBIN = \"BranchBin\";\r\n    public static final String TABLENAME_ITEMPROPERTY = \"ItemProperties\";\r\n    public static final String TABLENAME_LABELTEMPLATE  =  \"Labeltemplate\";\r\n    public static final String TABLENAME_PROPERTYGROUP = \"PropertyGroup\";\r\n    public static final String TABLENAME_PROPERTYGROUPPROPERTY = \"PropertyGroupProperty\";\r\n    public static final String TABLENAME_COMPOSITEBARCODE = \"CompositeBarcode\";\r\n    public static final String TABLENAME_COMPOSITEBARCODEPROPERTY = \"CompositeBarcodeProperty\";\r\n    public static final String TABLENAME_PICKORDERBARCODE = \"PickorderBarcode\";\r\n    public static final String TABLENAME_PICKORDERCOMPOSITEBARCODE = \"PickorderCompositeBarcode\";\r\n    public static final String TABLENAME_PICKORDERLINEBARCODE = \"PickorderLineBarcode\";\r\n    public static final String TABLENAME_ARTICLEIMAGE = \"ArticleImage\";\r\n    public static final String TABLENAME_ARTICLE = \"Article\" ;\r\n    public static final String TABLENAME_ARTICLEBARCODE = \"ArticleBarcode\" ;\r\n    public static final String TABLENAME_ARTICLESTOCK = \"ArticleStock\";\r\n    public static final String TABLENAME_COMMENT = \"Comment\";\r\n    public static final String TABLENAME_AUTHORISATIONS = \"Authorisations\";\r\n    public static final String TABLENAME_SALESORDERPACKINGTABLE = \"SalesOrderPackingTable\";\r\n\r\n    public static final String TABLENAME_PICKORDERLINES = \"Pickorderlines\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTY = \"PickorderlineProperty\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTYVALUE = \"PickorderlinePropertyValue\";\r\n    public static final String TABLENAME_PICKORDERSETTING = \"PickorderSetting\";\r\n    public static final String TABLENAME_PICKORDERADDRESS = \"PickorderAddress\";\r\n    public static final String TABLENAME_SHIPPINGAGENTS = \"ShippingAgents\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICES = \"ShippingAgentServices\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPPINGUNITS = \"ShippingAgentServiceShippingUnits\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPMETHODS = \"ShippingAgentServiceShipMethods\";\r\n    public static final String TABLENAME_PICKORDERSHIPPACKAGES = \"PickorderShipPackages\";\r\n    public static final String TABLENAME_PICKORDERLINEPACKANDSHIP = \"PickorderLinePackAndShip\";\r\n    public static final String TABLENAME_PICKORDERLINEFINISHSINGLEPIECE = \"PickorderLineFinishSinglePiece\";\r\n\r\n    public static final String TABLENAME_INVENTORYORDER = \"InventoryOrder\";\r\n    public static final String TABLENAME_INVENTORYORDERBIN = \"InventoryOrderBin\";\r\n    public static final String TABLENAME_INVENTORYORDERLINE = \"InventoryOrderLines\";\r\n    public static final String TABLENAME_INVENTORYORDERBARCODE = \"InventoryOrderBarcodes\";\r\n    public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = \"InventoryOrderLineBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINES  = \"IntakeLinesMAT\";\r\n    public static final String TABLENAME_INTAKEORDER  = \"IntakeOrders\";\r\n    public static final String TABLENAME_INTAKEORDERBARCODE  = \"IntakeOrderBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINEBARCODE  = \"IntakeOrderMATLineBarcodes\";\r\n    public static final String TABLENAME_MOVEORDER = \"MoveOrder\";\r\n    public static final String TABLENAME_MOVEORDERLINE = \"MoveOrderLine\";\r\n    public static final String TABLENAME_MOVEORDERLINEBARCODE = \"MoveOrderLineBarcode\";\r\n    public static final String TABLENAME_MOVEORDERBARCODE = \"MoveOrdeBarcode\";\r\n    public static final String TABLENAME_RETURNORDER = \"Returnorder\";\r\n    public static final String TABLENAME_RETURNORDERLINE = \"ReturnorderLine\";\r\n    public static final String TABLENAME_RETURNORDERLINEBARCODE = \"ReturnorderLineBarcode\";\r\n    public static final String TABLENAME_RETURNORDERBARCODE = \"ReturnorderBarcode\";\r\n    public static final String TABLENAME_RETURNORDERDOCUMENT = \"ReturnorderDocument\";\r\n    public static final String TABLENAME_BRANCHREASON = \"BranchReason\";\r\n    public static final String TABLENAME_RECEIVELINES  = \"ReceiveLines\";\r\n    public static final String TABLENAME_PACKAGING = \"Packaging\";\r\n    public static final String TABLENAME_CUSTOMAUTHORISATIONS = \"CustomAuthorisations\";\r\n    public static final String TABLENAME_IDENTIFIERWITHDESTINATION  = \"IdentifierWithDestination\";\r\n    public static final String TABLENAME_PACKANDSHIPORDER = \"PackAndSHipOrder\";\r\n    public static final String TABLENAME_PACKANDSHIPORDERLINE = \"PackAndShipOrderLine\";\r\n    public static final String TABLENAME_PACKANDSHIPSETTING = \"PackAndShipSetting\";\r\n    public static final String TABLENAME_PACKANDSHIPBARCODE = \"PackAndShipBarcode\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPMENT = \"PackAndShipShipment\";\r\n    public static final String TABLENAME_PACKANDSHIPADDRESS = \"PackAndShipAddress\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINGMETHOD = \"PackAndShipShippingMethod\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINPACKAGE= \"PackAndShipShippingPackage\";\r\n    public static final String TABLENAME_STOCKOWNER= \"StockOwner\";\r\n    public static final String TABLENAME_AUTHORIZEDSTOCKOWNER= \"AutorizedStockOwner\";\r\n\r\n\r\n    //endregion Tables\r\n\r\n    //region localtables\r\n    public static final String TABLENAME_ENVIRONMENTS = \"Environments\";\r\n    //endregion localtables\r\n\r\n\r\n    //region A\r\n    public static final String ACTIONTYPECODE_NAMESTR = \"ActionTypeCode\";\r\n    public static final String ACTUALSHIPPINGAGENTCODE_NAMESTR = \"ActualShippingAgentCode\";\r\n    public static final String ACTUEALSHIPPINGAGENTSERVICECODE_NAMESTR = \"ActualShippingAgentServiceCode\";\r\n    public static final String ASSIGNEDUSERID_NAMESTR = \"AssignedUserId\";\r\n    public static final String AUTHORISATION_NAMESTR = \"Autorisatie\";\r\n    public static final String ADDRESCODE_NAMESTR = \"Adrescode\";\r\n    public static final String ADDRESSCODE_NAMESTR = \"AddressCode\";\r\n    public static final String ADDRESSNAME_NAMESTR = \"AddressName\";\r\n    public static final String ADDRESSTYPE_NAMESTR = \"AddressType\";\r\n    public static final String ADDRESSNAMEREMARK_NAMESTR = \"AddressNameRemark\";\r\n    public static final String ADDRES_NAMESTR = \"Adres\";\r\n    public static final String ADDRESS_NAMESTR = \"Address\";\r\n    public static final String ADDRESSREMARK_NAMESTR = \"AddressRemark\";\r\n    public static final String ADDRESSADDITION_NAMESTR = \"Adrestoevoeging\";\r\n    public static final String ADDRESSNUMBER_NAMESTR = \"Huisnummer\";\r\n    public static final String ADDRESSNUMBERADDITION_NAMESTR = \"Huisnummertoevoeging\";\r\n    public static final String AUTHORISATIONBASE_NAMESTR = \"Autorisatie_basis\";\r\n    public static final String AREA_NAMESTR = \"Area\";\r\n    //endregion A\r\n\r\n    //region B\r\n    public static final String BARCODE_NAMESTR = \"Barcode\";\r\n    public static final String BARCODELAYOUT_NAMESTR = \"Barcodelayout\";\r\n    public static final String BARCODETYPE_NAMESTR = \"BarCodeType\";\r\n\r\n    public static final String BINCODE_NAMESTR = \"BinCode\";\r\n    public static final String BINCODEHANDLED_NAMESTR = \"BinCodeHandled\";\r\n    public static final String BINCODENL_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String BINMANDATORY_NAMESTR = \"BinMandatory\";\r\n    public static final String BINTYPE_NAMESTR = \"BinType\";\r\n    public static final String BRANCH_NAMESTR = \"Vestiging\";\r\n    public static final String BRANCHTYPE_NAMESTR = \"Vestigingtype\";\r\n    public static final String BRANCHNAME_NAMESTR = \"Name\";\r\n    public static final String BILLINGADDRESSCODE_NAMESTR = \"BillingAddressCode\";\r\n    //endregion B\r\n\r\n    //region C\r\n    public static final String COMPOSITEBARCODE_NAMESTR = \"CompositeBarcode\";\r\n    public static final String COMMENTLINENO_NAMESTR = \"CommentLineNo\";\r\n    public static final String CURRENTLOCATION_NAMESTR = \"CurrentLocation\";\r\n    public static final String COMMENT_NAMESTR = \"Comment\";\r\n    public static final String COMMENTCODE_NAMESTR = \"CommentCode\";\r\n    public static final String COMMENTTEXT_NAMESTR = \"CommentText\";\r\n    public static final String COMPONENT10_NAMESTR = \"Component10\";\r\n    public static final String CURRENTUSERID_NAMESTR = \"CurrentUserId\";\r\n    public static final String CITY_NAMESTR = \"City\";\r\n    public static final String CITYNL_NAMESTR = \"Plaats\";\r\n    public static final String COUNTRY_NAMESTR = \"Country\";\r\n    public static final String COUNTRYNL_NAMESTR = \"Land\";\r\n    public static final String CONTAINER_NAMESTR = \"Container\";\r\n    public static final String CONTACTNAME_NAMESTR = \"ContactName\";\r\n    public static final String CONTACTPERSON_NAMESTR = \"Contactpersoon\";\r\n    public static final String CONTAINERTYPE_DUTCH_NAMESTR = \"Containersoort\";\r\n    //endregion C\r\n\r\n    //region D\r\n    public static final String DATATIMESTAMP_NAMESTR = \"DataTimestamp\";\r\n    public static final String DESCRIPTION_DUTCH_NAMESTR = \"Omschrijving\";\r\n    public static final String DESCRIPTION_NAMESTR = \"Description\";\r\n    public static final String DESCRIPTION2_NAMESTR = \"Description2\";\r\n    public static final String DESTINATION_NAMESTR = \"Destination\";\r\n    public static final String DESTINATIONNO_NAMESTR = \"DestinationNo\";\r\n    public static final String DOCUMENT_NAMESTR = \"Document\";\r\n    public static final String DOCUMENTTYPE_NAMESTR = \"DocumentType\";\r\n    public static final String DOCUMENT2_NAMESTR = \"Document2\";\r\n    public static final String DOCUMENTTYPE2_NAMESTR = \"DocumentType2\";\r\n    public static final String DEFAULTWEIGHTINGRAMS_NAMESTR = \"DefaultWeightInG\";\r\n    public static final String DEFAULTVALUE_NAMESTR = \"DefaultValue\";\r\n    public static final String DELIVERYADDRESSTYPE_NAMESTR = \"DeliveryAddressType\";\r\n    public static final String DELIVERYADDRESSCODE_NAMESTR = \"DeliveryAddressCode\";\r\n    //endregion D\r\n\r\n\r\n    //region E\r\n    public static final String EXTERNALREFERENCE_NAMESTR = \"ExternalReference\";\r\n    public static final String ENUMERATIONVALUES_NAMESTR = \"EnumerationValues\";\r\n\r\n    public static final String ENVIRONMENT_DEFAULT = \"IsDefault\";\r\n    public static final String ENVIRONMENT_NAME = \"Name\";\r\n    public static final String ENVIRONMENT_DESCRIPTION = \"Description\";\r\n    public static final String ENVIRONMENT_WEBSERVICEURL = \"Webserviceurl\";\r\n\r\n    public static final String EXTRAFIELD1_NAMESTR = \"ExtraField1\";\r\n    public static final String EXTRAFIELD2_NAMESTR = \"ExtraField2\";\r\n    public static final String EXTRAFIELD3_NAMESTR = \"ExtraField3\";\r\n    public static final String EXTRAFIELD4_NAMESTR = \"ExtraField4\";\r\n    public static final String EXTRAFIELD5_NAMESTR = \"ExtraField5\";\r\n    public static final String EXTRAFIELD6_NAMESTR = \"ExtraField6\";\r\n    public static final String EXTRAFIELD7_NAMESTR = \"ExtraField7\";\r\n    public static final String EXTRAFIELD8_NAMESTR = \"ExtraField8\";\r\n    public static final String EMAIL_NAMESTR = \"Email\";\r\n    public static final String EMBALLAGE_NAMESTR = \"Emballage\";\r\n    //endregion E\r\n\r\n    //region F\r\n    public static final String FIELD_NAMESTR = \"Field\";\r\n    public static final String FIELDIDENTIFIER_NAMESTR = \"Field_identifier\";\r\n    public static final String FIELDTYPE_NAMESTR = \"Field_type\";\r\n    public static final String FILTERFIELD_NAMESTR = \"Filter_veld\";\r\n    public static final String FILTERVALUE_NAMESTR = \"Filter_waarde\";\r\n    //endregion F\r\n\r\n    //Region G\r\n    public static final String GENERATED_NAMESTR = \"Generated\";\r\n    //End Region G\r\n\r\n    //region H\r\n    public static final String HANDLEDTIMESTAMP_NAMESTR = \"HandledTimestamp\";\r\n    public static final String HANDLEDTIMESTAMPTAKENOTEXPORTED_NAMESTR = \"HandledTimestamp_take_not_exported\";\r\n    public static final String HOUSENUMBER_NAMESTR = \"HouseNumber\";\r\n    public static final String HOUSENUMBERCOMPLEMENTED_NAMESTR = \"HouseNumberComplemented\";\r\n    public static final String HOUSENUMBEREXTENSION_NAMESTR = \"HouseNumberExtension\";\r\n    public static final String HOUSENUMBEREXTENSIONCOMPLEMENTED_NAMESTR = \"HouseNumberExtensionComplemented\";\r\n    //endregion H\r\n\r\n\r\n    //Region I\r\n    public static final String IDENTIFIER_NAMESTR = \"Identifier\";\r\n    public static final String INFOKEY_NAMESTR = \"InfoKey\";\r\n    public static final String INFOVALUE_NAMESTR = \"InfoValue\";\r\n    public static final String IMAGE_NAMESTR = \"Image\";\r\n    public static final String INTERFACERESULTMETHOD_NAMESTR = \"Interface_result_method\";\r\n    public static final String ISPARTOFMULTILINEORDER_NAMESTR = \"IsPartOfMultiLineOrder\";\r\n    public static final String ISUNIQUEBARCODE_NAMESTR = \"IsUniqueBarcode\";\r\n    public static final String ISUNIQUE_NAMESTR = \"IsUnique\";\r\n    public static final String ITEMINFOCODE_NAMESTR = \"ItemInfoCode\";\r\n    public static final String ITEMNO_NAMESTR = \"ItemNo\";\r\n    public static final String ITEMTYPE_NAMESTR = \"Itemsoort\";\r\n\r\n    public static final String IMAGEBASE64_NAMESTR = \"Image_base64\";\r\n    public static final String INV_AUTOCLOSE_BIN_NAMESTR = \"Inv_auto_close_bin\";\r\n    public static final String INV_PRECOUNT_NAMESTR = \"Inv_precount\";\r\n    public static final String INV_AMOUNT_MANUAL_NAMESTR = \"Inv_Amount_manual\";\r\n    public static final String INV_BARCODECHECK_NAMESTR = \"Inv_barcode_check\";\r\n    public static final String INV_ADD_EXTRA_BIN_NAMESTR = \"Inv_add_extra_bin\";\r\n\r\n    public static final String INVENTORYWITHPICTURE_NAMESTR = \"Inv_with_picture\";\r\n    public static final String INVENTORYWITHPICTURE_AUTO_OPEN_NAMESTR = \"Inv_with_picture_auto_open\";\r\n    public static final String INVENTORYWITHPICTURE_PREFETCH_NAMESTR = \"Inv_with_picture_prefetch\";\r\n\r\n    public static final String ISINPUT_NAMESTR = \"IsInput\";\r\n    public static final String ISREQUIRED_NAMESTR = \"Isrequired\";\r\n    public static final String ISPROCESSINGORPARKED_NAMESTR = \"IsProcessingOrParked\";\r\n\r\n\r\n\r\n    //endregion I\r\n\r\n    //region L\r\n    public static final String LANGUAGEDUTCH_NAMESTR = \"Taal\";\r\n    public static final String LABELCODE_NAMESTR = \"Labelcode\";\r\n    public static final String LAYOUT_NAMESTR = \"Layout\";\r\n    public static final String LICENSE_NAMESTR = \"License\";\r\n    public static final String LICENSE_NL_NAMESTR = \"Licentie\";\r\n    public static final String LINE_NAMESTR = \"Line\";\r\n    public static final String LINES_NAMESTR = \"Lines\";\r\n    public static final String LINENO_NAMESTR = \"LineNo\";\r\n    public static final String LINENOTAKE_NAMESTR = \"LineNoTake\";\r\n    public static final String LOCALSTATUS_NAMESTR = \"LocalStatus\";\r\n    public static final String LOCAL_QUANTITYTAKEN_NAMESTR = \"LocalQuantityTaken\";\r\n    public static final String LOCAL_QUANTITYPLACED_NAMESTR = \"LocalQuantityPlaced\";\r\n    //endregion L\r\n\r\n    //region M\r\n    public static final String MOVEDEFAULTBIN_NAMESTR = \"Move_default_bin\";\r\n    public static final String PICKDEFAULTSTORAGEBIN = \"Pick_default_storage_bin\";\r\n\r\n\r\n\r\n    public static final String MOVEAMOUNTMANUAL_NAMESTR = \"Move_Amount_manual\";\r\n    public static final String MOVEBARCODECHECK_NAMESTR = \"Move_Barcode_check\";\r\n    public static final String MOVEVALIDATESTOCK_NAMESTR = \"Move_validate_stock\";\r\n    public static final String MOVEVALIDATESTOCKENFORCE_NAMESTR = \"Move_validate_stock_enforce\";\r\n    public static final String MOVE_MT_TAKEAMOUNTMANUAL_NAMESTR = \"Move_MT_take_amount_manual\";\r\n    public static final String MOVE_MT_TAKEAUTOITEM_NAMESTR = \"Move_MT_take_auto_item\";\r\n    public static final String MOVE_MT_TAKEAUTOITEMCONTAINERONCE_NAMESTR = \"Move_MT_take_auto_item_container_once\";\r\n    public static final String MOVE_MT_TAKEALLOWEND_NAMESTR = \"Move_MT_take_allow_end\";\r\n    public static final String MOVE_MT_TAKEIGNOREUNDERTAKE_NAMESTR = \"Move_MT_take_ignore_undertake\";\r\n    public static final String MOVE_MT_TAKEAUTOACCEPTSINGLEPIECE_NAMESTR = \"Move_MT_take_auto_accept_single_piece\";\r\n    public static final String MOVE_MT_PLACEAMOUNTMANUAL_NAMESTR = \"Move_MT_place_amount_manual\";\r\n    public static final String MOVE_MT_PLACEAUTOITEM_NAMESTR = \"Move_MT_place_auto_item\";\r\n    public static final String MOVE_AUTOACCEPTATREQUESTED_NAMESTR = \"Move_auto_accept_at_requested\";\r\n    public static final String MOVE_NOEXTRABINS_NAMESTR = \"Move_no_extra_bins\";\r\n    public static final String MOVE_NOEXTRAITEMS_NAMESTR = \"Move_no_extra_items\";\r\n    public static final String MOVE_NOEXTRAPIECES_NAMESTR = \"Move_no_extra_pieces\";\r\n    public static final String MOVEWITHPICTURE_NAMESTR = \"Move_with_picture\";\r\n    public static final String MOVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Move_with_picture_auto_open\";\r\n    public static final String MOVEWITHPICTURE_PREFETCH_NAMESTR = \"Move_with_picture_prefetch\";\r\n    //endregion M\r\n\r\n    //region N\r\n    public static final String NAMEDUTCH_NAMESTR = \"Naam\";\r\n    public static final String NAMEADDITION_NAMESTR = \"Naamtoevoeging\";\r\n    public static final String NAMESHORT_NAMESTR = \"Naam_kort\";\r\n\r\n\r\n    public static final String NUMBEROFBINS_NAMESTR = \"Aantal_bins\";\r\n    //endregion N\r\n\r\n    //region O\r\n    public static final String ORDERDUTCH_NAMESTR = \"Volgorde\";\r\n    public static final String OMSCHRIJVING_NAMESTR = \"Omschrijving\";\r\n    public static final String ORDERNUMBER_NAMESTR = \"Opdrachtnummer\";\r\n    public static final String ORDERTYPE_NAMESTR = \"Opdrachttype\";\r\n    public static final String ORIGINDUTCH_NAMESTR = \"Herkomstcode\";\r\n    public static final String ORIGINKEYDUTCH_NAMESTR = \"Herkomstsleutel\";\r\n    //endregion O\r\n\r\n    //region P\r\n\r\n    public static final String PACKAGECONTAINER_NAMESTR = \"PackageContainer\";\r\n    public static final String PACKAGECONTAINERTYPE_NAMESTR = \"PackageContainersoort\";\r\n    public static final String PACKAGEITEMCOUNT_NAMESTR = \"PackageItemCount\";\r\n    public static final String PACKAGEWEIGHTING_NAMESTR = \"PackageWeightInG\";\r\n    public static final String PACKAGETYPE_NAMESTR = \"PackageType\";\r\n    public static final String PACKAGESEQUENCENUMBER_NAMESTR = \"PackageSequenceNumber\";\r\n    public static final String PACKINGTABLE_NAMESTR = \"Packingtable\";\r\n    public static final String PHONE_NAMESTR = \"PhoneNumber\";\r\n    public static final String PHONENL_NAMESTR = \"Telefoon\";\r\n    public static final String PICKSALESASKWORKPLACE_NAMESTR = \"Pick_Sales_ask_workplace\";\r\n    public static final String PICKTRANSFERASKWORKPLACE_NAMESTR = \"Pick_Transfer_ask_workplace\";\r\n    public static final String PICKAUTONEXT_NAMESTR = \"Pick_Auto_next\";\r\n    public static final String PICKBARCODECHECK_NAMESTR = \"Pick_Barcode_check\";\r\n    public static final String PICKPICKPVVKKOEACHPIECE_NAMESTR = \"Pick_Pick_PV_VKO_each_piece\";\r\n    public static final String PICKPICKTOCONTAINER_NAMESTR = \"Pick_Pick_to_container\";\r\n    public static final String PICKPICKTOCONTAINERTYPE_NAMESTR = \"Pick_Pick_to_container_type\";\r\n    public static final String PICKPRINTADDRESSLABEL_NAMESTR = \"Pick_Print_adreslabel\";\r\n    public static final String PICKPRINTCONTENTLABEL_NAMESTR = \"Pick_Print_contentlabel\";\r\n    public static final String PICKWITHPICTURE_NAMESTR = \"Pick_with_picture\";\r\n    public static final String PICKWITHPICTURE_AUTO_OPEN_NAMESTR = \"Pick_with_picture_auto_open\";\r\n    public static final String PICKWITHPICTURE_PREFETCH_NAMESTR = \"Pick_with_picture_prefetch\";\r\n    public static final String PICKACTIVITYBINREQUIRED_NAMESTR = \"Pick_Activity_bin_required\";\r\n    public static final String PICKQCCHECKCOUNT_NAMESTR = \"Pick_Qc_check_count\";\r\n\r\n    public static final String POSITIONSTART_NAMESTR = \"Position_start\";\r\n    public static final String POSITIONEND_NAMESTR = \"Position_end\";\r\n\r\n    public  static final String PRIORITY_NAMESTR = \"Priority\";\r\n\r\n    public static final String PRICE_NAMESTR = \"Price\";\r\n    public static final String PRINTDOCUMENTS_NAMESTR = \"PrintDocuments\";\r\n    public static final String PROCESSINGSEQUENCE_NAMESTR = \"ProcessingSequence\";\r\n    public static final String PROPERTY_NAMESTR = \"Property\";\r\n    public static final String PROPERTYCODE_NAMESTR = \"Propertycode\";\r\n    public static final String PROPERTYDUTCH_NAMESTR = \"Propertie\";\r\n    public static final String PROPERTYSDUTCH_NAMESTR = \"Properties\";\r\n    public static final String PROPERTYGROUP_NAMESTR = \"Propertiegroep\";\r\n    public static final String ADDRESSES_NAMESTR = \"Addresses\";\r\n    public static final String SHIPPINGMETHODS_NAMESTR = \"ShippingMethods\";\r\n    public static final String COMPOSITEBARCODESPLITTED_NAMESTR = \"Composite_barcode\";\r\n    public static final String COMPOSITEBARCODETYPE_NAMESTR = \"Compositebarcode_type\";\r\n    public static final String FIELDSEPERATOR_NAMESTR = \"Field_separator\";\r\n    public static final String LAYOUTREGEX_NAMESTR = \"Layout_regex\";\r\n    public static final String LAYOUTTYPE_NAMESTR = \"Layout_type\";\r\n\r\n\r\n    public static final String PICKORDERLINEBARCODE_LINENO = \"LineNo\";\r\n    public static final String PICKORDERLINEBARCODE_BARCODE = \"Barcode\";\r\n    public static final String PICKORDERLINEBARCODE_QUANTITY = \"Quantity\";\r\n    public static final String PICKORDERLINEBARCODE_ISMANUAL = \"IsManual\";\r\n    //endregion P\r\n\r\n    //region Q\r\n    public static final String QUANTITY_NAMESTR = \"Quantity\";\r\n\r\n    public static final String QUANTITYAVAILABLE_NAMESTR = \"Voorraad_beschikbaar\";\r\n    public static final String QUANTITYHANDLED_NAMESTR = \"QuantityHandled\";\r\n    public static final String QUANTITYHANDLEDALLSCANNERS_NAMESTR = \"QuantityHandledAllScanners\";\r\n    public static final String QUANTITYHANDLEDSUM_NAMESTR = \"QuantityHandledSum\";\r\n    public static final String QUANTITYPERUNITOFMEASURE_NAMESTR = \"QtyPerUnitOfMeasure\";\r\n    public static final String QUANTITYREJECTED_NAMESTR = \"QuantityRejected\";\r\n    public static final String QUANTITYCHECKED_NAMESTR = \"QuantityChecked\";\r\n    public static final String QUANTITYTOTAL_NAMESTR = \"QuantityTotal\";\r\n    public static final String QUANTITYTAKEN_NAMESTR = \"QuantityTaken\";\r\n    public static final String QUANTITYHANDLEDTAKE_NAMESTR = \"QuantityHandled_take\";\r\n    public static final String QUANTITYTAKE_NAMESTR = \"Quantity_take\";\r\n    public static final String QUANTITYTAKENOTEXPORTED_NAMESTR = \"QuantityHandled_take_not_exported\";\r\n    public static final String QUANTITYTAKEEXPORTED_NAMESTR = \"QuantityHandled_take_exported\";\r\n    //endregion Q\r\n\r\n    //region R\r\n    public static final String RECEIVEDEFAULTBIN_NAMESTR = \"Receive_default_bin\";\r\n    public static final String REGION_NAMESTR = \"Regio\";\r\n    public static final String REJECTPICK_NAMESTR = \"RejectPick\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGINTAKE_NAMESTR = \"Receive_intake_eo_packaging_intake\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGSHIPPED_NAMESTR = \"Receive_intake_eo_packaging_shipped\";\r\n\r\n    public static final String RECEIVEWITHPICTURE_NAMESTR = \"Receive_with_picture\";\r\n    public static final String RECEIVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Receive_with_picture_auto_open\";\r\n    public static final String RECEIVEWITHPICTURE_PREFETCH_NAMESTR = \"Receive_with_picture_prefetch\";\r\n    public static final String REQUESTENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDSTARTDATETIME_NAMESTR = \"RequestedStartDateTime\";\r\n    public static final String REMEMBERVALUE_NAMESTR = \"RememberValue\";\r\n    public static final String RETURNDEFAULTBIN_NAMESTR = \"Retour_default_bin\";\r\n\r\n    public static final String RECEIVEDDATETIME_NAMESTR = \"ReceivedDateTime\";\r\n    public static final String RECEIVEEXPORTPART_NAMESTR = \"Receive_export_part\";\r\n    public static final String RECEIVE_AMOUNT_MANUAL_NAMESTR = \"Receive_Amount_manual\";\r\n    public static final String RECEIVEAMOUNTMANUAL_EO_NAMESTR = \"Receive_Amount_manual_eo\";\r\n    public static final String RECEIVEBARCODECHECK_NAMESTR = \"Receive_Barcode_check\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATREQUESTED_NAMESTR = \"Receive_store_auto_accept_at_requested\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATNEWITEM_NAMESTR = \"Receive_store_auto_accept_at_new_item\";\r\n    public static final String RECEIVESTOREAUTOACCEPTVALIDATIONMESSAGE_NAMESTR = \"Receive_store_auto_accept_validation_message\";\r\n    public static final String RECEIVENOEXTRABINS_NAMESTR = \"Receive_no_extra_bins\";\r\n    public static final String RECEIVENOEXTRAITEMS_NAMESTR = \"Receive_no_extra_items\";\r\n    public static final String RECEIVENOEXTRAPIECES_NAMESTR = \"Receive_no_extra_pieces\";\r\n    public static final String RECEIVEMATAUTOSPLITINCOMPLETELINE_NAMESTR = \"Receive_mat_auto_split_incomplete_line\";\r\n\r\n    public static final String RETOURREDEN_NAMESTR = \"Retourreden\";\r\n    public static final String RETOURAMAOUNTMANUAL_NAMESTR = \"Retour_Amount_manual\";\r\n    public static final String RETOURBARCODECHECK_NAMESTR = \"Retour_Barcode_check\";\r\n    public static final String RETOURMULTIDOCUMENT_NAMESTR = \"Retour_multi_document\";\r\n    public static final String RETOURORDERBINNOCHECK_NAMESTR = \"Retour_Order_bin_no_check\";\r\n\r\n\r\n    public static final String REASON_NAMESTR = \"Reason\";\r\n    public static final String REASONNL_NAMESTR = \"Reden\";\r\n    public static final String RETURN_NAMESTR = \"Return\";\r\n    public static final String RETURNEXTERNAL_NAMESTR = \"ReturnExternal\";\r\n\r\n    public static final String RETOURWITHPICTURE_NAMESTR = \"Retour_with_picture\";\r\n    public static final String RETURNADDRESSCODE_NAMESTR = \"ReturnAddressCode\";\r\n    public static final String RETURNSENDERADDRESSCODE_NAMESTR = \"ReturnSenderAddressCode\";\r\n    public static final String RETURNSHIPPINGADDRESSCODE_NAMESTR = \"ReturnShippingAddressCode\";\r\n    //endregion R\r\n\r\n    //region S\r\n    public static final String SALESORDER_NAMESTR = \"Salesorder\";\r\n    public static final String SCANNER_NAMESTR = \"Scanner\";\r\n    public static final String SENDERADDRESSCODE_NAMESTR = \"SenderAddressCode\";\r\n\r\n    public static final String SEQUENCENOHANDLED_NAMESTR = \"SequenceNoHandled\";\r\n    public static final String SETTINGCODE_NAMESTR = \"SettingCode\";\r\n    public static final String SETTINGVALUE_NAMESTR = \"SettingValue\";\r\n    public static final String SETTING_NAMESTR = \"Instelling\";\r\n    public static final String SINGLEARTICLEORDERS_NAMESTR = \"SingleArticleOrders\";\r\n    public static final String STATUS_NAMESTR = \"Status\";\r\n    public static final String STATUSSHIPPING_NAMESTR = \"StatusShipping\";\r\n    public static final String STATUSPACKING_NAMESTR = \"StatusPacking\";\r\n    public static final String STATUSPRINTATSTART_NAMESTR = \"StatusPrintAtStart\";\r\n    public static final String STOCKOWNER_NAMESTR = \"StockOwner\";\r\n    public static final String SORTORDER_NAMESTR = \"Volgorde\";\r\n    public static final String SORTING_NAMESTR = \"Sortering\";\r\n    public static final String SOURCEDOCUMENT_NAMESTR = \"SourceDocument\";\r\n    public static final String SOURCENO_NAMESTR = \"SourceNo\";\r\n    public static final String SORTINGSEQUENCENO_NAMESTR = \"SortingSequenceNo\";\r\n    public static final String SORTINGSEQUENCENOPLACE_NAMESTR = \"SortingSequenceNo_place\";\r\n    public static final String STORAGEBINCODE_NAMESTR = \"StorageBinCode\";\r\n    public static final String STOREBINCODE_NAMESTR = \"StoreBinCode\";\r\n    public static final String STORESOURCEORDER_NAMESTR = \"StoreSourceOpdracht\";\r\n    public static final String STREETNL_NAMESTR = \"Straat\";\r\n    public static final String STREET_NAMESTR = \"Street\";\r\n    public static final String STREETCOMPLEMENTERD_NAMESTR = \"StreetComplemented\";\r\n    public static final String SEQUENCE_NAMESTR = \"Order\";\r\n    public static final String SHIPPINGAGENT_NAMESTR = \"Expediteur\";\r\n    public static final String SHIPPINGLABELS_NAMESTR = \"ShippingLabels\";\r\n    public static final String SERVICE_NAMESTR = \"Service\";\r\n    public static final String SHIPPINGUNIT_NAMESTR = \"Verzendeenheid\";\r\n    public static final String SHIPPINGMETHOD_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGMETHODCODE_NAMESTR = \"ShippingMethodCode\";\r\n    public static final String SHIPPINGMETHODVALUE_NAMESTR = \"ShippingMethodValue\";\r\n    public static final String SHIPPINGUNITQUANTITYUSED_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGAGENTCODE_NAMESTR = \"ShippingAgentCode\";\r\n    public static final String SHIPPINGAGENTSERVICECODE_NAMESTR = \"ShippingAgentServiceCode\";\r\n    public static final String SHIPPINGADDRESSCODE_NAMESTR = \"ShippingAddressCode\";\r\n    public static final String SHIPPINGADDRESSTYPE_NAMESTR = \"ShippingAddressType\";\r\n\r\n    public static final String SHOWONTERMINAL_NAMESTR = \"ShowOnTerminal\";\r\n    public static final String SOURCETYPE_NAMESTR = \"SourceType\";\r\n    public static final String SORTINGSEQUENCENOTAKE_NAMESTR = \"SortingSequenceNo_take\";\r\n    public static final String STRIPTHIS_NAMESTR = \"Strip_this\";\r\n    //endregion S\r\n\r\n    //region T\r\n    public static final String TAKENTIMESTAMP_NAMESTR = \"TakenTimestamp\";\r\n    public static final String TEMPLATE_NAMESTR = \"Template\";\r\n    public static final String TEXTDUTCH_NAMESTR = \"Tekst\";\r\n    public static final String TRANSLATIONDUTCH_NAMESTR = \"Vertaling\";\r\n    //endregion T\r\n\r\n\r\n    //region U\r\n    public static final String USEFORSTORAGE_NAMESTR = \"UseForStorage\";\r\n    public static final String USEFORRETURNSALES_NAMESTR = \"UseForReturnSales\";\r\n    public static final String UNIQUNESS_NAMESTR = \"Uniqueness\";\r\n    public static final String UNITOFMEASURE_NAMESTR = \"UnitOfMeasure\";\r\n    public static final String USERNAME_NAMESTR = \"Gebruikersnaam\";\r\n    //endregion U\r\n\r\n    //region V\r\n    public static final String VALUE_NAMESTR = \"Value\";\r\n    public static final String VALUENL_NAMESTR = \"Waarde\";\r\n    public static final String VALUEHANDLED_NAMESTR = \"ValueHandled\";\r\n    public static final String VARIANTCODE_NAMESTR = \"VariantCode\";\r\n    public static final String VENDORITEMNO_NAMESTR = \"VendorItemNo\";\r\n    public static final String VENDORITEMDESCRIPTION_NAMESTR = \"VendorItemDescription\";\r\n    public static final String VALUETYPE_NAMESTR = \"ValueType\";\r\n    public static final String VERZENDLABEL_STATUS_NAMESTR = \"Verzendlabel_status\";\r\n\r\n\r\n    //endregion V\r\n\r\n    //region W\r\n    public static final String WAREHOUSELOCATION_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String WEBSERVICETIMEOUTERPINS_NAMESTR = \"Webservice_timeout_erp_in_s\";\r\n    public static final String WORKPLACE_NAMESTR = \"Workplace\";\r\n    public static final String WORKPLACE_DUTCH_NAMESTR = \"Werkplek\";\r\n    //endregion W\r\n\r\n    //region Z\r\n    public static final String ZIPCODENL_NAMESTR = \"Postcode\";\r\n    public static final String ZIPCODE_NAMESTR = \"Zipcode\";\r\n    public static final String ZONE_NAMESTR = \"Zone\";\r\n\r\n\r\n\r\n    //endregion Z\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/General/cDatabase.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/SSU_WHS/General/cDatabase.java	(date 1617283728673)
---@@ -46,6 +46,8 @@
---     public static final String TABLENAME_INVENTORYORDER = "InventoryOrder";
---     public static final String TABLENAME_INVENTORYORDERBIN = "InventoryOrderBin";
---     public static final String TABLENAME_INVENTORYORDERLINE = "InventoryOrderLines";
---+    public static final String TABLENAME_INVENTORYORDERLINEPROPERTY = "InventoryorderlineProperty";
---+    public static final String TABLENAME_INVENTORYORDERLINEPROPERTYVALUE = "InventoryorderlinePropertyValue";
---     public static final String TABLENAME_INVENTORYORDERBARCODE = "InventoryOrderBarcodes";
---     public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = "InventoryOrderLineBarcodes";
---     public static final String TABLENAME_INTAKEORDERMATLINES  = "IntakeLinesMAT";
---Index: app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.General;\r\n\r\nimport android.content.Context;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.RoomDatabase;\r\n\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageEntity;\r\nimport SSU_WHS.Basics.ArticleImages.iArticleImageDao;\r\nimport SSU_WHS.Basics.Authorisations.cAuthorisationEntity;\r\nimport SSU_WHS.Basics.Authorisations.iAuthorisationDao;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwnerEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayoutEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.iBarcodeLayoutDao;\r\nimport SSU_WHS.Basics.Branches.cBranchEntity;\r\nimport SSU_WHS.Basics.Branches.iBranchDao;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcodeEntity;\r\nimport SSU_WHS.Basics.CompositeBarcode.iCompositeBarcodeDao;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.cCompositeBarcodePropertyEntity;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.iCompositeBarcodePropertyDao;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisationEntity;\r\nimport SSU_WHS.Basics.CustomAuthorisations.iCustomAuthorisationDao;\r\nimport SSU_WHS.Basics.ItemProperty.cItemPropertyEntity;\r\nimport SSU_WHS.Basics.ItemProperty.iItemPropertyDao;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplateEntity;\r\nimport SSU_WHS.Basics.LabelTemplate.iLabelTemplateDao;\r\nimport SSU_WHS.Basics.Packaging.cPackagingEntity;\r\nimport SSU_WHS.Basics.Packaging.iPackagingDao;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroupEntity;\r\nimport SSU_WHS.Basics.PropertyGroup.iPropertyGroupDao;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.cPropertyGroupPropertyEntity;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.iPropertyGroupPropertyDao;\r\nimport SSU_WHS.Basics.Scanners.cScannerEntity;\r\nimport SSU_WHS.Basics.Scanners.iScannerDao;\r\nimport SSU_WHS.Basics.Settings.cSettingsEntity;\r\nimport SSU_WHS.Basics.Settings.iSettingsDao;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnitEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.iShippingAgentServiceShippingUnitDao;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentServiceEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServices.iShippingAgentServiceDao;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgentEntity;\r\nimport SSU_WHS.Basics.ShippingAgents.iShippingAgentDao;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentServiceShipMethodEntity;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.iShippingAgentServiceShipMethodDao;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwnerEntity;\r\nimport SSU_WHS.Basics.StockOwner.iStockOwnerDao;\r\nimport SSU_WHS.Basics.Translations.cTranslationEntity;\r\nimport SSU_WHS.Basics.Translations.iTranslationDao;\r\nimport SSU_WHS.Basics.Users.cUserEntity;\r\nimport SSU_WHS.Basics.Users.iUserDao;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceEntity;\r\nimport SSU_WHS.Basics.Workplaces.iWorkplaceDao;\r\nimport SSU_WHS.General.Comments.cCommentEntity;\r\nimport SSU_WHS.General.Comments.iCommentDao;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.iIntakeorderBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.cIntakeorderMATLineBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.iIntakeorderMATLineBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLineEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.iIntakeorderMATLineDao;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorderEntity;\r\nimport SSU_WHS.Intake.Intakeorders.iIntakeorderDao;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorderEntity;\r\nimport SSU_WHS.Inventory.InventoryOrders.iInventoryorderDao;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.iInventoryorderBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.iInventoryorderLineBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.iInventoryorderLineDao;\r\nimport SSU_WHS.Move.Moveorders.cMoveorderEntity;\r\nimport SSU_WHS.Move.Moveorders.iMoveorderDao;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderBarcodes.iMoveorderBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.iMoveorderLineBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLineEntity;\r\nimport SSU_WHS.Move.MoveorderLines.iMoveorderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.cPackAndShipAddressEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.iPackAndShipAddressDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.cPackAndShipBarcodeEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.iPackAndShipBarcodeDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.cPackAndShipOrderLineEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.iPackAndShipOrderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrderEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.iPackAndShipOrderDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.cPackAndShipSettingEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.iPackAndShipSettingDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.cPackAndShipShipmentEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.iPackAndShipShipmentDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.cPackAndShipShippingMethodEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.iPackAndShipShippingMethodDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.cPackAndShipShippingPackageEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.iPackAndShipShippingPackageDao;\r\nimport SSU_WHS.Picken.FinishSinglePieceLine.cPickorderLineFinishSinglePieceEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.cPickorderAddressEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.iPickorderAddressDao;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderBarcodes.iPickorderBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.iPickorderCompositeBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.iPickorderLineBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLinePackAndShip.cPickorderLinePackAndShipEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.iPickorderLinePropertyDao;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.iPickorderLinePropertyValueDao;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.PickorderSetting.cPickorderSettingEntity;\r\nimport SSU_WHS.Picken.PickorderSetting.iPickorderSettingDao;\r\nimport SSU_WHS.Picken.PickorderShipPackages.cPickorderShipPackageEntity;\r\nimport SSU_WHS.Picken.PickorderShipPackages.iPickorderShipPackageDao;\r\nimport SSU_WHS.Picken.Pickorders.cPickorderEntity;\r\nimport SSU_WHS.Picken.Pickorders.iPickorderDao;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTableEntity;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.iSalesOrderPackingTableDao;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLineEntity;\r\nimport SSU_WHS.Receive.ReceiveLines.iReceiveorderLineDao;\r\nimport SSU_WHS.Return.ReturnOrder.cReturnorderEntity;\r\nimport SSU_WHS.Return.ReturnOrder.iReturnorderDao;\r\nimport SSU_WHS.Return.ReturnorderBarcode.cReturnorderBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderBarcode.iReturnorderBarcodeDao;\r\nimport SSU_WHS.Return.ReturnorderDocument.cReturnorderDocumentEntity;\r\nimport SSU_WHS.Return.ReturnorderDocument.iReturnorderDocumentDao;\r\nimport SSU_WHS.Return.ReturnorderLine.cReturnorderLineEntity;\r\nimport SSU_WHS.Return.ReturnorderLine.iReturnorderLineDao;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.cReturnorderLineBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.iReturnorderLineBarcodeDao;\r\nimport SSU_WHS.ScannerLogon.cScannerLogonEntity;\r\nimport SSU_WHS.ScannerLogon.iScannerLogonDao;\r\n\r\n@Database(entities = {\r\n        cScannerLogonEntity.class,\r\n        cWorkplaceEntity.class,\r\n        cBarcodeLayoutEntity.class,\r\n        cAuthorisationEntity.class,\r\n        cUserEntity.class,\r\n        cBranchEntity.class,\r\n        cSettingsEntity.class,\r\n        cPickorderEntity.class,\r\n        cPickorderLineEntity.class,\r\n        cPickorderLineBarcodeEntity.class,\r\n        cPickorderLinePropertyEntity.class,\r\n        cPickorderLinePropertyValueEntity.class,\r\n        cArticleImageEntity.class,\r\n        cPickorderBarcodeEntity.class,\r\n        cPickorderCompositeBarcodeEntity.class,\r\n        cCommentEntity.class,\r\n        cSalesOrderPackingTableEntity.class,\r\n        cPickorderAddressEntity.class,\r\n        cShippingAgentEntity.class,\r\n        cShippingAgentServiceEntity.class,\r\n        cShippingAgentServiceShippingUnitEntity.class,\r\n        cShippingAgentServiceShipMethodEntity.class,\r\n        cPickorderShipPackageEntity.class,\r\n        cPickorderLineFinishSinglePieceEntity.class,\r\n        cPickorderSettingEntity.class,\r\n        cItemPropertyEntity.class,\r\n        cPropertyGroupEntity.class,\r\n        cPropertyGroupPropertyEntity.class,\r\n        cPickorderLinePackAndShipEntity.class,\r\n        cInventoryorderEntity.class,\r\n        cInventoryorderBinEntity.class,\r\n        cInventoryorderLineEntity.class,\r\n        cInventoryorderBarcodeEntity.class,\r\n        cInventoryorderLineBarcodeEntity.class,\r\n        cIntakeorderEntity.class,\r\n        cIntakeorderMATLineEntity.class,\r\n        cIntakeorderBarcodeEntity.class,\r\n        cIntakeorderMATLineBarcodeEntity.class,\r\n        cReturnorderEntity.class,\r\n        cReturnorderBarcodeEntity.class,\r\n        cReturnorderDocumentEntity.class,\r\n        cReturnorderLineEntity.class,\r\n        cReturnorderLineBarcodeEntity.class,\r\n        cReceiveorderLineEntity.class,\r\n        cMoveorderEntity.class,\r\n        cMoveorderLineEntity.class,\r\n        cMoveorderBarcodeEntity.class,\r\n        cMoveorderLineBarcodeEntity.class,\r\n        cPackagingEntity.class,\r\n        cScannerEntity.class,\r\n        cCustomAuthorisationEntity.class,\r\n        cTranslationEntity.class,\r\n        cCompositeBarcodeEntity.class,\r\n        cCompositeBarcodePropertyEntity.class,\r\n        cPackAndShipOrderEntity.class,\r\n        cPackAndShipOrderLineEntity.class,\r\n        cPackAndShipBarcodeEntity.class,\r\n        cPackAndShipShipmentEntity.class,\r\n        cPackAndShipAddressEntity.class,\r\n        cPackAndShipSettingEntity.class,\r\n        cPackAndShipShippingMethodEntity.class,\r\n        cPackAndShipShippingPackageEntity.class,\r\n        cStockOwnerEntity.class,\r\n        cAuthorizedStockOwnerEntity.class,\r\n        cLabelTemplateEntity.class,\r\n        },version = 150)\r\n\r\n\r\npublic abstract class acScanSuiteDatabase extends RoomDatabase {\r\n    public abstract iScannerLogonDao scannerLogonDao();\r\n    public abstract iSettingsDao settingsDao();\r\n    public abstract iBarcodeLayoutDao barcodeLayoutDao();\r\n    public abstract iAuthorisationDao authorisationDao();\r\n    public abstract iScannerDao scannerDao();\r\n    public abstract iWorkplaceDao workplaceDao();\r\n    public abstract iBranchDao branchDao();\r\n    public abstract iUserDao userDao();\r\n    public abstract iPickorderDao pickorderDao();\r\n    public abstract iPickorderLineDao pickorderLineDao();\r\n    public abstract iPickorderLineBarcodeDao pickorderLineBarcodeDao();\r\n    public abstract iPickorderLinePropertyDao pickorderLinePropertyDao();\r\n    public abstract iPickorderLinePropertyValueDao pickorderLinePropertyValueDao();\r\n    public abstract iArticleImageDao articleImageDao();\r\n    public abstract iPickorderBarcodeDao pickorderBarcodeDao();\r\n    public abstract iPickorderCompositeBarcodeDao pickorderCompositeBarcodeDao();\r\n    public abstract iCommentDao commentDao();\r\n    public abstract iSalesOrderPackingTableDao salesOrderPackingTableDao();\r\n    public abstract iPickorderAddressDao pickorderAddressDao();\r\n    public abstract iPickorderSettingDao pickorderSettingDao();\r\n    public abstract iShippingAgentDao shippingAgentDao();\r\n    public abstract iShippingAgentServiceDao shippingAgentServiceDao();\r\n    public abstract iShippingAgentServiceShippingUnitDao shippingAgentServiceShippingUnitDao();\r\n    public abstract iShippingAgentServiceShipMethodDao shippingAgentServiceShipMethodDao();\r\n    public abstract iPickorderShipPackageDao pickorderShipPackageDao();\r\n    public abstract iItemPropertyDao itemPropertyDao();\r\n    public abstract iPropertyGroupDao propertyGroupDao();\r\n    public abstract iPropertyGroupPropertyDao propertyGroupPropertyDao();\r\n    public abstract iCompositeBarcodeDao compositeBarcodeDao();\r\n    public abstract iCompositeBarcodePropertyDao compositeBarcodePropertyDao();\r\n    public abstract iInventoryorderDao inventoryorderDao();\r\n    public abstract iInventoryorderBinDao inventoryorderBinDao();\r\n    public abstract iInventoryorderLineDao inventoryorderLineDao();\r\n    public abstract iInventoryorderBarcodeDao inventoryorderBarcodeDao();\r\n    public abstract iInventoryorderLineBarcodeDao inventoryorderLineBarcodeDao();\r\n    public abstract iIntakeorderMATLineDao intakeorderMATLineDao();\r\n    public abstract iIntakeorderDao intakeorderDao();\r\n    public abstract iIntakeorderBarcodeDao intakeorderBarcodeDao();\r\n    public abstract iIntakeorderMATLineBarcodeDao intakeorderMATLineBarcodeDao();\r\n    public abstract iReturnorderDao returnorderDao();\r\n    public abstract iReturnorderDocumentDao returnorderDocumentDao();\r\n    public abstract iReturnorderLineDao returnorderLineDao();\r\n    public abstract iReturnorderBarcodeDao returnorderBarcodeDao();\r\n    public abstract iReturnorderLineBarcodeDao returnorderLineBarcodeDao();\r\n    public abstract iReceiveorderLineDao receiveorderLineDao();\r\n    public  abstract iMoveorderDao moveorderDao();\r\n    public  abstract iMoveorderLineDao moveorderLineDao();\r\n    public  abstract iMoveorderLineBarcodeDao moveorderLineBarcodeDao();\r\n    public  abstract iMoveorderBarcodeDao moveorderBarcodeDao();\r\n    public  abstract iPackagingDao packagingDao();\r\n    public  abstract iCustomAuthorisationDao customAuthorisationDao();\r\n    public  abstract iTranslationDao translationDao();\r\n    public  abstract iPackAndShipOrderDao packAndShipOrderDao();\r\n    public  abstract iPackAndShipOrderLineDao packAndShipOrderLineDao();\r\n    public  abstract iPackAndShipSettingDao packAndShipSettingDao();\r\n    public  abstract iPackAndShipBarcodeDao packAndShipBarcodeDao();\r\n    public  abstract iPackAndShipShipmentDao packAndShipShipmentDao();\r\n    public  abstract iPackAndShipAddressDao packAndShipAddressDao();\r\n    public  abstract iPackAndShipShippingMethodDao packAndShipShippingMethodDao();\r\n    public  abstract iPackAndShipShippingPackageDao packAndShipShippingPackageDao();\r\n    public  abstract iStockOwnerDao stockOwnerDao();\r\n    public  abstract iLabelTemplateDao labelTemplateDao();\r\n\r\n    private static acScanSuiteDatabase INSTANCE;\r\n\r\n    public static acScanSuiteDatabase pGetDatabase(final Context context) {\r\n        if (INSTANCE == null) {\r\n            synchronized (acScanSuiteDatabase.class) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(), acScanSuiteDatabase.class, \"SSU_WHS\").fallbackToDestructiveMigration().build();\r\n                }\r\n            }\r\n        }\r\n        return INSTANCE;\r\n    }\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(date 1617284664624)
---@@ -71,6 +71,10 @@
--- import SSU_WHS.Inventory.InventoryorderLineBarcodes.iInventoryorderLineBarcodeDao;
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
--- import SSU_WHS.Inventory.InventoryorderLines.iInventoryorderLineDao;
---+import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLinePropertyEntity;
---+import SSU_WHS.Inventory.InventoryorderlineProperty.iInventoryorderlinePropertyDao;
---+import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValueEntity;
---+import SSU_WHS.Inventory.InventoryorderlinePropertyValue.iInventoryorderLinePropertyValueDao;
--- import SSU_WHS.Move.Moveorders.cMoveorderEntity;
--- import SSU_WHS.Move.Moveorders.iMoveorderDao;
--- import SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcodeEntity;
---@@ -169,6 +173,8 @@
---         cInventoryorderLineEntity.class,
---         cInventoryorderBarcodeEntity.class,
---         cInventoryorderLineBarcodeEntity.class,
---+        cInventoryorderLinePropertyEntity.class,
---+        cInventoryorderLinePropertyValueEntity.class,
---         cIntakeorderEntity.class,
---         cIntakeorderMATLineEntity.class,
---         cIntakeorderBarcodeEntity.class,
---@@ -200,7 +206,7 @@
---         cStockOwnerEntity.class,
---         cAuthorizedStockOwnerEntity.class,
---         cLabelTemplateEntity.class,
----        },version = 150)
---+        },version = 151)
--- 
--- 
--- public abstract class acScanSuiteDatabase extends RoomDatabase {
---@@ -239,6 +245,9 @@
---     public abstract iInventoryorderLineDao inventoryorderLineDao();
---     public abstract iInventoryorderBarcodeDao inventoryorderBarcodeDao();
---     public abstract iInventoryorderLineBarcodeDao inventoryorderLineBarcodeDao();
---+    public abstract iInventoryorderlinePropertyDao inventoryorderlinePropertyDao();
---+    public  abstract  iInventoryorderLinePropertyValueDao inventoryorderLinePropertyValueDao();
---+
---     public abstract iIntakeorderMATLineDao intakeorderMATLineDao();
---     public abstract iIntakeorderDao intakeorderDao();
---     public abstract iIntakeorderBarcodeDao intakeorderBarcodeDao();
---Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package nl.icsvertex.scansuite.Activities.Inventory;\r\n\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.InputType;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class InventoryArticleActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    //End Region Public Properties\r\n\r\n    //Region Private\r\n\r\n    private  ConstraintLayout inventoryArticleDetailContainer;\r\n\r\n    private Toolbar toolbar;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n    private  TextView articleDescriptionText;\r\n    private  TextView articleDescription2Text;\r\n    private  TextView articleItemText;\r\n    private  TextView articleBarcodeText;\r\n    private  ImageView articleThumbImageView;\r\n\r\n    private TextView binText;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n\r\n    private  int inventoryCounterMinusHelperInt;\r\n    private  int inventoryCounterPlusHelperInt;\r\n    private  Handler minusHandler;\r\n    private  Handler plusHandler;\r\n\r\n    private  ImageView imageButtonDone;\r\n    private  ImageButton imageButtonBarcode;\r\n    private ImageView imageButtonNoInputPropertys;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public InventoryArticleActivity() {\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_inventoryarticle);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n            super.onPause();\r\n\r\n            if (cAppExtension.activity instanceof  InventoryArticleActivity) {\r\n                cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            }\r\n             LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_intakeactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n\r\n//        invalidateOptionsMenu();\r\n\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(true);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mStartInventoryBINActivity();\r\n                return true;\r\n\r\n            case R.id.item_print_item:\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.message_scan_article));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.inventoryArticleDetailContainer = findViewById(R.id.inventoryArticleDetailContainer);\r\n\r\n        this.toolbar =  findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.binText = findViewById(R.id.binText);\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_inventory);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        String subTitleStr = cInventoryorder.currentInventoryOrder.getOrderNumberStr();\r\n        this.toolbarSubTitle.setText(subTitleStr);\r\n        this.toolbarSubTitle.setSelected(true);\r\n\r\n        setSupportActionBar(this.toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInvAmountManualBln()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        this.inventoryCounterPlusHelperInt = 0;\r\n        this. inventoryCounterMinusHelperInt = 0;\r\n\r\n        this.articleDescriptionText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n        this.articleItemText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());\r\n\r\n        this.binText.setText(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n\r\n        this.mShowQuantityInfo();\r\n        this.mShowArticleImage();\r\n        this.mShowBarcodeInfo();\r\n        this.mHideArticleInfo();\r\n\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n       this.mSetDoneListener();\r\n\r\n        if (cSetting.INV_AMOUNT_MANUAL()) {\r\n            this.mSetNumberListener();\r\n            this.mSetImageButtonBarcodeListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(final cBarcodeScan pvBarcodeScan){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        //Only ARTICLE scans are allowed\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n            mDoUnknownScan(cAppExtension.context.getString(R.string.error_article_scan_mandatory));\r\n            return;\r\n        }\r\n\r\n        //Check if the scanned value belongs to this line\r\n        if (! cInventoryorder.currentInventoryOrder.pCheckBarcodeWithLineBarcodesBln(pvBarcodeScan)) {\r\n\r\n            //Keep the scan, so BIN activity can handle it\r\n            InventoryorderBinActivity.barcodeScanToHandle = pvBarcodeScan;\r\n\r\n            //Close this activity, we are done with the current article\r\n            this.mHandleDone();\r\n           return;\r\n        }\r\n\r\n        this.mShowBarcodeInfo();\r\n\r\n        //Try to raise quantityDbl\r\n        this.mTryToChangeInventoryQuantity(true, false,cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() );\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mTryToChangeInventoryQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n\r\n                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),\r\n                                                                          cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );\r\n\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n            } else {\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;\r\n            }\r\n\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n            return;\r\n        }\r\n\r\n        //negative\r\n\r\n        //Check if value already is zero\r\n        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {\r\n\r\n            //If we have a decimal, correct it to zero\r\n            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {\r\n                pvAmountDbl = 0;\r\n                pvAmountFixedBln = true;\r\n\r\n            } else {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (pvAmountDbl < 0) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n        if (pvAmountFixedBln) {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n        }else {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;\r\n        }\r\n\r\n        //Change quantityDbl in activity\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n    }\r\n\r\n    private  void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cInventoryorderLine.currentInventoryOrderLine.articleImage == null || cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap());\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo() {\r\n\r\n        this.quantityText.setImeOptions(EditorInfo.IME_ACTION_DONE);\r\n        this.quantityText.setSelectAllOnFocus(true);\r\n        this.quantityText.requestFocus();\r\n        this.quantityText.setSingleLine();\r\n        this.quantityText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_TEXT_VARIATION_NORMAL);\r\n        this.quantityText.setCursorVisible(false);\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n        this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (!cSetting.INV_AMOUNT_MANUAL()) {\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n            cUserInterface.pDoNope(this.quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() > 1) {\r\n\r\n            //Try to switch to another barcode for the same article, so the user doesn't have to manually\r\n            cInventoryorderBarcode inventoryorderBarcode = cInventoryorderBarcode.getSingleQuantityBarcodeForItemAndVariant(cInventoryorderBarcode.currentInventoryOrderBarcode);\r\n            if (inventoryorderBarcode != null) {\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n            }\r\n            else\r\n            {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n\r\n    private  void mHandleDone() {\r\n\r\n        //Try to save the line to the database\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pSaveLineViaWebserviceBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_line_save_failed),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        //Change quantityDbl handled in database\r\n        cInventoryorderLine.currentInventoryOrderLine.pUpdateQuantityInDatabase();\r\n\r\n        cUserInterface.pHideGettingData();\r\n        this.mResetCurrents();\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    private void mDoUnknownScan(String pvErrorMessageStr) {\r\n        cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer,pvErrorMessageStr,null,true);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(this.inventoryArticleDetailContainer);\r\n        constraintSetSpace.connect(this.articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(this.inventoryArticleDetailContainer);\r\n\r\n    }\r\n\r\n    private  void mShowBarcodeInfo(){\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode != null) {\r\n            this.articleBarcodeText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getUnitOfMeasureInfoStr());\r\n        } else {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.message_unknown_barcode));\r\n        }\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl() == null || cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 1) {\r\n                    pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLine.currentInventoryOrderLine.barcodesObl().get(0).getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEFRAGMENT_LIST_TAG);\r\n    }\r\n\r\n    private void mStartInventoryBINActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        InventoryorderBinActivity.busyBln = false;\r\n\r\n        final Intent intent = new Intent(cAppExtension.context, InventoryorderBinActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n            cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mResetCurrents(){\r\n        cInventoryorderLine.currentInventoryOrderLine = null;\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = null;\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode = null;\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityHandledDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,99999);\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    inventoryCounterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n                mTryToChangeInventoryQuantity(true, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    inventoryCounterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n                mTryToChangeInventoryQuantity(false, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mSetDoneListener(){\r\n\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mHandleDone();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n        this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n    }\r\n\r\n    //End Region Private Methods\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(date 1617289789323)
---@@ -48,6 +48,9 @@
--- import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
--- import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
---+import SSU_WHS.Picken.PickorderLines.cPickorderLine;
---+import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
---+import nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;
--- import nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;
--- import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
--- import nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;
---@@ -62,6 +65,8 @@
--- 
---     //Region Private
--- 
---+    public static boolean cancelledViaPropertysBln;
---+    public static boolean handledViaPropertysBln;
---     private  ConstraintLayout inventoryArticleDetailContainer;
--- 
---     private Toolbar toolbar;
---@@ -330,6 +335,17 @@
---     @Override
---     public void mInitScreen() {
--- 
---+        if (InventoryArticleActivity.handledViaPropertysBln) {
---+            this.mHandleDone();
---+            return;
---+        }
---+        else
---+        {
---+            if (!InventoryArticleActivity.cancelledViaPropertysBln && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl() != null && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().size() > 0 ) {
---+                mShowItemPropertyInputActivity();
---+                return;
---+            }
---+        }
---     }
--- 
---     //End Region iICSDefaultActivity defaults
---@@ -358,6 +374,9 @@
---            return;
---         }
--- 
---+
---+
---+
---         this.mShowBarcodeInfo();
--- 
---         //Try to raise quantityDbl
---@@ -761,5 +780,12 @@
---         this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);
---     }
--- 
---+    private  void mShowItemPropertyInputActivity() {
---+        cUserInterface.pCheckAndCloseOpenDialogs();
---+        Intent intent = new Intent(cAppExtension.context, InventoryorderLineItemPropertyInputActvity.class);
---+        cAppExtension.activity.startActivity(intent);
---+        cAppExtension.activity.finish();
---+    }
---+
---     //End Region Private Methods
--- }
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java	(date 1617289071926)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java	(date 1617289071926)
---@@ -0,0 +1,291 @@
---+package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---+
---+import android.text.TextUtils;
---+import android.view.LayoutInflater;
---+import android.view.View;
---+import android.view.ViewGroup;
---+import android.view.animation.AnimationUtils;
---+import android.widget.ImageView;
---+import android.widget.LinearLayout;
---+import android.widget.TextView;
---+
---+import androidx.annotation.NonNull;
---+import androidx.appcompat.widget.AppCompatImageButton;
---+import androidx.appcompat.widget.AppCompatImageView;
---+import androidx.constraintlayout.widget.ConstraintLayout;
---+import androidx.recyclerview.widget.RecyclerView;
---+
---+import java.util.ArrayList;
---+import java.util.List;
---+
---+import ICS.Utils.Scanning.cBarcodeScan;
---+import ICS.Utils.cText;
---+import ICS.cAppExtension;
---+import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderLineItemPropertyInputActvity;
---+import nl.icsvertex.scansuite.R;
---+
---+public class cInventoryorderLinePropertyValueInputAdapter extends RecyclerView.Adapter<cInventoryorderLinePropertyValueInputAdapter.commentViewHolder>{
---+
---+    public static class commentViewHolder extends RecyclerView.ViewHolder{
---+
---+        private final AppCompatImageView imageViewPropertyType;
---+        private final TextView textViewDescription;
---+        private final TextView textViewValue;
---+        private TextView textViewQuantityUsed;
---+        private final ConstraintLayout primaryContent;
---+        private final ConstraintLayout secondaryContent;
---+        private final AppCompatImageButton imageButtonMinus;
---+        private final AppCompatImageButton imageButtonPlus;
---+        private final AppCompatImageButton imageButtonZero;
---+        private final  AppCompatImageButton imageButtonManual;
---+        private final AppCompatImageView imageChevronDown;
---+
---+        public LinearLayout itemPropertyValueInputItemLinearLayout;
---+
---+        public commentViewHolder(View pvView) {
---+            super(pvView);
---+
---+            this.imageViewPropertyType =  pvView.findViewById(R.id.imageViewPropertyType);
---+
---+            this.textViewDescription = pvView.findViewById(R.id.textViewDescription);
---+            this.textViewDescription.setEllipsize(TextUtils.TruncateAt.MARQUEE);
---+            this.textViewDescription.setSingleLine(true);
---+            this.textViewDescription.setMarqueeRepeatLimit(5);
---+            this.textViewDescription.setSelected(true);
---+
---+            this.textViewValue = pvView.findViewById(R.id.textViewValue);
---+
---+            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);
---+
---+            this.itemPropertyValueInputItemLinearLayout = pvView.findViewById(R.id.itemPropertyValueInputItemLinearLayout);
---+            this.primaryContent = pvView.findViewById(R.id.primaryContent);
---+            this.secondaryContent = pvView.findViewById(R.id.secondaryContent);
---+            this.secondaryContent.setVisibility(View.GONE);
---+
---+            this.imageButtonPlus = pvView.findViewById(R.id.imageButtonPlus);
---+            this.imageButtonMinus = pvView.findViewById(R.id.imageButtonMinus);
---+            this.imageButtonZero = pvView.findViewById(R.id.imageButtonZero);
---+            this.imageButtonManual = pvView.findViewById(R.id.imageButtonManual);
---+            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);
---+            this.imageChevronDown = pvView.findViewById(R.id.imageChevronDown);
---+        }
---+    }
---+
---+    //Region Private Properties
---+    private final LayoutInflater layoutInflaterObject;
---+    private final List<LinearLayout> itemPropertyValueLinearLayoutObl = new ArrayList<>();
---+    private List<cInventoryorderLinePropertyValue> localItemPropertyValueObl;
---+    //End Region Private Properties
---+
---+    //Region Constructor
---+    public cInventoryorderLinePropertyValueInputAdapter() {
---+        this.layoutInflaterObject = LayoutInflater.from(cAppExtension.context);
---+    }
---+    //End Region Constructor
---+
---+    @NonNull
---+    @Override
---+    public commentViewHolder onCreateViewHolder(@NonNull ViewGroup pvParentVieGroup, int pvViewTypeInt) {
---+        View itemView = this.layoutInflaterObject.inflate(R.layout.recycler_itempropertyvalue_input, pvParentVieGroup, false);
---+        return new commentViewHolder(itemView);
---+    }
---+
---+    @Override
---+    public void onBindViewHolder(final commentViewHolder pvHolder, int pvPositionInt) {
---+
---+        this.itemPropertyValueLinearLayoutObl.add(pvHolder.itemPropertyValueInputItemLinearLayout);
---+
---+        if (this.localItemPropertyValueObl != null && this.localItemPropertyValueObl.size() > 0) {
---+
---+            final cInventoryorderLinePropertyValue inventoryorderLinePropertyValue = this.localItemPropertyValueObl.get(pvPositionInt);
---+
---+
---+            switch (inventoryorderLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase()) {
---+
---+                case "BOOLEAN":
---+                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_check_black_24dp);
---+                    break;
---+
---+                case "DECIMAL":
---+                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_counter_black_24dp);
---+                    break;
---+
---+                case "TEXT" :
---+                case "CODE":
---+                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_text_black_24dp);
---+                    break;
---+
---+                case "DATE":
---+                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_calendar_black_24dp);
---+                    break;
---+            }
---+
---+            pvHolder.textViewDescription.setText(inventoryorderLinePropertyValue.getItemProperty().getOmschrijvingStr());
---+            pvHolder.textViewValue.setText(inventoryorderLinePropertyValue.getValueStr());
---+            pvHolder.textViewQuantityUsed.setText(cText.pDoubleToStringStr(inventoryorderLinePropertyValue.getQuantityDbl()));
---+
---+            if (inventoryorderLinePropertyValue.getQuantityDbl() == 0 ) {
---+                pvHolder.imageChevronDown.setVisibility(View.GONE);
---+            }
---+
---+            if (inventoryorderLinePropertyValue.getItemProperty().getUniqueBln() && inventoryorderLinePropertyValue.getQuantityDbl() > 0 ) {
---+                pvHolder.imageButtonPlus.setVisibility(View.INVISIBLE);
---+                pvHolder.imageButtonManual.setVisibility(View.INVISIBLE);
---+            }
---+
---+            if (inventoryorderLinePropertyValue == cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue) {
---+                pvHolder.secondaryContent.setVisibility(View.VISIBLE);
---+            }
---+
---+
---+            pvHolder.primaryContent.setOnClickListener(new View.OnClickListener() {
---+                @Override
---+                public void onClick(final View view) {
---+
---+                    if (inventoryorderLinePropertyValue.getQuantityDbl() == 0) {
---+                        return;
---+                    }
---+
---+                    AnimationUtils.loadAnimation(cAppExtension.context.getApplicationContext(), R.anim.rotate_180);
---+
---+                    //Close all others
---+                    for (LinearLayout aLayout : itemPropertyValueLinearLayoutObl) {
---+                        ConstraintLayout secondaryLayout = aLayout.findViewById(R.id.secondaryContent);
---+                        ConstraintLayout primaryLayout = aLayout.findViewById(R.id.primaryContent);
---+                        if (secondaryLayout != null) {
---+                            if (primaryLayout != view) {
---+                                if (secondaryLayout.getVisibility() == View.VISIBLE) {
---+                                    ImageView chevronImage = primaryLayout.findViewById(R.id.imageChevronDown);
---+                                    if (chevronImage != null) {
---+                                        chevronImage.animate().rotation(0).start();
---+                                    }
---+                                }
---+                                secondaryLayout.animate().scaleY(0).start();
---+                                secondaryLayout.setVisibility(View.GONE);
---+                            }
---+                        }
---+                    }
---+
---+                    boolean isExpanded;
---+                    isExpanded = pvHolder.secondaryContent.getVisibility() == View.VISIBLE;
---+
---+                    if (isExpanded) {
---+                        pvHolder.imageChevronDown.animate().rotation(0).start();
---+                        pvHolder.secondaryContent.animate().scaleY(0).start();
---+                        pvHolder.secondaryContent.setVisibility(View.GONE);
---+                    }
---+                    else {
---+                        pvHolder.imageChevronDown.animate().rotation(180).start();
---+                        pvHolder.secondaryContent.animate().scaleY(1).start();
---+                        pvHolder.secondaryContent.setVisibility(View.VISIBLE);
---+                    }
---+
---+
---+                }
---+            });
---+
---+            pvHolder.imageButtonPlus.setOnClickListener(new View.OnClickListener() {
---+                @Override
---+                public void onClick(View view) {
---+
---+                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---+
---+                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---+                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity)cAppExtension.activity;
---+                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
---+                        inventoryorderLineItemPropertyInputActvity.pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.getValueStr()));
---+                    }
---+
---+                }
---+            });
---+
---+            pvHolder.imageButtonMinus.setOnClickListener(new View.OnClickListener() {
---+                @Override
---+                public void onClick(View view) {
---+
---+                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---+
---+                    int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());
---+                    int newQuantity = currentQuantity - 1;
---+                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl = newQuantity;
---+
---+                    final InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity;
---+                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---+                        inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
---+
---+                        if (newQuantity == 0) {
---+                            inventoryorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();
---+                        }
---+                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
---+                        inventoryorderLineItemPropertyInputActvity.pTryToChangeCountedQuantity(false, false,1);
---+                    }
---+                }
---+            });
---+
---+            pvHolder.imageButtonZero.setOnClickListener(new View.OnClickListener() {
---+                @Override
---+                public void onClick(View view) {
---+
---+                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---+
---+                    final InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity;
---+
---+                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---+                        inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
---+
---+                        double countDbl = cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl;
---+
---+                        while (countDbl > 0) {
---+                            inventoryorderLineItemPropertyInputActvity.pTryToChangeCountedQuantity(false, false,1);
---+                            cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl --;
---+                            countDbl--;
---+                        }
---+
---+                        inventoryorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();
---+                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
---+                    }
---+                }
---+            });
---+
---+            pvHolder.imageButtonManual.setOnClickListener(new View.OnClickListener() {
---+                @Override
---+                public void onClick(View view) {
---+
---+                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---+                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl = 0;
---+
---+                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---+                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
---+                        inventoryorderLineItemPropertyInputActvity.pShowNumericInputFragment();
---+                    }
---+                }
---+            });
---+
---+            pvHolder.imageViewPropertyType.setOnClickListener(new View.OnClickListener() {
---+                @Override
---+                public void onClick(View view) {
---+
---+                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---+
---+                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---+                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
---+                        inventoryorderLineItemPropertyInputActvity.pShowTextInputFragment();
---+                    }
---+                }
---+            });
---+        }
---+    }
---+
---+    public void pFillData(List<cInventoryorderLinePropertyValue> pvDataObl) {
---+        this.localItemPropertyValueObl = pvDataObl;
---+        notifyDataSetChanged();
---+    }
---+
---+
---+    @Override
---+    public int getItemCount () {
---+        if (this.localItemPropertyValueObl != null)
---+            return this.localItemPropertyValueObl.size();
---+        else return 0;
---+    }
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java	(date 1617282805885)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java	(date 1617282805885)
---@@ -0,0 +1,77 @@
---+package SSU_WHS.Inventory.InventoryorderlineProperty;
---+
---+import androidx.room.ColumnInfo;
---+import androidx.room.Entity;
---+import androidx.room.PrimaryKey;
---+
---+import org.json.JSONException;
---+import org.json.JSONObject;
---+
---+import ICS.Utils.cText;
---+import SSU_WHS.General.cDatabase;
---+
---+@Entity(tableName=cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
---+public class cInventoryorderLinePropertyEntity {
---+
---+    @PrimaryKey(autoGenerate = true)
---+    public Integer recordid;
---+    public Integer getRecordidInt() {return this.recordid;}
---+
---+    @ColumnInfo(name = cDatabase.LINENO_NAMESTR )
---+    public Integer linenoInt;
---+    public Integer getLineNoInt() {return this.linenoInt;}
---+
---+    @ColumnInfo(name = cDatabase.PROPERTYCODE_NAMESTR)
---+    public String propertyCodeStr;
---+    public String getPropertyCodeStr() {return this.propertyCodeStr;}
---+
---+    @ColumnInfo(name = cDatabase.SEQUENCENOHANDLED_NAMESTR )
---+    public Integer sequenceNoHandledInt;
---+    public Integer getSequenceNoHandledInt() {return this.sequenceNoHandledInt;}
---+
---+    @ColumnInfo(name = cDatabase.SORTINGSEQUENCENO_NAMESTR )
---+    public Integer sortingSequenceNoInt;
---+    public Integer getSortingSequenceNoInt() {return this.sortingSequenceNoInt;}
---+
---+    @ColumnInfo(name = cDatabase.LAYOUT_NAMESTR)
---+    public String layoutStr;
---+    public String getLayoutStr() {return this.layoutStr;}
---+
---+    @ColumnInfo(name = cDatabase.ISINPUT_NAMESTR)
---+    public boolean isInputBln;
---+    public boolean getIsInputBln() {return this.isInputBln;}
---+
---+    @ColumnInfo(name = cDatabase.ISREQUIRED_NAMESTR)
---+    public boolean isRequiredBln;
---+    public boolean getIsRequiredBln() {return this.isRequiredBln;}
---+
---+    @ColumnInfo(name = cDatabase.VALUEHANDLED_NAMESTR)
---+    public String valueHandledStr;
---+    public String getValueHandledStr() {return this.valueHandledStr;}
---+
---+    //empty constructor
---+    public cInventoryorderLinePropertyEntity() {
---+
---+    }
---+
---+    public cInventoryorderLinePropertyEntity(JSONObject pvJsonObject) {
---+        try {
---+            this.linenoInt = pvJsonObject.getInt(cDatabase.LINENO_NAMESTR);
---+            this.propertyCodeStr = pvJsonObject.getString(cDatabase.PROPERTYCODE_NAMESTR);
---+            this.sequenceNoHandledInt = pvJsonObject.getInt(cDatabase.SEQUENCENOHANDLED_NAMESTR);
---+            this.sortingSequenceNoInt = pvJsonObject.getInt(cDatabase.SORTINGSEQUENCENO_NAMESTR);
---+            this.layoutStr = pvJsonObject.getString(cDatabase.LAYOUT_NAMESTR);
---+            this.isInputBln = cText.pStringToBooleanBln(pvJsonObject.getString(cDatabase.ISINPUT_NAMESTR), false) ;
---+            this.isRequiredBln = cText.pStringToBooleanBln(pvJsonObject.getString(cDatabase.ISREQUIRED_NAMESTR), false) ;
---+            this.valueHandledStr = pvJsonObject.getString(cDatabase.VALUEHANDLED_NAMESTR);
---+
---+        } catch (JSONException e) {
---+            e.printStackTrace();
---+        }
---+    }
---+
---+
---+
---+
---+
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java	(date 1617282982916)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java	(date 1617282982916)
---@@ -0,0 +1,33 @@
---+package SSU_WHS.Inventory.InventoryorderlineProperty;
---+
---+import androidx.room.Dao;
---+import androidx.room.Delete;
---+import androidx.room.Insert;
---+import androidx.room.OnConflictStrategy;
---+import androidx.room.Query;
---+
---+import java.util.List;
---+
---+import SSU_WHS.General.cDatabase;
---+import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
---+
---+@Dao
---+public interface iInventoryorderlinePropertyDao {
---+
---+    //Standard SQL functions
---+    @Delete
---+    void deletePickorder(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity);
---+
---+    @Insert(onConflict = OnConflictStrategy.REPLACE)
---+    void insert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity);
---+
---+
---+    @Query("DELETE FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
---+    void deleteAll();
---+
---+    @Query("SELECT * FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
---+    List<cPickorderLinePropertyEntity> getAll();
---+    //Get inventorylines
---+
---+
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java	(date 1617287945968)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java	(date 1617287945968)
---@@ -0,0 +1,176 @@
---+package SSU_WHS.Inventory.InventoryorderlineProperty;
---+
---+import androidx.lifecycle.ViewModelProvider;
---+
---+import org.json.JSONObject;
---+
---+import java.util.ArrayList;
---+import java.util.List;
---+
---+import ICS.Utils.cResult;
---+import ICS.cAppExtension;
---+import SSU_WHS.Basics.ItemProperty.cItemProperty;
---+import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
---+import nl.icsvertex.scansuite.R;
---+
---+public class cInventoryorderLineProperty {
---+
---+    //Public Properties
---+    private Integer lineNoInt;
---+    public Integer getLineNoInt() {return lineNoInt;}
---+
---+    private String propertyCodeStr;
---+    public String getPropertyCodeStr() {return propertyCodeStr;}
---+
---+    public cItemProperty getItemProperty() {
---+
---+        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {
---+            return  null;
---+        }
---+
---+        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {
---+            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
---+                return  itemProperty;
---+            }
---+        }
---+
---+        return  null;
---+
---+    }
---+
---+    private Integer sequenceNoHandledInt;
---+    public Integer getSequenceNoHandledInt() {return sequenceNoHandledInt;}
---+
---+    private Integer sortingSequenceNoInt;
---+    public Integer getSortingSequenceNoInt() {return sortingSequenceNoInt;}
---+
---+    private String layoutStr;
---+    public String getLayoutStr() {return layoutStr;}
---+
---+    private boolean isInputBln;
---+    public boolean getIsInputBln() {return isInputBln;}
---+
---+    private boolean isRequiredBln;
---+    public boolean getIsRequiredBln() {return isRequiredBln;}
---+
---+    private String valueHandledStr;
---+    public String getValueHandledStr() {return valueHandledStr;}
---+
---+    private cInventoryorderLinePropertyEntity inventoryorderLinePropertyEntity;
---+
---+    public  static cInventoryorderLineProperty currentInventoryorderLineProperty;
---+    public static ArrayList<cInventoryorderLineProperty> allLinePropertysObl;
---+
---+    public List<cInventoryorderLinePropertyValue> propertyValueObl() {
---+
---+        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
---+
---+        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null || cInventoryorderLinePropertyValue.allLinePropertysValuesObl.size() == 0)  {
---+            return  resultObl;
---+        }
---+
---+        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : cInventoryorderLinePropertyValue.allLinePropertysValuesObl) {
---+            if (inventoryorderLinePropertyValue.getLineNoInt() == this.getLineNoInt() && inventoryorderLinePropertyValue.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
---+                resultObl.add(inventoryorderLinePropertyValue);
---+            }
---+        }
---+
---+        return  resultObl;
---+
---+    }
---+
---+    private cInventoryorderLinePropertyViewModel getInventoryorderLinePropertyViewModel() {
---+        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyViewModel.class);
---+    }
---+
---+    public cInventoryorderLineProperty(JSONObject pvJsonObject) {
---+        this.inventoryorderLinePropertyEntity = new cInventoryorderLinePropertyEntity(pvJsonObject);
---+        this.lineNoInt = this.inventoryorderLinePropertyEntity.getLineNoInt();
---+        this.propertyCodeStr = this.inventoryorderLinePropertyEntity.getPropertyCodeStr();
---+        this.sequenceNoHandledInt = this.inventoryorderLinePropertyEntity.getSequenceNoHandledInt();
---+        this.sortingSequenceNoInt = this.inventoryorderLinePropertyEntity.getSortingSequenceNoInt();
---+        this.layoutStr = this.inventoryorderLinePropertyEntity.getLayoutStr();
---+        this.isInputBln = this.inventoryorderLinePropertyEntity.getIsInputBln();
---+        this.isRequiredBln = this.inventoryorderLinePropertyEntity.getIsRequiredBln();
---+        this.valueHandledStr = this.inventoryorderLinePropertyEntity.getValueHandledStr();
---+    }
---+
---+    public boolean pInsertInDatabaseBln() {
---+        this.getInventoryorderLinePropertyViewModel().insert(this.inventoryorderLinePropertyEntity);
---+
---+        if (cInventoryorderLineProperty.allLinePropertysObl == null) {
---+            cInventoryorderLineProperty.allLinePropertysObl = new ArrayList<>();
---+        }
---+        cInventoryorderLineProperty.allLinePropertysObl.add(this);
---+        return true;
---+    }
---+
---+    public void pValueAdded(String pvValueStr) {
---+
---+        //Try to find value with same value
---+        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.propertyValueObl()) {
---+            if (inventoryorderLinePropertyValue.getValueStr().equalsIgnoreCase(pvValueStr)) {
---+                inventoryorderLinePropertyValue.quantityDbl += 1;
---+                return;
---+            }
---+        }
---+
---+        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null) {
---+            cInventoryorderLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();
---+        }
---+
---+        //Add a new value
---+        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.add(new cInventoryorderLinePropertyValue(this.getLineNoInt(), this.getPropertyCodeStr(),pvValueStr));
---+    }
---+
---+    public cResult pCheckScanForUniquePropertyRst(String pvPropertyValueStr) {
---+
---+        cResult resultRst = new cResult();
---+        resultRst.resultBln = true;
---+
---+        if (!this.getItemProperty().getUniqueBln() || this.propertyValueObl() == null ||this.propertyValueObl().size() ==0 ) {
---+            resultRst.resultBln = true;
---+            return  resultRst;
---+        }
---+
---+
---+
---+        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.propertyValueObl()) {
---+
---+            if (inventoryorderLinePropertyValue.getValueStr().equalsIgnoreCase(pvPropertyValueStr)) {
---+
---+                // We have a match, and this hasn't been scanned already
---+                if (inventoryorderLinePropertyValue.getQuantityDbl() == 0) {
---+                    resultRst.resultBln = true;
---+                    return  resultRst;
---+                }
---+                else
---+                {
---+                    resultRst.resultBln = false;
---+                    resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_itempropery_value_already_used));
---+                    return  resultRst;
---+                }
---+            }
---+        }
---+
---+        resultRst.resultBln = true;
---+        return  resultRst;
---+
---+    }
---+
---+    public boolean pDeleteFromDatabaseBln() {
---+        if (cInventoryorderLineProperty.allLinePropertysObl != null) {
---+            cInventoryorderLineProperty.allLinePropertysObl.remove(this);
---+        }
---+        return true;
---+    }
---+
---+    public static boolean pTruncateTableBln() {
---+
---+        cInventoryorderLinePropertyViewModel inventoryorderLinePropertyViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyViewModel.class);
---+        inventoryorderLinePropertyViewModel.deleteAll();
---+        cInventoryorderLineProperty.allLinePropertysObl = null;
---+        return true;
---+    }
---+
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java	(date 1617283458046)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java	(date 1617283458046)
---@@ -0,0 +1,28 @@
---+package SSU_WHS.Inventory.InventoryorderlineProperty;
---+
---+import android.app.Application;
---+
---+import androidx.lifecycle.AndroidViewModel;
---+
---+import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
---+import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyRepository;
---+
---+public class cInventoryorderLinePropertyViewModel extends AndroidViewModel {
---+
---+    //Region Public Properties
---+    private cInventoryorderLinePropertyRepository Repository;
---+    //End Region Public Properties
---+
---+    //Region Constructor
---+    public cInventoryorderLinePropertyViewModel(Application pvApplication) {
---+        super(pvApplication);
---+        this.Repository = new cInventoryorderLinePropertyRepository(pvApplication);
---+    }
---+    //End Region Constructor
---+
---+    public void insert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {this.Repository.pInsert(pvInventoryorderLinePropertyEntity);}
---+    public void deleteAll() {this.Repository.pTruncate();}
---+    public void delete(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {this.Repository.pDelete(pvInventoryorderLinePropertyEntity);}
---+
---+
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java	(date 1617283407238)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java	(date 1617283407238)
---@@ -0,0 +1,81 @@
---+package SSU_WHS.Inventory.InventoryorderlineProperty;
---+
---+import android.app.Application;
---+import android.os.AsyncTask;
---+
---+import SSU_WHS.General.acScanSuiteDatabase;
---+import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
---+import SSU_WHS.Picken.PickorderLineProperty.iPickorderLinePropertyDao;
---+
---+public class cInventoryorderLinePropertyRepository {
---+
---+    //Region Public Properties
---+    private iInventoryorderlinePropertyDao inventoryorderlinePropertyDao;
---+    //End Region Public Properties
---+
---+    //End Region Private Properties
---+
---+    //Region Constructor
---+    public cInventoryorderLinePropertyRepository(Application pvApplication) {
---+        //Region Private Properties
---+        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);
---+        this.inventoryorderlinePropertyDao = db.inventoryorderlinePropertyDao();
---+    }
---+    //End Region Constructor
---+
---+    //Region Public Methods
---+
---+    public void pInsert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {
---+        new mInsertInDatabaseAsyncTask(this.inventoryorderlinePropertyDao).execute(pvInventoryorderLinePropertyEntity);
---+    }
---+
---+    public void pDelete(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {
---+        new mDeleteAsyncTask(this.inventoryorderlinePropertyDao).execute(pvInventoryorderLinePropertyEntity);
---+    }
---+
---+    public void pTruncate() {
---+        new cInventoryorderLinePropertyRepository.deleteAllAsyncTask(this.inventoryorderlinePropertyDao).execute();
---+    }
---+
---+    //End Region Public Methods
---+
---+    private static class mInsertInDatabaseAsyncTask extends AsyncTask<cInventoryorderLinePropertyEntity, Void, Void> {
---+        private iInventoryorderlinePropertyDao mAsyncTaskDao;
---+
---+        mInsertInDatabaseAsyncTask(iInventoryorderlinePropertyDao dao) {
---+            mAsyncTaskDao = dao;
---+        }
---+        @Override
---+        protected Void doInBackground(final cInventoryorderLinePropertyEntity... params) {
---+            mAsyncTaskDao.insert(params[0]);
---+            return null;
---+        }
---+    }
---+
---+    private static class mDeleteAsyncTask extends AsyncTask<cInventoryorderLinePropertyEntity, Void, Void> {
---+        private iInventoryorderlinePropertyDao mAsyncTaskDao;
---+
---+        mDeleteAsyncTask(iInventoryorderlinePropertyDao dao) { mAsyncTaskDao = dao; }
---+        @Override
---+        protected Void doInBackground(final cInventoryorderLinePropertyEntity... params) {
---+            mAsyncTaskDao.deletePickorder(params[0]);
---+            return null;
---+        }
---+    }
---+
---+    private static class deleteAllAsyncTask extends AsyncTask<Void, Void, Void> {
---+        private iInventoryorderlinePropertyDao mAsyncTaskDao;
---+
---+        deleteAllAsyncTask(iInventoryorderlinePropertyDao dao) {
---+            mAsyncTaskDao = dao;
---+        }
---+        @Override
---+        protected Void doInBackground(final Void... params) {
---+            mAsyncTaskDao.deleteAll();
---+            return null;
---+        }
---+    }
---+
---+
---+
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java	(date 1617284128378)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java	(date 1617284128378)
---@@ -0,0 +1,32 @@
---+package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---+
---+import androidx.room.Dao;
---+import androidx.room.Delete;
---+import androidx.room.Insert;
---+import androidx.room.OnConflictStrategy;
---+import androidx.room.Query;
---+
---+import java.util.List;
---+
---+import SSU_WHS.General.cDatabase;
---+import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
---+
---+@Dao
---+public interface iInventoryorderLinePropertyValueDao {
---+
---+    //Standard SQL functions
---+    @Delete
---+    void deletePickorder(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity);
---+
---+    @Insert(onConflict = OnConflictStrategy.REPLACE)
---+    void insert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity);
---+
---+    @Query("DELETE FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
---+    void deleteAll();
---+
---+    @Query("SELECT * FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
---+    List<cInventoryorderLinePropertyValueEntity> getAll();
---+    //Get picklines
---+
---+
---+}
---Index: app/release/normal/release/output-metadata.json
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>{\r\n  \"version\": 2,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"nl.icsvertex.scansuite\",\r\n  \"variantName\": \"processNormalReleaseResources\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"versionCode\": 15891,\r\n      \"versionName\": \"1.5.8.91A\",\r\n      \"outputFile\": \"app-normal-release.apk\"\r\n    }\r\n  ]\r\n}
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/release/normal/release/output-metadata.json	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+++ app/release/normal/release/output-metadata.json	(date 1615995006673)
---@@ -10,8 +10,8 @@
---     {
---       "type": "SINGLE",
---       "filters": [],
----      "versionCode": 15891,
----      "versionName": "1.5.8.91A",
---+      "versionCode": 15892,
---+      "versionName": "1.5.8.92A",
---       "outputFile": "app-normal-release.apk"
---     }
---   ]
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java	(date 1617284608363)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java	(date 1617284608363)
---@@ -0,0 +1,134 @@
---+package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---+
---+import androidx.lifecycle.ViewModelProvider;
---+
---+import org.json.JSONObject;
---+
---+import java.util.ArrayList;
---+
---+import ICS.Utils.cText;
---+import ICS.cAppExtension;
---+import SSU_WHS.Basics.ItemProperty.cItemProperty;
---+import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
---+import nl.icsvertex.scansuite.R;
---+
---+public class cInventoryorderLinePropertyValue implements Comparable{
---+
---+    //Public Properties
---+    private int lineNoInt;
---+
---+    public int getLineNoInt() {return lineNoInt;}
---+
---+    private String propertyCodeStr;
---+    public String getPropertyCodeStr() {return propertyCodeStr;}
---+
---+    public cInventoryorderLineProperty getInventoryorderLineProperty(){
---+
---+        if (this.getPropertyCodeStr().isEmpty() || cInventoryorderLineProperty.allLinePropertysObl == null || cInventoryorderLineProperty.allLinePropertysObl.size() == 0) {
---+            return  null;
---+        }
---+
---+        for (cInventoryorderLineProperty inventoryorderLineProperty :cInventoryorderLineProperty.allLinePropertysObl ) {
---+            if (inventoryorderLineProperty.getLineNoInt().equals(this.getLineNoInt()) && inventoryorderLineProperty.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
---+                return inventoryorderLineProperty;
---+            }
---+        }
---+
---+        return  null;
---+
---+    }
---+
---+    public cItemProperty getItemProperty() {
---+
---+        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {
---+            return  null;
---+        }
---+
---+        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {
---+            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
---+                return  itemProperty;
---+            }
---+        }
---+
---+        return  null;
---+
---+    }
---+
---+    private String valueStr;
---+    public String getValueStr() {return valueStr;}
---+
---+    private int sortingSequenceNoInt;
---+    public  int getSortingSequenceNoInt(){return sortingSequenceNoInt;}
---+
---+    public double quantityDbl;
---+    public double getQuantityDbl() {return quantityDbl;}
---+
---+    private cInventoryorderLinePropertyValueEntity inventoryorderLinePropertyValueEntity;
---+
---+    public static cInventoryorderLinePropertyValue currentInventoryorderLinePropertyValue;
---+    public static ArrayList<cInventoryorderLinePropertyValue> allLinePropertysValuesObl;
---+
---+    private cInventoryorderLinePropertyValueViewModel getInventoryorderLinePropertyValueViewModel() {
---+        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyValueViewModel.class);
---+    }
---+
---+    public cInventoryorderLinePropertyValue(JSONObject pvJsonObject) {
---+        this.inventoryorderLinePropertyValueEntity = new cInventoryorderLinePropertyValueEntity(pvJsonObject);
---+        this.lineNoInt = this.inventoryorderLinePropertyValueEntity.getLineNoInt();
---+        this.propertyCodeStr = this.inventoryorderLinePropertyValueEntity.getPropertyCodeStr();
---+        this.valueStr = this.inventoryorderLinePropertyValueEntity.getValueStr();
---+        this.sortingSequenceNoInt = this.inventoryorderLinePropertyValueEntity.getSortingSequenceNoInt();
---+        this.quantityDbl = 0;
---+    }
---+
---+    public cInventoryorderLinePropertyValue(cInventoryorderLineProperty pvInventoryorderLineProperty) {
---+        this.inventoryorderLinePropertyValueEntity = null;
---+
---+        this.lineNoInt = 0;
---+        this.propertyCodeStr = pvInventoryorderLineProperty.getPropertyCodeStr();
---+        this.valueStr = cAppExtension.activity.getString(R.string.novalueyet);
---+        this.sortingSequenceNoInt = 0;
---+        this.quantityDbl = 0;
---+    }
---+
---+    public cInventoryorderLinePropertyValue(int pvLineNoInt, String pvPropertyCodeStr, String pvValueStr) {
---+        this.inventoryorderLinePropertyValueEntity = null;
---+        this.lineNoInt = pvLineNoInt;
---+        this.propertyCodeStr = pvPropertyCodeStr;
---+        this.valueStr = pvValueStr;
---+        this.sortingSequenceNoInt = 0;
---+        this.quantityDbl = 1;
---+    }
---+
---+    public boolean pInsertInDatabaseBln() {
---+        this.getInventoryorderLinePropertyValueViewModel().insert(this.inventoryorderLinePropertyValueEntity);
---+
---+        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null) {
---+            cInventoryorderLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();
---+        }
---+        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.add(this);
---+        return true;
---+    }
---+
---+    public boolean pDeleteFromDatabaseBln() {
---+        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl != null) {
---+            cInventoryorderLinePropertyValue.allLinePropertysValuesObl.remove(this);
---+        }
---+        return true;
---+    }
---+
---+    public static boolean pTruncateTableBln() {
---+
---+        cInventoryorderLinePropertyValueViewModel inventoryorderLinePropertyValueViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyValueViewModel.class);
---+        inventoryorderLinePropertyValueViewModel.deleteAll();
---+        cInventoryorderLinePropertyValue.allLinePropertysValuesObl = null;
---+        return true;
---+    }
---+
---+    @Override
---+    public int compareTo(Object o) {
---+        int compareint = cText.pDoubleToInt(((cInventoryorderLinePropertyValue)o).getQuantityDbl());
---+        return compareint- cText.pDoubleToInt(this.getQuantityDbl());
---+
---+    }
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java	(date 1617283763783)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java	(date 1617283763783)
---@@ -0,0 +1,55 @@
---+package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---+
---+import androidx.room.ColumnInfo;
---+import androidx.room.Entity;
---+import androidx.room.PrimaryKey;
---+
---+import org.json.JSONException;
---+import org.json.JSONObject;
---+
---+import SSU_WHS.General.cDatabase;
---+
---+@Entity(tableName=cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
---+public class cInventoryorderLinePropertyValueEntity {
---+
---+    @PrimaryKey(autoGenerate = true)
---+    public Integer recordid;
---+    public Integer getRecordidInt() {return this.recordid;}
---+
---+    @ColumnInfo(name = cDatabase.LINENO_NAMESTR)
---+    public int lineNoInt;
---+    public int getLineNoInt() {return this.lineNoInt;}
---+
---+    @ColumnInfo(name = cDatabase.PROPERTYCODE_NAMESTR )
---+    public String propertyCodeStr;
---+    public String getPropertyCodeStr() {return this.propertyCodeStr;}
---+
---+    @ColumnInfo(name = cDatabase.VALUE_NAMESTR )
---+    public String valueStr;
---+    public String getValueStr() {return this.valueStr;}
---+
---+    @ColumnInfo(name = cDatabase.SORTINGSEQUENCENO_NAMESTR)
---+    public Integer sortingSequenceNoInt;
---+    public Integer getSortingSequenceNoInt() {return this.sortingSequenceNoInt;}
---+
---+    //empty constructor
---+    public cInventoryorderLinePropertyValueEntity() {
---+
---+    }
---+
---+    public cInventoryorderLinePropertyValueEntity(JSONObject pvJsonObject) {
---+        try {
---+            this.lineNoInt = pvJsonObject.getInt(cDatabase.LINENO_NAMESTR);
---+            this.propertyCodeStr = pvJsonObject.getString(cDatabase.PROPERTYCODE_NAMESTR);
---+            this.valueStr = pvJsonObject.getString(cDatabase.VALUE_NAMESTR);
---+            this.sortingSequenceNoInt = pvJsonObject.getInt(cDatabase.SORTINGSEQUENCENO_NAMESTR);
---+        } catch (JSONException e) {
---+            e.printStackTrace();
---+        }
---+    }
---+
---+
---+
---+
---+
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java	(date 1617284053514)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java	(date 1617284053514)
---@@ -0,0 +1,28 @@
---+package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---+
---+import android.app.Application;
---+
---+import androidx.lifecycle.AndroidViewModel;
---+
---+import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
---+import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueRepository;
---+
---+public class cInventoryorderLinePropertyValueViewModel extends AndroidViewModel {
---+
---+    //Region Public Properties
---+    private cInventoryorderLinePropertyValueRepository Repository;
---+    //End Region Public Properties
---+
---+    //Region Constructor
---+    public cInventoryorderLinePropertyValueViewModel(Application pvApplication) {
---+        super(pvApplication);
---+        this.Repository = new cInventoryorderLinePropertyValueRepository(pvApplication);
---+    }
---+    //End Region Constructor
---+
---+    public void insert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {this.Repository.pInsert(pvInventoryorderLinePropertyValueEntity);}
---+    public void deleteAll() {this.Repository.pTruncate();}
---+    public void delete(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {this.Repository.pDelete(pvInventoryorderLinePropertyValueEntity);}
---+
---+
---+}
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java	(date 1617284123755)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java	(date 1617284123755)
---@@ -0,0 +1,81 @@
---+package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---+
---+import android.app.Application;
---+import android.os.AsyncTask;
---+
---+import SSU_WHS.General.acScanSuiteDatabase;
---+import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
---+import SSU_WHS.Picken.PickorderLinePropertyValue.iPickorderLinePropertyValueDao;
---+
---+public class cInventoryorderLinePropertyValueRepository {
---+
---+    //Region Public Properties
---+    private iInventoryorderLinePropertyValueDao inventoryorderLinePropertyValueDao;
---+    //End Region Public Properties
---+
---+    //End Region Private Properties
---+
---+    //Region Constructor
---+    public cInventoryorderLinePropertyValueRepository(Application pvApplication) {
---+        //Region Private Properties
---+        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);
---+        this.inventoryorderLinePropertyValueDao = db.inventoryorderLinePropertyValueDao();
---+    }
---+    //End Region Constructor
---+
---+    //Region Public Methods
---+
---+    public void pInsert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {
---+        new mInsertInDatabaseAsyncTask(this.inventoryorderLinePropertyValueDao).execute(pvInventoryorderLinePropertyValueEntity);
---+    }
---+
---+    public void pDelete(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {
---+        new mDeleteAsyncTask(this.inventoryorderLinePropertyValueDao).execute(pvInventoryorderLinePropertyValueEntity);
---+    }
---+
---+    public void pTruncate() {
---+        new cInventoryorderLinePropertyValueRepository.deleteAllAsyncTask(this.inventoryorderLinePropertyValueDao).execute();
---+    }
---+
---+    //End Region Public Methods
---+
---+    private static class mInsertInDatabaseAsyncTask extends AsyncTask<cInventoryorderLinePropertyValueEntity, Void, Void> {
---+        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
---+
---+        mInsertInDatabaseAsyncTask(iInventoryorderLinePropertyValueDao dao) {
---+            mAsyncTaskDao = dao;
---+        }
---+        @Override
---+        protected Void doInBackground(final cInventoryorderLinePropertyValueEntity... params) {
---+            mAsyncTaskDao.insert(params[0]);
---+            return null;
---+        }
---+    }
---+
---+    private static class mDeleteAsyncTask extends AsyncTask<cInventoryorderLinePropertyValueEntity, Void, Void> {
---+        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
---+
---+        mDeleteAsyncTask(iInventoryorderLinePropertyValueDao dao) { mAsyncTaskDao = dao; }
---+        @Override
---+        protected Void doInBackground(final cInventoryorderLinePropertyValueEntity... params) {
---+            mAsyncTaskDao.deletePickorder(params[0]);
---+            return null;
---+        }
---+    }
---+
---+    private static class deleteAllAsyncTask extends AsyncTask<Void, Void, Void> {
---+        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
---+
---+        deleteAllAsyncTask(iInventoryorderLinePropertyValueDao dao) {
---+            mAsyncTaskDao = dao;
---+        }
---+        @Override
---+        protected Void doInBackground(final Void... params) {
---+            mAsyncTaskDao.deleteAll();
---+            return null;
---+        }
---+    }
---+
---+
---+
---+}
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/shelved.patch
--===================================================================
----- .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/shelved.patch	(revision 2d394166f7aefdd7dd0045032e90c52d5d086e88)
--+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/shelved.patch	(revision 2d394166f7aefdd7dd0045032e90c52d5d086e88)
--@@ -1,11697 +0,0 @@
---Index: app/build.gradle
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    defaultConfig {\r\n        applicationId \"nl.icsvertex.scansuite\"\r\n        minSdkVersion 19\r\n        targetSdkVersion 30\r\n        versionCode 15892\r\n        versionName \"1.5.8.92A\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        android.defaultConfig.vectorDrawables.useSupportLibrary = true\r\n        multiDexEnabled true\r\n\r\n        //for database history\r\n        javaCompileOptions {\r\n            annotationProcessorOptions {\r\n                arguments = [\"room.schemaLocation\": \"$projectDir/schemas\".toString()]\r\n            }\r\n        }\r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    flavorDimensions(\"default\")\r\n    productFlavors {\r\n        normal {\r\n            dimension \"default\"\r\n        }\r\n    }\r\n\r\n    lintOptions {\r\n        checkReleaseBuilds false\r\n        // Or, if you prefer, you can continue to check for errors in release builds,\r\n        // but continue the build even when errors are found:\r\n        abortOnError false\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ndependencies {\r\n\r\n    //Shimmer\r\n    implementation 'com.facebook.shimmer:shimmer:0.1.0@aar'\r\n\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.android.material:material:1.3.0'\r\n    implementation 'androidx.exifinterface:exifinterface:1.3.2'\r\n    implementation 'androidx.preference:preference:1.1.1'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n\r\n    //Firebase\r\n\r\n    implementation 'com.google.firebase:firebase-crashlytics:17.3.1'\r\n    implementation 'com.google.firebase:firebase-analytics:18.0.2'\r\n    implementation platform('com.google.firebase:firebase-bom:26.5.0')\r\n    implementation 'com.google.firebase:firebase-perf'\r\n\r\n\r\n    //Android X\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test:runner:1.3.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.google.code.ksoap2-android:ksoap2-android:3.6.1'\r\n\r\n    // Room components\r\n    implementation 'androidx.room:room-runtime:2.2.6'\r\n    annotationProcessor 'androidx.room:room-compiler:2.2.6'\r\n    androidTestImplementation 'androidx.room:room-testing:2.2.6'\r\n\r\n    // Lifecycle components\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.3.0'\r\n    //noinspection LifecycleAnnotationProcessorWithJava8\r\n    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.3.0'\r\n\r\n    //Images\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n\r\n    //Scanner (device)\r\n    implementation 'com.github.datalogic:datalogic-android-sdk:1.19.1'\r\n\r\n    //Zxing\r\n    implementation 'com.google.zxing:core:3.4.0'\r\n    implementation 'com.google.zxing:android-core:3.3.0'\r\n\r\n    //Circular image\r\n    implementation 'com.mikhaellopez:circularimageview:3.2.0'\r\n    implementation 'com.balysv:material-ripple:1.0.2'\r\n\r\n\r\n    //LeakCanary\r\n//    debugImplementation \"com.squareup.leakcanary:leakcanary-android:2.2\"\r\n}\r\n\r\n\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'com.google.firebase.crashlytics'\r\napply plugin: 'com.google.firebase.firebase-perf'
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/build.gradle	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/build.gradle	(date 1617965665669)
---@@ -6,8 +6,8 @@
---         applicationId "nl.icsvertex.scansuite"
---         minSdkVersion 19
---         targetSdkVersion 30
----        versionCode 15892
----        versionName "1.5.8.92A"
---+        versionCode 15893
---+        versionName "1.5.8.93A"
---         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
---         android.defaultConfig.vectorDrawables.useSupportLibrary = true
---         multiDexEnabled true
---Index: app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Picken.Pickorders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyRepository;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.Shipment.cShipment;\r\nimport SSU_WHS.Picken.Storement.cStorement;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cPickorderRepository {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    private final iPickorderDao pickorderDao;\r\n    private final iPickorderLineDao pickorderLineDao;\r\n\r\n    private static class PickorderStepHandledParams {\r\n        String userStr;\r\n        String languageStr;\r\n        String branchStr;\r\n        String orderNumberStr;\r\n        String deviceStr;\r\n        String workPlaceStr;\r\n        String workflowStepcodeStr;\r\n        Integer workflowStepInt;\r\n        String cultureStr;\r\n\r\n        PickorderStepHandledParams(String pvUserStr, String pvLanguageStr, String pvBranchStr, String pvOrderNumberStr, String pvDeviceStr, String pvWorkplaceStr, String pvWorkflowStepCodeStr, Integer pvWorkflowStepStr, String pvCultureStr) {\r\n            this.userStr = pvUserStr;\r\n            this.languageStr = pvLanguageStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.deviceStr = pvDeviceStr;\r\n            this.workPlaceStr = pvWorkplaceStr;\r\n            this.workflowStepcodeStr = pvWorkflowStepCodeStr;\r\n            this.workflowStepInt = pvWorkflowStepStr;\r\n            this.cultureStr = pvCultureStr;\r\n        }\r\n    }\r\n\r\n    private static class PickorderUpdateWorkplaceParams {\r\n        String user;\r\n        String branch;\r\n        String ordernumber;\r\n        String workplace;\r\n\r\n        PickorderUpdateWorkplaceParams(String pvUserStr, String pvBranchStr, String pvOrdernumberStr, String pvWorkplaceStr) {\r\n            this.user = pvUserStr;\r\n            this.branch = pvBranchStr;\r\n            this.ordernumber = pvOrdernumberStr;\r\n            this.workplace = pvWorkplaceStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdatePickorderCurrentLocationLocalParams {\r\n        String orderNumberStr;\r\n        String currentLocationStr;\r\n\r\n        UpdatePickorderCurrentLocationLocalParams(String pvOrderNumberStr, String pvCurrentLocationStr) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.currentLocationStr = pvCurrentLocationStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdateSelectedLocalParams {\r\n        String orderNumberStr;\r\n        Boolean selectedBln;\r\n\r\n        UpdateSelectedLocalParams(String pvOrderNumberStr, Boolean pvSelectedBln) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.selectedBln = pvSelectedBln;\r\n        }\r\n    }\r\n\r\n    private static class CreateOrderLocalParams {\r\n        String documentStr;\r\n        Boolean  checkBarcodesBln;\r\n\r\n        CreateOrderLocalParams(String pvDocumentStr, Boolean checkBarcodesBln) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = checkBarcodesBln;\r\n        }\r\n    }\r\n\r\n\r\n    private static class PickorderLocalParams {\r\n        String userNameStr;\r\n        String branchStr;\r\n        Boolean inProgressBln;\r\n        int pickStep;\r\n        String searchTextStr;\r\n        String mainTypeStr;\r\n\r\n\r\n        PickorderLocalParams(String pvUserNameStr, String pvBranchStr, Boolean pvInProgressBln, int pvPickStepInt, String pvSearchTextStr, String pvMainTypeStr) {\r\n            this.userNameStr = pvUserNameStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.inProgressBln = pvInProgressBln;\r\n            this.pickStep = pvPickStepInt;\r\n            this.searchTextStr = pvSearchTextStr;\r\n            this.mainTypeStr = pvMainTypeStr;\r\n        }\r\n    }\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    cPickorderRepository(Application pvApplication) {\r\n        //Region Private Properties\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.pickorderDao = db.pickorderDao();\r\n        this.pickorderLineDao = db.pickorderLineDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public void insert (cPickorderEntity pickorderEntity) {\r\n        new mInsertAsyncTask(pickorderDao).execute(pickorderEntity);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(pickorderDao).execute();\r\n    }\r\n\r\n    public void pAbortOrder() {\r\n        new mAbortOrderAsyncTask(pickorderLineDao).execute();\r\n    }\r\n\r\n    public cWebresult pGetPickordersFromWebserviceWrs(Boolean pvInprogressBln, String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        String mainTypeStr = \"\";\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n\r\n\r\n        switch (cUser.currentUser.currentAuthorisation.getAutorisationEnu()){\r\n\r\n            case PICK:\r\n                break;\r\n\r\n            case PICK_PF:\r\n                mainTypeStr = \"Transfer\";\r\n                break;\r\n\r\n            case PICK_PV:\r\n                mainTypeStr = \"Sales\";\r\n                break;\r\n\r\n            default:\r\n                mainTypeStr = \"\";\r\n                break;\r\n        }\r\n\r\n        pickorderLocalParams = new PickorderLocalParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), pvInprogressBln, 0, pvSearchTextStr, mainTypeStr);\r\n\r\n        try {\r\n            webResultWrs = new mGetPickordersFromWebserviceAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPickorderstPickordersNextStepFromWebserviceWrs(String pvUsernameStr, cWarehouseorder.StepCodeEnu pvStepCodeEnu, String pvSearchTextStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n         int stepCodeInt= 0 ;\r\n\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Sorting) {\r\n            stepCodeInt = 20;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_QualityContol) {\r\n            stepCodeInt = 30;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_PackAndShip) {\r\n            stepCodeInt = 40;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Storage) {\r\n            stepCodeInt = 60;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Finish_Packing) {\r\n            stepCodeInt = 70;\r\n        }\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n        pickorderLocalParams = new PickorderLocalParams(pvUsernameStr, cUser.currentUser.currentBranch.getBranchStr(), false, stepCodeInt, pvSearchTextStr, \"\");\r\n\r\n        try {\r\n            webResultWrs = new mPickordersNextStepFromWebserviceGetAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderEntity> pGetPickordersFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cPickorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder(\"SELECT * FROM Pickorders \");\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n            if (cSharedPreferences.showSingleArticlesBln()) {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 1 \");\r\n            }\r\n            else\r\n            {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 0 \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 1 \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 0 \");\r\n            }\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (PickorderSelectActivity.currentModusEnu == PickorderSelectActivity.ModusEnu.COMBINE) {\r\n            if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                SQLStatementStr.append(\"WHERE SourceDocument <> '95' \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND SourceDocument <> '95' \");\r\n            }\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Ordernumber ASC\");\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new mGetPickordersFromDatabaseWithFilterAsyncTask(pickorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pPickHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickGeneratedHandledViaWebserviceBln(String pvShipBinStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvShipBinStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderGeneratedHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pStoreHandledViaWebserviceBln() {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), \"\", cWarehouseorder.StepCodeEnu.Pick_Storage.toString(), cWarehouseorder.WorkflowPickStepEnu.PickStorage, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pSortHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Sorting.toString(), cWarehouseorder.WorkflowPickStepEnu.PickSorting, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pQCHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_QualityContol.toString(), cWarehouseorder.WorkflowPickStepEnu.PickQualityControl, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pShipHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Pick_PackAndShip.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pFinishSinglePiecesHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Finish_Packing.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickFinishPacking,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentShippedViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentShippedAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentStoredViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentStoredAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public Boolean pPickorderUpdateWorkplaceViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderUpdateWorkplaceParams pickorderUpdateWorkplaceParams;\r\n        pickorderUpdateWorkplaceParams   = new PickorderUpdateWorkplaceParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), pvWorkplaceStr);\r\n\r\n        try {\r\n            webResult = new mPickorderUpdateWorkplaceViaWebserviceAsyncTask().execute(pickorderUpdateWorkplaceParams).get();\r\n            return webResult.getSuccessBln() && webResult.getResultBln();\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pUpdateCurrentLocationViaWebserviceWrs(String pvCurrentLocationStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mUpdateCurrentLocationViaWebserviceAsyncTask().execute(pvCurrentLocationStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public Boolean pPickorderUpdatCurrentLocationInDatabaseBln(String pvCurrentLocationStr) {\r\n\r\n        Integer integerValue;\r\n        UpdatePickorderCurrentLocationLocalParams updatePickorderCurrentLocationLocalParams = new UpdatePickorderCurrentLocationLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), pvCurrentLocationStr);\r\n        try {\r\n            integerValue = new mUpdatePickorderCurrentLocationInDatabaseAsyncTask(pickorderDao).execute(updatePickorderCurrentLocationLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public Boolean pPickorderUpdatIsSelectedInDatabaseBln() {\r\n\r\n        Integer integerValue;\r\n        UpdateSelectedLocalParams updateSelectedLocalParams = new UpdateSelectedLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), cPickorder.currentPickOrder.getIsSelectedBln());\r\n        try {\r\n            integerValue = new mUpdateIsSelectedInDatabaseAsyncTask(pickorderDao).execute(updateSelectedLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public cWebresult pCreatePickOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        CreateOrderLocalParams orderLocalParams = new CreateOrderLocalParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new cPickorderRepository.mCreatePickorderViaWebserviceAsyncTask().execute(orderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //Pick Lines\r\n    public cWebresult pGetLinesFromWebserviceWrs(cWarehouseorder.ActionTypeEnu pvActionTypeEnu) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetAllLinesFromDatabaseObl() {\r\n\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetAllLinesFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetPickorderLinesToSendFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetPickorderLinesToSendFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledForBranchFromDatabaseObl(String pvBranchStr) {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesForBranchAsyncTask(pickorderLineDao).execute(pvBranchStr).get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesBusyFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetBusyLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetHandledLinesOblAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    //Pick quantityDbl's\r\n    public Double pQuantityNotHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityNotHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pQuantityHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetTotalQuantityDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetTotalQuanitityAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (resultDbl== null) {\r\n            resultDbl = (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    //Pick Order details\r\n\r\n    public cWebresult pGetAddressesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderAdressesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetSettingsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderSettingsFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCompositeBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLineBarcodesFromWebservice(cWarehouseorder.ActionTypeEnu pvActionTypeEnu){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderLineBarcodesGetFromWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertysViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertysViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertyValuesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPackagesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderPackagesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Pack and Ship\r\n\r\n\r\n\r\n    public cWebresult pGetPackAndShipLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPackAndShipLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetFinishPackSinglePieceLinesViaWebserviceWrsWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Storage\r\n    public cWebresult pGetStorageLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetStorageLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n    //End Storage\r\n\r\n    public cWebresult pCreateCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mCreateCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddOrderToCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mAddOrderToCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveOrderFromCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveOrderFromCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAsyncTask extends AsyncTask<cPickorderEntity, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cPickorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromWebserviceAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_INPROGRESS;\r\n            l_PropertyInfo3Pin.setValue(params[0].inProgressBln);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr.toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickordersNextStepFromWebserviceGetAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKSTEP;\r\n            l_PropertyInfo3Pin.setValue(params[0].pickStep);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSSEQUELSTEP, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cPickorderEntity>> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n\r\n        mGetPickordersFromDatabaseWithFilterAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredPickorders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mPickorderStepHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LANGUAGEASCULTURE;\r\n                l_PropertyInfo2Pin.setValue(params[0].languageStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo5Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo6Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo7Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPINT;\r\n                l_PropertyInfo8Pin.setValue(params[0].workflowStepInt);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSTEPHANDLED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderGeneratedHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPBINSTR;\r\n                l_PropertyInfo8Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERHANDLEDGENERATED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentShippedAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cShipment.currentShipment.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo5Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGAGENT;\r\n                l_PropertyInfo6Pin.setValue(cShipment.currentShipment.shippingAgent().getShippingAgentStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGSERVICE;\r\n                l_PropertyInfo7Pin.setValue(cShipment.currentShipment.shippingAgentService().getServiceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGOPTIONS;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                SoapObject shippingpackages = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES);\r\n\r\n                int sequencenumberInt = 0;\r\n                String packageTypeToRememberStr = \"\";\r\n                int counterForTypeInt = 0;\r\n\r\n                for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit : cShipment.currentShipment.shippingAgentService().shippingUnitsObl()) {\r\n\r\n                    //If we didn't use this, continue\r\n                    if (shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt() <= 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    //New packageype, so reset sequenceNumber\r\n                    if (!packageTypeToRememberStr.equalsIgnoreCase(shippingAgentServiceShippingUnit.getShippingUnitStr())) {\r\n                        packageTypeToRememberStr = shippingAgentServiceShippingUnit.getShippingUnitStr();\r\n                        sequencenumberInt = 0;\r\n                        counterForTypeInt = 0;\r\n                    }\r\n\r\n                    while (counterForTypeInt < shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt()) {\r\n                        counterForTypeInt += 1;\r\n                        sequencenumberInt += 10;\r\n\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_PACKAGE, packageTypeToRememberStr);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_SEQUENCENUMBER, sequencenumberInt);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_WEIGHTING, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_ITEMCOUNT, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINERTYPE, \"\");\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINER, \"\");\r\n                        shippingpackages.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES;\r\n                l_PropertyInfo9Pin.setValue(shippingpackages);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSHIPPED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentStoredAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cStorement.currentStorement.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_STORAGEBINCODE;\r\n                l_PropertyInfo5Pin.setValue(cStorement.currentStorement.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSTORED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderUpdateWorkplaceViaWebserviceAsyncTask extends AsyncTask<PickorderUpdateWorkplaceParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderUpdateWorkplaceParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].user);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branch);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].ordernumber);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo4Pin.setValue(params[0].workplace);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERUPDATEWORKPLACE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mUpdatePickorderCurrentLocationInDatabaseAsyncTask extends AsyncTask<UpdatePickorderCurrentLocationLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdatePickorderCurrentLocationInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdatePickorderCurrentLocationLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderCurrentLocation(params[0].orderNumberStr, params[0].currentLocationStr);\r\n        }\r\n    }\r\n\r\n    private static class mUpdateIsSelectedInDatabaseAsyncTask extends AsyncTask<UpdateSelectedLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdateIsSelectedInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdateSelectedLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderIsSelected(params[0].orderNumberStr, params[0].selectedBln);\r\n        }\r\n    }\r\n\r\n    private static class mAbortOrderAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mAbortOrderAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Void doInBackground(Void... params) {\r\n            mAsyncTaskDao.abortOrder();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n                l_PropertyInfo3Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPackAndShipLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESPACKANDSHIP, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetStorageLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESSTORAGE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESFINISHSINGLEPIECE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreateCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_CREATEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mAddOrderToCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOADD;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADDORDERTOMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveOrderFromCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOREMOVE;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEORDERFROMMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetAllLinesFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetAllLinesFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getAll();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderLinesToSendFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetPickorderLinesToSendFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getPickorderLineEntitiesToSend();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesForBranchAsyncTask extends AsyncTask<String, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesForBranchAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final String... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineForBranchEntitiesLin(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mGetBusyLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetBusyLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getBusyPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetHandledLinesOblAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetHandledLinesOblAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getHandledPickorderLineEntities();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityNotHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityNotHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getQuantityNotHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getNumberHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetTotalQuanitityAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetTotalQuanitityAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getTotalQuantityDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderAdressesFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERADDRESSES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderSettingsFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SETTINGTYPE;\r\n            l_PropertyInfo4Pin.setValue(\"Pick_PackAndShip\");\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTSETTINGSGET, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderPackagesFromWebserviceTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult =  cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSHIPPACKAGES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString().toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSEORDERCOMPOSITEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderLineBarcodesGetFromWebserviceAsyncTask extends AsyncTask <String, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n            l_PropertyInfo3Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mUpdateCurrentLocationViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_CURRENTLOCATION;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_UPDATECURRENTORDERLOCATION, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreatePickorderViaWebserviceAsyncTask extends AsyncTask<CreateOrderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(CreateOrderLocalParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.PF.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(date 1617964993102)
---@@ -2176,6 +2176,8 @@
---         }
---     }
--- 
---+
---+
---     //End Region Private Methods
--- 
--- }
---Index: app/src/main/AndroidManifest.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"nl.icsvertex.scansuite\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n\r\n    <application\r\n        android:name=\"ICS.cAppExtension\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"false\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        android:largeHeap=\"true\">\r\n        <provider\r\n            android:name=\".cGenericFileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n        <activity\r\n            android:name=\".Activities.General.MainDefaultActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.MenuActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.General.LoginActivity\"\r\n\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".Activities.General.BarcodeInfoActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.LoginActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderPickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLineItemPropertyInputActvity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Pick.CreatePickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderLinesGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderPickGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSortActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n        <activity android:name=\".Activities.Sort.SortorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShipLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.QualityControl.QualityControlLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.QualityControl.PickorderQCActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.CreateInventoryActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryArticleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Receive.CreateReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.CreateIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMASLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveOrderReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Returns.ReturnorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.CreateReturnActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnArticleDetailActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Move.MoveorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.CreateMoveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesPlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveMISinglepieceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveorderLinesPlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Packaging.PackagingActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.CreatePackAndShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSingleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipMultiActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n\r\n        <meta-data\r\n            android:name=\"io.fabric.ApiKey\"\r\n            android:value=\"0a3a15057e61fb1e84d5024bd01b5657d9a4c76e\" />\r\n    </application>\r\n\r\n</manifest>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/AndroidManifest.xml	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/AndroidManifest.xml	(date 1617965228194)
---@@ -533,9 +533,6 @@
---                 android:name="android.support.PARENT_ACTIVITY"
---                 android:value="nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity" />
---         </activity>
----
----
----
---         <meta-data
---             android:name="io.fabric.ApiKey"
---             android:value="0a3a15057e61fb1e84d5024bd01b5657d9a4c76e" />
---Index: app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package nl.icsvertex.scansuite.Activities.General;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.app.AppCompatDelegate;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\n\r\n\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Environments.cEnvironment;\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cPermissions;\r\nimport ICS.Utils.cPower;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Branches.cBranch;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcode;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisation;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplate;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroup;\r\nimport SSU_WHS.Basics.Scanners.cScanner;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentService;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentShipMethod;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Translations.cTranslation;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.ScannerLogon.cScannerLogon;\r\nimport SSU_WHS.Webservice.cWebservice;\r\n\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoConnectionFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.DateTimeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.HomeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.LanguageFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Support.SupportFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class MainDefaultActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //region views\r\n    private  ImageView imageHome;\r\n    private  Toolbar Toolbar;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private  FrameLayout mainFramelayout;\r\n    private  DrawerLayout menuMainDrawer;\r\n    private  NavigationView mainmenuNavigation;\r\n\r\n\r\n    //End region views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\r\n        super.onCreate(savedInstanceState);\r\n\r\n        this.setContentView(R.layout.activity_main);\r\n\r\n        // Standard methods to initialize the Activity\r\n        this.mActivityInitialize();\r\n\r\n        //check permissions first\r\n        cPermissions.checkPermissions();\r\n\r\n        //set environment from preferences/by QR code\r\n        this.mSetEnviroment();\r\n\r\n        //Try to set the serialnumber\r\n        this.mSetSerialNumberIfPossible();\r\n\r\n        //Set darmode\r\n        this.pChangeDarkModus();\r\n\r\n         //set Crashlytics, otherwise Firebase wont work\r\n        FirebaseAnalytics.getInstance(this);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cPower.pRegisterPowerConnectReceiver();\r\n        cPower.pRegisterPowerLevelChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cPower.pUnregisterConnectPowerReceiver();\r\n        cPower.pUnregisterPowerLevelChangedReceiver();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int pvRequestCodeInt, int pvResultCodeInt, Intent data) {\r\n\r\n        super.onActivityResult(pvRequestCodeInt, pvResultCodeInt, data);\r\n        if (pvRequestCodeInt == cPublicDefinitions.CHANGELANGUAGE_REQUESTCODE) {\r\n            //we've changed the language, or not, who cares, but go back to language\r\n            this.setTitle(R.string.screentitle_language);\r\n            this.toolbarTitle.setText(R.string.screentitle_language);\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.mainFramelayout, new LanguageFragment());\r\n            transaction.commit();\r\n        }\r\n\r\n        //internet set?\r\n        if (pvRequestCodeInt == cPublicDefinitions.ACTIVITY_WIFI_SETTINGS) {\r\n\r\n            if (!cConnection.isInternetConnectedBln()) {\r\n                cUserInterface.pCheckAndCloseOpenDialogs();\r\n                final NoConnectionFragment noConnectionFragment = new NoConnectionFragment();\r\n                noConnectionFragment.setCancelable(true);\r\n                noConnectionFragment.show(((MainDefaultActivity) cAppExtension.context).getSupportFragmentManager(), \"NOCONNECTION\");\r\n                return;\r\n            }\r\n            try {\r\n                this.pLetsGetThisPartyStartedOrNot();\r\n            } catch (ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        //Set App Extensions\r\n        this.mSetAppExtensions();\r\n\r\n        //Find all views in Activity\r\n        this.mFindViews();\r\n\r\n        // Show and set toolbar\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_main));\r\n\r\n        // Don't do shit\r\n        this.mFieldsInitialize();\r\n\r\n        // Set event listeners\r\n        this.mSetListeners();\r\n\r\n        // Init screen\r\n        this.mInitScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.Toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.imageHome = findViewById(R.id.imageHome);\r\n\r\n        this.mainFramelayout = findViewById(R.id.mainFramelayout);\r\n        this.menuMainDrawer = findViewById(R.id.menuMainDrawer);\r\n        this.mainmenuNavigation = findViewById(R.id.mainMenuNavigation);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        this.Toolbar.showOverflowMenu();\r\n\r\n        setSupportActionBar(this.Toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_black_24dp);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHomeListener();\r\n        this.mSetMenuListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n    public void pLetsGetThisPartyStartedOrNot() throws ExecutionException {\r\n\r\n        // If scanner had different interface version then web service, then stop\r\n        if (!cWebservice.pWebserviceIsAvailableAndRightVersionBln()) {\r\n\r\n            cAppExtension.activity.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mShowHomeFragment();\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // If we already have everything we need, then next fragment\r\n        if (this.mAllBasicsAvailableBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n\r\n        // Get all basic data via webservice, then next fragment\r\n        if (this.mGetBasicDataBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n    }\r\n\r\n    public void pChangeDarkModus() {\r\n                if (cSharedPreferences.getDarkModusBln()) {\r\n                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\r\n                    return;\r\n                }\r\n\r\n                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\r\n    }\r\n\r\n    public  void pSetChosenEnvironment() {\r\n\r\n        Fragment FragmentFrg = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n        if (FragmentFrg != null) {\r\n            DialogFragment DialogFragmentDfr = (DialogFragment) FragmentFrg;\r\n            DialogFragmentDfr.dismiss();\r\n        }\r\n\r\n        toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        cUserInterface.pShowSnackbarMessage(mainFramelayout, cAppExtension.context.getString(R.string.environment_set_to_parameter1, cEnvironment.currentEnvironment.getDescriptionStr()), R.raw.goodsound, false );\r\n\r\n    }\r\n\r\n    public void pPasswordCancelled() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    public  void pPasswordSuccess(){\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private boolean mAllBasicsAvailableBln() {\r\n        return cScannerLogon.scannerLoggedOnBln &&\r\n                cUser.usersAvailableBln &&\r\n                cBarcodeLayout.barcodeLayoutsAvailableBln &&\r\n                cSetting.settingsAvailableBln &&\r\n                cBranch.BranchesAvailableBln &&\r\n                cShippingAgent.shippingAgentsAvailableBln &&\r\n                cShippingAgentService.shippingAgentServicesAvailableBln &&\r\n                cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln &&\r\n                cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln &&\r\n                cItemProperty.itemPropertiesAvaliableBln &&\r\n                cPropertyGroup.propertyGroupsAvailableBln &&\r\n                cCompositeBarcode.compositeBarcodesAvailableBln &&\r\n                cScanner.scannersAvailableBln &&\r\n                cCustomAuthorisation.customAutorisationsAvailableBln &&\r\n                cTranslation.translationsAvailableBln &&\r\n                cStockOwner.stockOwnersAvailableBln;\r\n    }\r\n\r\n    private boolean mGetBasicDataBln() throws ExecutionException {\r\n\r\n        if (!cScannerLogon.pScannerLogonViaWebserviceBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cScannerLogon.currentScannerLogon.pScannerVersionCheckBln(mainFramelayout)){\r\n            return  false;\r\n        }\r\n\r\n        if (!cSetting.pGetSettingsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBranch.pGetBranchesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cUser.pGetUsersViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBarcodeLayout.pGetBarcodeLayoutsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cItemProperty.pGetItemPropertiesViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){\r\n            return false;\r\n        }\r\n\r\n        if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cCompositeBarcode.pGetCompositeBarcodesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!mGetshippingInfoViawebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cScanner.pGetScannersViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cCustomAuthorisation.pGetCustomAutorisationsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)){\r\n            return false;\r\n        }\r\n\r\n        if (!cTranslation.pGetTranslationsViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        return  mAllBasicsAvailableBln();\r\n\r\n    }\r\n\r\n    private boolean mGetshippingInfoViawebserviceBln() throws ExecutionException {\r\n\r\n        cShippingAgent.pGetShippingAgentsViaWebservice(true);\r\n        if (!cShippingAgent.shippingAgentsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentService.pGetShippingAgentServicesViaWebservice(true);\r\n        if (!cShippingAgentService.shippingAgentServicesAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentServiceShippingUnit.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        if (!cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentShipMethod.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        return cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln;\r\n    }\r\n\r\n    public  void pSetAddedEnvironment() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    private void mSetEnviroment(){\r\n        cEnvironment.pSetEnvironment();\r\n        if (cEnvironment.currentEnvironment != null) {\r\n            toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        }\r\n    }\r\n\r\n    private void mShowHomeFragment() {\r\n        this.imageHome.setVisibility(View.GONE);\r\n        this.toolbarTitle.setText(R.string.screentitle_main);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        FragmentTransaction transaction =  getSupportFragmentManager().beginTransaction();\r\n        transaction.replace(R.id.mainFramelayout, new HomeFragment());\r\n        transaction.commit();\r\n    }\r\n\r\n    private  void mShowEnvironmentFragment() {\r\n        final EnvironmentFragment environmentFragment = new EnvironmentFragment();\r\n        environmentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n    //Region Listeners\r\n    private void mSetHomeListener() {\r\n        this.imageHome.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowHomeFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void mSetMenuListener() {\r\n        this.mainmenuNavigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n                Fragment selectedFragment = null;\r\n                switch (menuItem.getItemId()) {\r\n\r\n                    case R.id.action_home:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n\r\n                    case R.id.action_settings:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        toolbarTitle.setText(R.string.screentitle_settings);\r\n                        toolbarImage.setImageResource(R.drawable.ic_settings);\r\n                        break;\r\n\r\n                    case R.id.action_support:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new SupportFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_support);\r\n                        toolbarImage.setImageResource(R.drawable.ic_support);\r\n                        break;\r\n\r\n                    case R.id.action_language:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new LanguageFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_language);\r\n                        toolbarImage.setImageResource(R.drawable.ic_language);\r\n                        break;\r\n\r\n                    case R.id.action_datetime:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new DateTimeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_datetime);\r\n                        toolbarImage.setImageResource(R.drawable.ic_calendar);\r\n                        break;\r\n                    case R.id.action_environments:\r\n                        cUserInterface.pShowpasswordDialog(cAppExtension.context.getString(R.string.password_header_default) ,cAppExtension.context.getString(R.string.dialog_password_settings_text),false);\r\n                        break;\r\n\r\n                    case R.id.action_proglove:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        mShowPairGlove();\r\n                        return true;\r\n\r\n                    default:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n                }\r\n\r\n                if (selectedFragment != null) {\r\n                    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n                    transaction.replace(R.id.mainFramelayout, selectedFragment);\r\n                    transaction.commit();\r\n                }\r\n\r\n                // deselect everything\r\n                int size = mainmenuNavigation.getMenu().size();\r\n                for (int i = 0; i < size; i++) {\r\n                    mainmenuNavigation.getMenu().getItem(i).setChecked(false);\r\n                }\r\n\r\n                // set item as selected to persist highlight\r\n                menuItem.setChecked(true);\r\n                // close drawer when item is tapped\r\n                menuMainDrawer.closeDrawers();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //endregion Listeners\r\n\r\n    //region Event handlers\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            this.menuMainDrawer.openDrawer(GravityCompat.START);\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void mStartLoginActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, LoginActivity.class);\r\n        cAppExtension.context.startActivity(intent);\r\n    }\r\n\r\n    private void mSetSerialNumberIfPossible(){\r\n\r\n        if (!cSharedPreferences.getSerialNumerStr().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && !cDeviceInfo.getSerialnumberStr().isEmpty()) {\r\n            cSharedPreferences.setSerialNumerStr(cDeviceInfo.getSerialnumberStr());\r\n        }\r\n\r\n    }\r\n\r\n    private void mShowPairGlove() {\r\n        Intent i = new Intent();\r\n        i.setAction(cPublicDefinitions.PROGLOVE_CONNECT_ACTION);\r\n        cAppExtension.context.sendBroadcast(i);\r\n    }\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(date 1617964993247)
---@@ -364,9 +364,9 @@
---             return false;
---         }
--- 
----        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
----            return false;
----        }
---+//        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
---+//            return false;
---+//        }
--- 
---         if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {
---             return  false;
---Index: app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package ICS.Utils.Scanning;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.BarcodeInfoActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.CreateIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveMISinglepieceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipMultiActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSingleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.CreateReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.CreateReturnActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderShipActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddEnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BranchFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SearchArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SetBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PasswordFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ReasonFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.CreateInventoryActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\n\r\npublic class cBarcodeScan {\r\n\r\n    private static String currentActivityContextStr = \"\";\r\n\r\n    public static class BarcodeType {\r\n\r\n        public static final int Unknown = 0;\r\n        public static final int EAN8 = 1;\r\n        public static final int EAN13 = 2;\r\n    }\r\n\r\n    private String barcodeFormattedStr;\r\n    public String getBarcodeFormattedStr() {\r\n        return barcodeFormattedStr;\r\n    }\r\n\r\n    public String barcodeOriginalStr;\r\n    public String getBarcodeOriginalStr() {\r\n        return barcodeOriginalStr;\r\n    }\r\n\r\n    public String barcodeTypeStr;\r\n    public String getBarcodeTypeStr() {\r\n        return barcodeTypeStr;\r\n    }\r\n\r\n    private   Boolean containsCrlf = false;\r\n    public Boolean getContainsCrlfBln() {\r\n        return containsCrlf;\r\n    }\r\n\r\n    public cBarcodeScan(){\r\n\r\n    }\r\n\r\n    private static IntentFilter BarcodeIntentFilter;\r\n    private static void getBarcodeIntentFilter() {\r\n        if (BarcodeIntentFilter == null) {\r\n            BarcodeIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static IntentFilter BarcodeFragmentIntentFilter;\r\n    private static void getBarcodeFragmentIntentFilter() {\r\n        if (BarcodeFragmentIntentFilter == null) {\r\n            BarcodeFragmentIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeFragmentIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeFragmentIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeReceiver;\r\n    private static void getBarcodeReceiver() {\r\n        if (BarcodeReceiver == null) {\r\n            BarcodeReceiver = new BroadcastReceiver(){\r\n                @Override\r\n                public void onReceive(Context pvContext, Intent pvIntent) {\r\n\r\n                    if (pvContext != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(pvIntent);\r\n\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    //Login\r\n                    if (cAppExtension.activity instanceof LoginActivity) {\r\n                        LoginActivity loginActivity = (LoginActivity)cAppExtension.activity;\r\n                        loginActivity.pHandleScan(barcodeScan);\r\n                       }\r\n\r\n                    //BarcodeInfo\r\n                    if (cAppExtension.activity instanceof BarcodeInfoActivity) {\r\n                        BarcodeInfoActivity barcodeInfoActivity = (BarcodeInfoActivity)cAppExtension.activity;\r\n                        barcodeInfoActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Pick\r\n                    if (cAppExtension.activity instanceof PickorderSelectActivity){\r\n                        PickorderSelectActivity pickorderSelectActivity = (PickorderSelectActivity)cAppExtension.activity;\r\n                        pickorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                        pickorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                        pickorderLinesGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n                        PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                        pickorderPickActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n                        PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n                        pickorderPickGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Sort\r\n                    if (cAppExtension.activity instanceof SortorderSelectActivity){\r\n                        SortorderSelectActivity sortorderSelectActivity = (SortorderSelectActivity)cAppExtension.activity;\r\n                        sortorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderLinesActivity){\r\n                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                        sortorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderSortActivity){\r\n                        SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n                        sortorderSortActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Ship\r\n                    if (cAppExtension.activity instanceof ShiporderSelectActivity){\r\n                        ShiporderSelectActivity shiporderSelectActivity = (ShiporderSelectActivity)cAppExtension.activity;\r\n                        shiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderLinesActivity){\r\n                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                        shiporderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderShipActivity){\r\n                        ShiporderShipActivity shiporderShipActivity = (ShiporderShipActivity)cAppExtension.activity;\r\n                        shiporderShipActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Finish Single Pieces\r\n                    if (cAppExtension.activity instanceof FinishShiporderSelectActivity){\r\n                        FinishShiporderSelectActivity finishShiporderSelectActivity = (FinishShiporderSelectActivity)cAppExtension.activity;\r\n                        finishShiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof FinishShipLinesActivity){\r\n                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                        finishShipLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //QC\r\n                    if (cAppExtension.activity instanceof QualityControlLinesActivity){\r\n                        QualityControlLinesActivity qualityControlLinesActivity = (QualityControlLinesActivity)cAppExtension.activity;\r\n                        qualityControlLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderQCActivity){\r\n                        PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n                        pickorderQCActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Inventory\r\n                    if (cAppExtension.activity instanceof CreateInventoryActivity) {\r\n                        CreateInventoryActivity createInventoryActivity = (CreateInventoryActivity)cAppExtension.activity;\r\n                        createInventoryActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderSelectActivity){\r\n                        InventoryorderSelectActivity inventoryorderSelectActivity = (InventoryorderSelectActivity)cAppExtension.activity;\r\n                        inventoryorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinsActivity){\r\n                        InventoryorderBinsActivity inventoryorderBinsActivity = (InventoryorderBinsActivity)cAppExtension.activity;\r\n                        inventoryorderBinsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinActivity){\r\n                        InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n                        inventoryorderBinActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n                        InventoryArticleActivity inventoryArticleDetailActivity = (InventoryArticleActivity)cAppExtension.activity;\r\n                        inventoryArticleDetailActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n\r\n                    //Intake\r\n                    if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){\r\n                        IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;\r\n                        intakeAndReceiveSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReceiveActivity){\r\n                        CreateReceiveActivity createReceiveActivity = (CreateReceiveActivity)cAppExtension.activity;\r\n                        createReceiveActivity.pHandleScan(barcodeScan,false,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateIntakeActivity){\r\n                        CreateIntakeActivity createIntakeActivity = (CreateIntakeActivity)cAppExtension.activity;\r\n                        createIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveLinesActivity){\r\n                        ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                        receiveLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n                        ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n                        receiveOrderReceiveActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n                        IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n                        intakeorderMATLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n                        IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n                        intakeorderMASLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n                        IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n                        IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeGeneratedActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    //Return\r\n                    if (cAppExtension.activity instanceof ReturnorderSelectActivity){\r\n                        ReturnorderSelectActivity returnorderSelectActivity = (ReturnorderSelectActivity)cAppExtension.activity;\r\n                        returnorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                        ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                        returnorderDocumentsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                        ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                        returnorderDocumentActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReturnActivity) {\r\n                        CreateReturnActivity createReturnActivity = (CreateReturnActivity)cAppExtension.activity;\r\n                        createReturnActivity.pHandleScan(barcodeScan,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                        ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                        returnArticleDetailActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Move\r\n                    if (cAppExtension.activity instanceof MoveorderSelectActivity){\r\n                        MoveorderSelectActivity moveorderSelectActivity = (MoveorderSelectActivity)cAppExtension.activity;\r\n                        moveorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateMoveActivity){\r\n                        CreateMoveActivity createMoveActivity = (CreateMoveActivity)cAppExtension.activity;\r\n                        createMoveActivity.pHandleScan(barcodeScan, false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n                        MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n                        moveLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n                        MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n                        moveLinesTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n                        MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n                        moveLineTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n                        MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n                        moveLinesPlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n                        MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n                        moveLinePlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLineTakeActivity){\r\n                        MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n                        moveLineTakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceActivity){\r\n                        MoveLinePlaceActivity moveLinePlaceActivity = (MoveLinePlaceActivity)cAppExtension.activity;\r\n                        moveLinePlaceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveMISinglepieceActivity){\r\n                        MoveMISinglepieceActivity moveMISinglepieceActivity = (MoveMISinglepieceActivity)cAppExtension.activity;\r\n                        moveMISinglepieceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity){\r\n                        MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveorderLinesPlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity){\r\n                        MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveLinePlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipSingleActivity){\r\n                        PackAndShipSingleActivity packAndShipSingleActivity = (PackAndShipSingleActivity)cAppExtension.activity;\r\n                        packAndShipSingleActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipMultiActivity){\r\n                        PackAndShipMultiActivity packAndShipMultiActivity = (PackAndShipMultiActivity)cAppExtension.activity;\r\n                        packAndShipMultiActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderSelectActivity){\r\n                        StoreorderSelectActivity storeorderSelectActivity = (StoreorderSelectActivity)cAppExtension.activity;\r\n                        storeorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderLinesActivity){\r\n                        StoreorderLinesActivity storeorderLinesActivity = (StoreorderLinesActivity)cAppExtension.activity;\r\n                        storeorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeFragmentReceiver;\r\n    private static void getBarcodeFragmentReceiver() {\r\n        if (BarcodeFragmentReceiver == null) {\r\n            BarcodeFragmentReceiver = new BroadcastReceiver(){\r\n\r\n                @Override\r\n                public void onReceive(Context context, Intent intent) {\r\n\r\n                    if (context != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(intent);\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    if (cAppExtension.dialogFragment instanceof BranchFragment) {\r\n                        BranchFragment branchFragment = (BranchFragment)cAppExtension.dialogFragment;\r\n                        branchFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof StepDoneFragment) {\r\n                        StepDoneFragment stepDoneFragment = (StepDoneFragment)cAppExtension.dialogFragment;\r\n                        stepDoneFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof WorkplaceFragment) {\r\n                        WorkplaceFragment workplaceFragment = (WorkplaceFragment)cAppExtension.dialogFragment;\r\n                        workplaceFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof CurrentLocationFragment) {\r\n                        CurrentLocationFragment currentLocationFragment = (CurrentLocationFragment)cAppExtension.dialogFragment;\r\n                        currentLocationFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof ArticleFullViewFragment) {\r\n                        ArticleFullViewFragment articleFullViewFragment = (ArticleFullViewFragment)cAppExtension.dialogFragment;\r\n                        articleFullViewFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof EnvironmentFragment) {\r\n                        EnvironmentFragment environmentFragment = (EnvironmentFragment)cAppExtension.dialogFragment;\r\n                        environmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddEnvironmentFragment) {\r\n                        AddEnvironmentFragment addEnvironmentFragment = (AddEnvironmentFragment)cAppExtension.dialogFragment;\r\n                        addEnvironmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddBinFragment) {\r\n                        AddBinFragment addBinFragment = (AddBinFragment)cAppExtension.dialogFragment;\r\n                        addBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof SetBinFragment) {\r\n                        SetBinFragment setBinFragment = (SetBinFragment)cAppExtension.dialogFragment;\r\n                        setBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddArticleFragment) {\r\n                        AddArticleFragment addArticleFragment = (AddArticleFragment)cAppExtension.dialogFragment;\r\n                        addArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanArticleFragment) {\r\n                        ScanArticleFragment scanArticleFragment = (ScanArticleFragment)cAppExtension.dialogFragment;\r\n                        scanArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n                    if (cAppExtension.dialogFragment instanceof SearchArticleFragment) {\r\n                        SearchArticleFragment searchArticleFragment = (SearchArticleFragment)cAppExtension.dialogFragment;\r\n                        searchArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanBinFragment) {\r\n                        ScanBinFragment scanBinFragment = (ScanBinFragment)cAppExtension.dialogFragment;\r\n                        scanBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof PasswordFragment) {\r\n                        PasswordFragment passwordFragment = (PasswordFragment)cAppExtension.dialogFragment;\r\n                        passwordFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ReasonFragment) {\r\n                        ReasonFragment reasonFragment = (ReasonFragment)cAppExtension.dialogFragment;\r\n                        reasonFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment  instanceof ItemPropertyTextInputFragment){\r\n                        ItemPropertyTextInputFragment itemPropertyTextInputFragment = (ItemPropertyTextInputFragment)cAppExtension.dialogFragment;\r\n                        itemPropertyTextInputFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment  instanceof DatePickerFragment){\r\n                        DatePickerFragment datePickerFragment = (DatePickerFragment)cAppExtension.dialogFragment;\r\n                        datePickerFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public static void pRegisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeIntentFilter();\r\n        cBarcodeScan.getBarcodeReceiver();\r\n\r\n        //Prevent multiple receivers on same context\r\n        if (cBarcodeScan.currentActivityContextStr.equalsIgnoreCase(cAppExtension.context.getClass().getSimpleName())) {\r\n             return;\r\n        }\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeReceiver,BarcodeIntentFilter);\r\n        cBarcodeScan.currentActivityContextStr  = cAppExtension.context.getClass().getSimpleName();\r\n\r\n\r\n\r\n    }\r\n\r\n    public static void pRegisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeFragmentIntentFilter();\r\n        cBarcodeScan.getBarcodeFragmentReceiver();\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeFragmentReceiver,BarcodeFragmentIntentFilter);\r\n\r\n    }\r\n\r\n    public static void pUnregisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n         cAppExtension.context.unregisterReceiver(BarcodeReceiver);\r\n            cBarcodeScan.currentActivityContextStr = \"\";\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void pUnregisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n            cAppExtension.context.unregisterReceiver(BarcodeFragmentReceiver);\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static cBarcodeScan pFakeScan(String pvBarcodeStr) {\r\n        cBarcodeScan result = new cBarcodeScan();\r\n        result.barcodeOriginalStr = pvBarcodeStr;\r\n        result.barcodeFormattedStr = pvBarcodeStr;\r\n        result.barcodeTypeStr = cText.pIntToStringStr( BarcodeType.Unknown);\r\n        return  result;\r\n    }\r\n\r\n    private static cBarcodeScan mGetBarcode(Intent pvIntent) {\r\n\r\n        cBarcodeScan resultBarcodeScan;\r\n\r\n        Bundle extras = pvIntent.getExtras();\r\n        String returnBarcodeStr;\r\n        String scannedBarcodeStr = \"\";\r\n        String barcodeTypeStr = \"\";\r\n\r\n\r\n        if (extras != null) {\r\n\r\n            //so who is sending us this?\r\n            if (Objects.requireNonNull(pvIntent.getAction()).equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_TC55_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODE);\r\n                String honeywellBarcodeType = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODETYPE);\r\n                barcodeTypeStr = cBarcodeScanDefinitions.pGetHoneyWellBarcodeTypeStr(honeywellBarcodeType);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        assert scannedBarcodeStr != null;\r\n\r\n        scannedBarcodeStr = mCleanBarcodeStr(scannedBarcodeStr);\r\n        returnBarcodeStr =  mCleanBarcodeStr(scannedBarcodeStr) ;\r\n\r\n        //If it's an EAN barcodeStr cut off checkdigit\r\n        assert barcodeTypeStr != null;\r\n        if (barcodeTypeStr.toUpperCase().contains(\"EAN\") ) {\r\n\r\n            if (returnBarcodeStr.length() == 13) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,12);\r\n            }\r\n\r\n            if (returnBarcodeStr.length() == 8) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,8);\r\n            }\r\n        }\r\n\r\n        if (barcodeTypeStr.contains(\"GS1\")) {\r\n            barcodeTypeStr = \"GS1-128\";\r\n        }\r\n\r\n        resultBarcodeScan = new cBarcodeScan();\r\n        resultBarcodeScan.barcodeOriginalStr = scannedBarcodeStr;\r\n        resultBarcodeScan.barcodeFormattedStr = returnBarcodeStr;\r\n        resultBarcodeScan.barcodeTypeStr = barcodeTypeStr;\r\n        resultBarcodeScan.containsCrlf = scannedBarcodeStr.contains(\"\\\\n\");\r\n\r\n\r\n\r\n        return resultBarcodeScan;\r\n    }\r\n\r\n    private static String mCleanBarcodeStr(String pvDirtyBarcodeStr) {\r\n        return  pvDirtyBarcodeStr.replaceAll(\"([\\\\r\\\\n\\\\t])\",\"\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(date 1617965281029)
---@@ -280,7 +280,6 @@
---                         return;
---                     }
--- 
----
---                     //Intake
---                     if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){
---                         IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;
---Index: app/src/main/java/SSU_WHS/General/cDatabase.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.General;\r\n\r\npublic class cDatabase {\r\n    //region Tables\r\n\r\n    public static final String TABLENAME_USERS = \"Users\";\r\n    public static final String TABLENAME_SETTINGS = \"Settings\";\r\n    public static final String TABLENAME_SCANNERLOGON = \"ScannerLogon\";\r\n    public static final String TABLENAME_BARCODELAYOUTS = \"BarcodeLayouts\";\r\n    public static final String TABLENAME_BINITEM = \"BinItem\";\r\n    public static final String TABLENAME_TRANSLATION = \"Translations\";\r\n    public static final String TABLENAME_WORKPLACE = \"Workplaces\";\r\n    public static final String TABLENAME_SCANNERS = \"Scanners\";\r\n    public static final String TABLENAME_BRANCH = \"Branches\";\r\n    public static final String TABLENAME_BRANCHBIN = \"BranchBin\";\r\n    public static final String TABLENAME_ITEMPROPERTY = \"ItemProperties\";\r\n    public static final String TABLENAME_LABELTEMPLATE  =  \"Labeltemplate\";\r\n    public static final String TABLENAME_PROPERTYGROUP = \"PropertyGroup\";\r\n    public static final String TABLENAME_PROPERTYGROUPPROPERTY = \"PropertyGroupProperty\";\r\n    public static final String TABLENAME_COMPOSITEBARCODE = \"CompositeBarcode\";\r\n    public static final String TABLENAME_COMPOSITEBARCODEPROPERTY = \"CompositeBarcodeProperty\";\r\n    public static final String TABLENAME_PICKORDERBARCODE = \"PickorderBarcode\";\r\n    public static final String TABLENAME_PICKORDERCOMPOSITEBARCODE = \"PickorderCompositeBarcode\";\r\n    public static final String TABLENAME_PICKORDERLINEBARCODE = \"PickorderLineBarcode\";\r\n    public static final String TABLENAME_ARTICLEIMAGE = \"ArticleImage\";\r\n    public static final String TABLENAME_ARTICLE = \"Article\" ;\r\n    public static final String TABLENAME_ARTICLEBARCODE = \"ArticleBarcode\" ;\r\n    public static final String TABLENAME_ARTICLESTOCK = \"ArticleStock\";\r\n    public static final String TABLENAME_COMMENT = \"Comment\";\r\n    public static final String TABLENAME_AUTHORISATIONS = \"Authorisations\";\r\n    public static final String TABLENAME_SALESORDERPACKINGTABLE = \"SalesOrderPackingTable\";\r\n\r\n    public static final String TABLENAME_PICKORDERLINES = \"Pickorderlines\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTY = \"PickorderlineProperty\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTYVALUE = \"PickorderlinePropertyValue\";\r\n    public static final String TABLENAME_PICKORDERSETTING = \"PickorderSetting\";\r\n    public static final String TABLENAME_PICKORDERADDRESS = \"PickorderAddress\";\r\n    public static final String TABLENAME_SHIPPINGAGENTS = \"ShippingAgents\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICES = \"ShippingAgentServices\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPPINGUNITS = \"ShippingAgentServiceShippingUnits\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPMETHODS = \"ShippingAgentServiceShipMethods\";\r\n    public static final String TABLENAME_PICKORDERSHIPPACKAGES = \"PickorderShipPackages\";\r\n    public static final String TABLENAME_PICKORDERLINEPACKANDSHIP = \"PickorderLinePackAndShip\";\r\n    public static final String TABLENAME_PICKORDERLINEFINISHSINGLEPIECE = \"PickorderLineFinishSinglePiece\";\r\n\r\n    public static final String TABLENAME_INVENTORYORDER = \"InventoryOrder\";\r\n    public static final String TABLENAME_INVENTORYORDERBIN = \"InventoryOrderBin\";\r\n    public static final String TABLENAME_INVENTORYORDERLINE = \"InventoryOrderLines\";\r\n    public static final String TABLENAME_INVENTORYORDERBARCODE = \"InventoryOrderBarcodes\";\r\n    public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = \"InventoryOrderLineBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINES  = \"IntakeLinesMAT\";\r\n    public static final String TABLENAME_INTAKEORDER  = \"IntakeOrders\";\r\n    public static final String TABLENAME_INTAKEORDERBARCODE  = \"IntakeOrderBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINEBARCODE  = \"IntakeOrderMATLineBarcodes\";\r\n    public static final String TABLENAME_MOVEORDER = \"MoveOrder\";\r\n    public static final String TABLENAME_MOVEORDERLINE = \"MoveOrderLine\";\r\n    public static final String TABLENAME_MOVEORDERLINEBARCODE = \"MoveOrderLineBarcode\";\r\n    public static final String TABLENAME_MOVEORDERBARCODE = \"MoveOrdeBarcode\";\r\n    public static final String TABLENAME_RETURNORDER = \"Returnorder\";\r\n    public static final String TABLENAME_RETURNORDERLINE = \"ReturnorderLine\";\r\n    public static final String TABLENAME_RETURNORDERLINEBARCODE = \"ReturnorderLineBarcode\";\r\n    public static final String TABLENAME_RETURNORDERBARCODE = \"ReturnorderBarcode\";\r\n    public static final String TABLENAME_RETURNORDERDOCUMENT = \"ReturnorderDocument\";\r\n    public static final String TABLENAME_BRANCHREASON = \"BranchReason\";\r\n    public static final String TABLENAME_RECEIVELINES  = \"ReceiveLines\";\r\n    public static final String TABLENAME_PACKAGING = \"Packaging\";\r\n    public static final String TABLENAME_CUSTOMAUTHORISATIONS = \"CustomAuthorisations\";\r\n    public static final String TABLENAME_IDENTIFIERWITHDESTINATION  = \"IdentifierWithDestination\";\r\n    public static final String TABLENAME_PACKANDSHIPORDER = \"PackAndSHipOrder\";\r\n    public static final String TABLENAME_PACKANDSHIPORDERLINE = \"PackAndShipOrderLine\";\r\n    public static final String TABLENAME_PACKANDSHIPSETTING = \"PackAndShipSetting\";\r\n    public static final String TABLENAME_PACKANDSHIPBARCODE = \"PackAndShipBarcode\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPMENT = \"PackAndShipShipment\";\r\n    public static final String TABLENAME_PACKANDSHIPADDRESS = \"PackAndShipAddress\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINGMETHOD = \"PackAndShipShippingMethod\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINPACKAGE= \"PackAndShipShippingPackage\";\r\n    public static final String TABLENAME_STOCKOWNER= \"StockOwner\";\r\n    public static final String TABLENAME_AUTHORIZEDSTOCKOWNER= \"AutorizedStockOwner\";\r\n\r\n\r\n    //endregion Tables\r\n\r\n    //region localtables\r\n    public static final String TABLENAME_ENVIRONMENTS = \"Environments\";\r\n    //endregion localtables\r\n\r\n\r\n    //region A\r\n    public static final String ACTIONTYPECODE_NAMESTR = \"ActionTypeCode\";\r\n    public static final String ACTUALSHIPPINGAGENTCODE_NAMESTR = \"ActualShippingAgentCode\";\r\n    public static final String ACTUEALSHIPPINGAGENTSERVICECODE_NAMESTR = \"ActualShippingAgentServiceCode\";\r\n    public static final String ASSIGNEDUSERID_NAMESTR = \"AssignedUserId\";\r\n    public static final String AUTHORISATION_NAMESTR = \"Autorisatie\";\r\n    public static final String ADDRESCODE_NAMESTR = \"Adrescode\";\r\n    public static final String ADDRESSCODE_NAMESTR = \"AddressCode\";\r\n    public static final String ADDRESSNAME_NAMESTR = \"AddressName\";\r\n    public static final String ADDRESSTYPE_NAMESTR = \"AddressType\";\r\n    public static final String ADDRESSNAMEREMARK_NAMESTR = \"AddressNameRemark\";\r\n    public static final String ADDRES_NAMESTR = \"Adres\";\r\n    public static final String ADDRESS_NAMESTR = \"Address\";\r\n    public static final String ADDRESSREMARK_NAMESTR = \"AddressRemark\";\r\n    public static final String ADDRESSADDITION_NAMESTR = \"Adrestoevoeging\";\r\n    public static final String ADDRESSNUMBER_NAMESTR = \"Huisnummer\";\r\n    public static final String ADDRESSNUMBERADDITION_NAMESTR = \"Huisnummertoevoeging\";\r\n    public static final String AUTHORISATIONBASE_NAMESTR = \"Autorisatie_basis\";\r\n    public static final String AREA_NAMESTR = \"Area\";\r\n    //endregion A\r\n\r\n    //region B\r\n    public static final String BARCODE_NAMESTR = \"Barcode\";\r\n    public static final String BARCODELAYOUT_NAMESTR = \"Barcodelayout\";\r\n    public static final String BARCODETYPE_NAMESTR = \"BarCodeType\";\r\n\r\n    public static final String BINCODE_NAMESTR = \"BinCode\";\r\n    public static final String BINCODEHANDLED_NAMESTR = \"BinCodeHandled\";\r\n    public static final String BINCODENL_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String BINMANDATORY_NAMESTR = \"BinMandatory\";\r\n    public static final String BINTYPE_NAMESTR = \"BinType\";\r\n    public static final String BRANCH_NAMESTR = \"Vestiging\";\r\n    public static final String BRANCHTYPE_NAMESTR = \"Vestigingtype\";\r\n    public static final String BRANCHNAME_NAMESTR = \"Name\";\r\n    public static final String BILLINGADDRESSCODE_NAMESTR = \"BillingAddressCode\";\r\n    //endregion B\r\n\r\n    //region C\r\n    public static final String COMPOSITEBARCODE_NAMESTR = \"CompositeBarcode\";\r\n    public static final String COMMENTLINENO_NAMESTR = \"CommentLineNo\";\r\n    public static final String CURRENTLOCATION_NAMESTR = \"CurrentLocation\";\r\n    public static final String COMMENT_NAMESTR = \"Comment\";\r\n    public static final String COMMENTCODE_NAMESTR = \"CommentCode\";\r\n    public static final String COMMENTTEXT_NAMESTR = \"CommentText\";\r\n    public static final String COMPONENT10_NAMESTR = \"Component10\";\r\n    public static final String CURRENTUSERID_NAMESTR = \"CurrentUserId\";\r\n    public static final String CITY_NAMESTR = \"City\";\r\n    public static final String CITYNL_NAMESTR = \"Plaats\";\r\n    public static final String COUNTRY_NAMESTR = \"Country\";\r\n    public static final String COUNTRYNL_NAMESTR = \"Land\";\r\n    public static final String CONTAINER_NAMESTR = \"Container\";\r\n    public static final String CONTACTNAME_NAMESTR = \"ContactName\";\r\n    public static final String CONTACTPERSON_NAMESTR = \"Contactpersoon\";\r\n    public static final String CONTAINERTYPE_DUTCH_NAMESTR = \"Containersoort\";\r\n    //endregion C\r\n\r\n    //region D\r\n    public static final String DATATIMESTAMP_NAMESTR = \"DataTimestamp\";\r\n    public static final String DESCRIPTION_DUTCH_NAMESTR = \"Omschrijving\";\r\n    public static final String DESCRIPTION_NAMESTR = \"Description\";\r\n    public static final String DESCRIPTION2_NAMESTR = \"Description2\";\r\n    public static final String DESTINATION_NAMESTR = \"Destination\";\r\n    public static final String DESTINATIONNO_NAMESTR = \"DestinationNo\";\r\n    public static final String DOCUMENT_NAMESTR = \"Document\";\r\n    public static final String DOCUMENTTYPE_NAMESTR = \"DocumentType\";\r\n    public static final String DOCUMENT2_NAMESTR = \"Document2\";\r\n    public static final String DOCUMENTTYPE2_NAMESTR = \"DocumentType2\";\r\n    public static final String DEFAULTWEIGHTINGRAMS_NAMESTR = \"DefaultWeightInG\";\r\n    public static final String DEFAULTVALUE_NAMESTR = \"DefaultValue\";\r\n    public static final String DELIVERYADDRESSTYPE_NAMESTR = \"DeliveryAddressType\";\r\n    public static final String DELIVERYADDRESSCODE_NAMESTR = \"DeliveryAddressCode\";\r\n    //endregion D\r\n\r\n\r\n    //region E\r\n    public static final String EXTERNALREFERENCE_NAMESTR = \"ExternalReference\";\r\n    public static final String ENUMERATIONVALUES_NAMESTR = \"EnumerationValues\";\r\n\r\n    public static final String ENVIRONMENT_DEFAULT = \"IsDefault\";\r\n    public static final String ENVIRONMENT_NAME = \"Name\";\r\n    public static final String ENVIRONMENT_DESCRIPTION = \"Description\";\r\n    public static final String ENVIRONMENT_WEBSERVICEURL = \"Webserviceurl\";\r\n\r\n    public static final String EXTRAFIELD1_NAMESTR = \"ExtraField1\";\r\n    public static final String EXTRAFIELD2_NAMESTR = \"ExtraField2\";\r\n    public static final String EXTRAFIELD3_NAMESTR = \"ExtraField3\";\r\n    public static final String EXTRAFIELD4_NAMESTR = \"ExtraField4\";\r\n    public static final String EXTRAFIELD5_NAMESTR = \"ExtraField5\";\r\n    public static final String EXTRAFIELD6_NAMESTR = \"ExtraField6\";\r\n    public static final String EXTRAFIELD7_NAMESTR = \"ExtraField7\";\r\n    public static final String EXTRAFIELD8_NAMESTR = \"ExtraField8\";\r\n    public static final String EMAIL_NAMESTR = \"Email\";\r\n    public static final String EMBALLAGE_NAMESTR = \"Emballage\";\r\n    //endregion E\r\n\r\n    //region F\r\n    public static final String FIELD_NAMESTR = \"Field\";\r\n    public static final String FIELDIDENTIFIER_NAMESTR = \"Field_identifier\";\r\n    public static final String FIELDTYPE_NAMESTR = \"Field_type\";\r\n    public static final String FILTERFIELD_NAMESTR = \"Filter_veld\";\r\n    public static final String FILTERVALUE_NAMESTR = \"Filter_waarde\";\r\n    //endregion F\r\n\r\n    //Region G\r\n    public static final String GENERATED_NAMESTR = \"Generated\";\r\n    //End Region G\r\n\r\n    //region H\r\n    public static final String HANDLEDTIMESTAMP_NAMESTR = \"HandledTimestamp\";\r\n    public static final String HANDLEDTIMESTAMPTAKENOTEXPORTED_NAMESTR = \"HandledTimestamp_take_not_exported\";\r\n    public static final String HOUSENUMBER_NAMESTR = \"HouseNumber\";\r\n    public static final String HOUSENUMBERCOMPLEMENTED_NAMESTR = \"HouseNumberComplemented\";\r\n    public static final String HOUSENUMBEREXTENSION_NAMESTR = \"HouseNumberExtension\";\r\n    public static final String HOUSENUMBEREXTENSIONCOMPLEMENTED_NAMESTR = \"HouseNumberExtensionComplemented\";\r\n    //endregion H\r\n\r\n\r\n    //Region I\r\n    public static final String IDENTIFIER_NAMESTR = \"Identifier\";\r\n    public static final String INFOKEY_NAMESTR = \"InfoKey\";\r\n    public static final String INFOVALUE_NAMESTR = \"InfoValue\";\r\n    public static final String IMAGE_NAMESTR = \"Image\";\r\n    public static final String INTERFACERESULTMETHOD_NAMESTR = \"Interface_result_method\";\r\n    public static final String ISPARTOFMULTILINEORDER_NAMESTR = \"IsPartOfMultiLineOrder\";\r\n    public static final String ISUNIQUEBARCODE_NAMESTR = \"IsUniqueBarcode\";\r\n    public static final String ISUNIQUE_NAMESTR = \"IsUnique\";\r\n    public static final String ITEMINFOCODE_NAMESTR = \"ItemInfoCode\";\r\n    public static final String ITEMNO_NAMESTR = \"ItemNo\";\r\n    public static final String ITEMTYPE_NAMESTR = \"Itemsoort\";\r\n\r\n    public static final String IMAGEBASE64_NAMESTR = \"Image_base64\";\r\n    public static final String INV_AUTOCLOSE_BIN_NAMESTR = \"Inv_auto_close_bin\";\r\n    public static final String INV_PRECOUNT_NAMESTR = \"Inv_precount\";\r\n    public static final String INV_AMOUNT_MANUAL_NAMESTR = \"Inv_Amount_manual\";\r\n    public static final String INV_BARCODECHECK_NAMESTR = \"Inv_barcode_check\";\r\n    public static final String INV_ADD_EXTRA_BIN_NAMESTR = \"Inv_add_extra_bin\";\r\n\r\n    public static final String INVENTORYWITHPICTURE_NAMESTR = \"Inv_with_picture\";\r\n    public static final String INVENTORYWITHPICTURE_AUTO_OPEN_NAMESTR = \"Inv_with_picture_auto_open\";\r\n    public static final String INVENTORYWITHPICTURE_PREFETCH_NAMESTR = \"Inv_with_picture_prefetch\";\r\n\r\n    public static final String ISINPUT_NAMESTR = \"IsInput\";\r\n    public static final String ISREQUIRED_NAMESTR = \"Isrequired\";\r\n    public static final String ISPROCESSINGORPARKED_NAMESTR = \"IsProcessingOrParked\";\r\n\r\n\r\n\r\n    //endregion I\r\n\r\n    //region L\r\n    public static final String LANGUAGEDUTCH_NAMESTR = \"Taal\";\r\n    public static final String LABELCODE_NAMESTR = \"Labelcode\";\r\n    public static final String LAYOUT_NAMESTR = \"Layout\";\r\n    public static final String LICENSE_NAMESTR = \"License\";\r\n    public static final String LICENSE_NL_NAMESTR = \"Licentie\";\r\n    public static final String LINE_NAMESTR = \"Line\";\r\n    public static final String LINES_NAMESTR = \"Lines\";\r\n    public static final String LINENO_NAMESTR = \"LineNo\";\r\n    public static final String LINENOTAKE_NAMESTR = \"LineNoTake\";\r\n    public static final String LOCALSTATUS_NAMESTR = \"LocalStatus\";\r\n    public static final String LOCAL_QUANTITYTAKEN_NAMESTR = \"LocalQuantityTaken\";\r\n    public static final String LOCAL_QUANTITYPLACED_NAMESTR = \"LocalQuantityPlaced\";\r\n    //endregion L\r\n\r\n    //region M\r\n    public static final String MOVEDEFAULTBIN_NAMESTR = \"Move_default_bin\";\r\n    public static final String PICKDEFAULTSTORAGEBIN = \"Pick_default_storage_bin\";\r\n\r\n\r\n\r\n    public static final String MOVEAMOUNTMANUAL_NAMESTR = \"Move_Amount_manual\";\r\n    public static final String MOVEBARCODECHECK_NAMESTR = \"Move_Barcode_check\";\r\n    public static final String MOVEVALIDATESTOCK_NAMESTR = \"Move_validate_stock\";\r\n    public static final String MOVEVALIDATESTOCKENFORCE_NAMESTR = \"Move_validate_stock_enforce\";\r\n    public static final String MOVE_MT_TAKEAMOUNTMANUAL_NAMESTR = \"Move_MT_take_amount_manual\";\r\n    public static final String MOVE_MT_TAKEAUTOITEM_NAMESTR = \"Move_MT_take_auto_item\";\r\n    public static final String MOVE_MT_TAKEAUTOITEMCONTAINERONCE_NAMESTR = \"Move_MT_take_auto_item_container_once\";\r\n    public static final String MOVE_MT_TAKEALLOWEND_NAMESTR = \"Move_MT_take_allow_end\";\r\n    public static final String MOVE_MT_TAKEIGNOREUNDERTAKE_NAMESTR = \"Move_MT_take_ignore_undertake\";\r\n    public static final String MOVE_MT_TAKEAUTOACCEPTSINGLEPIECE_NAMESTR = \"Move_MT_take_auto_accept_single_piece\";\r\n    public static final String MOVE_MT_PLACEAMOUNTMANUAL_NAMESTR = \"Move_MT_place_amount_manual\";\r\n    public static final String MOVE_MT_PLACEAUTOITEM_NAMESTR = \"Move_MT_place_auto_item\";\r\n    public static final String MOVE_AUTOACCEPTATREQUESTED_NAMESTR = \"Move_auto_accept_at_requested\";\r\n    public static final String MOVE_NOEXTRABINS_NAMESTR = \"Move_no_extra_bins\";\r\n    public static final String MOVE_NOEXTRAITEMS_NAMESTR = \"Move_no_extra_items\";\r\n    public static final String MOVE_NOEXTRAPIECES_NAMESTR = \"Move_no_extra_pieces\";\r\n    public static final String MOVEWITHPICTURE_NAMESTR = \"Move_with_picture\";\r\n    public static final String MOVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Move_with_picture_auto_open\";\r\n    public static final String MOVEWITHPICTURE_PREFETCH_NAMESTR = \"Move_with_picture_prefetch\";\r\n    //endregion M\r\n\r\n    //region N\r\n    public static final String NAMEDUTCH_NAMESTR = \"Naam\";\r\n    public static final String NAMEADDITION_NAMESTR = \"Naamtoevoeging\";\r\n    public static final String NAMESHORT_NAMESTR = \"Naam_kort\";\r\n\r\n\r\n    public static final String NUMBEROFBINS_NAMESTR = \"Aantal_bins\";\r\n    //endregion N\r\n\r\n    //region O\r\n    public static final String ORDERDUTCH_NAMESTR = \"Volgorde\";\r\n    public static final String OMSCHRIJVING_NAMESTR = \"Omschrijving\";\r\n    public static final String ORDERNUMBER_NAMESTR = \"Opdrachtnummer\";\r\n    public static final String ORDERTYPE_NAMESTR = \"Opdrachttype\";\r\n    public static final String ORIGINDUTCH_NAMESTR = \"Herkomstcode\";\r\n    public static final String ORIGINKEYDUTCH_NAMESTR = \"Herkomstsleutel\";\r\n    //endregion O\r\n\r\n    //region P\r\n\r\n    public static final String PACKAGECONTAINER_NAMESTR = \"PackageContainer\";\r\n    public static final String PACKAGECONTAINERTYPE_NAMESTR = \"PackageContainersoort\";\r\n    public static final String PACKAGEITEMCOUNT_NAMESTR = \"PackageItemCount\";\r\n    public static final String PACKAGEWEIGHTING_NAMESTR = \"PackageWeightInG\";\r\n    public static final String PACKAGETYPE_NAMESTR = \"PackageType\";\r\n    public static final String PACKAGESEQUENCENUMBER_NAMESTR = \"PackageSequenceNumber\";\r\n    public static final String PACKINGTABLE_NAMESTR = \"Packingtable\";\r\n    public static final String PHONE_NAMESTR = \"PhoneNumber\";\r\n    public static final String PHONENL_NAMESTR = \"Telefoon\";\r\n    public static final String PICKSALESASKWORKPLACE_NAMESTR = \"Pick_Sales_ask_workplace\";\r\n    public static final String PICKTRANSFERASKWORKPLACE_NAMESTR = \"Pick_Transfer_ask_workplace\";\r\n    public static final String PICKAUTONEXT_NAMESTR = \"Pick_Auto_next\";\r\n    public static final String PICKBARCODECHECK_NAMESTR = \"Pick_Barcode_check\";\r\n    public static final String PICKPICKPVVKKOEACHPIECE_NAMESTR = \"Pick_Pick_PV_VKO_each_piece\";\r\n    public static final String PICKPICKTOCONTAINER_NAMESTR = \"Pick_Pick_to_container\";\r\n    public static final String PICKPICKTOCONTAINERTYPE_NAMESTR = \"Pick_Pick_to_container_type\";\r\n    public static final String PICKPRINTADDRESSLABEL_NAMESTR = \"Pick_Print_adreslabel\";\r\n    public static final String PICKPRINTCONTENTLABEL_NAMESTR = \"Pick_Print_contentlabel\";\r\n    public static final String PICKWITHPICTURE_NAMESTR = \"Pick_with_picture\";\r\n    public static final String PICKWITHPICTURE_AUTO_OPEN_NAMESTR = \"Pick_with_picture_auto_open\";\r\n    public static final String PICKWITHPICTURE_PREFETCH_NAMESTR = \"Pick_with_picture_prefetch\";\r\n    public static final String PICKACTIVITYBINREQUIRED_NAMESTR = \"Pick_Activity_bin_required\";\r\n    public static final String PICKQCCHECKCOUNT_NAMESTR = \"Pick_Qc_check_count\";\r\n\r\n    public static final String POSITIONSTART_NAMESTR = \"Position_start\";\r\n    public static final String POSITIONEND_NAMESTR = \"Position_end\";\r\n\r\n    public  static final String PRIORITY_NAMESTR = \"Priority\";\r\n\r\n    public static final String PRICE_NAMESTR = \"Price\";\r\n    public static final String PRINTDOCUMENTS_NAMESTR = \"PrintDocuments\";\r\n    public static final String PROCESSINGSEQUENCE_NAMESTR = \"ProcessingSequence\";\r\n    public static final String PROPERTY_NAMESTR = \"Property\";\r\n    public static final String PROPERTYCODE_NAMESTR = \"Propertycode\";\r\n    public static final String PROPERTYDUTCH_NAMESTR = \"Propertie\";\r\n    public static final String PROPERTYSDUTCH_NAMESTR = \"Properties\";\r\n    public static final String PROPERTYGROUP_NAMESTR = \"Propertiegroep\";\r\n    public static final String ADDRESSES_NAMESTR = \"Addresses\";\r\n    public static final String SHIPPINGMETHODS_NAMESTR = \"ShippingMethods\";\r\n    public static final String COMPOSITEBARCODESPLITTED_NAMESTR = \"Composite_barcode\";\r\n    public static final String COMPOSITEBARCODETYPE_NAMESTR = \"Compositebarcode_type\";\r\n    public static final String FIELDSEPERATOR_NAMESTR = \"Field_separator\";\r\n    public static final String LAYOUTREGEX_NAMESTR = \"Layout_regex\";\r\n    public static final String LAYOUTTYPE_NAMESTR = \"Layout_type\";\r\n\r\n\r\n    public static final String PICKORDERLINEBARCODE_LINENO = \"LineNo\";\r\n    public static final String PICKORDERLINEBARCODE_BARCODE = \"Barcode\";\r\n    public static final String PICKORDERLINEBARCODE_QUANTITY = \"Quantity\";\r\n    public static final String PICKORDERLINEBARCODE_ISMANUAL = \"IsManual\";\r\n    //endregion P\r\n\r\n    //region Q\r\n    public static final String QUANTITY_NAMESTR = \"Quantity\";\r\n\r\n    public static final String QUANTITYAVAILABLE_NAMESTR = \"Voorraad_beschikbaar\";\r\n    public static final String QUANTITYHANDLED_NAMESTR = \"QuantityHandled\";\r\n    public static final String QUANTITYHANDLEDALLSCANNERS_NAMESTR = \"QuantityHandledAllScanners\";\r\n    public static final String QUANTITYHANDLEDSUM_NAMESTR = \"QuantityHandledSum\";\r\n    public static final String QUANTITYPERUNITOFMEASURE_NAMESTR = \"QtyPerUnitOfMeasure\";\r\n    public static final String QUANTITYREJECTED_NAMESTR = \"QuantityRejected\";\r\n    public static final String QUANTITYCHECKED_NAMESTR = \"QuantityChecked\";\r\n    public static final String QUANTITYTOTAL_NAMESTR = \"QuantityTotal\";\r\n    public static final String QUANTITYTAKEN_NAMESTR = \"QuantityTaken\";\r\n    public static final String QUANTITYHANDLEDTAKE_NAMESTR = \"QuantityHandled_take\";\r\n    public static final String QUANTITYTAKE_NAMESTR = \"Quantity_take\";\r\n    public static final String QUANTITYTAKENOTEXPORTED_NAMESTR = \"QuantityHandled_take_not_exported\";\r\n    public static final String QUANTITYTAKEEXPORTED_NAMESTR = \"QuantityHandled_take_exported\";\r\n    //endregion Q\r\n\r\n    //region R\r\n    public static final String RECEIVEDEFAULTBIN_NAMESTR = \"Receive_default_bin\";\r\n    public static final String REGION_NAMESTR = \"Regio\";\r\n    public static final String REJECTPICK_NAMESTR = \"RejectPick\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGINTAKE_NAMESTR = \"Receive_intake_eo_packaging_intake\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGSHIPPED_NAMESTR = \"Receive_intake_eo_packaging_shipped\";\r\n\r\n    public static final String RECEIVEWITHPICTURE_NAMESTR = \"Receive_with_picture\";\r\n    public static final String RECEIVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Receive_with_picture_auto_open\";\r\n    public static final String RECEIVEWITHPICTURE_PREFETCH_NAMESTR = \"Receive_with_picture_prefetch\";\r\n    public static final String REQUESTENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDSTARTDATETIME_NAMESTR = \"RequestedStartDateTime\";\r\n    public static final String REMEMBERVALUE_NAMESTR = \"RememberValue\";\r\n    public static final String RETURNDEFAULTBIN_NAMESTR = \"Retour_default_bin\";\r\n\r\n    public static final String RECEIVEDDATETIME_NAMESTR = \"ReceivedDateTime\";\r\n    public static final String RECEIVEEXPORTPART_NAMESTR = \"Receive_export_part\";\r\n    public static final String RECEIVE_AMOUNT_MANUAL_NAMESTR = \"Receive_Amount_manual\";\r\n    public static final String RECEIVEAMOUNTMANUAL_EO_NAMESTR = \"Receive_Amount_manual_eo\";\r\n    public static final String RECEIVEBARCODECHECK_NAMESTR = \"Receive_Barcode_check\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATREQUESTED_NAMESTR = \"Receive_store_auto_accept_at_requested\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATNEWITEM_NAMESTR = \"Receive_store_auto_accept_at_new_item\";\r\n    public static final String RECEIVESTOREAUTOACCEPTVALIDATIONMESSAGE_NAMESTR = \"Receive_store_auto_accept_validation_message\";\r\n    public static final String RECEIVENOEXTRABINS_NAMESTR = \"Receive_no_extra_bins\";\r\n    public static final String RECEIVENOEXTRAITEMS_NAMESTR = \"Receive_no_extra_items\";\r\n    public static final String RECEIVENOEXTRAPIECES_NAMESTR = \"Receive_no_extra_pieces\";\r\n    public static final String RECEIVEMATAUTOSPLITINCOMPLETELINE_NAMESTR = \"Receive_mat_auto_split_incomplete_line\";\r\n\r\n    public static final String RETOURREDEN_NAMESTR = \"Retourreden\";\r\n    public static final String RETOURAMAOUNTMANUAL_NAMESTR = \"Retour_Amount_manual\";\r\n    public static final String RETOURBARCODECHECK_NAMESTR = \"Retour_Barcode_check\";\r\n    public static final String RETOURMULTIDOCUMENT_NAMESTR = \"Retour_multi_document\";\r\n    public static final String RETOURORDERBINNOCHECK_NAMESTR = \"Retour_Order_bin_no_check\";\r\n\r\n\r\n    public static final String REASON_NAMESTR = \"Reason\";\r\n    public static final String REASONNL_NAMESTR = \"Reden\";\r\n    public static final String RETURN_NAMESTR = \"Return\";\r\n    public static final String RETURNEXTERNAL_NAMESTR = \"ReturnExternal\";\r\n\r\n    public static final String RETOURWITHPICTURE_NAMESTR = \"Retour_with_picture\";\r\n    public static final String RETURNADDRESSCODE_NAMESTR = \"ReturnAddressCode\";\r\n    public static final String RETURNSENDERADDRESSCODE_NAMESTR = \"ReturnSenderAddressCode\";\r\n    public static final String RETURNSHIPPINGADDRESSCODE_NAMESTR = \"ReturnShippingAddressCode\";\r\n    //endregion R\r\n\r\n    //region S\r\n    public static final String SALESORDER_NAMESTR = \"Salesorder\";\r\n    public static final String SCANNER_NAMESTR = \"Scanner\";\r\n    public static final String SENDERADDRESSCODE_NAMESTR = \"SenderAddressCode\";\r\n\r\n    public static final String SEQUENCENOHANDLED_NAMESTR = \"SequenceNoHandled\";\r\n    public static final String SETTINGCODE_NAMESTR = \"SettingCode\";\r\n    public static final String SETTINGVALUE_NAMESTR = \"SettingValue\";\r\n    public static final String SETTING_NAMESTR = \"Instelling\";\r\n    public static final String SINGLEARTICLEORDERS_NAMESTR = \"SingleArticleOrders\";\r\n    public static final String STATUS_NAMESTR = \"Status\";\r\n    public static final String STATUSSHIPPING_NAMESTR = \"StatusShipping\";\r\n    public static final String STATUSPACKING_NAMESTR = \"StatusPacking\";\r\n    public static final String STATUSPRINTATSTART_NAMESTR = \"StatusPrintAtStart\";\r\n    public static final String STOCKOWNER_NAMESTR = \"StockOwner\";\r\n    public static final String SORTORDER_NAMESTR = \"Volgorde\";\r\n    public static final String SORTING_NAMESTR = \"Sortering\";\r\n    public static final String SOURCEDOCUMENT_NAMESTR = \"SourceDocument\";\r\n    public static final String SOURCENO_NAMESTR = \"SourceNo\";\r\n    public static final String SORTINGSEQUENCENO_NAMESTR = \"SortingSequenceNo\";\r\n    public static final String SORTINGSEQUENCENOPLACE_NAMESTR = \"SortingSequenceNo_place\";\r\n    public static final String STORAGEBINCODE_NAMESTR = \"StorageBinCode\";\r\n    public static final String STOREBINCODE_NAMESTR = \"StoreBinCode\";\r\n    public static final String STORESOURCEORDER_NAMESTR = \"StoreSourceOpdracht\";\r\n    public static final String STREETNL_NAMESTR = \"Straat\";\r\n    public static final String STREET_NAMESTR = \"Street\";\r\n    public static final String STREETCOMPLEMENTERD_NAMESTR = \"StreetComplemented\";\r\n    public static final String SEQUENCE_NAMESTR = \"Order\";\r\n    public static final String SHIPPINGAGENT_NAMESTR = \"Expediteur\";\r\n    public static final String SHIPPINGLABELS_NAMESTR = \"ShippingLabels\";\r\n    public static final String SERVICE_NAMESTR = \"Service\";\r\n    public static final String SHIPPINGUNIT_NAMESTR = \"Verzendeenheid\";\r\n    public static final String SHIPPINGMETHOD_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGMETHODCODE_NAMESTR = \"ShippingMethodCode\";\r\n    public static final String SHIPPINGMETHODVALUE_NAMESTR = \"ShippingMethodValue\";\r\n    public static final String SHIPPINGUNITQUANTITYUSED_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGAGENTCODE_NAMESTR = \"ShippingAgentCode\";\r\n    public static final String SHIPPINGAGENTSERVICECODE_NAMESTR = \"ShippingAgentServiceCode\";\r\n    public static final String SHIPPINGADDRESSCODE_NAMESTR = \"ShippingAddressCode\";\r\n    public static final String SHIPPINGADDRESSTYPE_NAMESTR = \"ShippingAddressType\";\r\n\r\n    public static final String SHOWONTERMINAL_NAMESTR = \"ShowOnTerminal\";\r\n    public static final String SOURCETYPE_NAMESTR = \"SourceType\";\r\n    public static final String SORTINGSEQUENCENOTAKE_NAMESTR = \"SortingSequenceNo_take\";\r\n    public static final String STRIPTHIS_NAMESTR = \"Strip_this\";\r\n    //endregion S\r\n\r\n    //region T\r\n    public static final String TAKENTIMESTAMP_NAMESTR = \"TakenTimestamp\";\r\n    public static final String TEMPLATE_NAMESTR = \"Template\";\r\n    public static final String TEXTDUTCH_NAMESTR = \"Tekst\";\r\n    public static final String TRANSLATIONDUTCH_NAMESTR = \"Vertaling\";\r\n    //endregion T\r\n\r\n\r\n    //region U\r\n    public static final String USEFORSTORAGE_NAMESTR = \"UseForStorage\";\r\n    public static final String USEFORRETURNSALES_NAMESTR = \"UseForReturnSales\";\r\n    public static final String UNIQUNESS_NAMESTR = \"Uniqueness\";\r\n    public static final String UNITOFMEASURE_NAMESTR = \"UnitOfMeasure\";\r\n    public static final String USERNAME_NAMESTR = \"Gebruikersnaam\";\r\n    //endregion U\r\n\r\n    //region V\r\n    public static final String VALUE_NAMESTR = \"Value\";\r\n    public static final String VALUENL_NAMESTR = \"Waarde\";\r\n    public static final String VALUEHANDLED_NAMESTR = \"ValueHandled\";\r\n    public static final String VARIANTCODE_NAMESTR = \"VariantCode\";\r\n    public static final String VENDORITEMNO_NAMESTR = \"VendorItemNo\";\r\n    public static final String VENDORITEMDESCRIPTION_NAMESTR = \"VendorItemDescription\";\r\n    public static final String VALUETYPE_NAMESTR = \"ValueType\";\r\n    public static final String VERZENDLABEL_STATUS_NAMESTR = \"Verzendlabel_status\";\r\n\r\n\r\n    //endregion V\r\n\r\n    //region W\r\n    public static final String WAREHOUSELOCATION_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String WEBSERVICETIMEOUTERPINS_NAMESTR = \"Webservice_timeout_erp_in_s\";\r\n    public static final String WORKPLACE_NAMESTR = \"Workplace\";\r\n    public static final String WORKPLACE_DUTCH_NAMESTR = \"Werkplek\";\r\n    //endregion W\r\n\r\n    //region Z\r\n    public static final String ZIPCODENL_NAMESTR = \"Postcode\";\r\n    public static final String ZIPCODE_NAMESTR = \"Zipcode\";\r\n    public static final String ZONE_NAMESTR = \"Zone\";\r\n\r\n\r\n\r\n    //endregion Z\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/General/cDatabase.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/SSU_WHS/General/cDatabase.java	(date 1617964993290)
---@@ -46,6 +46,8 @@
---     public static final String TABLENAME_INVENTORYORDER = "InventoryOrder";
---     public static final String TABLENAME_INVENTORYORDERBIN = "InventoryOrderBin";
---     public static final String TABLENAME_INVENTORYORDERLINE = "InventoryOrderLines";
---+    public static final String TABLENAME_INVENTORYORDERLINEPROPERTY = "InventoryorderlineProperty";
---+    public static final String TABLENAME_INVENTORYORDERLINEPROPERTYVALUE = "InventoryorderlinePropertyValue";
---     public static final String TABLENAME_INVENTORYORDERBARCODE = "InventoryOrderBarcodes";
---     public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = "InventoryOrderLineBarcodes";
---     public static final String TABLENAME_INTAKEORDERMATLINES  = "IntakeLinesMAT";
---Index: app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.General;\r\n\r\nimport android.content.Context;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.RoomDatabase;\r\n\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageEntity;\r\nimport SSU_WHS.Basics.ArticleImages.iArticleImageDao;\r\nimport SSU_WHS.Basics.Authorisations.cAuthorisationEntity;\r\nimport SSU_WHS.Basics.Authorisations.iAuthorisationDao;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwnerEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayoutEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.iBarcodeLayoutDao;\r\nimport SSU_WHS.Basics.Branches.cBranchEntity;\r\nimport SSU_WHS.Basics.Branches.iBranchDao;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcodeEntity;\r\nimport SSU_WHS.Basics.CompositeBarcode.iCompositeBarcodeDao;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.cCompositeBarcodePropertyEntity;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.iCompositeBarcodePropertyDao;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisationEntity;\r\nimport SSU_WHS.Basics.CustomAuthorisations.iCustomAuthorisationDao;\r\nimport SSU_WHS.Basics.ItemProperty.cItemPropertyEntity;\r\nimport SSU_WHS.Basics.ItemProperty.iItemPropertyDao;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplateEntity;\r\nimport SSU_WHS.Basics.LabelTemplate.iLabelTemplateDao;\r\nimport SSU_WHS.Basics.Packaging.cPackagingEntity;\r\nimport SSU_WHS.Basics.Packaging.iPackagingDao;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroupEntity;\r\nimport SSU_WHS.Basics.PropertyGroup.iPropertyGroupDao;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.cPropertyGroupPropertyEntity;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.iPropertyGroupPropertyDao;\r\nimport SSU_WHS.Basics.Scanners.cScannerEntity;\r\nimport SSU_WHS.Basics.Scanners.iScannerDao;\r\nimport SSU_WHS.Basics.Settings.cSettingsEntity;\r\nimport SSU_WHS.Basics.Settings.iSettingsDao;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnitEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.iShippingAgentServiceShippingUnitDao;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentServiceEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServices.iShippingAgentServiceDao;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgentEntity;\r\nimport SSU_WHS.Basics.ShippingAgents.iShippingAgentDao;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentServiceShipMethodEntity;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.iShippingAgentServiceShipMethodDao;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwnerEntity;\r\nimport SSU_WHS.Basics.StockOwner.iStockOwnerDao;\r\nimport SSU_WHS.Basics.Translations.cTranslationEntity;\r\nimport SSU_WHS.Basics.Translations.iTranslationDao;\r\nimport SSU_WHS.Basics.Users.cUserEntity;\r\nimport SSU_WHS.Basics.Users.iUserDao;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceEntity;\r\nimport SSU_WHS.Basics.Workplaces.iWorkplaceDao;\r\nimport SSU_WHS.General.Comments.cCommentEntity;\r\nimport SSU_WHS.General.Comments.iCommentDao;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.iIntakeorderBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.cIntakeorderMATLineBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.iIntakeorderMATLineBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLineEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.iIntakeorderMATLineDao;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorderEntity;\r\nimport SSU_WHS.Intake.Intakeorders.iIntakeorderDao;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorderEntity;\r\nimport SSU_WHS.Inventory.InventoryOrders.iInventoryorderDao;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.iInventoryorderBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.iInventoryorderLineBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.iInventoryorderLineDao;\r\nimport SSU_WHS.Move.Moveorders.cMoveorderEntity;\r\nimport SSU_WHS.Move.Moveorders.iMoveorderDao;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderBarcodes.iMoveorderBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.iMoveorderLineBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLineEntity;\r\nimport SSU_WHS.Move.MoveorderLines.iMoveorderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.cPackAndShipAddressEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.iPackAndShipAddressDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.cPackAndShipBarcodeEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.iPackAndShipBarcodeDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.cPackAndShipOrderLineEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.iPackAndShipOrderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrderEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.iPackAndShipOrderDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.cPackAndShipSettingEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.iPackAndShipSettingDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.cPackAndShipShipmentEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.iPackAndShipShipmentDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.cPackAndShipShippingMethodEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.iPackAndShipShippingMethodDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.cPackAndShipShippingPackageEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.iPackAndShipShippingPackageDao;\r\nimport SSU_WHS.Picken.FinishSinglePieceLine.cPickorderLineFinishSinglePieceEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.cPickorderAddressEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.iPickorderAddressDao;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderBarcodes.iPickorderBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.iPickorderCompositeBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.iPickorderLineBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLinePackAndShip.cPickorderLinePackAndShipEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.iPickorderLinePropertyDao;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.iPickorderLinePropertyValueDao;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.PickorderSetting.cPickorderSettingEntity;\r\nimport SSU_WHS.Picken.PickorderSetting.iPickorderSettingDao;\r\nimport SSU_WHS.Picken.PickorderShipPackages.cPickorderShipPackageEntity;\r\nimport SSU_WHS.Picken.PickorderShipPackages.iPickorderShipPackageDao;\r\nimport SSU_WHS.Picken.Pickorders.cPickorderEntity;\r\nimport SSU_WHS.Picken.Pickorders.iPickorderDao;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTableEntity;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.iSalesOrderPackingTableDao;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLineEntity;\r\nimport SSU_WHS.Receive.ReceiveLines.iReceiveorderLineDao;\r\nimport SSU_WHS.Return.ReturnOrder.cReturnorderEntity;\r\nimport SSU_WHS.Return.ReturnOrder.iReturnorderDao;\r\nimport SSU_WHS.Return.ReturnorderBarcode.cReturnorderBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderBarcode.iReturnorderBarcodeDao;\r\nimport SSU_WHS.Return.ReturnorderDocument.cReturnorderDocumentEntity;\r\nimport SSU_WHS.Return.ReturnorderDocument.iReturnorderDocumentDao;\r\nimport SSU_WHS.Return.ReturnorderLine.cReturnorderLineEntity;\r\nimport SSU_WHS.Return.ReturnorderLine.iReturnorderLineDao;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.cReturnorderLineBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.iReturnorderLineBarcodeDao;\r\nimport SSU_WHS.ScannerLogon.cScannerLogonEntity;\r\nimport SSU_WHS.ScannerLogon.iScannerLogonDao;\r\n\r\n@Database(entities = {\r\n        cScannerLogonEntity.class,\r\n        cWorkplaceEntity.class,\r\n        cBarcodeLayoutEntity.class,\r\n        cAuthorisationEntity.class,\r\n        cUserEntity.class,\r\n        cBranchEntity.class,\r\n        cSettingsEntity.class,\r\n        cPickorderEntity.class,\r\n        cPickorderLineEntity.class,\r\n        cPickorderLineBarcodeEntity.class,\r\n        cPickorderLinePropertyEntity.class,\r\n        cPickorderLinePropertyValueEntity.class,\r\n        cArticleImageEntity.class,\r\n        cPickorderBarcodeEntity.class,\r\n        cPickorderCompositeBarcodeEntity.class,\r\n        cCommentEntity.class,\r\n        cSalesOrderPackingTableEntity.class,\r\n        cPickorderAddressEntity.class,\r\n        cShippingAgentEntity.class,\r\n        cShippingAgentServiceEntity.class,\r\n        cShippingAgentServiceShippingUnitEntity.class,\r\n        cShippingAgentServiceShipMethodEntity.class,\r\n        cPickorderShipPackageEntity.class,\r\n        cPickorderLineFinishSinglePieceEntity.class,\r\n        cPickorderSettingEntity.class,\r\n        cItemPropertyEntity.class,\r\n        cPropertyGroupEntity.class,\r\n        cPropertyGroupPropertyEntity.class,\r\n        cPickorderLinePackAndShipEntity.class,\r\n        cInventoryorderEntity.class,\r\n        cInventoryorderBinEntity.class,\r\n        cInventoryorderLineEntity.class,\r\n        cInventoryorderBarcodeEntity.class,\r\n        cInventoryorderLineBarcodeEntity.class,\r\n        cIntakeorderEntity.class,\r\n        cIntakeorderMATLineEntity.class,\r\n        cIntakeorderBarcodeEntity.class,\r\n        cIntakeorderMATLineBarcodeEntity.class,\r\n        cReturnorderEntity.class,\r\n        cReturnorderBarcodeEntity.class,\r\n        cReturnorderDocumentEntity.class,\r\n        cReturnorderLineEntity.class,\r\n        cReturnorderLineBarcodeEntity.class,\r\n        cReceiveorderLineEntity.class,\r\n        cMoveorderEntity.class,\r\n        cMoveorderLineEntity.class,\r\n        cMoveorderBarcodeEntity.class,\r\n        cMoveorderLineBarcodeEntity.class,\r\n        cPackagingEntity.class,\r\n        cScannerEntity.class,\r\n        cCustomAuthorisationEntity.class,\r\n        cTranslationEntity.class,\r\n        cCompositeBarcodeEntity.class,\r\n        cCompositeBarcodePropertyEntity.class,\r\n        cPackAndShipOrderEntity.class,\r\n        cPackAndShipOrderLineEntity.class,\r\n        cPackAndShipBarcodeEntity.class,\r\n        cPackAndShipShipmentEntity.class,\r\n        cPackAndShipAddressEntity.class,\r\n        cPackAndShipSettingEntity.class,\r\n        cPackAndShipShippingMethodEntity.class,\r\n        cPackAndShipShippingPackageEntity.class,\r\n        cStockOwnerEntity.class,\r\n        cAuthorizedStockOwnerEntity.class,\r\n        cLabelTemplateEntity.class,\r\n        },version = 150)\r\n\r\n\r\npublic abstract class acScanSuiteDatabase extends RoomDatabase {\r\n    public abstract iScannerLogonDao scannerLogonDao();\r\n    public abstract iSettingsDao settingsDao();\r\n    public abstract iBarcodeLayoutDao barcodeLayoutDao();\r\n    public abstract iAuthorisationDao authorisationDao();\r\n    public abstract iScannerDao scannerDao();\r\n    public abstract iWorkplaceDao workplaceDao();\r\n    public abstract iBranchDao branchDao();\r\n    public abstract iUserDao userDao();\r\n    public abstract iPickorderDao pickorderDao();\r\n    public abstract iPickorderLineDao pickorderLineDao();\r\n    public abstract iPickorderLineBarcodeDao pickorderLineBarcodeDao();\r\n    public abstract iPickorderLinePropertyDao pickorderLinePropertyDao();\r\n    public abstract iPickorderLinePropertyValueDao pickorderLinePropertyValueDao();\r\n    public abstract iArticleImageDao articleImageDao();\r\n    public abstract iPickorderBarcodeDao pickorderBarcodeDao();\r\n    public abstract iPickorderCompositeBarcodeDao pickorderCompositeBarcodeDao();\r\n    public abstract iCommentDao commentDao();\r\n    public abstract iSalesOrderPackingTableDao salesOrderPackingTableDao();\r\n    public abstract iPickorderAddressDao pickorderAddressDao();\r\n    public abstract iPickorderSettingDao pickorderSettingDao();\r\n    public abstract iShippingAgentDao shippingAgentDao();\r\n    public abstract iShippingAgentServiceDao shippingAgentServiceDao();\r\n    public abstract iShippingAgentServiceShippingUnitDao shippingAgentServiceShippingUnitDao();\r\n    public abstract iShippingAgentServiceShipMethodDao shippingAgentServiceShipMethodDao();\r\n    public abstract iPickorderShipPackageDao pickorderShipPackageDao();\r\n    public abstract iItemPropertyDao itemPropertyDao();\r\n    public abstract iPropertyGroupDao propertyGroupDao();\r\n    public abstract iPropertyGroupPropertyDao propertyGroupPropertyDao();\r\n    public abstract iCompositeBarcodeDao compositeBarcodeDao();\r\n    public abstract iCompositeBarcodePropertyDao compositeBarcodePropertyDao();\r\n    public abstract iInventoryorderDao inventoryorderDao();\r\n    public abstract iInventoryorderBinDao inventoryorderBinDao();\r\n    public abstract iInventoryorderLineDao inventoryorderLineDao();\r\n    public abstract iInventoryorderBarcodeDao inventoryorderBarcodeDao();\r\n    public abstract iInventoryorderLineBarcodeDao inventoryorderLineBarcodeDao();\r\n    public abstract iIntakeorderMATLineDao intakeorderMATLineDao();\r\n    public abstract iIntakeorderDao intakeorderDao();\r\n    public abstract iIntakeorderBarcodeDao intakeorderBarcodeDao();\r\n    public abstract iIntakeorderMATLineBarcodeDao intakeorderMATLineBarcodeDao();\r\n    public abstract iReturnorderDao returnorderDao();\r\n    public abstract iReturnorderDocumentDao returnorderDocumentDao();\r\n    public abstract iReturnorderLineDao returnorderLineDao();\r\n    public abstract iReturnorderBarcodeDao returnorderBarcodeDao();\r\n    public abstract iReturnorderLineBarcodeDao returnorderLineBarcodeDao();\r\n    public abstract iReceiveorderLineDao receiveorderLineDao();\r\n    public  abstract iMoveorderDao moveorderDao();\r\n    public  abstract iMoveorderLineDao moveorderLineDao();\r\n    public  abstract iMoveorderLineBarcodeDao moveorderLineBarcodeDao();\r\n    public  abstract iMoveorderBarcodeDao moveorderBarcodeDao();\r\n    public  abstract iPackagingDao packagingDao();\r\n    public  abstract iCustomAuthorisationDao customAuthorisationDao();\r\n    public  abstract iTranslationDao translationDao();\r\n    public  abstract iPackAndShipOrderDao packAndShipOrderDao();\r\n    public  abstract iPackAndShipOrderLineDao packAndShipOrderLineDao();\r\n    public  abstract iPackAndShipSettingDao packAndShipSettingDao();\r\n    public  abstract iPackAndShipBarcodeDao packAndShipBarcodeDao();\r\n    public  abstract iPackAndShipShipmentDao packAndShipShipmentDao();\r\n    public  abstract iPackAndShipAddressDao packAndShipAddressDao();\r\n    public  abstract iPackAndShipShippingMethodDao packAndShipShippingMethodDao();\r\n    public  abstract iPackAndShipShippingPackageDao packAndShipShippingPackageDao();\r\n    public  abstract iStockOwnerDao stockOwnerDao();\r\n    public  abstract iLabelTemplateDao labelTemplateDao();\r\n\r\n    private static acScanSuiteDatabase INSTANCE;\r\n\r\n    public static acScanSuiteDatabase pGetDatabase(final Context context) {\r\n        if (INSTANCE == null) {\r\n            synchronized (acScanSuiteDatabase.class) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(), acScanSuiteDatabase.class, \"SSU_WHS\").fallbackToDestructiveMigration().build();\r\n                }\r\n            }\r\n        }\r\n        return INSTANCE;\r\n    }\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(date 1617965361064)
---@@ -200,7 +200,7 @@
---         cStockOwnerEntity.class,
---         cAuthorizedStockOwnerEntity.class,
---         cLabelTemplateEntity.class,
----        },version = 150)
---+        },version = 152)
--- 
--- 
--- public abstract class acScanSuiteDatabase extends RoomDatabase {
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDateAndTime;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cInventoryorderRepository {\r\n    //Region Public Properties\r\n    private final iInventoryorderDao inventoryorderDao;\r\n    private final iInventoryorderBinDao inventoryorderBinDao;\r\n\r\n    private static class InventoryCreateParams {\r\n        String documentStr;\r\n        boolean checkBarcodesBln;\r\n\r\n        InventoryCreateParams(String pvDocumentStr, boolean pvCheckBarcodesBln ) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = pvCheckBarcodesBln;\r\n        }\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    cInventoryorderRepository(Application pvApplication) {\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.inventoryorderDao = db.inventoryorderDao();\r\n        this.inventoryorderBinDao = db.inventoryorderBinDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Order\r\n\r\n    public void insert (cInventoryorderEntity inventoryorderEntity) {\r\n        new mInsertAsyncTask(inventoryorderDao).execute(inventoryorderEntity);\r\n    }\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryOrderEntities) {\r\n        new mInsertAllAsyncTask(inventoryorderDao).execute(pvInventoryOrderEntities);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(inventoryorderDao).execute();\r\n    }\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        InventoryCreateParams inventoryCreateParams = new InventoryCreateParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        try {\r\n            webResultWrs = new mCreateInventoryOrderViaWebserviceAsyncTask().execute(inventoryCreateParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetInventoryordersFromWebserviceAsyncTask().execute(pvSearchTextStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cInventoryorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder( \"SELECT * FROM \" + cDatabase.TABLENAME_INVENTORYORDER);\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) \");\r\n            }\r\n        }\r\n\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Opdrachtnummer ASC\");\r\n\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new cInventoryorderRepository.mGetInventoriesFromDatabaseWithFilterAsyncTask(inventoryorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pHandledViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderHandledViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Lines\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderAddLineViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region BINS\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPossibleBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinAddViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinCloseViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinNotDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinTotalFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new pGetInventoryorderBinTotalFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    //Region Items\r\n\r\n    public cWebresult pAddUnkownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderUnknownItemAddViaWebserviceAsyncTask().execute(pvBarcodeScan).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderERPItemAddViaWebserviceAsyncTask().execute(pvArticleBarcode).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Line Barcodes\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLineBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Barcodes\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Comments\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Endregion Public Methods\r\n\r\n    //Region Orders\r\n    private static class mInsertAsyncTask extends AsyncTask<cInventoryorderEntity, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cInventoryorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAllAsyncTask extends AsyncTask<List<cInventoryorderEntity>, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @SafeVarargs\r\n        @Override\r\n        protected final Void doInBackground(final List<cInventoryorderEntity>... params) {\r\n            mAsyncTaskDao.insertAll(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mCreateInventoryOrderViaWebserviceAsyncTask extends AsyncTask<InventoryCreateParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(InventoryCreateParams... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.IVS.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_INVENTORYBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                new cWebresult();\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryordersFromWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            try {\r\n                new cWebresult();\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoriesFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cInventoryorderEntity>> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mGetInventoriesFromDatabaseWithFilterAsyncTask(iInventoryorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cInventoryorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredInventoryOrders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderHandledViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(cWarehouseorder.WorkflowInventoryStepEnu.InventoryHandled);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYHANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Lines\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetLineBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderAddLineViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo6Pin.setValue(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo7Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo8Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region BINS\r\n    private static class mGetBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPossibleBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERPOSSIBLEBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinNotDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinNotDone();\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinDone();\r\n        }\r\n    }\r\n\r\n    private static class pGetInventoryorderBinTotalFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        pGetInventoryorderBinTotalFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinTotal();\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinAddViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODE;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADD_BIN, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinCloseViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo4Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo5Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBINCLOSE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Items\r\n    private static class mInventoryorderUnknownItemAddViaWebserviceAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cBarcodeScan... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(\"UNKNOWN\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorder.currentInventoryOrder.getUnknownVariantCounterInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeOriginalStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(cText.pStringToIntegerInt(params[0].getBarcodeTypeStr()));\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(false);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(1);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(\"???\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderERPItemAddViaWebserviceAsyncTask extends AsyncTask<cArticleBarcode, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cArticleBarcode... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cArticle.currentArticle.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cArticle.currentArticle.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(params[0].getBarcodeTypeInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(params[0].isUniqueBarcodeBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].getQuantityPerUnitOfMeasureDbl());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(params[0].getUnitOfMeasureStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Barcodes\r\n    private static class mGetBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Comments\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(date 1617964993193)
---@@ -29,6 +29,8 @@
--- import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
--- import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;
--- import SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;
---+import SSU_WHS.Picken.Pickorders.cPickorder;
---+import SSU_WHS.Picken.Pickorders.cPickorderRepository;
--- import SSU_WHS.Webservice.cWebresult;
--- import SSU_WHS.Webservice.cWebserviceDefinitions;
--- import nl.icsvertex.scansuite.R;
---@@ -439,6 +441,41 @@
---         return webResultWrs;
---     }
--- 
---+    //Region Propertys
---+    public cWebresult pGetLinePropertysViaWebserviceWrs() {
---+
---+        List<String> resultObl = new ArrayList<>();
---+        cWebresult webResultWrs = new cWebresult();
---+
---+        try {
---+            webResultWrs = new cInventoryorderRepository.mGetPropertysViaWebserviceAsyncTask().execute().get();
---+        } catch (ExecutionException | InterruptedException e) {
---+            webResultWrs.setResultBln(false);
---+            webResultWrs.setSuccessBln(false);
---+            resultObl.add(e.getLocalizedMessage());
---+            webResultWrs.setResultObl(resultObl);
---+            e.printStackTrace();
---+        }
---+        return webResultWrs;
---+    }
---+
---+    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {
---+
---+        List<String> resultObl = new ArrayList<>();
---+        cWebresult webResultWrs = new cWebresult();
---+
---+        try {
---+            webResultWrs = new cInventoryorderRepository.mGetPropertyValuesViaWebserviceAsyncTask().execute().get();
---+        } catch (ExecutionException | InterruptedException e) {
---+            webResultWrs.setResultBln(false);
---+            webResultWrs.setSuccessBln(false);
---+            resultObl.add(e.getLocalizedMessage());
---+            webResultWrs.setResultObl(resultObl);
---+            e.printStackTrace();
---+        }
---+        return webResultWrs;
---+    }
---+
---     //Endregion Public Methods
--- 
---     //Region Orders
---@@ -1142,4 +1179,68 @@
---         }
---     }
--- 
---+    //Region Properties
---+    //Region Propertys
---+    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
---+        @Override
---+        protected cWebresult doInBackground(String... params) {
---+            cWebresult webresult = new cWebresult();
---+            try {
---+                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
---+
---+                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
---+                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
---+                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
---+                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
---+
---+                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
---+                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
---+                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
---+                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
---+
---+                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
---+                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
---+                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
---+                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
---+
---+                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);
---+            } catch (JSONException e) {
---+                webresult.setSuccessBln(false);
---+                webresult.setResultBln(false);
---+            }
---+            return webresult;
---+        }
---+    }
---+
---+    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
---+        @Override
---+        protected cWebresult doInBackground(String... params) {
---+            cWebresult webresult = new cWebresult();
---+            try {
---+                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
---+
---+                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
---+                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
---+                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
---+                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
---+
---+                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
---+                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
---+                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
---+                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
---+
---+                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
---+                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
---+                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
---+                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
---+
---+                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);
---+            } catch (JSONException e) {
---+                webresult.setSuccessBln(false);
---+                webresult.setResultBln(false);
---+            }
---+            return webresult;
---+        }
---+    }
---+
--- }
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class cInventoryorder {\r\n\r\n    private final String orderNumberStr;\r\n    public String getOrderNumberStr() {\r\n        return orderNumberStr;\r\n    }\r\n\r\n    private final String orderTypeStr;\r\n    public String getOrderTypeStr() {\r\n        return orderTypeStr;\r\n    }\r\n\r\n    private final int numberOfBinsInt;\r\n    public int getNumberOfBinsInt() {\r\n        return numberOfBinsInt;\r\n    }\r\n\r\n    private final String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {\r\n        return assignedUserIdStr;\r\n    }\r\n\r\n    private final String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {\r\n        return currentUserIdStr;\r\n    }\r\n\r\n    private String stockownerStr;\r\n    public String getStockownerStr() {\r\n        return stockownerStr;\r\n    }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() {\r\n        return statusInt;\r\n    }\r\n\r\n    private final boolean invAmountManualBln;\r\n    public boolean isInvAmountManualBln() {\r\n        return invAmountManualBln;\r\n    }\r\n\r\n    private final boolean invBarcodeCheckBln;\r\n    public boolean isInvBarcodeCheckBln() {\r\n        return invBarcodeCheckBln;\r\n    }\r\n\r\n    private final boolean invAddExtraBinBln;\r\n    public boolean isInvAddExtraBinBln() {\r\n        return invAddExtraBinBln;\r\n    }\r\n\r\n    private final String externalReferenceStr;\r\n    public String getExternalReferenceStr() {\r\n        return externalReferenceStr;\r\n    }\r\n\r\n    private final int sourceDocumentInt;\r\n    private int getSourceDocumentInt() { return sourceDocumentInt; }\r\n\r\n    private final String documentStr;\r\n    public String getDocumentStr() {\r\n        return documentStr;\r\n    }\r\n\r\n    private final boolean inventoryWithPictureBln;\r\n    public boolean isInventoryWithPictureBln() {\r\n        return inventoryWithPictureBln;\r\n    }\r\n\r\n    private final boolean inventoryWithPicturePrefetchBln;\r\n    private boolean isInventoryWithPicturePrefetchBln() {\r\n        return inventoryWithPicturePrefetchBln;\r\n    }\r\n\r\n    public Boolean isGeneratedBln() {\r\n        return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n    }\r\n\r\n    public int unknownVariantCounterInt = 0;\r\n    public int getUnknownVariantCounterInt() {\r\n        return unknownVariantCounterInt;\r\n    }\r\n\r\n    private final cInventoryorderEntity inventoryorderEntity;\r\n\r\n    private cInventoryorderViewModel getInventoryorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n    }\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    public List<cComment> commentsObl() {\r\n        return cComment.allCommentsObl;\r\n    }\r\n    public List<cInventoryorderBarcode> barcodesObl () {return  cInventoryorderBarcode.allInventoryorderBarcodesObl;}\r\n    private List<cInventoryorderLine> linesObl() {return  cInventoryorderLine.allLinesObl;}\r\n    private List<cArticleImage> imagesObl()  {\r\n        return  cArticleImage.allImages;\r\n    }\r\n\r\n    private static List<cInventoryorder> allCachedOrdersObl;\r\n    public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){\r\n\r\n        if (pvRefreshBln) {\r\n             cInventoryorder.allCachedOrdersObl = null;\r\n        }\r\n\r\n        if (cInventoryorder.allCachedOrdersObl != null) {\r\n            return  cInventoryorder.allCachedOrdersObl;\r\n        }\r\n\r\n        cInventoryorder.allCachedOrdersObl  = new ArrayList<>();\r\n\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        List<cInventoryorderEntity> hulpObl  =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), false);\r\n\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpObl) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            cInventoryorder.allCachedOrdersObl.add(inventoryorder);\r\n        }\r\n\r\n        return  cInventoryorder.allCachedOrdersObl;\r\n\r\n\r\n    }\r\n\r\n    private static List<String> binsObl;\r\n\r\n    public static cInventoryorder currentInventoryOrder;\r\n\r\n    //Region Public Properties\r\n\r\n    //Region Constructor\r\n\r\n    public cInventoryorder(JSONObject pvJsonObject) {\r\n\r\n        this.inventoryorderEntity = new cInventoryorderEntity(pvJsonObject);\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr()) ;\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n    }\r\n\r\n    public cInventoryorder(cInventoryorderEntity pvInventoryorderEntity) {\r\n\r\n        this.inventoryorderEntity = pvInventoryorderEntity;\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt =  cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr());\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Orders\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderViewModel().insert(this.inventoryorderEntity);\r\n        return true;\r\n    }\r\n\r\n    public static Boolean pCreateInventoryOrderViaWebserviceBln(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        cWebresult WebResult;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(WebResult.getResultDtt().get(0));\r\n                inventoryorder.pInsertInDatabaseBln();\r\n                cInventoryorder.currentInventoryOrder = inventoryorder;\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS);\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static boolean pGetInventoryOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorder.mTruncateTable();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            List<cInventoryorderEntity> insertObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(jsonObject);\r\n                insertObl.add(inventoryorder.inventoryorderEntity);\r\n            }\r\n\r\n            //Batch insert in database\r\n            cInventoryorder.mInsertAllInDatabase(insertObl);\r\n\r\n            //Make sure memory is filled\r\n            cInventoryorder.allInventoryOrdersObl(true);\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS);\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n            ignoreBusyBln = true;\r\n        }\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(),\r\n                this.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvStepCodeEnu.toString(),\r\n                pvWorkFlowStepInt,\r\n                ignoreBusyBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() > 0 && ! Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getUsernameStr())) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln()&& Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        cWebresult Webresult;\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvStepCodeEnu.toString(), pvWorkFlowStepInt);\r\n\r\n        return Webresult.getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n    public void pDeleteDetails() {\r\n        cInventoryorderLine.pTruncateTableBln();\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorderBarcode.pTruncateTableBln();\r\n        cInventoryorderLineBarcode.pTruncateTableBln();\r\n    }\r\n\r\n    public cResult pOrderHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n\r\n        cWebresult webresult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        webresult =  inventoryorderViewModel.pHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n\r\n    }\r\n\r\n    public static List<cInventoryorder> pGetInventoriesWithFilterFromDatabasObl() {\r\n\r\n        List<cInventoryorder> resultObl = new ArrayList<>();\r\n        List<cInventoryorderEntity> hulpResultObl;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        hulpResultObl =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpResultObl ) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            resultObl.add(inventoryorder);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public  boolean pCheckBarcodeWithLineBarcodesBln(cBarcodeScan pvBarcodeScan){\r\n\r\n        //If scanned value matches the current barcodeStr, then we have a match\r\n        if (pvBarcodeScan.getBarcodeOriginalStr().equalsIgnoreCase(cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr()) ||\r\n            pvBarcodeScan.getBarcodeFormattedStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeWithoutCheckDigitStr()) ) {\r\n            //We have a match, so leave\r\n            return  true;\r\n        }\r\n\r\n        //Check if this is a barcodeStr we already know\r\n        cInventoryorderBarcode inventoryorderBarcode = cInventoryorder.currentInventoryOrder.pGetOrderBarcode(pvBarcodeScan);\r\n\r\n        //We scanned a barcodeStr unknown to the order\r\n        if (inventoryorderBarcode == null) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr for a different article\r\n        if (!inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) ||\r\n            ! inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLine.currentInventoryOrderLine.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode = inventoryorderLineBarcode;\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        //Scanned barcodeStr is correct, but we need to create a line barcodeStr\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode =  cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(inventoryorderBarcode.getBarcodeStr(),inventoryorderBarcode.getQuantityPerUnitOfMeasureDbl(), true);\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n        return  true;\r\n\r\n    }\r\n\r\n    private static  void mTruncateTable() {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.deleteAll();\r\n    }\r\n\r\n    //End Region Orders\r\n\r\n    //Region Lines\r\n\r\n    public boolean pGetLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderLine.allLinesObl = null;\r\n            cInventoryorderLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n\r\n        WebResult = getInventoryorderViewModel().pGetLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderLine.allLinesObl == null) {\r\n                cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderLineEntity> importObl = new ArrayList<>();\r\n            List<cInventoryorderLine> objectObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cInventoryorderLine inventoryorderLine = new cInventoryorderLine(jsonObject);\r\n\r\n                if (inventoryorderLine.getQuantityHandledAllScannersDbl() > inventoryorderLine.getQuantityDbl()) {\r\n                    inventoryorderLine.quantityHandledDbl = inventoryorderLine.getQuantityHandledAllScannersDbl();\r\n                }\r\n\r\n\r\n                importObl.add(inventoryorderLine.inventoryorderLineEntity);\r\n                objectObl.add((inventoryorderLine));\r\n\r\n                if (! inventoryorderLine.getHandeledTimeStampStr().isEmpty()) {\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin  =   cInventoryorder.currentInventoryOrder.pGetBin(inventoryorderLine.getBinCodeStr());\r\n                    if ( cInventoryorderBin.currentInventoryOrderBin == null) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                        cInventoryorderBin.currentInventoryOrderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.InventoryDone;\r\n                    }\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin.pUpdateStatusAndTimeStampInDatabase();\r\n                    cInventoryorderBin.currentInventoryOrderBin = null;\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderLine.pInsertAllInDatabase(objectObl,importObl);\r\n\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddLineBln() {\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pAddLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderLine.currentInventoryOrderLine= new cInventoryorderLine(WebResult.getResultDtt().get(0));\r\n                cInventoryorderLine.currentInventoryOrderLine.pInsertInDatabaseBln();\r\n                cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr(),cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl(), false);\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public List<cInventoryorderLine> pGetLinesForBinObl(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderLine> resultObl = new ArrayList<>();\r\n        for (cInventoryorderLine inventoryorderLine : cInventoryorder.currentInventoryOrder.linesObl()) {\r\n            if (inventoryorderLine.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                resultObl.add((inventoryorderLine));\r\n            }\r\n        }\r\n\r\n        if (resultObl.size() > 1) {\r\n            Collections.reverse(resultObl);\r\n        }\r\n\r\n        return resultObl;\r\n    }\r\n\r\n    public Double pGetTotalItemCountDbl() {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetTotalCountDbl();\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetItemCountForBinDbl(String pvBincodeStr) {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetCountForBinCodeDbl(pvBincodeStr);\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public cInventoryorderLine pGetLineForArticleAndBin() {\r\n\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            //Check if BIN matches current BIN\r\n            if (! inventoryorderLine.getBinCodeStr().equalsIgnoreCase(   cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr())) {\r\n                continue;\r\n            }\r\n\r\n            //Check if item matches scanned item\r\n            if (inventoryorderLine.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) &&\r\n                    inventoryorderLine.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n                return  inventoryorderLine;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pGetOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all bins for current order, if webservice error then stop\r\n        if (!this.mGetBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.pGetLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_lines_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.mGetPossibleBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_possible_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!this.pGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all barcodes\r\n        if (!this.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all inventorylinebarcodes\r\n        if (!this.mGetLineBarcodesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all article images, only if neccesary\r\n        if (!this.mGetArticleImagesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    private cInventoryorderLine mGetLineWithLineNo(Long pvLineNoLng) {\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            if (cText.pIntToStringStr(inventoryorderLine.getLineNoInt()).equalsIgnoreCase(cText.pLongToStringStr(pvLineNoLng))) {\r\n                return  inventoryorderLine;\r\n            }\r\n\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Lines\r\n\r\n    //Region BINS\r\n\r\n    private boolean mGetBinsViaWebserviceBln() {\r\n\r\n        cInventoryorderBin.allInventoryorderBinsObl = null;\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorder.binsObl = new ArrayList<>();\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            List<cInventoryorderBinEntity> insertObl = new ArrayList<>();\r\n            List<cInventoryorderBin> closedBinsObl = new ArrayList<>();\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n\r\n                insertObl.add(inventoryorderBin.inventoryorderBinEntity);\r\n\r\n                if (inventoryorderBin.getStatusInt() ==  cWarehouseorder.InventoryBinStatusEnu.InventoryDoneOnServer && !cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                    closedBinsObl.add(inventoryorderBin);\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderBin.pInsertAllInDatabase(insertObl);\r\n\r\n            //Close all BINS in database after they got inserted\r\n            for (cInventoryorderBin inventoryorderBin : closedBinsObl) {\r\n                inventoryorderBin.pCloseBln(false);\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetPossibleBinsViaWebserviceBln() {\r\n\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetPossibleBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n\r\n                if (cInventoryorder.binsObl.contains(inventoryorderBin.getBinCodeStr())) {\r\n                    continue;\r\n                }\r\n\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n                inventoryorderBin.pInsertInDatabaseBln();\r\n                inventoryorderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.New;\r\n                inventoryorderBin.pUpdateStatusAndTimeStampInDatabase();\r\n\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsNotDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsNotDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsTotalFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsTotalFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public cInventoryorderBin pGetBin(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderBin> hulpObl;\r\n\r\n        hulpObl = this.pGetBinsTotalFromDatabasObl();\r\n\r\n        if (hulpObl == null || hulpObl.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        for (cInventoryorderBin inventoryorderBin : hulpObl) {\r\n            if (inventoryorderBin.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                return  inventoryorderBin;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cInventoryorderBin pAddInventoryBin(cBranchBin pvBranchBin) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddBinViaWebserviceWrs(pvBranchBin.getBinCodeStr());\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBin InventoryorderBin = new cInventoryorderBin(WebResult.getResultDtt().get(0));\r\n                InventoryorderBin.pInsertInDatabaseBln();\r\n                return  InventoryorderBin;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  null;\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    //End Region BINS\r\n\r\n    //Region Barcodes\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderBarcode.allInventoryorderBarcodesObl = null;\r\n            cInventoryorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pGetBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln() ){\r\n\r\n            if (cInventoryorderBarcode.allInventoryorderBarcodesObl == null) {\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderBarcodeEntity> inventoryorderEntities = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject :WebResult.getResultDtt() ) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(jsonObject);\r\n                inventoryorderEntities.add(inventoryorderBarcode.inventoryorderBarcodeEntity);\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl.add(inventoryorderBarcode);\r\n            }\r\n\r\n            cInventoryorderBarcode.pInsertAllInDatabase(inventoryorderEntities);\r\n            return true;\r\n        }\r\n\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddUnkownBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cInventoryorder.currentInventoryOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(WebResult.getResultDtt().get(0));\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if (cArticle.currentArticle == null) {\r\n            return false;\r\n        }\r\n\r\n        //Get barcodes for this article\r\n        if (!cArticle.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        //Search for the scanned barcodeStr in the article barcodes\r\n        cArticleBarcode matchedArticleBarcode = null;\r\n        for (cArticleBarcode articleBarcode : cArticle.currentArticle.barcodesObl) {\r\n            if (articleBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    articleBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                matchedArticleBarcode = articleBarcode;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //We didn't find a match, so no use in adding the line\r\n        if (matchedArticleBarcode == null) {\r\n            return  false;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddERPItemViaWebserviceWrs(matchedArticleBarcode);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            for (cArticleBarcode articleBarcode :  cArticle.currentArticle.barcodesObl) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(articleBarcode);\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n\r\n                if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                        inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                    cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Barcodes\r\n\r\n    //Region Line Barcode\r\n\r\n    private boolean mGetLineBarcodesViaWebserviceBln() {\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = null;\r\n            cInventoryorderLineBarcode.pTruncateTableBln();\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pGetLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<cInventoryorderLineBarcodeEntity> insertObl = new ArrayList<>();\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode(jsonObject);\r\n                insertObl.add((inventoryorderLineBarcode.inventoryorderLineBarcodeEntity));\r\n\r\n                //Search for line that belongs to this barcodeStr\r\n                cInventoryorderLine inventoryorderLine = cInventoryorder.currentInventoryOrder.mGetLineWithLineNo(inventoryorderLineBarcode.getLineNoLng());\r\n\r\n                //If we can't find it, skip this\r\n                if (inventoryorderLine == null) {\r\n                    continue;\r\n                }\r\n\r\n                //Add barcodeStr to line\r\n                inventoryorderLine.pAddLineBarcode(inventoryorderLineBarcode.getBarcodeStr(),inventoryorderLineBarcode.getQuantityhandledDbl(), false);\r\n\r\n            }\r\n\r\n            cInventoryorderLineBarcode.pInsertAllInDatabase(insertObl);\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Line Barcode\r\n\r\n    //Region Barcode\r\n\r\n    public cInventoryorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderBarcode inventoryorderBarcode : this.barcodesObl()) {\r\n\r\n            if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr())) {\r\n                return  inventoryorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Barcode\r\n\r\n    //Region Images\r\n\r\n    private boolean mGetArticleImagesViaWebserviceBln() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()  || !cInventoryorder.currentInventoryOrder.isInventoryWithPicturePrefetchBln()) {\r\n            return  true;\r\n        }\r\n\r\n\r\n            cArticleImage.allImages = null;\r\n            cArticleImage.pTruncateTableBln();\r\n\r\n\r\n        if (this.imagesObl()  != null) {\r\n            return  true;\r\n        }\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  false;\r\n        }\r\n\r\n        List<String> itemNoAndVariantCodeObl;\r\n        itemNoAndVariantCodeObl = new ArrayList<>();\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n            String itemNoAndVariantCodeStr = inventoryorderLine.getItemNoStr() + \";\" + inventoryorderLine.getVariantCodeStr();\r\n\r\n            if (!itemNoAndVariantCodeObl.contains(itemNoAndVariantCodeStr)) {\r\n                itemNoAndVariantCodeObl.add(itemNoAndVariantCodeStr);\r\n            }\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        WebResult =  articleImageViewModel.pGetArticleImagesFromWebserviceWrs(itemNoAndVariantCodeObl);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            cArticleImage.allImages = new ArrayList<>();\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cArticleImage articleImage = new cArticleImage(jsonObject);\r\n\r\n                if ( !cArticleImage.allImages.contains(articleImage)) {\r\n                    articleImage.pInsertInDatabaseBln();\r\n                    cArticleImage.allImages.add((articleImage));\r\n                }\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEIMAGESMULTIPLE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    //End Region Images\r\n\r\n    //Region Comments\r\n\r\n    public boolean pGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n        cWebresult webresult;\r\n        webresult = getInventoryorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln()&& webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            List<JSONObject> myList = webresult.getResultDtt();\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (cInventoryorder.currentInventoryOrder.commentsObl() == null || cInventoryorder.currentInventoryOrder.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    private static  void mInsertAllInDatabase(List<cInventoryorderEntity> pvInventoryOrderEntityObl ) {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.insertAll (pvInventoryOrderEntityObl);\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n        for (JSONObject jsonObject : pvResultDtt) {\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //End Region Comments\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(date 1617965427985)
---@@ -2,10 +2,12 @@
--- 
--- import androidx.lifecycle.ViewModelProvider;
--- 
---+import org.json.JSONException;
--- import org.json.JSONObject;
--- 
--- import java.util.ArrayList;
--- import java.util.Collections;
---+import java.util.LinkedHashMap;
--- import java.util.List;
--- 
--- import ICS.Utils.Scanning.cBarcodeScan;
---@@ -20,6 +22,8 @@
--- import SSU_WHS.Basics.ArticleImages.cArticleImage;
--- import SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;
--- import SSU_WHS.Basics.BranchBin.cBranchBin;
---+import SSU_WHS.Basics.PropertyGroup.cPropertyGroup;
---+import SSU_WHS.Basics.PropertyGroup.cPropertyGroupViewModel;
--- import SSU_WHS.Basics.Users.cUser;
--- import SSU_WHS.General.Comments.cComment;
--- import SSU_WHS.General.Warehouseorder.cWarehouseorder;
---@@ -33,6 +37,7 @@
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;
---+import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValue;
--- import SSU_WHS.Webservice.cWebresult;
--- import SSU_WHS.Webservice.cWebserviceDefinitions;
--- import nl.icsvertex.scansuite.R;
---@@ -122,6 +127,7 @@
---         return unknownVariantCounterInt;
---     }
--- 
---+    public  LinkedHashMap<Integer, List<JSONObject>>  itemProperyDataObl;
---     private final cInventoryorderEntity inventoryorderEntity;
--- 
---     private cInventoryorderViewModel getInventoryorderViewModel() {
---Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.lifecycle.AndroidViewModel;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Webservice.cWebresult;\r\n\r\npublic class cInventoryorderViewModel extends AndroidViewModel {\r\n    //Region Public Properties\r\n    private cInventoryorderRepository Repository;\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderViewModel(Application pvApplication) {\r\n        super(pvApplication);\r\n        this.Repository = new cInventoryorderRepository(pvApplication);\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n    public void insert(cInventoryorderEntity pvInventoryorderEntity) {this.Repository.insert(pvInventoryorderEntity);}\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryorderEntities) {this.Repository.insertAll(pvInventoryorderEntities);}\r\n\r\n    public void deleteAll() {this.Repository.deleteAll();}\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {return this.Repository.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);}\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {return this.Repository.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);}\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesWithFilterFromDatabaseObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {return this.Repository.pGetInventoriesFromDatabaseWithFilterObl(pvCurrentUserStr, pvUseFiltersBln);}\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pAddBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pCloseBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pAddUnknownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {return this.Repository.pAddUnkownItemViaWebserviceWrs(pvBarcodeScan);}\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {return this.Repository.pAddERPItemViaWebserviceWrs(pvArticleBarcode);}\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {return this.Repository.pAddLineViaWebserviceWrs();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsNotDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinNotDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsTotalFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinTotalFromDatabaseObl();}\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs( ) {return this.Repository.pGetLinesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs( ) {return this.Repository.pGetBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs( ) {return this.Repository.pGetPossibleBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetCommentsFromWebserviceWrs() {return this.Repository.pGetCommentsFromWebservice(); }\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {return this.Repository.pGetBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {return this.Repository.pGetLineBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}\r\n\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(date 1617964993222)
---@@ -66,4 +66,8 @@
--- 
---     public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}
--- 
---+    public cWebresult pGetLinePropertysViaWebserviceWrs() {return this.Repository.pGetLinePropertysViaWebserviceWrs(); }
---+
---+    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {return this.Repository.pGetLinePropertyValuesViaWebserviceWrs(); }
---+
--- }
---Index: app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617964993173)
---+++ app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617964993173)
---@@ -0,0 +1,34 @@
---+<?xml version="1.0" encoding="utf-8"?>
---+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
---+    xmlns:app="http://schemas.android.com/apk/res-auto"
---+    xmlns:tools="http://schemas.android.com/tools"
---+    android:id="@+id/inventoryorderlineItemPropertyInputContainer"
---+    tools:context=".Activities.Inventory.InventoryorderLineItemPropertyInputActvity"
---+    style="@style/defaultScreen"
---+    android:background="@color/colorBart">
---+    <include layout="@layout/toolbar_default" />
---+    <include layout="@layout/default_articleinfo_compact"
---+        android:layout_width="match_parent"
---+        android:layout_height="0dp"
---+        android:layout_margin="@dimen/default_margin"
---+        app:layout_constraintTop_toBottomOf="@id/toolbar"
---+        />
---+    <androidx.recyclerview.widget.RecyclerView
---+        android:id="@+id/itemPropertyRecyclerview"
---+        android:layout_width="match_parent"
---+        android:layout_height="0dp"
---+        android:layout_margin="@dimen/default_margin"
---+        android:scrollbars="vertical"
---+        app:layout_constraintTop_toBottomOf="@id/articleInfoCompactContainer"
---+        app:layout_constraintEnd_toEndOf="parent"
---+        app:layout_constraintStart_toStartOf="parent"
---+        app:layout_constraintBottom_toTopOf="@id/imageButtonDone"
---+        />
---+    <androidx.appcompat.widget.AppCompatImageButton
---+        android:id="@+id/imageButtonDone"
---+        style="@style/smallButton"
---+        app:srcCompat="@drawable/ic_check_black_24dp"
---+        app:layout_constraintEnd_toEndOf="parent"
---+        app:layout_constraintBottom_toBottomOf="parent"
---+        />
---+</androidx.constraintlayout.widget.ConstraintLayout>
---\ No newline at end of file
---Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package nl.icsvertex.scansuite.Activities.Inventory;\r\n\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.InputType;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class InventoryArticleActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    //End Region Public Properties\r\n\r\n    //Region Private\r\n\r\n    private  ConstraintLayout inventoryArticleDetailContainer;\r\n\r\n    private Toolbar toolbar;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n    private  TextView articleDescriptionText;\r\n    private  TextView articleDescription2Text;\r\n    private  TextView articleItemText;\r\n    private  TextView articleBarcodeText;\r\n    private  ImageView articleThumbImageView;\r\n\r\n    private TextView binText;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n\r\n    private  int inventoryCounterMinusHelperInt;\r\n    private  int inventoryCounterPlusHelperInt;\r\n    private  Handler minusHandler;\r\n    private  Handler plusHandler;\r\n\r\n    private  ImageView imageButtonDone;\r\n    private  ImageButton imageButtonBarcode;\r\n    private ImageView imageButtonNoInputPropertys;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public InventoryArticleActivity() {\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_inventoryarticle);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n            super.onPause();\r\n\r\n            if (cAppExtension.activity instanceof  InventoryArticleActivity) {\r\n                cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            }\r\n             LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_intakeactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n\r\n//        invalidateOptionsMenu();\r\n\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(true);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mStartInventoryBINActivity();\r\n                return true;\r\n\r\n            case R.id.item_print_item:\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.message_scan_article));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.inventoryArticleDetailContainer = findViewById(R.id.inventoryArticleDetailContainer);\r\n\r\n        this.toolbar =  findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.binText = findViewById(R.id.binText);\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_inventory);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        String subTitleStr = cInventoryorder.currentInventoryOrder.getOrderNumberStr();\r\n        this.toolbarSubTitle.setText(subTitleStr);\r\n        this.toolbarSubTitle.setSelected(true);\r\n\r\n        setSupportActionBar(this.toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInvAmountManualBln()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        this.inventoryCounterPlusHelperInt = 0;\r\n        this. inventoryCounterMinusHelperInt = 0;\r\n\r\n        this.articleDescriptionText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n        this.articleItemText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());\r\n\r\n        this.binText.setText(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n\r\n        this.mShowQuantityInfo();\r\n        this.mShowArticleImage();\r\n        this.mShowBarcodeInfo();\r\n        this.mHideArticleInfo();\r\n\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n       this.mSetDoneListener();\r\n\r\n        if (cSetting.INV_AMOUNT_MANUAL()) {\r\n            this.mSetNumberListener();\r\n            this.mSetImageButtonBarcodeListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(final cBarcodeScan pvBarcodeScan){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        //Only ARTICLE scans are allowed\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n            mDoUnknownScan(cAppExtension.context.getString(R.string.error_article_scan_mandatory));\r\n            return;\r\n        }\r\n\r\n        //Check if the scanned value belongs to this line\r\n        if (! cInventoryorder.currentInventoryOrder.pCheckBarcodeWithLineBarcodesBln(pvBarcodeScan)) {\r\n\r\n            //Keep the scan, so BIN activity can handle it\r\n            InventoryorderBinActivity.barcodeScanToHandle = pvBarcodeScan;\r\n\r\n            //Close this activity, we are done with the current article\r\n            this.mHandleDone();\r\n           return;\r\n        }\r\n\r\n        this.mShowBarcodeInfo();\r\n\r\n        //Try to raise quantityDbl\r\n        this.mTryToChangeInventoryQuantity(true, false,cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() );\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mTryToChangeInventoryQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n\r\n                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),\r\n                                                                          cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );\r\n\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n            } else {\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;\r\n            }\r\n\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n            return;\r\n        }\r\n\r\n        //negative\r\n\r\n        //Check if value already is zero\r\n        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {\r\n\r\n            //If we have a decimal, correct it to zero\r\n            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {\r\n                pvAmountDbl = 0;\r\n                pvAmountFixedBln = true;\r\n\r\n            } else {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (pvAmountDbl < 0) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n        if (pvAmountFixedBln) {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n        }else {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;\r\n        }\r\n\r\n        //Change quantityDbl in activity\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n    }\r\n\r\n    private  void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cInventoryorderLine.currentInventoryOrderLine.articleImage == null || cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap());\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo() {\r\n\r\n        this.quantityText.setImeOptions(EditorInfo.IME_ACTION_DONE);\r\n        this.quantityText.setSelectAllOnFocus(true);\r\n        this.quantityText.requestFocus();\r\n        this.quantityText.setSingleLine();\r\n        this.quantityText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_TEXT_VARIATION_NORMAL);\r\n        this.quantityText.setCursorVisible(false);\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n        this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (!cSetting.INV_AMOUNT_MANUAL()) {\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n            cUserInterface.pDoNope(this.quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() > 1) {\r\n\r\n            //Try to switch to another barcode for the same article, so the user doesn't have to manually\r\n            cInventoryorderBarcode inventoryorderBarcode = cInventoryorderBarcode.getSingleQuantityBarcodeForItemAndVariant(cInventoryorderBarcode.currentInventoryOrderBarcode);\r\n            if (inventoryorderBarcode != null) {\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n            }\r\n            else\r\n            {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n\r\n    private  void mHandleDone() {\r\n\r\n        //Try to save the line to the database\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pSaveLineViaWebserviceBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_line_save_failed),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        //Change quantityDbl handled in database\r\n        cInventoryorderLine.currentInventoryOrderLine.pUpdateQuantityInDatabase();\r\n\r\n        cUserInterface.pHideGettingData();\r\n        this.mResetCurrents();\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    private void mDoUnknownScan(String pvErrorMessageStr) {\r\n        cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer,pvErrorMessageStr,null,true);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(this.inventoryArticleDetailContainer);\r\n        constraintSetSpace.connect(this.articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(this.inventoryArticleDetailContainer);\r\n\r\n    }\r\n\r\n    private  void mShowBarcodeInfo(){\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode != null) {\r\n            this.articleBarcodeText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getUnitOfMeasureInfoStr());\r\n        } else {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.message_unknown_barcode));\r\n        }\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl() == null || cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 1) {\r\n                    pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLine.currentInventoryOrderLine.barcodesObl().get(0).getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEFRAGMENT_LIST_TAG);\r\n    }\r\n\r\n    private void mStartInventoryBINActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        InventoryorderBinActivity.busyBln = false;\r\n\r\n        final Intent intent = new Intent(cAppExtension.context, InventoryorderBinActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n            cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mResetCurrents(){\r\n        cInventoryorderLine.currentInventoryOrderLine = null;\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = null;\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode = null;\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityHandledDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,99999);\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    inventoryCounterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n                mTryToChangeInventoryQuantity(true, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    inventoryCounterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n                mTryToChangeInventoryQuantity(false, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mSetDoneListener(){\r\n\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mHandleDone();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n        this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n    }\r\n\r\n    //End Region Private Methods\r\n}\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(date 1617965495040)
---@@ -48,6 +48,9 @@
--- import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
--- import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
--- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
---+import SSU_WHS.Picken.PickorderLines.cPickorderLine;
---+import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
---+import nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;
--- import nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;
--- import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
--- import nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;
---@@ -358,6 +361,9 @@
---            return;
---         }
--- 
---+
---+
---+
---         this.mShowBarcodeInfo();
--- 
---         //Try to raise quantityDbl
---@@ -761,5 +767,6 @@
---         this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);
---     }
--- 
---+
---     //End Region Private Methods
--- }
---Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch	(date 1617964988832)
---+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch	(date 1617964988832)
---@@ -0,0 +1,2329 @@
---+Index: app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package SSU_WHS.Picken.Pickorders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyRepository;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.Shipment.cShipment;\r\nimport SSU_WHS.Picken.Storement.cStorement;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cPickorderRepository {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    private final iPickorderDao pickorderDao;\r\n    private final iPickorderLineDao pickorderLineDao;\r\n\r\n    private static class PickorderStepHandledParams {\r\n        String userStr;\r\n        String languageStr;\r\n        String branchStr;\r\n        String orderNumberStr;\r\n        String deviceStr;\r\n        String workPlaceStr;\r\n        String workflowStepcodeStr;\r\n        Integer workflowStepInt;\r\n        String cultureStr;\r\n\r\n        PickorderStepHandledParams(String pvUserStr, String pvLanguageStr, String pvBranchStr, String pvOrderNumberStr, String pvDeviceStr, String pvWorkplaceStr, String pvWorkflowStepCodeStr, Integer pvWorkflowStepStr, String pvCultureStr) {\r\n            this.userStr = pvUserStr;\r\n            this.languageStr = pvLanguageStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.deviceStr = pvDeviceStr;\r\n            this.workPlaceStr = pvWorkplaceStr;\r\n            this.workflowStepcodeStr = pvWorkflowStepCodeStr;\r\n            this.workflowStepInt = pvWorkflowStepStr;\r\n            this.cultureStr = pvCultureStr;\r\n        }\r\n    }\r\n\r\n    private static class PickorderUpdateWorkplaceParams {\r\n        String user;\r\n        String branch;\r\n        String ordernumber;\r\n        String workplace;\r\n\r\n        PickorderUpdateWorkplaceParams(String pvUserStr, String pvBranchStr, String pvOrdernumberStr, String pvWorkplaceStr) {\r\n            this.user = pvUserStr;\r\n            this.branch = pvBranchStr;\r\n            this.ordernumber = pvOrdernumberStr;\r\n            this.workplace = pvWorkplaceStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdatePickorderCurrentLocationLocalParams {\r\n        String orderNumberStr;\r\n        String currentLocationStr;\r\n\r\n        UpdatePickorderCurrentLocationLocalParams(String pvOrderNumberStr, String pvCurrentLocationStr) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.currentLocationStr = pvCurrentLocationStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdateSelectedLocalParams {\r\n        String orderNumberStr;\r\n        Boolean selectedBln;\r\n\r\n        UpdateSelectedLocalParams(String pvOrderNumberStr, Boolean pvSelectedBln) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.selectedBln = pvSelectedBln;\r\n        }\r\n    }\r\n\r\n    private static class CreateOrderLocalParams {\r\n        String documentStr;\r\n        Boolean  checkBarcodesBln;\r\n\r\n        CreateOrderLocalParams(String pvDocumentStr, Boolean checkBarcodesBln) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = checkBarcodesBln;\r\n        }\r\n    }\r\n\r\n\r\n    private static class PickorderLocalParams {\r\n        String userNameStr;\r\n        String branchStr;\r\n        Boolean inProgressBln;\r\n        int pickStep;\r\n        String searchTextStr;\r\n        String mainTypeStr;\r\n\r\n\r\n        PickorderLocalParams(String pvUserNameStr, String pvBranchStr, Boolean pvInProgressBln, int pvPickStepInt, String pvSearchTextStr, String pvMainTypeStr) {\r\n            this.userNameStr = pvUserNameStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.inProgressBln = pvInProgressBln;\r\n            this.pickStep = pvPickStepInt;\r\n            this.searchTextStr = pvSearchTextStr;\r\n            this.mainTypeStr = pvMainTypeStr;\r\n        }\r\n    }\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    cPickorderRepository(Application pvApplication) {\r\n        //Region Private Properties\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.pickorderDao = db.pickorderDao();\r\n        this.pickorderLineDao = db.pickorderLineDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public void insert (cPickorderEntity pickorderEntity) {\r\n        new mInsertAsyncTask(pickorderDao).execute(pickorderEntity);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(pickorderDao).execute();\r\n    }\r\n\r\n    public void pAbortOrder() {\r\n        new mAbortOrderAsyncTask(pickorderLineDao).execute();\r\n    }\r\n\r\n    public cWebresult pGetPickordersFromWebserviceWrs(Boolean pvInprogressBln, String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        String mainTypeStr = \"\";\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n\r\n\r\n        switch (cUser.currentUser.currentAuthorisation.getAutorisationEnu()){\r\n\r\n            case PICK:\r\n                break;\r\n\r\n            case PICK_PF:\r\n                mainTypeStr = \"Transfer\";\r\n                break;\r\n\r\n            case PICK_PV:\r\n                mainTypeStr = \"Sales\";\r\n                break;\r\n\r\n            default:\r\n                mainTypeStr = \"\";\r\n                break;\r\n        }\r\n\r\n        pickorderLocalParams = new PickorderLocalParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), pvInprogressBln, 0, pvSearchTextStr, mainTypeStr);\r\n\r\n        try {\r\n            webResultWrs = new mGetPickordersFromWebserviceAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPickorderstPickordersNextStepFromWebserviceWrs(String pvUsernameStr, cWarehouseorder.StepCodeEnu pvStepCodeEnu, String pvSearchTextStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n         int stepCodeInt= 0 ;\r\n\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Sorting) {\r\n            stepCodeInt = 20;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_QualityContol) {\r\n            stepCodeInt = 30;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_PackAndShip) {\r\n            stepCodeInt = 40;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Storage) {\r\n            stepCodeInt = 60;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Finish_Packing) {\r\n            stepCodeInt = 70;\r\n        }\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n        pickorderLocalParams = new PickorderLocalParams(pvUsernameStr, cUser.currentUser.currentBranch.getBranchStr(), false, stepCodeInt, pvSearchTextStr, \"\");\r\n\r\n        try {\r\n            webResultWrs = new mPickordersNextStepFromWebserviceGetAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderEntity> pGetPickordersFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cPickorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder(\"SELECT * FROM Pickorders \");\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n            if (cSharedPreferences.showSingleArticlesBln()) {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 1 \");\r\n            }\r\n            else\r\n            {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 0 \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 1 \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 0 \");\r\n            }\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (PickorderSelectActivity.currentModusEnu == PickorderSelectActivity.ModusEnu.COMBINE) {\r\n            if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                SQLStatementStr.append(\"WHERE SourceDocument <> '95' \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND SourceDocument <> '95' \");\r\n            }\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Ordernumber ASC\");\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new mGetPickordersFromDatabaseWithFilterAsyncTask(pickorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pPickHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickGeneratedHandledViaWebserviceBln(String pvShipBinStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvShipBinStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderGeneratedHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pStoreHandledViaWebserviceBln() {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), \"\", cWarehouseorder.StepCodeEnu.Pick_Storage.toString(), cWarehouseorder.WorkflowPickStepEnu.PickStorage, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pSortHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Sorting.toString(), cWarehouseorder.WorkflowPickStepEnu.PickSorting, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pQCHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_QualityContol.toString(), cWarehouseorder.WorkflowPickStepEnu.PickQualityControl, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pShipHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Pick_PackAndShip.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pFinishSinglePiecesHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Finish_Packing.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickFinishPacking,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentShippedViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentShippedAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentStoredViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentStoredAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public Boolean pPickorderUpdateWorkplaceViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderUpdateWorkplaceParams pickorderUpdateWorkplaceParams;\r\n        pickorderUpdateWorkplaceParams   = new PickorderUpdateWorkplaceParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), pvWorkplaceStr);\r\n\r\n        try {\r\n            webResult = new mPickorderUpdateWorkplaceViaWebserviceAsyncTask().execute(pickorderUpdateWorkplaceParams).get();\r\n            return webResult.getSuccessBln() && webResult.getResultBln();\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pUpdateCurrentLocationViaWebserviceWrs(String pvCurrentLocationStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mUpdateCurrentLocationViaWebserviceAsyncTask().execute(pvCurrentLocationStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public Boolean pPickorderUpdatCurrentLocationInDatabaseBln(String pvCurrentLocationStr) {\r\n\r\n        Integer integerValue;\r\n        UpdatePickorderCurrentLocationLocalParams updatePickorderCurrentLocationLocalParams = new UpdatePickorderCurrentLocationLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), pvCurrentLocationStr);\r\n        try {\r\n            integerValue = new mUpdatePickorderCurrentLocationInDatabaseAsyncTask(pickorderDao).execute(updatePickorderCurrentLocationLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public Boolean pPickorderUpdatIsSelectedInDatabaseBln() {\r\n\r\n        Integer integerValue;\r\n        UpdateSelectedLocalParams updateSelectedLocalParams = new UpdateSelectedLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), cPickorder.currentPickOrder.getIsSelectedBln());\r\n        try {\r\n            integerValue = new mUpdateIsSelectedInDatabaseAsyncTask(pickorderDao).execute(updateSelectedLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public cWebresult pCreatePickOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        CreateOrderLocalParams orderLocalParams = new CreateOrderLocalParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new cPickorderRepository.mCreatePickorderViaWebserviceAsyncTask().execute(orderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //Pick Lines\r\n    public cWebresult pGetLinesFromWebserviceWrs(cWarehouseorder.ActionTypeEnu pvActionTypeEnu) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetAllLinesFromDatabaseObl() {\r\n\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetAllLinesFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetPickorderLinesToSendFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetPickorderLinesToSendFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledForBranchFromDatabaseObl(String pvBranchStr) {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesForBranchAsyncTask(pickorderLineDao).execute(pvBranchStr).get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesBusyFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetBusyLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetHandledLinesOblAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    //Pick quantityDbl's\r\n    public Double pQuantityNotHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityNotHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pQuantityHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetTotalQuantityDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetTotalQuanitityAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (resultDbl== null) {\r\n            resultDbl = (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    //Pick Order details\r\n\r\n    public cWebresult pGetAddressesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderAdressesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetSettingsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderSettingsFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCompositeBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLineBarcodesFromWebservice(cWarehouseorder.ActionTypeEnu pvActionTypeEnu){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderLineBarcodesGetFromWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertysViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertysViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertyValuesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPackagesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderPackagesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Pack and Ship\r\n\r\n\r\n\r\n    public cWebresult pGetPackAndShipLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPackAndShipLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetFinishPackSinglePieceLinesViaWebserviceWrsWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Storage\r\n    public cWebresult pGetStorageLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetStorageLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n    //End Storage\r\n\r\n    public cWebresult pCreateCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mCreateCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddOrderToCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mAddOrderToCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveOrderFromCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveOrderFromCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAsyncTask extends AsyncTask<cPickorderEntity, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cPickorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromWebserviceAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_INPROGRESS;\r\n            l_PropertyInfo3Pin.setValue(params[0].inProgressBln);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr.toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickordersNextStepFromWebserviceGetAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKSTEP;\r\n            l_PropertyInfo3Pin.setValue(params[0].pickStep);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSSEQUELSTEP, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cPickorderEntity>> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n\r\n        mGetPickordersFromDatabaseWithFilterAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredPickorders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mPickorderStepHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LANGUAGEASCULTURE;\r\n                l_PropertyInfo2Pin.setValue(params[0].languageStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo5Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo6Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo7Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPINT;\r\n                l_PropertyInfo8Pin.setValue(params[0].workflowStepInt);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSTEPHANDLED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderGeneratedHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPBINSTR;\r\n                l_PropertyInfo8Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERHANDLEDGENERATED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentShippedAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cShipment.currentShipment.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo5Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGAGENT;\r\n                l_PropertyInfo6Pin.setValue(cShipment.currentShipment.shippingAgent().getShippingAgentStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGSERVICE;\r\n                l_PropertyInfo7Pin.setValue(cShipment.currentShipment.shippingAgentService().getServiceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGOPTIONS;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                SoapObject shippingpackages = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES);\r\n\r\n                int sequencenumberInt = 0;\r\n                String packageTypeToRememberStr = \"\";\r\n                int counterForTypeInt = 0;\r\n\r\n                for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit : cShipment.currentShipment.shippingAgentService().shippingUnitsObl()) {\r\n\r\n                    //If we didn't use this, continue\r\n                    if (shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt() <= 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    //New packageype, so reset sequenceNumber\r\n                    if (!packageTypeToRememberStr.equalsIgnoreCase(shippingAgentServiceShippingUnit.getShippingUnitStr())) {\r\n                        packageTypeToRememberStr = shippingAgentServiceShippingUnit.getShippingUnitStr();\r\n                        sequencenumberInt = 0;\r\n                        counterForTypeInt = 0;\r\n                    }\r\n\r\n                    while (counterForTypeInt < shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt()) {\r\n                        counterForTypeInt += 1;\r\n                        sequencenumberInt += 10;\r\n\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_PACKAGE, packageTypeToRememberStr);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_SEQUENCENUMBER, sequencenumberInt);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_WEIGHTING, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_ITEMCOUNT, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINERTYPE, \"\");\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINER, \"\");\r\n                        shippingpackages.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES;\r\n                l_PropertyInfo9Pin.setValue(shippingpackages);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSHIPPED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentStoredAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cStorement.currentStorement.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_STORAGEBINCODE;\r\n                l_PropertyInfo5Pin.setValue(cStorement.currentStorement.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSTORED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderUpdateWorkplaceViaWebserviceAsyncTask extends AsyncTask<PickorderUpdateWorkplaceParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderUpdateWorkplaceParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].user);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branch);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].ordernumber);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo4Pin.setValue(params[0].workplace);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERUPDATEWORKPLACE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mUpdatePickorderCurrentLocationInDatabaseAsyncTask extends AsyncTask<UpdatePickorderCurrentLocationLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdatePickorderCurrentLocationInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdatePickorderCurrentLocationLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderCurrentLocation(params[0].orderNumberStr, params[0].currentLocationStr);\r\n        }\r\n    }\r\n\r\n    private static class mUpdateIsSelectedInDatabaseAsyncTask extends AsyncTask<UpdateSelectedLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdateIsSelectedInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdateSelectedLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderIsSelected(params[0].orderNumberStr, params[0].selectedBln);\r\n        }\r\n    }\r\n\r\n    private static class mAbortOrderAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mAbortOrderAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Void doInBackground(Void... params) {\r\n            mAsyncTaskDao.abortOrder();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n                l_PropertyInfo3Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPackAndShipLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESPACKANDSHIP, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetStorageLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESSTORAGE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESFINISHSINGLEPIECE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreateCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_CREATEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mAddOrderToCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOADD;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADDORDERTOMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveOrderFromCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOREMOVE;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEORDERFROMMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetAllLinesFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetAllLinesFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getAll();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderLinesToSendFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetPickorderLinesToSendFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getPickorderLineEntitiesToSend();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesForBranchAsyncTask extends AsyncTask<String, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesForBranchAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final String... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineForBranchEntitiesLin(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mGetBusyLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetBusyLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getBusyPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetHandledLinesOblAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetHandledLinesOblAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getHandledPickorderLineEntities();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityNotHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityNotHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getQuantityNotHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getNumberHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetTotalQuanitityAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetTotalQuanitityAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getTotalQuantityDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderAdressesFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERADDRESSES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderSettingsFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SETTINGTYPE;\r\n            l_PropertyInfo4Pin.setValue(\"Pick_PackAndShip\");\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTSETTINGSGET, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderPackagesFromWebserviceTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult =  cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSHIPPACKAGES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString().toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSEORDERCOMPOSITEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderLineBarcodesGetFromWebserviceAsyncTask extends AsyncTask <String, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n            l_PropertyInfo3Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mUpdateCurrentLocationViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_CURRENTLOCATION;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_UPDATECURRENTORDERLOCATION, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreatePickorderViaWebserviceAsyncTask extends AsyncTask<CreateOrderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(CreateOrderLocalParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.PF.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(date 1617285222079)
---+@@ -2176,6 +2176,8 @@
---+         }
---+     }
---+ 
---++
---++
---+     //End Region Private Methods
---+ 
---+ }
---+Index: .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch
---+===================================================================
---+--- .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+@@ -1,17 +0,0 @@
---+-Index: app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java
---+-IDEA additional info:
---+-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+-<+>package SSU_WHS.Basics.Branches;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwner;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.BranchReason.cBranchReason;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceViewModel;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\n\r\npublic class cBranch {\r\n\r\n    //Region Public Properties\r\n    private String branchStr;\r\n    public String getBranchStr() {\r\n        return branchStr;\r\n    }\r\n\r\n    private String branchTypeStr;\r\n    public String getBranchTypeStr() {\r\n        return branchTypeStr;\r\n    }\r\n\r\n    private String branchNameStr;\r\n    public String getBranchNameStr() {\r\n        return branchNameStr;\r\n    }\r\n\r\n    private boolean binMandatoryBln;\r\n    public  boolean isBinMandatoryBln() {return  binMandatoryBln;}\r\n\r\n    private String returnDefaultBinStr;\r\n    public String getReturnDefaultBinStr(){\r\n        return   returnDefaultBinStr;\r\n    }\r\n\r\n    private String receiveDefaultBinStr;\r\n    public String getReceiveDefaultBinStr(){\r\n        return   receiveDefaultBinStr;\r\n    }\r\n\r\n    private String pickDefaultStorageBinStr;\r\n    public String getPickDefaultStorageBinStr(){\r\n        return pickDefaultStorageBinStr;\r\n    }\r\n\r\n    private String moveDefaultBinStr;\r\n    public String getMoveDefaultBinStr(){\r\n        return   moveDefaultBinStr;\r\n    }\r\n\r\n    private cBranchEntity branchEntity;\r\n\r\n    public ArrayList<cWorkplace>  workplacesObl() {\r\n        return  cWorkplace.allWorkplacesObl;\r\n\r\n    }\r\n    public ArrayList<cBranchBin>  binsObl;\r\n    public ArrayList<cBranchReason>  returnReasonObl;\r\n    public ArrayList<cStockOwner> stockOwnerObl;\r\n\r\n    private cBranchViewModel getBranchViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n    }\r\n\r\n\r\n    public static List<cBranch> allBranchesObl;\r\n    public  List<cBranchBin> receiveBinsObl;\r\n    public  List<cBranchBin> shipBinsObl;\r\n\r\n    public  static  boolean BranchesAvailableBln;\r\n\r\n       public enum brachTypeEnum {\r\n        INTRANSIT,\r\n        STORE,\r\n        UNKNOWN,\r\n        WAREHOUSE\r\n    }\r\n    //end region Public Propties\r\n\r\n    //Region Constructor\r\n    public cBranch(JSONObject pvJsonObject) {\r\n        this.branchEntity = new cBranchEntity(pvJsonObject);\r\n        this.branchStr = branchEntity.getBranchStr();\r\n        this.branchTypeStr = branchEntity.getBranchtypeStr();\r\n        this.branchNameStr = branchEntity.getBranchnameStr();\r\n        this.returnDefaultBinStr = branchEntity.getReturndefaultbinStr();\r\n        this.receiveDefaultBinStr = branchEntity.getReceivedefaultbinStr();\r\n        this.moveDefaultBinStr = branchEntity.getMovedefaultbinStr();\r\n        this.pickDefaultStorageBinStr = branchEntity.getPickDefaultStorageBinStr();\r\n        this.binMandatoryBln = cText.pStringToBooleanBln(branchEntity.getBinmandatoryStr(),false) ;\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public static boolean pGetBranchesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cBranch.allBranchesObl = null;\r\n            cBranch.pTruncateTableBln();\r\n        }\r\n\r\n        if (cBranch.allBranchesObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        cBranchViewModel branchViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n        WebResult =  branchViewModel.pGetBranchesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranch branch = new cBranch(jsonObject);\r\n                branch.pInsertInDatabaseBln();\r\n            }\r\n\r\n            cBranch.BranchesAvailableBln = true;\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean pGetReceiveBinsViaWebserviceBln() {\r\n\r\n        if (this.receiveBinsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetReceiveBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            this.receiveBinsObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                this.receiveBinsObl.add(branchBin);\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pGetShipBinsViaWebserviceBln() {\r\n\r\n        if (this.shipBinsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetShipBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            this.shipBinsObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                this.shipBinsObl.add(branchBin);\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getBranchViewModel().insert(this.branchEntity);\r\n\r\n        if (cBranch.allBranchesObl == null){\r\n            cBranch.allBranchesObl = new ArrayList<>();\r\n        }\r\n        cBranch.allBranchesObl .add(this);\r\n\r\n        return true;\r\n    }\r\n\r\n    public static cBranch pGetBranchByCode(String pvBranchStr){\r\n        if(cBranch.allBranchesObl == null || cBranch.allBranchesObl.size() == 0){\r\n            return null;\r\n        }\r\n\r\n        for (cBranch branch :  cBranch.allBranchesObl )\r\n        {\r\n            if(branch.branchStr.equalsIgnoreCase(pvBranchStr)){\r\n                return  branch;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static cBranch pGetUserBranchByCode(String pvBranchStr){\r\n        if(cUser.currentUser == null || cUser.currentUser.branchesObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cBranch branch :  cUser.currentUser.branchesObl)\r\n        {\r\n            if(branch.branchStr.equalsIgnoreCase(pvBranchStr)){\r\n                return  branch;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public cBranchBin pGetBinByCode(String pvBinCodeStr){\r\n\r\n        //Search for the BIN in the cache\r\n        if (this.binsObl != null && this.binsObl.size() > 0 ) {\r\n            for (cBranchBin branchBin : this.binsObl) {\r\n                if (branchBin.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr)) {\r\n                    return  branchBin;\r\n                }\r\n            }\r\n        }\r\n\r\n        return   this.mGetBinViaWebservice(pvBinCodeStr);\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cBranchViewModel branchViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n        branchViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public boolean pGetWorkplacesBln(boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cWorkplace.allWorkplacesObl = null;\r\n        }\r\n\r\n        if (this.workplacesObl() != null){\r\n            return  true;\r\n        }\r\n\r\n        cWorkplace.pTruncateTableBln();\r\n        cWorkplace.allWorkplacesObl = null;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cWorkplaceViewModel  workplaceViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cWorkplaceViewModel.class);\r\n        WebResult =  workplaceViewModel.pGetWorkplacesFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n            if( cWorkplace.allWorkplacesObl == null) {\r\n                cWorkplace.allWorkplacesObl =  new ArrayList<>();\r\n            }\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cWorkplace workplace = new cWorkplace(jsonObject);\r\n                workplace.pInsertInDatabaseBln();\r\n            }\r\n\r\n            return  true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean pGetReasonBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln){\r\n            this.returnReasonObl = null;\r\n            this.returnReasonObl = new ArrayList<>();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetReasonFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            if (this.returnReasonObl == null){\r\n                this.returnReasonObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cBranchReason branchReason = new cBranchReason(jsonObject);\r\n                if(branchReason.isReturn()) {\r\n                    this.returnReasonObl.add(branchReason);\r\n                }\r\n            }\r\n            return  true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n    public boolean pGetAuthorizedStockOwnerBln(Boolean pvRefreshBln) {\r\n        if (pvRefreshBln){\r\n            this.stockOwnerObl = null;\r\n            this.stockOwnerObl = new ArrayList<>();\r\n        }\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetAuthorizedStockOwnerFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            if (this.stockOwnerObl == null){\r\n                this.stockOwnerObl = new ArrayList<>();\r\n            }\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cAuthorizedStockOwner authorizedStockOwner = new cAuthorizedStockOwner(jsonObject);\r\n                cStockOwner stockOwner = cStockOwner.pGetStockOwnerByCodeStr(authorizedStockOwner.getStockownerStr());\r\n                    this.stockOwnerObl.add(stockOwner);\r\n                    \r\n            }\r\n            return  true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static cBranch pGetBranchByDescriptionStr(String pvScannedBranchStr){\r\n\r\n        if (cBranch.allBranchesObl == null || cBranch.allBranchesObl.size() == 0 ) {\r\n            return  null;\r\n        }\r\n\r\n        for (cBranch branch : cBranch.allBranchesObl) {\r\n\r\n            if (branch.getBranchNameStr().equalsIgnoreCase(pvScannedBranchStr)) {\r\n                return branch;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cBranchReason pGetReasonByName(String pvReasonStr){\r\n        if(cUser.currentUser.currentBranch.returnReasonObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cBranchReason branchReason : cUser.currentUser.currentBranch.returnReasonObl)\r\n        {\r\n            if(branchReason.getReasonStr().equalsIgnoreCase(pvReasonStr)){\r\n                return  branchReason;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private cBranchBin mGetBinViaWebservice(String pvBinCodeStr) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetBinFromWebserviceWrs(pvBinCodeStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            if (WebResult.getResultDtt() != null && WebResult.getResultDtt().size() == 1) {\r\n                cBranchBin branchBin = new cBranchBin(WebResult.getResultDtt().get(0));\r\n                if (this.binsObl == null) {\r\n                    this.binsObl = new ArrayList<>();\r\n                }\r\n\r\n                this.binsObl.add(branchBin);\r\n                return  branchBin;\r\n            }\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSELOCATIONS);\r\n        }\r\n        return  null;\r\n    }\r\n    //End Region Private Methods\r\n}\r\n
---+-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+-<+>UTF-8
---+-===================================================================
---+---- app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java	(revision 1c0b4132251ab66a445d9938c4b6f21c38dbfcd0)
---+-+++ app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java	(date 1614154486419)
---+-@@ -83,6 +83,7 @@
---+-     public  List<cBranchBin> receiveBinsObl;
---+-     public  List<cBranchBin> shipBinsObl;
---+- 
---+-+    
---+-     public  static  boolean BranchesAvailableBln;
---+- 
---+-        public enum brachTypeEnum {
---+Index: .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml
---+===================================================================
---+--- .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---+@@ -1,4 +0,0 @@
---+-<changelist name="Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]" date="1615451853475" recycled="true" deleted="true">
---+-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch" />
---+-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11-3-2021 09:37 [Default Changelist]" />
---+-</changelist>
---+\ No newline at end of file
---+Index: app/src/main/AndroidManifest.xml
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"nl.icsvertex.scansuite\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n\r\n    <application\r\n        android:name=\"ICS.cAppExtension\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"false\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        android:largeHeap=\"true\">\r\n        <provider\r\n            android:name=\".cGenericFileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n        <activity\r\n            android:name=\".Activities.General.MainDefaultActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.MenuActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.General.LoginActivity\"\r\n\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".Activities.General.BarcodeInfoActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.LoginActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderPickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLineItemPropertyInputActvity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Pick.CreatePickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderLinesGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderPickGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSortActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n        <activity android:name=\".Activities.Sort.SortorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShipLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.QualityControl.QualityControlLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.QualityControl.PickorderQCActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.CreateInventoryActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryArticleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Receive.CreateReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.CreateIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMASLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveOrderReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Returns.ReturnorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.CreateReturnActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnArticleDetailActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Move.MoveorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.CreateMoveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesPlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveMISinglepieceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveorderLinesPlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Packaging.PackagingActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.CreatePackAndShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSingleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipMultiActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n\r\n        <meta-data\r\n            android:name=\"io.fabric.ApiKey\"\r\n            android:value=\"0a3a15057e61fb1e84d5024bd01b5657d9a4c76e\" />\r\n    </application>\r\n\r\n</manifest>
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/AndroidManifest.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/AndroidManifest.xml	(date 1617289926784)
---+@@ -248,6 +248,12 @@
---+             android:screenOrientation="portrait"
---+             android:windowSoftInputMode="adjustPan">
---+         </activity>
---++        <activity android:name=".Activities.Inventory.InventoryorderLineItemPropertyInputActvity"
---++            android:configChanges="keyboardHidden|orientation|screenSize"
---++            android:parentActivityName=".Activities.Inventory.InventoryArticleActivity"
---++            android:screenOrientation="portrait"
---++            android:windowSoftInputMode="adjustPan">
---++        </activity>
---+         <activity
---+             android:name=".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity"
---+             android:configChanges="keyboardHidden|orientation|screenSize"
---+@@ -533,9 +539,6 @@
---+                 android:name="android.support.PARENT_ACTIVITY"
---+                 android:value="nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity" />
---+         </activity>
---+-
---+-
---+-
---+         <meta-data
---+             android:name="io.fabric.ApiKey"
---+             android:value="0a3a15057e61fb1e84d5024bd01b5657d9a4c76e" />
---+Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java	(date 1617290613930)
---++++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java	(date 1617290613930)
---+@@ -0,0 +1,509 @@
---++package nl.icsvertex.scansuite.Activities.Inventory;
---++
---++
---++import android.content.BroadcastReceiver;
---++import android.content.Context;
---++import android.content.Intent;
---++import android.content.IntentFilter;
---++import android.os.Bundle;
---++import android.view.MenuItem;
---++import android.view.View;
---++import android.widget.ImageView;
---++import android.widget.TextView;
---++
---++import androidx.appcompat.app.ActionBar;
---++import androidx.appcompat.app.AppCompatActivity;
---++import androidx.appcompat.widget.AppCompatImageButton;
---++import androidx.appcompat.widget.Toolbar;
---++import androidx.localbroadcastmanager.content.LocalBroadcastManager;
---++import androidx.recyclerview.widget.LinearLayoutManager;
---++import androidx.recyclerview.widget.RecyclerView;
---++
---++import java.util.ArrayList;
---++import java.util.Collections;
---++import java.util.List;
---++
---++import ICS.Interfaces.iICSDefaultActivity;
---++import ICS.Utils.Scanning.cBarcodeScan;
---++import ICS.Utils.cConnection;
---++import ICS.Utils.cRegex;
---++import ICS.Utils.cResult;
---++import ICS.Utils.cText;
---++import ICS.Utils.cUserInterface;
---++import ICS.cAppExtension;
---++import SSU_WHS.General.cPublicDefinitions;
---++import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
---++import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
---++import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
---++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
---++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
---++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValueInputAdapter;
---++import nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;
---++import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
---++import nl.icsvertex.scansuite.R;
---++
---++public class InventoryorderLineItemPropertyInputActvity extends AppCompatActivity implements iICSDefaultActivity {
---++
---++   //Region Private Properties
---++   private  ImageView toolbarImage;
---++   private  TextView toolbarTitle;
---++
---++   private AppCompatImageButton imageButtonNoInputPropertys;
---++   private TextView articleDescriptionCompactText;
---++   private TextView articleDescription2CompactText;
---++   private TextView articleItemCompactText;
---++   private TextView articleBarcodeCompactText;
---++   private TextView quantityCompactText;
---++
---++    private  RecyclerView itemPropertyRecyclerview;
---++    private AppCompatImageButton imageButtonDone;
---++
---++    private  List<cInventoryorderLinePropertyValue> localItemPropertyValueObl (){
---++
---++        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
---++
---++        if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl() != null && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl() .size() > 0 ) {
---++            resultObl = cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl();
---++
---++            if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().get(0).getItemProperty().getUniqueBln()) {
---++                Collections.sort(resultObl);
---++                Collections.reverse(resultObl);
---++            }
---++
---++            return resultObl;
---++        }
---++
---++
---++        for (cInventoryorderLineProperty inputInventoryorderLineProperty : cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl()) {
---++            resultObl.add(new cInventoryorderLinePropertyValue(inputInventoryorderLineProperty));
---++        }
---++
---++        return resultObl;
---++
---++    }
---++
---++    public double getQuantityHandledDbl(){
---++
---++        double quantityDbl = 0;
---++
---++        if (this.localItemPropertyValueObl() == null || this.localItemPropertyValueObl().size() == 0) {
---++            return quantityDbl;
---++        }
---++
---++        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.localItemPropertyValueObl() ) {
---++            quantityDbl += inventoryorderLinePropertyValue.getQuantityDbl();
---++        }
---++
---++        return  quantityDbl;
---++
---++    }
---++
---++
---++
---++    private cInventoryorderLinePropertyValueInputAdapter inventoryorderLinePropertyValueInputAdapter;
---++    private cInventoryorderLinePropertyValueInputAdapter getInventoryorderLinePropertyValueInputAdapter (){
---++        if (this.inventoryorderLinePropertyValueInputAdapter == null) {
---++            this.inventoryorderLinePropertyValueInputAdapter = new cInventoryorderLinePropertyValueInputAdapter();
---++        }
---++
---++        return  inventoryorderLinePropertyValueInputAdapter;
---++    }
---++
---++    //End Region Private Properties
---++
---++
---++    //Region Constructor
---++    public InventoryorderLineItemPropertyInputActvity() {
---++
---++    }
---++
---++
---++    //End Region Constructor
---++
---++    //Region Default Methods
---++
---++    @Override
---++    protected void onCreate(Bundle pvSavedInstanceState) {
---++        super.onCreate(pvSavedInstanceState);
---++        setContentView(R.layout.activity_inventoryorderlineitemproperty_input);
---++        this.mActivityInitialize();
---++    }
---++
---++    @Override
---++    protected void onPostCreate(Bundle savedInstanceState) {
---++        super.onPostCreate(savedInstanceState);
---++
---++        //Set listeners here, so click listeners only work after activity is shown
---++        this.mSetListeners();
---++    }
---++
---++    @Override
---++    protected void onResume() {
---++        super.onResume();
---++        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));
---++        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());
---++        cConnection.pRegisterWifiChangedReceiver();
---++        cUserInterface.pEnableScanner();
---++    }
---++
---++    @Override
---++    protected void onPause() {
---++        try {
---++            LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);
---++            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());
---++            cConnection.pUnregisterWifiChangedReceiver();
---++        } catch (Exception e) {
---++            e.printStackTrace();
---++        }
---++        super.onPause();
---++    }
---++
---++    @Override
---++    protected void onDestroy() {
---++        super.onDestroy();
---++        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);
---++    }
---++
---++    @Override
---++    protected void onStop() {
---++        super.onStop();
---++        finish();
---++    }
---++
---++    @Override
---++    public boolean onOptionsItemSelected(MenuItem item) {
---++
---++        if (item.getItemId() == android.R.id.home) {
---++            this.mGoBackToArticleActivity(true);
---++            return true;
---++        }
---++
---++        return super.onOptionsItemSelected(item);
---++
---++    }
---++
---++    @Override
---++    public void onBackPressed() {
---++        mGoBackToArticleActivity(true);
---++    }
---++
---++    //End Region Default Methods
---++
---++    //Region iICSDefaultFragment methods
---++
---++    @Override
---++    public void mActivityInitialize() {
---++
---++        this.mSetAppExtensions();
---++
---++        this.mFindViews();
---++
---++        this.mSetToolbar(getResources().getString(R.string.screentitle_itemproperty_input));
---++
---++        this.mFieldsInitialize();
---++
---++        this.mInitScreen();
---++
---++        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());
---++    }
---++
---++    @Override
---++    public void mSetAppExtensions() {
---++        cAppExtension.context = this;
---++        cAppExtension.fragmentActivity  = this;
---++        cAppExtension.activity = this;
---++        cAppExtension.fragmentManager  = getSupportFragmentManager();
---++    }
---++
---++    @Override
---++    public void mFindViews() {
---++
---++            this.toolbarImage = findViewById(R.id.toolbarImage);
---++            this.toolbarTitle = findViewById(R.id.toolbarTitle);
---++
---++            this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);
---++            this.articleDescriptionCompactText = findViewById(R.id.articleDescriptionCompactText);
---++            this.articleDescription2CompactText = findViewById(R.id.articleDescription2CompactText);
---++            this.articleItemCompactText = findViewById(R.id.articleItemCompactText);
---++            this.articleBarcodeCompactText = findViewById(R.id.articleBarcodeCompactText);
---++            this.quantityCompactText = findViewById(R.id.quantityCompactText);
---++            this.itemPropertyRecyclerview = findViewById(R.id.itemPropertyRecyclerview);
---++            this.imageButtonDone = findViewById(R.id.imageButtonDone);
---++    }
---++
---++    @Override
---++    public void mSetToolbar(String pvScreenTitleStr) {
---++
---++        this.toolbarImage.setImageResource(R.drawable.ic_info);
---++        this.toolbarTitle.setText(pvScreenTitleStr);
---++        this.toolbarTitle.setSelected(true);
---++
---++        Toolbar toolbar = findViewById(R.id.toolbar);
---++        setSupportActionBar(toolbar);
---++        ActionBar actionBar = getSupportActionBar();
---++        if (actionBar != null) {
---++            actionBar.setDisplayHomeAsUpEnabled(true);
---++        }
---++    }
---++
---++    @Override
---++    public void mFieldsInitialize() {
---++        this.mSetItemPropertyValueRecycler();
---++        this.mSetArticleInfo();
---++        this.mSetQuantityText();
---++        this.mShowHideOKButton();
---++
---++
---++
---++    }
---++
---++    @Override
---++    public void mSetListeners() {
---++        this.mSetHeaderListener();
---++        this.mSetCloseListener();
---++    }
---++
---++    @Override
---++    public void mInitScreen() {
---++
---++    }
---++
---++    //End Regioni ICSDefaultFragment methods
---++
---++    //Region Public Methods
---++
---++    public void pHandleScan(cBarcodeScan pvBarcodeScan) {
---++
---++        if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().size() == 1) {
---++            cInventoryorderLineProperty.currentInventoryorderLineProperty = cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().get(0);
---++
---++            if (cInventoryorderLineProperty.currentInventoryorderLineProperty.getItemProperty()== null ) {
---++                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_unknown),"",true, true);
---++                return;
---++            }
---++
---++
---++            if (!cRegex.pCheckRegexBln( cInventoryorderLineProperty.currentInventoryorderLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {
---++                cUserInterface.pShowSnackbarMessage(this.itemPropertyRecyclerview,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);
---++                return;
---++            }
---++
---++
---++            //Check unique values if needed
---++            cResult hulpRst = cInventoryorderLineProperty.currentInventoryorderLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());
---++            if (!hulpRst.resultBln) {
---++                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),"",true, true);
---++                return;
---++            }
---++
---++            cInventoryorderLineProperty.currentInventoryorderLineProperty.pValueAdded(pvBarcodeScan.getBarcodeOriginalStr());
---++            cUserInterface.pShowSnackbarMessage(this.itemPropertyRecyclerview, pvBarcodeScan.getBarcodeOriginalStr() + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
---++            this.pTryToChangeCountedQuantity(true,false,1);
---++            this.pRefreshActivity();
---++        }
---++    }
---++
---++    public void pHandled() {
---++        InventoryArticleActivity.handledViaPropertysBln = true;
---++        this.mGoBackToArticleActivity(false);
---++    }
---++
---++    public void pRefreshActivity(){
---++        this.mSetItemPropertyValueRecycler();
---++        this.mSetQuantityText();
---++        this.mShowHideOKButton();
---++    }
---++
---++    public void pDeleteValueFromRecyler() {
---++        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.remove(cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue);
---++        cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = null;
---++    }
---++
---++    public void pShowNumericInputFragment() {
---++        mShowNumberPickerFragment();
---++    }
---++
---++    public void pShowTextInputFragment() {
---++        mShowTextInputFragment();
---++    }
---++
---++    //End Region Public Methods
---++
---++    //Region Private Methods
---++
---++    private void mSetCloseListener() {
---++        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {
---++            @Override
---++            public void onClick(View view) {
---++               pHandled();
---++            }
---++        });
---++    }
---++
---++    private void mSetHeaderListener() {
---++
---++        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {
---++            @Override
---++            public void onClick(View view) {
---++                mScrollToBottom();
---++            }
---++        });
---++
---++        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {
---++            @Override
---++            public boolean onLongClick(View view) {
---++                mScrollToTop();
---++                return true;
---++            }
---++        });
---++    }
---++
---++    private void mScrollToTop() {
---++        this.itemPropertyRecyclerview.smoothScrollToPosition(0);
---++    }
---++
---++    private void mScrollToBottom() {
---++        if (this.getInventoryorderLinePropertyValueInputAdapter()!= null) {
---++            if (this.getInventoryorderLinePropertyValueInputAdapter().getItemCount() > 0) {
---++                this.itemPropertyRecyclerview.smoothScrollToPosition(this.getInventoryorderLinePropertyValueInputAdapter().getItemCount() -1 );
---++            }
---++        }
---++    }
---++
---++    private void mSetItemPropertyValueRecycler() {
---++        this.itemPropertyRecyclerview.setHasFixedSize(false);
---++        this.itemPropertyRecyclerview.setAdapter(this.getInventoryorderLinePropertyValueInputAdapter());
---++        this.itemPropertyRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));
---++        this.getInventoryorderLinePropertyValueInputAdapter().pFillData(this.localItemPropertyValueObl());
---++    }
---++
---++    private void mSetArticleInfo(){
---++        this.articleDescriptionCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());
---++        this.articleDescription2CompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());
---++        this.articleItemCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());
---++        this.articleBarcodeCompactText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeAndQuantityStr());
---++        this.imageButtonNoInputPropertys.setVisibility(View.GONE);
---++
---++    }
---++
---++    private  void mSetQuantityText() {
---++        this.quantityCompactText.setText( cText.pDoubleToStringStr(this.getQuantityHandledDbl()));
---++    }
---++
---++    private  void mShowHideOKButton() {
---++
---++        if (this.getQuantityHandledDbl() == 0) {
---++            this.imageButtonDone.setVisibility(View.INVISIBLE);
---++            return;
---++        }
---++
---++        this.imageButtonDone.setVisibility(View.VISIBLE);
---++
---++    }
---++
---++
---++    public   void pTryToChangeCountedQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {
---++
---++        if (pvIsPositiveBln) {
---++
---++            //Determine the new amount
---++            if (pvAmountFixedBln) {
---++
---++                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),
---++                        cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );
---++
---++                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;
---++                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;
---++            } else {
---++                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;
---++                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;
---++            }
---++
---++            return;
---++        }
---++
---++        //negative
---++
---++        //Check if value already is zero
---++        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {
---++
---++            //If we have a decimal, correct it to zero
---++            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {
---++                pvAmountDbl = 0;
---++                pvAmountFixedBln = true;
---++
---++            } else {
---++                cUserInterface.pDoNope(this.quantityCompactText, true, true);
---++                return;
---++            }
---++        }
---++
---++        if (pvAmountDbl < 0) {
---++            cUserInterface.pDoNope(this.quantityCompactText, true, true);
---++            return;
---++        }
---++
---++        //Determine the new amount
---++        if (pvAmountFixedBln) {
---++            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;
---++            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;
---++        }else {
---++            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;
---++            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;
---++        }
---++
---++    }
---++
---++    private void mShowNumberPickerFragment() {
---++
---++        cUserInterface.pCheckAndCloseOpenDialogs();
---++
---++        Bundle bundle = new Bundle();
---++        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, (int) cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.getQuantityDbl());
---++
---++
---++
---++        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, 99999);
---++        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();
---++        numberpickerFragment.setArguments(bundle);
---++        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERFRAGMENT_TAG);
---++    }
---++
---++    private void mShowTextInputFragment() {
---++        cUserInterface.pCheckAndCloseOpenDialogs();
---++        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment();
---++        itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);
---++    }
---++
---++    private  void mGoBackToArticleActivity(Boolean pvCancelledBln) {
---++
---++        Intent intent = new Intent(cAppExtension.context, InventoryArticleActivity.class);
---++        InventoryArticleActivity.cancelledViaPropertysBln = pvCancelledBln;
---++        cAppExtension.activity.startActivity(intent);
---++        cAppExtension.activity.finish();
---++    }
---++
---++    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {
---++        @Override
---++        public void onReceive(Context context, Intent intent) {
---++            int numberChosenInt = 0;
---++            Bundle extras = intent.getExtras();
---++
---++            if (extras != null) {
---++                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);
---++            }
---++            mHandleQuantityChosen(numberChosenInt);
---++        }
---++    };
---++
---++    private void mHandleQuantityChosen(double pvQuantityDbl) {
---++        this.pTryToChangeCountedQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);
---++        this.pRefreshActivity();
---++    }
---++
---++
---++
---++
---++
---++    //End Region Private Methods
---++}
---+Index: app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617287800334)
---++++ app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617287800334)
---+@@ -0,0 +1,34 @@
---++<?xml version="1.0" encoding="utf-8"?>
---++<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
---++    xmlns:app="http://schemas.android.com/apk/res-auto"
---++    xmlns:tools="http://schemas.android.com/tools"
---++    android:id="@+id/inventoryorderlineItemPropertyInputContainer"
---++    tools:context=".Activities.Inventory.InventoryorderLineItemPropertyInputActvity"
---++    style="@style/defaultScreen"
---++    android:background="@color/colorBart">
---++    <include layout="@layout/toolbar_default" />
---++    <include layout="@layout/default_articleinfo_compact"
---++        android:layout_width="match_parent"
---++        android:layout_height="0dp"
---++        android:layout_margin="@dimen/default_margin"
---++        app:layout_constraintTop_toBottomOf="@id/toolbar"
---++        />
---++    <androidx.recyclerview.widget.RecyclerView
---++        android:id="@+id/itemPropertyRecyclerview"
---++        android:layout_width="match_parent"
---++        android:layout_height="0dp"
---++        android:layout_margin="@dimen/default_margin"
---++        android:scrollbars="vertical"
---++        app:layout_constraintTop_toBottomOf="@id/articleInfoCompactContainer"
---++        app:layout_constraintEnd_toEndOf="parent"
---++        app:layout_constraintStart_toStartOf="parent"
---++        app:layout_constraintBottom_toTopOf="@id/imageButtonDone"
---++        />
---++    <androidx.appcompat.widget.AppCompatImageButton
---++        android:id="@+id/imageButtonDone"
---++        style="@style/smallButton"
---++        app:srcCompat="@drawable/ic_check_black_24dp"
---++        app:layout_constraintEnd_toEndOf="parent"
---++        app:layout_constraintBottom_toBottomOf="parent"
---++        />
---++</androidx.constraintlayout.widget.ConstraintLayout>
---+\ No newline at end of file
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDateAndTime;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cInventoryorderRepository {\r\n    //Region Public Properties\r\n    private final iInventoryorderDao inventoryorderDao;\r\n    private final iInventoryorderBinDao inventoryorderBinDao;\r\n\r\n    private static class InventoryCreateParams {\r\n        String documentStr;\r\n        boolean checkBarcodesBln;\r\n\r\n        InventoryCreateParams(String pvDocumentStr, boolean pvCheckBarcodesBln ) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = pvCheckBarcodesBln;\r\n        }\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    cInventoryorderRepository(Application pvApplication) {\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.inventoryorderDao = db.inventoryorderDao();\r\n        this.inventoryorderBinDao = db.inventoryorderBinDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Order\r\n\r\n    public void insert (cInventoryorderEntity inventoryorderEntity) {\r\n        new mInsertAsyncTask(inventoryorderDao).execute(inventoryorderEntity);\r\n    }\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryOrderEntities) {\r\n        new mInsertAllAsyncTask(inventoryorderDao).execute(pvInventoryOrderEntities);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(inventoryorderDao).execute();\r\n    }\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        InventoryCreateParams inventoryCreateParams = new InventoryCreateParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        try {\r\n            webResultWrs = new mCreateInventoryOrderViaWebserviceAsyncTask().execute(inventoryCreateParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetInventoryordersFromWebserviceAsyncTask().execute(pvSearchTextStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cInventoryorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder( \"SELECT * FROM \" + cDatabase.TABLENAME_INVENTORYORDER);\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) \");\r\n            }\r\n        }\r\n\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Opdrachtnummer ASC\");\r\n\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new cInventoryorderRepository.mGetInventoriesFromDatabaseWithFilterAsyncTask(inventoryorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pHandledViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderHandledViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Lines\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderAddLineViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region BINS\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPossibleBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinAddViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinCloseViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinNotDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinTotalFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new pGetInventoryorderBinTotalFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    //Region Items\r\n\r\n    public cWebresult pAddUnkownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderUnknownItemAddViaWebserviceAsyncTask().execute(pvBarcodeScan).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderERPItemAddViaWebserviceAsyncTask().execute(pvArticleBarcode).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Line Barcodes\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLineBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Barcodes\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Comments\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Endregion Public Methods\r\n\r\n    //Region Orders\r\n    private static class mInsertAsyncTask extends AsyncTask<cInventoryorderEntity, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cInventoryorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAllAsyncTask extends AsyncTask<List<cInventoryorderEntity>, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @SafeVarargs\r\n        @Override\r\n        protected final Void doInBackground(final List<cInventoryorderEntity>... params) {\r\n            mAsyncTaskDao.insertAll(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mCreateInventoryOrderViaWebserviceAsyncTask extends AsyncTask<InventoryCreateParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(InventoryCreateParams... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.IVS.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_INVENTORYBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                new cWebresult();\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryordersFromWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            try {\r\n                new cWebresult();\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoriesFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cInventoryorderEntity>> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mGetInventoriesFromDatabaseWithFilterAsyncTask(iInventoryorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cInventoryorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredInventoryOrders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderHandledViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(cWarehouseorder.WorkflowInventoryStepEnu.InventoryHandled);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYHANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Lines\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetLineBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderAddLineViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo6Pin.setValue(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo7Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo8Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region BINS\r\n    private static class mGetBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPossibleBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERPOSSIBLEBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinNotDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinNotDone();\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinDone();\r\n        }\r\n    }\r\n\r\n    private static class pGetInventoryorderBinTotalFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        pGetInventoryorderBinTotalFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinTotal();\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinAddViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODE;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADD_BIN, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinCloseViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo4Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo5Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBINCLOSE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Items\r\n    private static class mInventoryorderUnknownItemAddViaWebserviceAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cBarcodeScan... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(\"UNKNOWN\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorder.currentInventoryOrder.getUnknownVariantCounterInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeOriginalStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(cText.pStringToIntegerInt(params[0].getBarcodeTypeStr()));\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(false);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(1);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(\"???\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderERPItemAddViaWebserviceAsyncTask extends AsyncTask<cArticleBarcode, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cArticleBarcode... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cArticle.currentArticle.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cArticle.currentArticle.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(params[0].getBarcodeTypeInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(params[0].isUniqueBarcodeBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].getQuantityPerUnitOfMeasureDbl());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(params[0].getUnitOfMeasureStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Barcodes\r\n    private static class mGetBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Comments\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(date 1617285222001)
---+@@ -29,6 +29,8 @@
---+ import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
---+ import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;
---+ import SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;
---++import SSU_WHS.Picken.Pickorders.cPickorder;
---++import SSU_WHS.Picken.Pickorders.cPickorderRepository;
---+ import SSU_WHS.Webservice.cWebresult;
---+ import SSU_WHS.Webservice.cWebserviceDefinitions;
---+ import nl.icsvertex.scansuite.R;
---+@@ -439,6 +441,41 @@
---+         return webResultWrs;
---+     }
---+ 
---++    //Region Propertys
---++    public cWebresult pGetLinePropertysViaWebserviceWrs() {
---++
---++        List<String> resultObl = new ArrayList<>();
---++        cWebresult webResultWrs = new cWebresult();
---++
---++        try {
---++            webResultWrs = new cInventoryorderRepository.mGetPropertysViaWebserviceAsyncTask().execute().get();
---++        } catch (ExecutionException | InterruptedException e) {
---++            webResultWrs.setResultBln(false);
---++            webResultWrs.setSuccessBln(false);
---++            resultObl.add(e.getLocalizedMessage());
---++            webResultWrs.setResultObl(resultObl);
---++            e.printStackTrace();
---++        }
---++        return webResultWrs;
---++    }
---++
---++    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {
---++
---++        List<String> resultObl = new ArrayList<>();
---++        cWebresult webResultWrs = new cWebresult();
---++
---++        try {
---++            webResultWrs = new cInventoryorderRepository.mGetPropertyValuesViaWebserviceAsyncTask().execute().get();
---++        } catch (ExecutionException | InterruptedException e) {
---++            webResultWrs.setResultBln(false);
---++            webResultWrs.setSuccessBln(false);
---++            resultObl.add(e.getLocalizedMessage());
---++            webResultWrs.setResultObl(resultObl);
---++            e.printStackTrace();
---++        }
---++        return webResultWrs;
---++    }
---++
---+     //Endregion Public Methods
---+ 
---+     //Region Orders
---+@@ -1142,4 +1179,68 @@
---+         }
---+     }
---+ 
---++    //Region Properties
---++    //Region Propertys
---++    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
---++        @Override
---++        protected cWebresult doInBackground(String... params) {
---++            cWebresult webresult = new cWebresult();
---++            try {
---++                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
---++
---++                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
---++                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
---++                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
---++                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
---++
---++                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
---++                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
---++                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
---++                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
---++
---++                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
---++                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
---++                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
---++                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
---++
---++                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);
---++            } catch (JSONException e) {
---++                webresult.setSuccessBln(false);
---++                webresult.setResultBln(false);
---++            }
---++            return webresult;
---++        }
---++    }
---++
---++    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
---++        @Override
---++        protected cWebresult doInBackground(String... params) {
---++            cWebresult webresult = new cWebresult();
---++            try {
---++                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
---++
---++                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
---++                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
---++                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
---++                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
---++
---++                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
---++                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
---++                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
---++                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
---++
---++                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
---++                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
---++                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
---++                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
---++
---++                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);
---++            } catch (JSONException e) {
---++                webresult.setSuccessBln(false);
---++                webresult.setResultBln(false);
---++            }
---++            return webresult;
---++        }
---++    }
---++
---+ }
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class cInventoryorder {\r\n\r\n    private final String orderNumberStr;\r\n    public String getOrderNumberStr() {\r\n        return orderNumberStr;\r\n    }\r\n\r\n    private final String orderTypeStr;\r\n    public String getOrderTypeStr() {\r\n        return orderTypeStr;\r\n    }\r\n\r\n    private final int numberOfBinsInt;\r\n    public int getNumberOfBinsInt() {\r\n        return numberOfBinsInt;\r\n    }\r\n\r\n    private final String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {\r\n        return assignedUserIdStr;\r\n    }\r\n\r\n    private final String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {\r\n        return currentUserIdStr;\r\n    }\r\n\r\n    private String stockownerStr;\r\n    public String getStockownerStr() {\r\n        return stockownerStr;\r\n    }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() {\r\n        return statusInt;\r\n    }\r\n\r\n    private final boolean invAmountManualBln;\r\n    public boolean isInvAmountManualBln() {\r\n        return invAmountManualBln;\r\n    }\r\n\r\n    private final boolean invBarcodeCheckBln;\r\n    public boolean isInvBarcodeCheckBln() {\r\n        return invBarcodeCheckBln;\r\n    }\r\n\r\n    private final boolean invAddExtraBinBln;\r\n    public boolean isInvAddExtraBinBln() {\r\n        return invAddExtraBinBln;\r\n    }\r\n\r\n    private final String externalReferenceStr;\r\n    public String getExternalReferenceStr() {\r\n        return externalReferenceStr;\r\n    }\r\n\r\n    private final int sourceDocumentInt;\r\n    private int getSourceDocumentInt() { return sourceDocumentInt; }\r\n\r\n    private final String documentStr;\r\n    public String getDocumentStr() {\r\n        return documentStr;\r\n    }\r\n\r\n    private final boolean inventoryWithPictureBln;\r\n    public boolean isInventoryWithPictureBln() {\r\n        return inventoryWithPictureBln;\r\n    }\r\n\r\n    private final boolean inventoryWithPicturePrefetchBln;\r\n    private boolean isInventoryWithPicturePrefetchBln() {\r\n        return inventoryWithPicturePrefetchBln;\r\n    }\r\n\r\n    public Boolean isGeneratedBln() {\r\n        return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n    }\r\n\r\n    public int unknownVariantCounterInt = 0;\r\n    public int getUnknownVariantCounterInt() {\r\n        return unknownVariantCounterInt;\r\n    }\r\n\r\n    private final cInventoryorderEntity inventoryorderEntity;\r\n\r\n    private cInventoryorderViewModel getInventoryorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n    }\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    public List<cComment> commentsObl() {\r\n        return cComment.allCommentsObl;\r\n    }\r\n    public List<cInventoryorderBarcode> barcodesObl () {return  cInventoryorderBarcode.allInventoryorderBarcodesObl;}\r\n    private List<cInventoryorderLine> linesObl() {return  cInventoryorderLine.allLinesObl;}\r\n    private List<cArticleImage> imagesObl()  {\r\n        return  cArticleImage.allImages;\r\n    }\r\n\r\n    private static List<cInventoryorder> allCachedOrdersObl;\r\n    public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){\r\n\r\n        if (pvRefreshBln) {\r\n             cInventoryorder.allCachedOrdersObl = null;\r\n        }\r\n\r\n        if (cInventoryorder.allCachedOrdersObl != null) {\r\n            return  cInventoryorder.allCachedOrdersObl;\r\n        }\r\n\r\n        cInventoryorder.allCachedOrdersObl  = new ArrayList<>();\r\n\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        List<cInventoryorderEntity> hulpObl  =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), false);\r\n\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpObl) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            cInventoryorder.allCachedOrdersObl.add(inventoryorder);\r\n        }\r\n\r\n        return  cInventoryorder.allCachedOrdersObl;\r\n\r\n\r\n    }\r\n\r\n    private static List<String> binsObl;\r\n\r\n    public static cInventoryorder currentInventoryOrder;\r\n\r\n    //Region Public Properties\r\n\r\n    //Region Constructor\r\n\r\n    public cInventoryorder(JSONObject pvJsonObject) {\r\n\r\n        this.inventoryorderEntity = new cInventoryorderEntity(pvJsonObject);\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr()) ;\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n    }\r\n\r\n    public cInventoryorder(cInventoryorderEntity pvInventoryorderEntity) {\r\n\r\n        this.inventoryorderEntity = pvInventoryorderEntity;\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt =  cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr());\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Orders\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderViewModel().insert(this.inventoryorderEntity);\r\n        return true;\r\n    }\r\n\r\n    public static Boolean pCreateInventoryOrderViaWebserviceBln(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        cWebresult WebResult;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(WebResult.getResultDtt().get(0));\r\n                inventoryorder.pInsertInDatabaseBln();\r\n                cInventoryorder.currentInventoryOrder = inventoryorder;\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS);\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static boolean pGetInventoryOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorder.mTruncateTable();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            List<cInventoryorderEntity> insertObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(jsonObject);\r\n                insertObl.add(inventoryorder.inventoryorderEntity);\r\n            }\r\n\r\n            //Batch insert in database\r\n            cInventoryorder.mInsertAllInDatabase(insertObl);\r\n\r\n            //Make sure memory is filled\r\n            cInventoryorder.allInventoryOrdersObl(true);\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS);\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n            ignoreBusyBln = true;\r\n        }\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(),\r\n                this.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvStepCodeEnu.toString(),\r\n                pvWorkFlowStepInt,\r\n                ignoreBusyBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() > 0 && ! Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getUsernameStr())) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln()&& Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        cWebresult Webresult;\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvStepCodeEnu.toString(), pvWorkFlowStepInt);\r\n\r\n        return Webresult.getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n    public void pDeleteDetails() {\r\n        cInventoryorderLine.pTruncateTableBln();\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorderBarcode.pTruncateTableBln();\r\n        cInventoryorderLineBarcode.pTruncateTableBln();\r\n    }\r\n\r\n    public cResult pOrderHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n\r\n        cWebresult webresult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        webresult =  inventoryorderViewModel.pHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n\r\n    }\r\n\r\n    public static List<cInventoryorder> pGetInventoriesWithFilterFromDatabasObl() {\r\n\r\n        List<cInventoryorder> resultObl = new ArrayList<>();\r\n        List<cInventoryorderEntity> hulpResultObl;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        hulpResultObl =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpResultObl ) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            resultObl.add(inventoryorder);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public  boolean pCheckBarcodeWithLineBarcodesBln(cBarcodeScan pvBarcodeScan){\r\n\r\n        //If scanned value matches the current barcodeStr, then we have a match\r\n        if (pvBarcodeScan.getBarcodeOriginalStr().equalsIgnoreCase(cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr()) ||\r\n            pvBarcodeScan.getBarcodeFormattedStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeWithoutCheckDigitStr()) ) {\r\n            //We have a match, so leave\r\n            return  true;\r\n        }\r\n\r\n        //Check if this is a barcodeStr we already know\r\n        cInventoryorderBarcode inventoryorderBarcode = cInventoryorder.currentInventoryOrder.pGetOrderBarcode(pvBarcodeScan);\r\n\r\n        //We scanned a barcodeStr unknown to the order\r\n        if (inventoryorderBarcode == null) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr for a different article\r\n        if (!inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) ||\r\n            ! inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLine.currentInventoryOrderLine.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode = inventoryorderLineBarcode;\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        //Scanned barcodeStr is correct, but we need to create a line barcodeStr\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode =  cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(inventoryorderBarcode.getBarcodeStr(),inventoryorderBarcode.getQuantityPerUnitOfMeasureDbl(), true);\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n        return  true;\r\n\r\n    }\r\n\r\n    private static  void mTruncateTable() {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.deleteAll();\r\n    }\r\n\r\n    //End Region Orders\r\n\r\n    //Region Lines\r\n\r\n    public boolean pGetLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderLine.allLinesObl = null;\r\n            cInventoryorderLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n\r\n        WebResult = getInventoryorderViewModel().pGetLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderLine.allLinesObl == null) {\r\n                cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderLineEntity> importObl = new ArrayList<>();\r\n            List<cInventoryorderLine> objectObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cInventoryorderLine inventoryorderLine = new cInventoryorderLine(jsonObject);\r\n\r\n                if (inventoryorderLine.getQuantityHandledAllScannersDbl() > inventoryorderLine.getQuantityDbl()) {\r\n                    inventoryorderLine.quantityHandledDbl = inventoryorderLine.getQuantityHandledAllScannersDbl();\r\n                }\r\n\r\n\r\n                importObl.add(inventoryorderLine.inventoryorderLineEntity);\r\n                objectObl.add((inventoryorderLine));\r\n\r\n                if (! inventoryorderLine.getHandeledTimeStampStr().isEmpty()) {\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin  =   cInventoryorder.currentInventoryOrder.pGetBin(inventoryorderLine.getBinCodeStr());\r\n                    if ( cInventoryorderBin.currentInventoryOrderBin == null) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                        cInventoryorderBin.currentInventoryOrderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.InventoryDone;\r\n                    }\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin.pUpdateStatusAndTimeStampInDatabase();\r\n                    cInventoryorderBin.currentInventoryOrderBin = null;\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderLine.pInsertAllInDatabase(objectObl,importObl);\r\n\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddLineBln() {\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pAddLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderLine.currentInventoryOrderLine= new cInventoryorderLine(WebResult.getResultDtt().get(0));\r\n                cInventoryorderLine.currentInventoryOrderLine.pInsertInDatabaseBln();\r\n                cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr(),cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl(), false);\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public List<cInventoryorderLine> pGetLinesForBinObl(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderLine> resultObl = new ArrayList<>();\r\n        for (cInventoryorderLine inventoryorderLine : cInventoryorder.currentInventoryOrder.linesObl()) {\r\n            if (inventoryorderLine.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                resultObl.add((inventoryorderLine));\r\n            }\r\n        }\r\n\r\n        if (resultObl.size() > 1) {\r\n            Collections.reverse(resultObl);\r\n        }\r\n\r\n        return resultObl;\r\n    }\r\n\r\n    public Double pGetTotalItemCountDbl() {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetTotalCountDbl();\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetItemCountForBinDbl(String pvBincodeStr) {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetCountForBinCodeDbl(pvBincodeStr);\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public cInventoryorderLine pGetLineForArticleAndBin() {\r\n\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            //Check if BIN matches current BIN\r\n            if (! inventoryorderLine.getBinCodeStr().equalsIgnoreCase(   cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr())) {\r\n                continue;\r\n            }\r\n\r\n            //Check if item matches scanned item\r\n            if (inventoryorderLine.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) &&\r\n                    inventoryorderLine.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n                return  inventoryorderLine;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pGetOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all bins for current order, if webservice error then stop\r\n        if (!this.mGetBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.pGetLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_lines_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.mGetPossibleBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_possible_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!this.pGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all barcodes\r\n        if (!this.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all inventorylinebarcodes\r\n        if (!this.mGetLineBarcodesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all article images, only if neccesary\r\n        if (!this.mGetArticleImagesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    private cInventoryorderLine mGetLineWithLineNo(Long pvLineNoLng) {\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            if (cText.pIntToStringStr(inventoryorderLine.getLineNoInt()).equalsIgnoreCase(cText.pLongToStringStr(pvLineNoLng))) {\r\n                return  inventoryorderLine;\r\n            }\r\n\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Lines\r\n\r\n    //Region BINS\r\n\r\n    private boolean mGetBinsViaWebserviceBln() {\r\n\r\n        cInventoryorderBin.allInventoryorderBinsObl = null;\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorder.binsObl = new ArrayList<>();\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            List<cInventoryorderBinEntity> insertObl = new ArrayList<>();\r\n            List<cInventoryorderBin> closedBinsObl = new ArrayList<>();\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n\r\n                insertObl.add(inventoryorderBin.inventoryorderBinEntity);\r\n\r\n                if (inventoryorderBin.getStatusInt() ==  cWarehouseorder.InventoryBinStatusEnu.InventoryDoneOnServer && !cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                    closedBinsObl.add(inventoryorderBin);\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderBin.pInsertAllInDatabase(insertObl);\r\n\r\n            //Close all BINS in database after they got inserted\r\n            for (cInventoryorderBin inventoryorderBin : closedBinsObl) {\r\n                inventoryorderBin.pCloseBln(false);\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetPossibleBinsViaWebserviceBln() {\r\n\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetPossibleBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n\r\n                if (cInventoryorder.binsObl.contains(inventoryorderBin.getBinCodeStr())) {\r\n                    continue;\r\n                }\r\n\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n                inventoryorderBin.pInsertInDatabaseBln();\r\n                inventoryorderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.New;\r\n                inventoryorderBin.pUpdateStatusAndTimeStampInDatabase();\r\n\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsNotDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsNotDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsTotalFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsTotalFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public cInventoryorderBin pGetBin(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderBin> hulpObl;\r\n\r\n        hulpObl = this.pGetBinsTotalFromDatabasObl();\r\n\r\n        if (hulpObl == null || hulpObl.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        for (cInventoryorderBin inventoryorderBin : hulpObl) {\r\n            if (inventoryorderBin.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                return  inventoryorderBin;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cInventoryorderBin pAddInventoryBin(cBranchBin pvBranchBin) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddBinViaWebserviceWrs(pvBranchBin.getBinCodeStr());\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBin InventoryorderBin = new cInventoryorderBin(WebResult.getResultDtt().get(0));\r\n                InventoryorderBin.pInsertInDatabaseBln();\r\n                return  InventoryorderBin;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  null;\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    //End Region BINS\r\n\r\n    //Region Barcodes\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderBarcode.allInventoryorderBarcodesObl = null;\r\n            cInventoryorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pGetBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln() ){\r\n\r\n            if (cInventoryorderBarcode.allInventoryorderBarcodesObl == null) {\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderBarcodeEntity> inventoryorderEntities = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject :WebResult.getResultDtt() ) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(jsonObject);\r\n                inventoryorderEntities.add(inventoryorderBarcode.inventoryorderBarcodeEntity);\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl.add(inventoryorderBarcode);\r\n            }\r\n\r\n            cInventoryorderBarcode.pInsertAllInDatabase(inventoryorderEntities);\r\n            return true;\r\n        }\r\n\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddUnkownBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cInventoryorder.currentInventoryOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(WebResult.getResultDtt().get(0));\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if (cArticle.currentArticle == null) {\r\n            return false;\r\n        }\r\n\r\n        //Get barcodes for this article\r\n        if (!cArticle.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        //Search for the scanned barcodeStr in the article barcodes\r\n        cArticleBarcode matchedArticleBarcode = null;\r\n        for (cArticleBarcode articleBarcode : cArticle.currentArticle.barcodesObl) {\r\n            if (articleBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    articleBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                matchedArticleBarcode = articleBarcode;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //We didn't find a match, so no use in adding the line\r\n        if (matchedArticleBarcode == null) {\r\n            return  false;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddERPItemViaWebserviceWrs(matchedArticleBarcode);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            for (cArticleBarcode articleBarcode :  cArticle.currentArticle.barcodesObl) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(articleBarcode);\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n\r\n                if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                        inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                    cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Barcodes\r\n\r\n    //Region Line Barcode\r\n\r\n    private boolean mGetLineBarcodesViaWebserviceBln() {\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = null;\r\n            cInventoryorderLineBarcode.pTruncateTableBln();\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pGetLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<cInventoryorderLineBarcodeEntity> insertObl = new ArrayList<>();\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode(jsonObject);\r\n                insertObl.add((inventoryorderLineBarcode.inventoryorderLineBarcodeEntity));\r\n\r\n                //Search for line that belongs to this barcodeStr\r\n                cInventoryorderLine inventoryorderLine = cInventoryorder.currentInventoryOrder.mGetLineWithLineNo(inventoryorderLineBarcode.getLineNoLng());\r\n\r\n                //If we can't find it, skip this\r\n                if (inventoryorderLine == null) {\r\n                    continue;\r\n                }\r\n\r\n                //Add barcodeStr to line\r\n                inventoryorderLine.pAddLineBarcode(inventoryorderLineBarcode.getBarcodeStr(),inventoryorderLineBarcode.getQuantityhandledDbl(), false);\r\n\r\n            }\r\n\r\n            cInventoryorderLineBarcode.pInsertAllInDatabase(insertObl);\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Line Barcode\r\n\r\n    //Region Barcode\r\n\r\n    public cInventoryorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderBarcode inventoryorderBarcode : this.barcodesObl()) {\r\n\r\n            if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr())) {\r\n                return  inventoryorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Barcode\r\n\r\n    //Region Images\r\n\r\n    private boolean mGetArticleImagesViaWebserviceBln() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()  || !cInventoryorder.currentInventoryOrder.isInventoryWithPicturePrefetchBln()) {\r\n            return  true;\r\n        }\r\n\r\n\r\n            cArticleImage.allImages = null;\r\n            cArticleImage.pTruncateTableBln();\r\n\r\n\r\n        if (this.imagesObl()  != null) {\r\n            return  true;\r\n        }\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  false;\r\n        }\r\n\r\n        List<String> itemNoAndVariantCodeObl;\r\n        itemNoAndVariantCodeObl = new ArrayList<>();\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n            String itemNoAndVariantCodeStr = inventoryorderLine.getItemNoStr() + \";\" + inventoryorderLine.getVariantCodeStr();\r\n\r\n            if (!itemNoAndVariantCodeObl.contains(itemNoAndVariantCodeStr)) {\r\n                itemNoAndVariantCodeObl.add(itemNoAndVariantCodeStr);\r\n            }\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        WebResult =  articleImageViewModel.pGetArticleImagesFromWebserviceWrs(itemNoAndVariantCodeObl);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            cArticleImage.allImages = new ArrayList<>();\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cArticleImage articleImage = new cArticleImage(jsonObject);\r\n\r\n                if ( !cArticleImage.allImages.contains(articleImage)) {\r\n                    articleImage.pInsertInDatabaseBln();\r\n                    cArticleImage.allImages.add((articleImage));\r\n                }\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEIMAGESMULTIPLE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    //End Region Images\r\n\r\n    //Region Comments\r\n\r\n    public boolean pGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n        cWebresult webresult;\r\n        webresult = getInventoryorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln()&& webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            List<JSONObject> myList = webresult.getResultDtt();\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (cInventoryorder.currentInventoryOrder.commentsObl() == null || cInventoryorder.currentInventoryOrder.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    private static  void mInsertAllInDatabase(List<cInventoryorderEntity> pvInventoryOrderEntityObl ) {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.insertAll (pvInventoryOrderEntityObl);\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n        for (JSONObject jsonObject : pvResultDtt) {\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //End Region Comments\r\n\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(date 1617287546910)
---+@@ -2,10 +2,12 @@
---+ 
---+ import androidx.lifecycle.ViewModelProvider;
---+ 
---++import org.json.JSONException;
---+ import org.json.JSONObject;
---+ 
---+ import java.util.ArrayList;
---+ import java.util.Collections;
---++import java.util.LinkedHashMap;
---+ import java.util.List;
---+ 
---+ import ICS.Utils.Scanning.cBarcodeScan;
---+@@ -20,10 +22,13 @@
---+ import SSU_WHS.Basics.ArticleImages.cArticleImage;
---+ import SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;
---+ import SSU_WHS.Basics.BranchBin.cBranchBin;
---++import SSU_WHS.Basics.PropertyGroup.cPropertyGroup;
---++import SSU_WHS.Basics.PropertyGroup.cPropertyGroupViewModel;
---+ import SSU_WHS.Basics.Users.cUser;
---+ import SSU_WHS.General.Comments.cComment;
---+ import SSU_WHS.General.Warehouseorder.cWarehouseorder;
---+ import SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;
---++import SSU_WHS.General.cDatabase;
---+ import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
---+ import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;
---+ import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
---+@@ -33,6 +38,10 @@
---+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
---+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
---+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;
---++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
---++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
---++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLineProperty;
---++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValue;
---+ import SSU_WHS.Webservice.cWebresult;
---+ import SSU_WHS.Webservice.cWebserviceDefinitions;
---+ import nl.icsvertex.scansuite.R;
---+@@ -122,6 +131,7 @@
---+         return unknownVariantCounterInt;
---+     }
---+ 
---++    public  LinkedHashMap<Integer, List<JSONObject>>  itemProperyDataObl;
---+     private final cInventoryorderEntity inventoryorderEntity;
---+ 
---+     private cInventoryorderViewModel getInventoryorderViewModel() {
---+@@ -140,6 +150,7 @@
---+     private List<cArticleImage> imagesObl()  {
---+         return  cArticleImage.allImages;
---+     }
---++    public List<cInventoryorderLineProperty> linePropertysObl() { return  cInventoryorderLineProperty.allLinePropertysObl; }
---+ 
---+     private static List<cInventoryorder> allCachedOrdersObl;
---+     public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){
---+@@ -736,6 +747,20 @@
---+             result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));
---+             return result;
---+         }
---++
---++        // Get all propertys, if webservice error then stop
---++        if (!this.mGetLinePropertysViaWebserviceBln( )) {
---++            result.resultBln = false;
---++            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));
---++            return result;
---++        }
---++
---++        // Get all property values, if webservice error then stop
---++        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {
---++            result.resultBln = false;
---++            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));
---++            return result;
---++        }
---+ 
---+         return  result;
---+     }
---+@@ -1236,6 +1261,52 @@
---+ 
---+     }
---+ 
---++    //Properties
---++    private boolean mGetLinePropertysViaWebserviceBln() {
---++
---++        cInventoryorderLineProperty.allLinePropertysObl = null;
---++        cInventoryorderLineProperty.pTruncateTableBln();
---++
---++        cWebresult WebResult;
---++        WebResult =  this.getInventoryorderViewModel().pGetLinePropertysViaWebserviceWrs();
---++        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
---++
---++            for (JSONObject jsonObject : WebResult.getResultDtt()) {
---++                cInventoryorderLineProperty inventoryorderLineProperty = new cInventoryorderLineProperty(jsonObject);
---++                inventoryorderLineProperty.pInsertInDatabaseBln();
---++            }
---++
---++            return  true;
---++        }
---++        else {
---++            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET);
---++            return  false;
---++        }
---++    }
---++
---++    private boolean mGetLinePropertyValuesViaWebserviceBln() {
---++
---++
---++        cPickorderLinePropertyValue.allLinePropertysValuesObl = null;
---++        cPickorderLinePropertyValue.pTruncateTableBln();
---++
---++        cWebresult WebResult;
---++        WebResult =  this.getInventoryorderViewModel().pGetLinePropertyValuesViaWebserviceWrs();
---++        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
---++
---++            for (JSONObject jsonObject : WebResult.getResultDtt()) {
---++                cInventoryorderLinePropertyValue inventoryorderLinePropertyValue = new cInventoryorderLinePropertyValue(jsonObject);
---++                inventoryorderLinePropertyValue.pInsertInDatabaseBln();
---++            }
---++
---++            return  true;
---++        }
---++        else {
---++            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET);
---++            return  false;
---++        }
---++    }
---++
---+     //End Region Comments
---+ 
---+ }
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.lifecycle.AndroidViewModel;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Webservice.cWebresult;\r\n\r\npublic class cInventoryorderViewModel extends AndroidViewModel {\r\n    //Region Public Properties\r\n    private cInventoryorderRepository Repository;\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderViewModel(Application pvApplication) {\r\n        super(pvApplication);\r\n        this.Repository = new cInventoryorderRepository(pvApplication);\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n    public void insert(cInventoryorderEntity pvInventoryorderEntity) {this.Repository.insert(pvInventoryorderEntity);}\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryorderEntities) {this.Repository.insertAll(pvInventoryorderEntities);}\r\n\r\n    public void deleteAll() {this.Repository.deleteAll();}\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {return this.Repository.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);}\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {return this.Repository.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);}\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesWithFilterFromDatabaseObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {return this.Repository.pGetInventoriesFromDatabaseWithFilterObl(pvCurrentUserStr, pvUseFiltersBln);}\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pAddBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pCloseBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pAddUnknownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {return this.Repository.pAddUnkownItemViaWebserviceWrs(pvBarcodeScan);}\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {return this.Repository.pAddERPItemViaWebserviceWrs(pvArticleBarcode);}\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {return this.Repository.pAddLineViaWebserviceWrs();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsNotDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinNotDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsTotalFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinTotalFromDatabaseObl();}\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs( ) {return this.Repository.pGetLinesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs( ) {return this.Repository.pGetBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs( ) {return this.Repository.pGetPossibleBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetCommentsFromWebserviceWrs() {return this.Repository.pGetCommentsFromWebservice(); }\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {return this.Repository.pGetBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {return this.Repository.pGetLineBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}\r\n\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(date 1617285222046)
---+@@ -66,4 +66,8 @@
---+ 
---+     public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}
---+ 
---++    public cWebresult pGetLinePropertysViaWebserviceWrs() {return this.Repository.pGetLinePropertysViaWebserviceWrs(); }
---++
---++    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {return this.Repository.pGetLinePropertyValuesViaWebserviceWrs(); }
---++
---+ }
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package SSU_WHS.Inventory.InventoryorderLines;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cInventoryorderLine {\r\n\r\n    public cInventoryorderLineEntity inventoryorderLineEntity;\r\n\r\n    public static List<cInventoryorderLine> allLinesObl;\r\n    public static cInventoryorderLine currentInventoryOrderLine;\r\n\r\n    public List<cInventoryorderBarcode> barcodesObl(){\r\n\r\n        List<cInventoryorderBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cInventoryorder.currentInventoryOrder.barcodesObl() == null || cInventoryorder.currentInventoryOrder.barcodesObl().size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        //Loop through all barcodes, and if item matches add it to the list\r\n        for (cInventoryorderBarcode inventoryorderBarcode : cInventoryorder.currentInventoryOrder.barcodesObl()) {\r\n                        if (inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(this.getItemNoStr()) &&\r\n                            inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(this.getVariantCodeStr())) {\r\n                resultObl.add(inventoryorderBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n\r\n    }\r\n    public List<cInventoryorderLineBarcode> lineBarcodesObl(){\r\n\r\n        List<cInventoryorderLineBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cInventoryorderLineBarcode.allLineBarcodesObl == null || cInventoryorderLineBarcode.allLineBarcodesObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        //Loop through all barcodes, and if item matches add it to the list\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLineBarcode.allLineBarcodesObl) {\r\n            if (cText.pLongToStringStr(inventoryorderLineBarcode.getLineNoLng()).equalsIgnoreCase(cText.pIntToStringStr(this.getLineNoInt()))) {\r\n                resultObl.add(inventoryorderLineBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    private cInventoryorderLineViewModel getInventoryorderLineViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n    }\r\n\r\n    //Region Public Properties\r\n    private final int lineNoInt;\r\n    public int getLineNoInt() {\r\n        return lineNoInt;\r\n    }\r\n\r\n    private final String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return itemNoStr;\r\n    }\r\n\r\n    private final String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return variantCodeStr;\r\n    }\r\n\r\n    private final String descriptionStr;\r\n    public String getDescriptionStr() {\r\n        return descriptionStr;\r\n    }\r\n\r\n    private final String description2Str;\r\n    public String getDescription2Str() {\r\n        return description2Str;\r\n    }\r\n\r\n    private final String binCodeStr;\r\n    public String getBinCodeStr() {\r\n        return binCodeStr;\r\n    }\r\n\r\n    private final Double quantityDbl;\r\n    public Double getQuantityDbl() {\r\n        return quantityDbl;\r\n    }\r\n\r\n    private final String vendorItemNoStr;\r\n    public String getVendorItemNoStr() { return vendorItemNoStr; }\r\n\r\n    private final String vendorItemDescriptionStr;\r\n    public String getVendorItemDescriptionStr() { return vendorItemDescriptionStr; }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() { return statusInt; }\r\n\r\n    private final String handeledTimeStampStr;\r\n    public String getHandeledTimeStampStr() { return handeledTimeStampStr; }\r\n\r\n    public Double quantityHandledDbl;\r\n    public Double getQuantityHandledDbl() { return quantityHandledDbl; }\r\n\r\n    private final Double quantityHandledAllScannersDbl;\r\n    public Double getQuantityHandledAllScannersDbl() { return quantityHandledAllScannersDbl; }\r\n\r\n    public String getItemNoAndVariantCodeStr(){\r\n        return  this.getItemNoStr() + \"~\"  + this.getVariantCodeStr();\r\n    }\r\n\r\n    public cArticleImage articleImage;\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderLine(JSONObject pvJsonObject) {\r\n        this.inventoryorderLineEntity = new cInventoryorderLineEntity(pvJsonObject);\r\n        this.lineNoInt = this.inventoryorderLineEntity.getLineNoInt();\r\n        this.itemNoStr = this.inventoryorderLineEntity.getItemNoStr();\r\n        this.variantCodeStr = this.inventoryorderLineEntity.getVariantCodeStr();\r\n        this.descriptionStr = this.inventoryorderLineEntity.getDescriptionStr();\r\n        this.description2Str = this.inventoryorderLineEntity.getDescription2Str();\r\n        this.binCodeStr = this.inventoryorderLineEntity.getBincodeStr();\r\n        this.quantityDbl = this.inventoryorderLineEntity.getQuantityDbl();\r\n        this.vendorItemNoStr = this.inventoryorderLineEntity.getVendorItemNoStr();\r\n        this.vendorItemDescriptionStr = this.inventoryorderLineEntity.getVendorItemDescriptionStr();\r\n        this.statusInt = this.inventoryorderLineEntity.getStatusInt();\r\n        this.handeledTimeStampStr = this.inventoryorderLineEntity.getHandledtimestampStr();\r\n        this.quantityHandledDbl = this.inventoryorderLineEntity.getQuantityHandledDbl();\r\n        this.quantityHandledAllScannersDbl = this.inventoryorderLineEntity.getQuantityHandledAllScannersDbl();\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderLineViewModel().insert(this.inventoryorderLineEntity);\r\n\r\n        if (cInventoryorderLine.allLinesObl == null){\r\n            cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n        }\r\n        cInventoryorderLine.allLinesObl.add(this);\r\n        return  true;\r\n    }\r\n\r\n    public static void pInsertAllInDatabase(List<cInventoryorderLine> pvInventoryOrderLinesObl, List<cInventoryorderLineEntity> pvInventoryOrderLineEntityObl ) {\r\n\r\n        cInventoryorderLine.allLinesObl.addAll(pvInventoryOrderLinesObl);\r\n        cInventoryorderLineViewModel  inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        inventoryorderLineViewModel.insertAll (pvInventoryOrderLineEntityObl);\r\n\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cInventoryorderLineViewModel  inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        inventoryorderLineViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public cInventoryorderLineBarcode pAddLineBarcode(String pvBarcodeStr, Double pvQuantityDbl, boolean pvSkipQuantityBln) {\r\n\r\n        cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode((long) this.getLineNoInt(),pvBarcodeStr,pvQuantityDbl);\r\n\r\n        if (pvSkipQuantityBln){\r\n            inventoryorderLineBarcode.quantityHandledDbl = 0;\r\n        }\r\n\r\n        if (cInventoryorderLineBarcode.allLineBarcodesObl == null){\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = new ArrayList<>();\r\n        }\r\n\r\n        cInventoryorderLineBarcode.allLineBarcodesObl.add(inventoryorderLineBarcode);\r\n\r\n        return  inventoryorderLineBarcode;\r\n    }\r\n\r\n    public boolean pGetArticleImageBln(){\r\n\r\n        if (this.articleImage != null) {\r\n            return  true;\r\n        }\r\n\r\n        this.articleImage = cArticleImage.pGetArticleImageByItemNoAndVariantCode(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (this.articleImage != null){\r\n            return  true;\r\n        }\r\n\r\n        cWebresult Webresult;\r\n\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        Webresult = articleImageViewModel.pGetArticleImageFromWebserviceWrs(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (!Webresult.getSuccessBln() || !Webresult.getResultBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (Webresult.getResultDtt().size() == 1) {\r\n            cArticleImage articleImage = new cArticleImage(Webresult.getResultDtt().get(0));\r\n            articleImage.pInsertInDatabaseBln();\r\n            this.articleImage = articleImage;\r\n            return true;\r\n        }\r\n\r\n\r\n        return  false;\r\n\r\n    }\r\n\r\n    public boolean pSaveLineViaWebserviceBln (){\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderLineViewModel().pSaveLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n                return  true;\r\n            }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINESAVE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public void pUpdateQuantityInDatabase(){\r\n        getInventoryorderLineViewModel().pUpdateQuantity();\r\n    }\r\n\r\n    public cInventoryorderLineBarcode pGetLineBarcodeByScannedBarcode(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        if (this.lineBarcodesObl().size() == 0) {\r\n            this.quantityHandledDbl = 0.0;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : this.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set the current line\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                return inventoryorderLineBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pResetRst(){\r\n\r\n        //nit the result\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderLineViewModel().pResetLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            for (cInventoryorderLineBarcode inventoryorderLineBarcode : this.lineBarcodesObl()) {\r\n                inventoryorderLineBarcode.pDeleteFromDatabaseBln();\r\n            }\r\n\r\n            //Reset this line\r\n            this.quantityHandledDbl = 0.0;\r\n            this.pUpdateQuantityInDatabase();\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINERESET);\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_reset_line_via_webservice_failed));\r\n        }\r\n        return  result;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java	(date 1617289072199)
---+@@ -17,6 +17,11 @@
---+ import SSU_WHS.Inventory.InventoryOrders.cInventoryorder;
---+ import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
---+ import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
---++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
---++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
---++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLineProperty;
---++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValue;
---++import SSU_WHS.Picken.Pickorders.cPickorder;
---+ import SSU_WHS.Webservice.cWebresult;
---+ import SSU_WHS.Webservice.cWebserviceDefinitions;
---+ import nl.icsvertex.scansuite.R;
---+@@ -127,6 +132,10 @@
---+         return  this.getItemNoStr() + "~"  + this.getVariantCodeStr();
---+     }
---+ 
---++    public  boolean hasPropertysBln() {
---++        return this.inventoryorderLinePropertyObl().size() != 0;
---++    }
---++
---+     public cArticleImage articleImage;
---+ 
---+     //End Region Public Properties
---+@@ -193,6 +202,59 @@
---+         return  inventoryorderLineBarcode;
---+     }
---+ 
---++    private  List<cInventoryorderLineProperty> inventoryorderLinePropertyCachedObl;
---++    private List<cInventoryorderLineProperty> inventoryorderLinePropertyObl() {
---++
---++        if (this.inventoryorderLinePropertyCachedObl != null) {
---++            return  this.inventoryorderLinePropertyCachedObl;
---++        }
---++
---++        this. inventoryorderLinePropertyCachedObl = new ArrayList<>();
---++
---++        if (cInventoryorder.currentInventoryOrder.linePropertysObl() == null || cInventoryorder.currentInventoryOrder.linePropertysObl().size() == 0) {
---++            return  this.inventoryorderLinePropertyCachedObl;
---++        }
---++
---++        for (cInventoryorderLineProperty inventoryorderLineProperty :cInventoryorder.currentInventoryOrder.linePropertysObl() ) {
---++            if (inventoryorderLineProperty.getLineNoInt().equals(this.getLineNoInt())) {
---++                this.inventoryorderLinePropertyCachedObl.add(inventoryorderLineProperty);
---++            }
---++        }
---++
---++        return  this.inventoryorderLinePropertyCachedObl;
---++
---++    }
---++
---++    public List<cInventoryorderLineProperty> inventoryorderLinePropertyInputObl() {
---++
---++        List<cInventoryorderLineProperty> resultObl = new ArrayList<>();
---++
---++        if (this.inventoryorderLinePropertyObl() == null || this.inventoryorderLinePropertyObl().size() == 0) {
---++            return  resultObl;
---++        }
---++
---++        for (cInventoryorderLineProperty inventoryorderLineProperty :this.inventoryorderLinePropertyObl()) {
---++            if (inventoryorderLineProperty.getIsInputBln() &&  inventoryorderLineProperty.getIsRequiredBln()) {
---++                resultObl.add(inventoryorderLineProperty);
---++            }
---++        }
---++
---++        return  resultObl;
---++    }
---++
---++    public  List<cInventoryorderLinePropertyValue> inventoryorderLinePropertyValuesObl() {
---++
---++        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
---++
---++        for (cInventoryorderLineProperty inputInventoryorderLineProperty : this.inventoryorderLinePropertyInputObl()) {
---++            resultObl.addAll(inputInventoryorderLineProperty.propertyValueObl());
---++        }
---++
---++        return  resultObl;
---++
---++    }
---++
---++
---+     public boolean pGetArticleImageBln(){
---+ 
---+         if (this.articleImage != null) {
---+Index: app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package nl.icsvertex.scansuite.Activities.General;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.app.AppCompatDelegate;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\n\r\n\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Environments.cEnvironment;\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cPermissions;\r\nimport ICS.Utils.cPower;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Branches.cBranch;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcode;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisation;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplate;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroup;\r\nimport SSU_WHS.Basics.Scanners.cScanner;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentService;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentShipMethod;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Translations.cTranslation;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.ScannerLogon.cScannerLogon;\r\nimport SSU_WHS.Webservice.cWebservice;\r\n\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoConnectionFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.DateTimeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.HomeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.LanguageFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Support.SupportFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class MainDefaultActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //region views\r\n    private  ImageView imageHome;\r\n    private  Toolbar Toolbar;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private  FrameLayout mainFramelayout;\r\n    private  DrawerLayout menuMainDrawer;\r\n    private  NavigationView mainmenuNavigation;\r\n\r\n\r\n    //End region views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\r\n        super.onCreate(savedInstanceState);\r\n\r\n        this.setContentView(R.layout.activity_main);\r\n\r\n        // Standard methods to initialize the Activity\r\n        this.mActivityInitialize();\r\n\r\n        //check permissions first\r\n        cPermissions.checkPermissions();\r\n\r\n        //set environment from preferences/by QR code\r\n        this.mSetEnviroment();\r\n\r\n        //Try to set the serialnumber\r\n        this.mSetSerialNumberIfPossible();\r\n\r\n        //Set darmode\r\n        this.pChangeDarkModus();\r\n\r\n         //set Crashlytics, otherwise Firebase wont work\r\n        FirebaseAnalytics.getInstance(this);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cPower.pRegisterPowerConnectReceiver();\r\n        cPower.pRegisterPowerLevelChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cPower.pUnregisterConnectPowerReceiver();\r\n        cPower.pUnregisterPowerLevelChangedReceiver();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int pvRequestCodeInt, int pvResultCodeInt, Intent data) {\r\n\r\n        super.onActivityResult(pvRequestCodeInt, pvResultCodeInt, data);\r\n        if (pvRequestCodeInt == cPublicDefinitions.CHANGELANGUAGE_REQUESTCODE) {\r\n            //we've changed the language, or not, who cares, but go back to language\r\n            this.setTitle(R.string.screentitle_language);\r\n            this.toolbarTitle.setText(R.string.screentitle_language);\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.mainFramelayout, new LanguageFragment());\r\n            transaction.commit();\r\n        }\r\n\r\n        //internet set?\r\n        if (pvRequestCodeInt == cPublicDefinitions.ACTIVITY_WIFI_SETTINGS) {\r\n\r\n            if (!cConnection.isInternetConnectedBln()) {\r\n                cUserInterface.pCheckAndCloseOpenDialogs();\r\n                final NoConnectionFragment noConnectionFragment = new NoConnectionFragment();\r\n                noConnectionFragment.setCancelable(true);\r\n                noConnectionFragment.show(((MainDefaultActivity) cAppExtension.context).getSupportFragmentManager(), \"NOCONNECTION\");\r\n                return;\r\n            }\r\n            try {\r\n                this.pLetsGetThisPartyStartedOrNot();\r\n            } catch (ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        //Set App Extensions\r\n        this.mSetAppExtensions();\r\n\r\n        //Find all views in Activity\r\n        this.mFindViews();\r\n\r\n        // Show and set toolbar\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_main));\r\n\r\n        // Don't do shit\r\n        this.mFieldsInitialize();\r\n\r\n        // Set event listeners\r\n        this.mSetListeners();\r\n\r\n        // Init screen\r\n        this.mInitScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.Toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.imageHome = findViewById(R.id.imageHome);\r\n\r\n        this.mainFramelayout = findViewById(R.id.mainFramelayout);\r\n        this.menuMainDrawer = findViewById(R.id.menuMainDrawer);\r\n        this.mainmenuNavigation = findViewById(R.id.mainMenuNavigation);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        this.Toolbar.showOverflowMenu();\r\n\r\n        setSupportActionBar(this.Toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_black_24dp);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHomeListener();\r\n        this.mSetMenuListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n    public void pLetsGetThisPartyStartedOrNot() throws ExecutionException {\r\n\r\n        // If scanner had different interface version then web service, then stop\r\n        if (!cWebservice.pWebserviceIsAvailableAndRightVersionBln()) {\r\n\r\n            cAppExtension.activity.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mShowHomeFragment();\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // If we already have everything we need, then next fragment\r\n        if (this.mAllBasicsAvailableBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n\r\n        // Get all basic data via webservice, then next fragment\r\n        if (this.mGetBasicDataBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n    }\r\n\r\n    public void pChangeDarkModus() {\r\n                if (cSharedPreferences.getDarkModusBln()) {\r\n                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\r\n                    return;\r\n                }\r\n\r\n                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\r\n    }\r\n\r\n    public  void pSetChosenEnvironment() {\r\n\r\n        Fragment FragmentFrg = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n        if (FragmentFrg != null) {\r\n            DialogFragment DialogFragmentDfr = (DialogFragment) FragmentFrg;\r\n            DialogFragmentDfr.dismiss();\r\n        }\r\n\r\n        toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        cUserInterface.pShowSnackbarMessage(mainFramelayout, cAppExtension.context.getString(R.string.environment_set_to_parameter1, cEnvironment.currentEnvironment.getDescriptionStr()), R.raw.goodsound, false );\r\n\r\n    }\r\n\r\n    public void pPasswordCancelled() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    public  void pPasswordSuccess(){\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private boolean mAllBasicsAvailableBln() {\r\n        return cScannerLogon.scannerLoggedOnBln &&\r\n                cUser.usersAvailableBln &&\r\n                cBarcodeLayout.barcodeLayoutsAvailableBln &&\r\n                cSetting.settingsAvailableBln &&\r\n                cBranch.BranchesAvailableBln &&\r\n                cShippingAgent.shippingAgentsAvailableBln &&\r\n                cShippingAgentService.shippingAgentServicesAvailableBln &&\r\n                cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln &&\r\n                cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln &&\r\n                cItemProperty.itemPropertiesAvaliableBln &&\r\n                cPropertyGroup.propertyGroupsAvailableBln &&\r\n                cCompositeBarcode.compositeBarcodesAvailableBln &&\r\n                cScanner.scannersAvailableBln &&\r\n                cCustomAuthorisation.customAutorisationsAvailableBln &&\r\n                cTranslation.translationsAvailableBln &&\r\n                cStockOwner.stockOwnersAvailableBln;\r\n    }\r\n\r\n    private boolean mGetBasicDataBln() throws ExecutionException {\r\n\r\n        if (!cScannerLogon.pScannerLogonViaWebserviceBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cScannerLogon.currentScannerLogon.pScannerVersionCheckBln(mainFramelayout)){\r\n            return  false;\r\n        }\r\n\r\n        if (!cSetting.pGetSettingsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBranch.pGetBranchesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cUser.pGetUsersViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBarcodeLayout.pGetBarcodeLayoutsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cItemProperty.pGetItemPropertiesViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){\r\n            return false;\r\n        }\r\n\r\n        if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cCompositeBarcode.pGetCompositeBarcodesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!mGetshippingInfoViawebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cScanner.pGetScannersViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cCustomAuthorisation.pGetCustomAutorisationsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)){\r\n            return false;\r\n        }\r\n\r\n        if (!cTranslation.pGetTranslationsViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        return  mAllBasicsAvailableBln();\r\n\r\n    }\r\n\r\n    private boolean mGetshippingInfoViawebserviceBln() throws ExecutionException {\r\n\r\n        cShippingAgent.pGetShippingAgentsViaWebservice(true);\r\n        if (!cShippingAgent.shippingAgentsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentService.pGetShippingAgentServicesViaWebservice(true);\r\n        if (!cShippingAgentService.shippingAgentServicesAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentServiceShippingUnit.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        if (!cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentShipMethod.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        return cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln;\r\n    }\r\n\r\n    public  void pSetAddedEnvironment() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    private void mSetEnviroment(){\r\n        cEnvironment.pSetEnvironment();\r\n        if (cEnvironment.currentEnvironment != null) {\r\n            toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        }\r\n    }\r\n\r\n    private void mShowHomeFragment() {\r\n        this.imageHome.setVisibility(View.GONE);\r\n        this.toolbarTitle.setText(R.string.screentitle_main);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        FragmentTransaction transaction =  getSupportFragmentManager().beginTransaction();\r\n        transaction.replace(R.id.mainFramelayout, new HomeFragment());\r\n        transaction.commit();\r\n    }\r\n\r\n    private  void mShowEnvironmentFragment() {\r\n        final EnvironmentFragment environmentFragment = new EnvironmentFragment();\r\n        environmentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n    //Region Listeners\r\n    private void mSetHomeListener() {\r\n        this.imageHome.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowHomeFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void mSetMenuListener() {\r\n        this.mainmenuNavigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n                Fragment selectedFragment = null;\r\n                switch (menuItem.getItemId()) {\r\n\r\n                    case R.id.action_home:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n\r\n                    case R.id.action_settings:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        toolbarTitle.setText(R.string.screentitle_settings);\r\n                        toolbarImage.setImageResource(R.drawable.ic_settings);\r\n                        break;\r\n\r\n                    case R.id.action_support:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new SupportFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_support);\r\n                        toolbarImage.setImageResource(R.drawable.ic_support);\r\n                        break;\r\n\r\n                    case R.id.action_language:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new LanguageFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_language);\r\n                        toolbarImage.setImageResource(R.drawable.ic_language);\r\n                        break;\r\n\r\n                    case R.id.action_datetime:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new DateTimeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_datetime);\r\n                        toolbarImage.setImageResource(R.drawable.ic_calendar);\r\n                        break;\r\n                    case R.id.action_environments:\r\n                        cUserInterface.pShowpasswordDialog(cAppExtension.context.getString(R.string.password_header_default) ,cAppExtension.context.getString(R.string.dialog_password_settings_text),false);\r\n                        break;\r\n\r\n                    case R.id.action_proglove:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        mShowPairGlove();\r\n                        return true;\r\n\r\n                    default:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n                }\r\n\r\n                if (selectedFragment != null) {\r\n                    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n                    transaction.replace(R.id.mainFramelayout, selectedFragment);\r\n                    transaction.commit();\r\n                }\r\n\r\n                // deselect everything\r\n                int size = mainmenuNavigation.getMenu().size();\r\n                for (int i = 0; i < size; i++) {\r\n                    mainmenuNavigation.getMenu().getItem(i).setChecked(false);\r\n                }\r\n\r\n                // set item as selected to persist highlight\r\n                menuItem.setChecked(true);\r\n                // close drawer when item is tapped\r\n                menuMainDrawer.closeDrawers();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //endregion Listeners\r\n\r\n    //region Event handlers\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            this.menuMainDrawer.openDrawer(GravityCompat.START);\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void mStartLoginActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, LoginActivity.class);\r\n        cAppExtension.context.startActivity(intent);\r\n    }\r\n\r\n    private void mSetSerialNumberIfPossible(){\r\n\r\n        if (!cSharedPreferences.getSerialNumerStr().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && !cDeviceInfo.getSerialnumberStr().isEmpty()) {\r\n            cSharedPreferences.setSerialNumerStr(cDeviceInfo.getSerialnumberStr());\r\n        }\r\n\r\n    }\r\n\r\n    private void mShowPairGlove() {\r\n        Intent i = new Intent();\r\n        i.setAction(cPublicDefinitions.PROGLOVE_CONNECT_ACTION);\r\n        cAppExtension.context.sendBroadcast(i);\r\n    }\r\n\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(date 1617286717208)
---+@@ -364,9 +364,9 @@
---+             return false;
---+         }
---+ 
---+-        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
---+-            return false;
---+-        }
---++//        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
---++//            return false;
---++//        }
---+ 
---+         if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {
---+             return  false;
---+Index: app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package ICS.Utils.Scanning;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.BarcodeInfoActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.CreateIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveMISinglepieceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipMultiActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSingleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.CreateReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.CreateReturnActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderShipActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddEnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BranchFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SetBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PasswordFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ReasonFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.CreateInventoryActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\n\r\npublic class cBarcodeScan {\r\n\r\n    private static String currentActivityContextStr = \"\";\r\n\r\n    public static class BarcodeType {\r\n\r\n        public static final int Unknown = 0;\r\n        public static final int EAN8 = 1;\r\n        public static final int EAN13 = 2;\r\n    }\r\n\r\n    private String barcodeFormattedStr;\r\n    public String getBarcodeFormattedStr() {\r\n        return barcodeFormattedStr;\r\n    }\r\n\r\n    public String barcodeOriginalStr;\r\n    public String getBarcodeOriginalStr() {\r\n        return barcodeOriginalStr;\r\n    }\r\n\r\n    public String barcodeTypeStr;\r\n    public String getBarcodeTypeStr() {\r\n        return barcodeTypeStr;\r\n    }\r\n\r\n    private   Boolean containsCrlf = false;\r\n    public Boolean getContainsCrlfBln() {\r\n        return containsCrlf;\r\n    }\r\n\r\n    public cBarcodeScan(){\r\n\r\n    }\r\n\r\n    private static IntentFilter BarcodeIntentFilter;\r\n    private static void getBarcodeIntentFilter() {\r\n        if (BarcodeIntentFilter == null) {\r\n            BarcodeIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static IntentFilter BarcodeFragmentIntentFilter;\r\n    private static void getBarcodeFragmentIntentFilter() {\r\n        if (BarcodeFragmentIntentFilter == null) {\r\n            BarcodeFragmentIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeFragmentIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeFragmentIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeReceiver;\r\n    private static void getBarcodeReceiver() {\r\n        if (BarcodeReceiver == null) {\r\n            BarcodeReceiver = new BroadcastReceiver(){\r\n                @Override\r\n                public void onReceive(Context pvContext, Intent pvIntent) {\r\n\r\n                    if (pvContext != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(pvIntent);\r\n\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    //Login\r\n                    if (cAppExtension.activity instanceof LoginActivity) {\r\n                        LoginActivity loginActivity = (LoginActivity)cAppExtension.activity;\r\n                        loginActivity.pHandleScan(barcodeScan);\r\n                       }\r\n\r\n                    //BarcodeInfo\r\n                    if (cAppExtension.activity instanceof BarcodeInfoActivity) {\r\n                        BarcodeInfoActivity barcodeInfoActivity = (BarcodeInfoActivity)cAppExtension.activity;\r\n                        barcodeInfoActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Pick\r\n                    if (cAppExtension.activity instanceof PickorderSelectActivity){\r\n                        PickorderSelectActivity pickorderSelectActivity = (PickorderSelectActivity)cAppExtension.activity;\r\n                        pickorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                        pickorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                        pickorderLinesGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n                        PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                        pickorderPickActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n                        PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n                        pickorderPickGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Sort\r\n                    if (cAppExtension.activity instanceof SortorderSelectActivity){\r\n                        SortorderSelectActivity sortorderSelectActivity = (SortorderSelectActivity)cAppExtension.activity;\r\n                        sortorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderLinesActivity){\r\n                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                        sortorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderSortActivity){\r\n                        SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n                        sortorderSortActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Ship\r\n                    if (cAppExtension.activity instanceof ShiporderSelectActivity){\r\n                        ShiporderSelectActivity shiporderSelectActivity = (ShiporderSelectActivity)cAppExtension.activity;\r\n                        shiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderLinesActivity){\r\n                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                        shiporderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderShipActivity){\r\n                        ShiporderShipActivity shiporderShipActivity = (ShiporderShipActivity)cAppExtension.activity;\r\n                        shiporderShipActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Finish Single Pieces\r\n                    if (cAppExtension.activity instanceof FinishShiporderSelectActivity){\r\n                        FinishShiporderSelectActivity finishShiporderSelectActivity = (FinishShiporderSelectActivity)cAppExtension.activity;\r\n                        finishShiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof FinishShipLinesActivity){\r\n                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                        finishShipLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //QC\r\n                    if (cAppExtension.activity instanceof QualityControlLinesActivity){\r\n                        QualityControlLinesActivity qualityControlLinesActivity = (QualityControlLinesActivity)cAppExtension.activity;\r\n                        qualityControlLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderQCActivity){\r\n                        PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n                        pickorderQCActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Inventory\r\n                    if (cAppExtension.activity instanceof CreateInventoryActivity) {\r\n                        CreateInventoryActivity createInventoryActivity = (CreateInventoryActivity)cAppExtension.activity;\r\n                        createInventoryActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderSelectActivity){\r\n                        InventoryorderSelectActivity inventoryorderSelectActivity = (InventoryorderSelectActivity)cAppExtension.activity;\r\n                        inventoryorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinsActivity){\r\n                        InventoryorderBinsActivity inventoryorderBinsActivity = (InventoryorderBinsActivity)cAppExtension.activity;\r\n                        inventoryorderBinsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinActivity){\r\n                        InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n                        inventoryorderBinActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n                        InventoryArticleActivity inventoryArticleDetailActivity = (InventoryArticleActivity)cAppExtension.activity;\r\n                        inventoryArticleDetailActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n\r\n                    //Intake\r\n                    if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){\r\n                        IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;\r\n                        intakeAndReceiveSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReceiveActivity){\r\n                        CreateReceiveActivity createReceiveActivity = (CreateReceiveActivity)cAppExtension.activity;\r\n                        createReceiveActivity.pHandleScan(barcodeScan,false,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateIntakeActivity){\r\n                        CreateIntakeActivity createIntakeActivity = (CreateIntakeActivity)cAppExtension.activity;\r\n                        createIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveLinesActivity){\r\n                        ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                        receiveLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n                        ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n                        receiveOrderReceiveActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n                        IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n                        intakeorderMATLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n                        IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n                        intakeorderMASLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n                        IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n                        IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeGeneratedActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    //Return\r\n                    if (cAppExtension.activity instanceof ReturnorderSelectActivity){\r\n                        ReturnorderSelectActivity returnorderSelectActivity = (ReturnorderSelectActivity)cAppExtension.activity;\r\n                        returnorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                        ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                        returnorderDocumentsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                        ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                        returnorderDocumentActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReturnActivity) {\r\n                        CreateReturnActivity createReturnActivity = (CreateReturnActivity)cAppExtension.activity;\r\n                        createReturnActivity.pHandleScan(barcodeScan,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                        ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                        returnArticleDetailActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Move\r\n                    if (cAppExtension.activity instanceof MoveorderSelectActivity){\r\n                        MoveorderSelectActivity moveorderSelectActivity = (MoveorderSelectActivity)cAppExtension.activity;\r\n                        moveorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateMoveActivity){\r\n                        CreateMoveActivity createMoveActivity = (CreateMoveActivity)cAppExtension.activity;\r\n                        createMoveActivity.pHandleScan(barcodeScan, false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n                        MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n                        moveLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n                        MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n                        moveLinesTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n                        MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n                        moveLineTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n                        MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n                        moveLinesPlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n                        MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n                        moveLinePlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLineTakeActivity){\r\n                        MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n                        moveLineTakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceActivity){\r\n                        MoveLinePlaceActivity moveLinePlaceActivity = (MoveLinePlaceActivity)cAppExtension.activity;\r\n                        moveLinePlaceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveMISinglepieceActivity){\r\n                        MoveMISinglepieceActivity moveMISinglepieceActivity = (MoveMISinglepieceActivity)cAppExtension.activity;\r\n                        moveMISinglepieceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity){\r\n                        MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveorderLinesPlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity){\r\n                        MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveLinePlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipSingleActivity){\r\n                        PackAndShipSingleActivity packAndShipSingleActivity = (PackAndShipSingleActivity)cAppExtension.activity;\r\n                        packAndShipSingleActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipMultiActivity){\r\n                        PackAndShipMultiActivity packAndShipMultiActivity = (PackAndShipMultiActivity)cAppExtension.activity;\r\n                        packAndShipMultiActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderSelectActivity){\r\n                        StoreorderSelectActivity storeorderSelectActivity = (StoreorderSelectActivity)cAppExtension.activity;\r\n                        storeorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderLinesActivity){\r\n                        StoreorderLinesActivity storeorderLinesActivity = (StoreorderLinesActivity)cAppExtension.activity;\r\n                        storeorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeFragmentReceiver;\r\n    private static void getBarcodeFragmentReceiver() {\r\n        if (BarcodeFragmentReceiver == null) {\r\n            BarcodeFragmentReceiver = new BroadcastReceiver(){\r\n\r\n                @Override\r\n                public void onReceive(Context context, Intent intent) {\r\n\r\n                    if (context != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(intent);\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    if (cAppExtension.dialogFragment instanceof BranchFragment) {\r\n                        BranchFragment branchFragment = (BranchFragment)cAppExtension.dialogFragment;\r\n                        branchFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof StepDoneFragment) {\r\n                        StepDoneFragment stepDoneFragment = (StepDoneFragment)cAppExtension.dialogFragment;\r\n                        stepDoneFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof WorkplaceFragment) {\r\n                        WorkplaceFragment workplaceFragment = (WorkplaceFragment)cAppExtension.dialogFragment;\r\n                        workplaceFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof CurrentLocationFragment) {\r\n                        CurrentLocationFragment currentLocationFragment = (CurrentLocationFragment)cAppExtension.dialogFragment;\r\n                        currentLocationFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof ArticleFullViewFragment) {\r\n                        ArticleFullViewFragment articleFullViewFragment = (ArticleFullViewFragment)cAppExtension.dialogFragment;\r\n                        articleFullViewFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof EnvironmentFragment) {\r\n                        EnvironmentFragment environmentFragment = (EnvironmentFragment)cAppExtension.dialogFragment;\r\n                        environmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddEnvironmentFragment) {\r\n                        AddEnvironmentFragment addEnvironmentFragment = (AddEnvironmentFragment)cAppExtension.dialogFragment;\r\n                        addEnvironmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddBinFragment) {\r\n                        AddBinFragment addBinFragment = (AddBinFragment)cAppExtension.dialogFragment;\r\n                        addBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof SetBinFragment) {\r\n                        SetBinFragment setBinFragment = (SetBinFragment)cAppExtension.dialogFragment;\r\n                        setBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddArticleFragment) {\r\n                        AddArticleFragment addArticleFragment = (AddArticleFragment)cAppExtension.dialogFragment;\r\n                        addArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanArticleFragment) {\r\n                        ScanArticleFragment scanArticleFragment = (ScanArticleFragment)cAppExtension.dialogFragment;\r\n                        scanArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanBinFragment) {\r\n                        ScanBinFragment scanBinFragment = (ScanBinFragment)cAppExtension.dialogFragment;\r\n                        scanBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof PasswordFragment) {\r\n                        PasswordFragment passwordFragment = (PasswordFragment)cAppExtension.dialogFragment;\r\n                        passwordFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ReasonFragment) {\r\n                        ReasonFragment reasonFragment = (ReasonFragment)cAppExtension.dialogFragment;\r\n                        reasonFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public static void pRegisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeIntentFilter();\r\n        cBarcodeScan.getBarcodeReceiver();\r\n\r\n        //Prevent multiple receivers on same context\r\n        if (cBarcodeScan.currentActivityContextStr.equalsIgnoreCase(cAppExtension.context.getClass().getSimpleName())) {\r\n             return;\r\n        }\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeReceiver,BarcodeIntentFilter);\r\n        cBarcodeScan.currentActivityContextStr  = cAppExtension.context.getClass().getSimpleName();\r\n\r\n\r\n\r\n    }\r\n\r\n    public static void pRegisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeFragmentIntentFilter();\r\n        cBarcodeScan.getBarcodeFragmentReceiver();\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeFragmentReceiver,BarcodeFragmentIntentFilter);\r\n\r\n    }\r\n\r\n    public static void pUnregisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n         cAppExtension.context.unregisterReceiver(BarcodeReceiver);\r\n            cBarcodeScan.currentActivityContextStr = \"\";\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void pUnregisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n            cAppExtension.context.unregisterReceiver(BarcodeFragmentReceiver);\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static cBarcodeScan pFakeScan(String pvBarcodeStr) {\r\n        cBarcodeScan result = new cBarcodeScan();\r\n        result.barcodeOriginalStr = pvBarcodeStr;\r\n        result.barcodeFormattedStr = pvBarcodeStr;\r\n        result.barcodeTypeStr = cText.pIntToStringStr( BarcodeType.Unknown);\r\n        return  result;\r\n    }\r\n\r\n    private static cBarcodeScan mGetBarcode(Intent pvIntent) {\r\n\r\n        cBarcodeScan resultBarcodeScan;\r\n\r\n        Bundle extras = pvIntent.getExtras();\r\n        String returnBarcodeStr;\r\n        String scannedBarcodeStr = \"\";\r\n        String barcodeTypeStr = \"\";\r\n\r\n\r\n        if (extras != null) {\r\n\r\n            //so who is sending us this?\r\n            if (Objects.requireNonNull(pvIntent.getAction()).equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_TC55_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODE);\r\n                String honeywellBarcodeType = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODETYPE);\r\n                barcodeTypeStr = cBarcodeScanDefinitions.pGetHoneyWellBarcodeTypeStr(honeywellBarcodeType);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        assert scannedBarcodeStr != null;\r\n\r\n        scannedBarcodeStr = mCleanBarcodeStr(scannedBarcodeStr);\r\n        returnBarcodeStr =  mCleanBarcodeStr(scannedBarcodeStr) ;\r\n\r\n        //If it's an EAN barcodeStr cut off checkdigit\r\n        assert barcodeTypeStr != null;\r\n        if (barcodeTypeStr.toUpperCase().contains(\"EAN\") ) {\r\n\r\n            if (returnBarcodeStr.length() == 13) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,12);\r\n            }\r\n\r\n            if (returnBarcodeStr.length() == 8) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,8);\r\n            }\r\n        }\r\n\r\n        if (barcodeTypeStr.contains(\"GS1\")) {\r\n            barcodeTypeStr = \"GS1-128\";\r\n        }\r\n\r\n        resultBarcodeScan = new cBarcodeScan();\r\n        resultBarcodeScan.barcodeOriginalStr = scannedBarcodeStr;\r\n        resultBarcodeScan.barcodeFormattedStr = returnBarcodeStr;\r\n        resultBarcodeScan.barcodeTypeStr = barcodeTypeStr;\r\n        resultBarcodeScan.containsCrlf = scannedBarcodeStr.contains(\"\\\\n\");\r\n\r\n\r\n\r\n        return resultBarcodeScan;\r\n    }\r\n\r\n    private static String mCleanBarcodeStr(String pvDirtyBarcodeStr) {\r\n        return  pvDirtyBarcodeStr.replaceAll(\"([\\\\r\\\\n\\\\t])\",\"\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(date 1617290036800)
---+@@ -22,6 +22,7 @@
---+ import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;
---+ import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;
---+ import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;
---++import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderLineItemPropertyInputActvity;
---+ import nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;
---+ import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;
---+ import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
---+@@ -276,7 +277,11 @@
---+                         inventoryArticleDetailActivity.pHandleScan(barcodeScan);
---+                         return;
---+                     }
---+-
---++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---++                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity)cAppExtension.activity;
---++                        inventoryorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);
---++                        return;
---++                    }
---+ 
---+                     //Intake
---+                     if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){
---+Index: app/src/main/java/SSU_WHS/General/cDatabase.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package SSU_WHS.General;\r\n\r\npublic class cDatabase {\r\n    //region Tables\r\n\r\n    public static final String TABLENAME_USERS = \"Users\";\r\n    public static final String TABLENAME_SETTINGS = \"Settings\";\r\n    public static final String TABLENAME_SCANNERLOGON = \"ScannerLogon\";\r\n    public static final String TABLENAME_BARCODELAYOUTS = \"BarcodeLayouts\";\r\n    public static final String TABLENAME_BINITEM = \"BinItem\";\r\n    public static final String TABLENAME_TRANSLATION = \"Translations\";\r\n    public static final String TABLENAME_WORKPLACE = \"Workplaces\";\r\n    public static final String TABLENAME_SCANNERS = \"Scanners\";\r\n    public static final String TABLENAME_BRANCH = \"Branches\";\r\n    public static final String TABLENAME_BRANCHBIN = \"BranchBin\";\r\n    public static final String TABLENAME_ITEMPROPERTY = \"ItemProperties\";\r\n    public static final String TABLENAME_LABELTEMPLATE  =  \"Labeltemplate\";\r\n    public static final String TABLENAME_PROPERTYGROUP = \"PropertyGroup\";\r\n    public static final String TABLENAME_PROPERTYGROUPPROPERTY = \"PropertyGroupProperty\";\r\n    public static final String TABLENAME_COMPOSITEBARCODE = \"CompositeBarcode\";\r\n    public static final String TABLENAME_COMPOSITEBARCODEPROPERTY = \"CompositeBarcodeProperty\";\r\n    public static final String TABLENAME_PICKORDERBARCODE = \"PickorderBarcode\";\r\n    public static final String TABLENAME_PICKORDERCOMPOSITEBARCODE = \"PickorderCompositeBarcode\";\r\n    public static final String TABLENAME_PICKORDERLINEBARCODE = \"PickorderLineBarcode\";\r\n    public static final String TABLENAME_ARTICLEIMAGE = \"ArticleImage\";\r\n    public static final String TABLENAME_ARTICLE = \"Article\" ;\r\n    public static final String TABLENAME_ARTICLEBARCODE = \"ArticleBarcode\" ;\r\n    public static final String TABLENAME_ARTICLESTOCK = \"ArticleStock\";\r\n    public static final String TABLENAME_COMMENT = \"Comment\";\r\n    public static final String TABLENAME_AUTHORISATIONS = \"Authorisations\";\r\n    public static final String TABLENAME_SALESORDERPACKINGTABLE = \"SalesOrderPackingTable\";\r\n\r\n    public static final String TABLENAME_PICKORDERLINES = \"Pickorderlines\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTY = \"PickorderlineProperty\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTYVALUE = \"PickorderlinePropertyValue\";\r\n    public static final String TABLENAME_PICKORDERSETTING = \"PickorderSetting\";\r\n    public static final String TABLENAME_PICKORDERADDRESS = \"PickorderAddress\";\r\n    public static final String TABLENAME_SHIPPINGAGENTS = \"ShippingAgents\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICES = \"ShippingAgentServices\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPPINGUNITS = \"ShippingAgentServiceShippingUnits\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPMETHODS = \"ShippingAgentServiceShipMethods\";\r\n    public static final String TABLENAME_PICKORDERSHIPPACKAGES = \"PickorderShipPackages\";\r\n    public static final String TABLENAME_PICKORDERLINEPACKANDSHIP = \"PickorderLinePackAndShip\";\r\n    public static final String TABLENAME_PICKORDERLINEFINISHSINGLEPIECE = \"PickorderLineFinishSinglePiece\";\r\n\r\n    public static final String TABLENAME_INVENTORYORDER = \"InventoryOrder\";\r\n    public static final String TABLENAME_INVENTORYORDERBIN = \"InventoryOrderBin\";\r\n    public static final String TABLENAME_INVENTORYORDERLINE = \"InventoryOrderLines\";\r\n    public static final String TABLENAME_INVENTORYORDERBARCODE = \"InventoryOrderBarcodes\";\r\n    public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = \"InventoryOrderLineBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINES  = \"IntakeLinesMAT\";\r\n    public static final String TABLENAME_INTAKEORDER  = \"IntakeOrders\";\r\n    public static final String TABLENAME_INTAKEORDERBARCODE  = \"IntakeOrderBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINEBARCODE  = \"IntakeOrderMATLineBarcodes\";\r\n    public static final String TABLENAME_MOVEORDER = \"MoveOrder\";\r\n    public static final String TABLENAME_MOVEORDERLINE = \"MoveOrderLine\";\r\n    public static final String TABLENAME_MOVEORDERLINEBARCODE = \"MoveOrderLineBarcode\";\r\n    public static final String TABLENAME_MOVEORDERBARCODE = \"MoveOrdeBarcode\";\r\n    public static final String TABLENAME_RETURNORDER = \"Returnorder\";\r\n    public static final String TABLENAME_RETURNORDERLINE = \"ReturnorderLine\";\r\n    public static final String TABLENAME_RETURNORDERLINEBARCODE = \"ReturnorderLineBarcode\";\r\n    public static final String TABLENAME_RETURNORDERBARCODE = \"ReturnorderBarcode\";\r\n    public static final String TABLENAME_RETURNORDERDOCUMENT = \"ReturnorderDocument\";\r\n    public static final String TABLENAME_BRANCHREASON = \"BranchReason\";\r\n    public static final String TABLENAME_RECEIVELINES  = \"ReceiveLines\";\r\n    public static final String TABLENAME_PACKAGING = \"Packaging\";\r\n    public static final String TABLENAME_CUSTOMAUTHORISATIONS = \"CustomAuthorisations\";\r\n    public static final String TABLENAME_IDENTIFIERWITHDESTINATION  = \"IdentifierWithDestination\";\r\n    public static final String TABLENAME_PACKANDSHIPORDER = \"PackAndSHipOrder\";\r\n    public static final String TABLENAME_PACKANDSHIPORDERLINE = \"PackAndShipOrderLine\";\r\n    public static final String TABLENAME_PACKANDSHIPSETTING = \"PackAndShipSetting\";\r\n    public static final String TABLENAME_PACKANDSHIPBARCODE = \"PackAndShipBarcode\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPMENT = \"PackAndShipShipment\";\r\n    public static final String TABLENAME_PACKANDSHIPADDRESS = \"PackAndShipAddress\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINGMETHOD = \"PackAndShipShippingMethod\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINPACKAGE= \"PackAndShipShippingPackage\";\r\n    public static final String TABLENAME_STOCKOWNER= \"StockOwner\";\r\n    public static final String TABLENAME_AUTHORIZEDSTOCKOWNER= \"AutorizedStockOwner\";\r\n\r\n\r\n    //endregion Tables\r\n\r\n    //region localtables\r\n    public static final String TABLENAME_ENVIRONMENTS = \"Environments\";\r\n    //endregion localtables\r\n\r\n\r\n    //region A\r\n    public static final String ACTIONTYPECODE_NAMESTR = \"ActionTypeCode\";\r\n    public static final String ACTUALSHIPPINGAGENTCODE_NAMESTR = \"ActualShippingAgentCode\";\r\n    public static final String ACTUEALSHIPPINGAGENTSERVICECODE_NAMESTR = \"ActualShippingAgentServiceCode\";\r\n    public static final String ASSIGNEDUSERID_NAMESTR = \"AssignedUserId\";\r\n    public static final String AUTHORISATION_NAMESTR = \"Autorisatie\";\r\n    public static final String ADDRESCODE_NAMESTR = \"Adrescode\";\r\n    public static final String ADDRESSCODE_NAMESTR = \"AddressCode\";\r\n    public static final String ADDRESSNAME_NAMESTR = \"AddressName\";\r\n    public static final String ADDRESSTYPE_NAMESTR = \"AddressType\";\r\n    public static final String ADDRESSNAMEREMARK_NAMESTR = \"AddressNameRemark\";\r\n    public static final String ADDRES_NAMESTR = \"Adres\";\r\n    public static final String ADDRESS_NAMESTR = \"Address\";\r\n    public static final String ADDRESSREMARK_NAMESTR = \"AddressRemark\";\r\n    public static final String ADDRESSADDITION_NAMESTR = \"Adrestoevoeging\";\r\n    public static final String ADDRESSNUMBER_NAMESTR = \"Huisnummer\";\r\n    public static final String ADDRESSNUMBERADDITION_NAMESTR = \"Huisnummertoevoeging\";\r\n    public static final String AUTHORISATIONBASE_NAMESTR = \"Autorisatie_basis\";\r\n    public static final String AREA_NAMESTR = \"Area\";\r\n    //endregion A\r\n\r\n    //region B\r\n    public static final String BARCODE_NAMESTR = \"Barcode\";\r\n    public static final String BARCODELAYOUT_NAMESTR = \"Barcodelayout\";\r\n    public static final String BARCODETYPE_NAMESTR = \"BarCodeType\";\r\n\r\n    public static final String BINCODE_NAMESTR = \"BinCode\";\r\n    public static final String BINCODEHANDLED_NAMESTR = \"BinCodeHandled\";\r\n    public static final String BINCODENL_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String BINMANDATORY_NAMESTR = \"BinMandatory\";\r\n    public static final String BINTYPE_NAMESTR = \"BinType\";\r\n    public static final String BRANCH_NAMESTR = \"Vestiging\";\r\n    public static final String BRANCHTYPE_NAMESTR = \"Vestigingtype\";\r\n    public static final String BRANCHNAME_NAMESTR = \"Name\";\r\n    public static final String BILLINGADDRESSCODE_NAMESTR = \"BillingAddressCode\";\r\n    //endregion B\r\n\r\n    //region C\r\n    public static final String COMPOSITEBARCODE_NAMESTR = \"CompositeBarcode\";\r\n    public static final String COMMENTLINENO_NAMESTR = \"CommentLineNo\";\r\n    public static final String CURRENTLOCATION_NAMESTR = \"CurrentLocation\";\r\n    public static final String COMMENT_NAMESTR = \"Comment\";\r\n    public static final String COMMENTCODE_NAMESTR = \"CommentCode\";\r\n    public static final String COMMENTTEXT_NAMESTR = \"CommentText\";\r\n    public static final String COMPONENT10_NAMESTR = \"Component10\";\r\n    public static final String CURRENTUSERID_NAMESTR = \"CurrentUserId\";\r\n    public static final String CITY_NAMESTR = \"City\";\r\n    public static final String CITYNL_NAMESTR = \"Plaats\";\r\n    public static final String COUNTRY_NAMESTR = \"Country\";\r\n    public static final String COUNTRYNL_NAMESTR = \"Land\";\r\n    public static final String CONTAINER_NAMESTR = \"Container\";\r\n    public static final String CONTACTNAME_NAMESTR = \"ContactName\";\r\n    public static final String CONTACTPERSON_NAMESTR = \"Contactpersoon\";\r\n    public static final String CONTAINERTYPE_DUTCH_NAMESTR = \"Containersoort\";\r\n    //endregion C\r\n\r\n    //region D\r\n    public static final String DATATIMESTAMP_NAMESTR = \"DataTimestamp\";\r\n    public static final String DESCRIPTION_DUTCH_NAMESTR = \"Omschrijving\";\r\n    public static final String DESCRIPTION_NAMESTR = \"Description\";\r\n    public static final String DESCRIPTION2_NAMESTR = \"Description2\";\r\n    public static final String DESTINATION_NAMESTR = \"Destination\";\r\n    public static final String DESTINATIONNO_NAMESTR = \"DestinationNo\";\r\n    public static final String DOCUMENT_NAMESTR = \"Document\";\r\n    public static final String DOCUMENTTYPE_NAMESTR = \"DocumentType\";\r\n    public static final String DOCUMENT2_NAMESTR = \"Document2\";\r\n    public static final String DOCUMENTTYPE2_NAMESTR = \"DocumentType2\";\r\n    public static final String DEFAULTWEIGHTINGRAMS_NAMESTR = \"DefaultWeightInG\";\r\n    public static final String DEFAULTVALUE_NAMESTR = \"DefaultValue\";\r\n    public static final String DELIVERYADDRESSTYPE_NAMESTR = \"DeliveryAddressType\";\r\n    public static final String DELIVERYADDRESSCODE_NAMESTR = \"DeliveryAddressCode\";\r\n    //endregion D\r\n\r\n\r\n    //region E\r\n    public static final String EXTERNALREFERENCE_NAMESTR = \"ExternalReference\";\r\n    public static final String ENUMERATIONVALUES_NAMESTR = \"EnumerationValues\";\r\n\r\n    public static final String ENVIRONMENT_DEFAULT = \"IsDefault\";\r\n    public static final String ENVIRONMENT_NAME = \"Name\";\r\n    public static final String ENVIRONMENT_DESCRIPTION = \"Description\";\r\n    public static final String ENVIRONMENT_WEBSERVICEURL = \"Webserviceurl\";\r\n\r\n    public static final String EXTRAFIELD1_NAMESTR = \"ExtraField1\";\r\n    public static final String EXTRAFIELD2_NAMESTR = \"ExtraField2\";\r\n    public static final String EXTRAFIELD3_NAMESTR = \"ExtraField3\";\r\n    public static final String EXTRAFIELD4_NAMESTR = \"ExtraField4\";\r\n    public static final String EXTRAFIELD5_NAMESTR = \"ExtraField5\";\r\n    public static final String EXTRAFIELD6_NAMESTR = \"ExtraField6\";\r\n    public static final String EXTRAFIELD7_NAMESTR = \"ExtraField7\";\r\n    public static final String EXTRAFIELD8_NAMESTR = \"ExtraField8\";\r\n    public static final String EMAIL_NAMESTR = \"Email\";\r\n    public static final String EMBALLAGE_NAMESTR = \"Emballage\";\r\n    //endregion E\r\n\r\n    //region F\r\n    public static final String FIELD_NAMESTR = \"Field\";\r\n    public static final String FIELDIDENTIFIER_NAMESTR = \"Field_identifier\";\r\n    public static final String FIELDTYPE_NAMESTR = \"Field_type\";\r\n    public static final String FILTERFIELD_NAMESTR = \"Filter_veld\";\r\n    public static final String FILTERVALUE_NAMESTR = \"Filter_waarde\";\r\n    //endregion F\r\n\r\n    //Region G\r\n    public static final String GENERATED_NAMESTR = \"Generated\";\r\n    //End Region G\r\n\r\n    //region H\r\n    public static final String HANDLEDTIMESTAMP_NAMESTR = \"HandledTimestamp\";\r\n    public static final String HANDLEDTIMESTAMPTAKENOTEXPORTED_NAMESTR = \"HandledTimestamp_take_not_exported\";\r\n    public static final String HOUSENUMBER_NAMESTR = \"HouseNumber\";\r\n    public static final String HOUSENUMBERCOMPLEMENTED_NAMESTR = \"HouseNumberComplemented\";\r\n    public static final String HOUSENUMBEREXTENSION_NAMESTR = \"HouseNumberExtension\";\r\n    public static final String HOUSENUMBEREXTENSIONCOMPLEMENTED_NAMESTR = \"HouseNumberExtensionComplemented\";\r\n    //endregion H\r\n\r\n\r\n    //Region I\r\n    public static final String IDENTIFIER_NAMESTR = \"Identifier\";\r\n    public static final String INFOKEY_NAMESTR = \"InfoKey\";\r\n    public static final String INFOVALUE_NAMESTR = \"InfoValue\";\r\n    public static final String IMAGE_NAMESTR = \"Image\";\r\n    public static final String INTERFACERESULTMETHOD_NAMESTR = \"Interface_result_method\";\r\n    public static final String ISPARTOFMULTILINEORDER_NAMESTR = \"IsPartOfMultiLineOrder\";\r\n    public static final String ISUNIQUEBARCODE_NAMESTR = \"IsUniqueBarcode\";\r\n    public static final String ISUNIQUE_NAMESTR = \"IsUnique\";\r\n    public static final String ITEMINFOCODE_NAMESTR = \"ItemInfoCode\";\r\n    public static final String ITEMNO_NAMESTR = \"ItemNo\";\r\n    public static final String ITEMTYPE_NAMESTR = \"Itemsoort\";\r\n\r\n    public static final String IMAGEBASE64_NAMESTR = \"Image_base64\";\r\n    public static final String INV_AUTOCLOSE_BIN_NAMESTR = \"Inv_auto_close_bin\";\r\n    public static final String INV_PRECOUNT_NAMESTR = \"Inv_precount\";\r\n    public static final String INV_AMOUNT_MANUAL_NAMESTR = \"Inv_Amount_manual\";\r\n    public static final String INV_BARCODECHECK_NAMESTR = \"Inv_barcode_check\";\r\n    public static final String INV_ADD_EXTRA_BIN_NAMESTR = \"Inv_add_extra_bin\";\r\n\r\n    public static final String INVENTORYWITHPICTURE_NAMESTR = \"Inv_with_picture\";\r\n    public static final String INVENTORYWITHPICTURE_AUTO_OPEN_NAMESTR = \"Inv_with_picture_auto_open\";\r\n    public static final String INVENTORYWITHPICTURE_PREFETCH_NAMESTR = \"Inv_with_picture_prefetch\";\r\n\r\n    public static final String ISINPUT_NAMESTR = \"IsInput\";\r\n    public static final String ISREQUIRED_NAMESTR = \"Isrequired\";\r\n    public static final String ISPROCESSINGORPARKED_NAMESTR = \"IsProcessingOrParked\";\r\n\r\n\r\n\r\n    //endregion I\r\n\r\n    //region L\r\n    public static final String LANGUAGEDUTCH_NAMESTR = \"Taal\";\r\n    public static final String LABELCODE_NAMESTR = \"Labelcode\";\r\n    public static final String LAYOUT_NAMESTR = \"Layout\";\r\n    public static final String LICENSE_NAMESTR = \"License\";\r\n    public static final String LICENSE_NL_NAMESTR = \"Licentie\";\r\n    public static final String LINE_NAMESTR = \"Line\";\r\n    public static final String LINES_NAMESTR = \"Lines\";\r\n    public static final String LINENO_NAMESTR = \"LineNo\";\r\n    public static final String LINENOTAKE_NAMESTR = \"LineNoTake\";\r\n    public static final String LOCALSTATUS_NAMESTR = \"LocalStatus\";\r\n    public static final String LOCAL_QUANTITYTAKEN_NAMESTR = \"LocalQuantityTaken\";\r\n    public static final String LOCAL_QUANTITYPLACED_NAMESTR = \"LocalQuantityPlaced\";\r\n    //endregion L\r\n\r\n    //region M\r\n    public static final String MOVEDEFAULTBIN_NAMESTR = \"Move_default_bin\";\r\n    public static final String PICKDEFAULTSTORAGEBIN = \"Pick_default_storage_bin\";\r\n\r\n\r\n\r\n    public static final String MOVEAMOUNTMANUAL_NAMESTR = \"Move_Amount_manual\";\r\n    public static final String MOVEBARCODECHECK_NAMESTR = \"Move_Barcode_check\";\r\n    public static final String MOVEVALIDATESTOCK_NAMESTR = \"Move_validate_stock\";\r\n    public static final String MOVEVALIDATESTOCKENFORCE_NAMESTR = \"Move_validate_stock_enforce\";\r\n    public static final String MOVE_MT_TAKEAMOUNTMANUAL_NAMESTR = \"Move_MT_take_amount_manual\";\r\n    public static final String MOVE_MT_TAKEAUTOITEM_NAMESTR = \"Move_MT_take_auto_item\";\r\n    public static final String MOVE_MT_TAKEAUTOITEMCONTAINERONCE_NAMESTR = \"Move_MT_take_auto_item_container_once\";\r\n    public static final String MOVE_MT_TAKEALLOWEND_NAMESTR = \"Move_MT_take_allow_end\";\r\n    public static final String MOVE_MT_TAKEIGNOREUNDERTAKE_NAMESTR = \"Move_MT_take_ignore_undertake\";\r\n    public static final String MOVE_MT_TAKEAUTOACCEPTSINGLEPIECE_NAMESTR = \"Move_MT_take_auto_accept_single_piece\";\r\n    public static final String MOVE_MT_PLACEAMOUNTMANUAL_NAMESTR = \"Move_MT_place_amount_manual\";\r\n    public static final String MOVE_MT_PLACEAUTOITEM_NAMESTR = \"Move_MT_place_auto_item\";\r\n    public static final String MOVE_AUTOACCEPTATREQUESTED_NAMESTR = \"Move_auto_accept_at_requested\";\r\n    public static final String MOVE_NOEXTRABINS_NAMESTR = \"Move_no_extra_bins\";\r\n    public static final String MOVE_NOEXTRAITEMS_NAMESTR = \"Move_no_extra_items\";\r\n    public static final String MOVE_NOEXTRAPIECES_NAMESTR = \"Move_no_extra_pieces\";\r\n    public static final String MOVEWITHPICTURE_NAMESTR = \"Move_with_picture\";\r\n    public static final String MOVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Move_with_picture_auto_open\";\r\n    public static final String MOVEWITHPICTURE_PREFETCH_NAMESTR = \"Move_with_picture_prefetch\";\r\n    //endregion M\r\n\r\n    //region N\r\n    public static final String NAMEDUTCH_NAMESTR = \"Naam\";\r\n    public static final String NAMEADDITION_NAMESTR = \"Naamtoevoeging\";\r\n    public static final String NAMESHORT_NAMESTR = \"Naam_kort\";\r\n\r\n\r\n    public static final String NUMBEROFBINS_NAMESTR = \"Aantal_bins\";\r\n    //endregion N\r\n\r\n    //region O\r\n    public static final String ORDERDUTCH_NAMESTR = \"Volgorde\";\r\n    public static final String OMSCHRIJVING_NAMESTR = \"Omschrijving\";\r\n    public static final String ORDERNUMBER_NAMESTR = \"Opdrachtnummer\";\r\n    public static final String ORDERTYPE_NAMESTR = \"Opdrachttype\";\r\n    public static final String ORIGINDUTCH_NAMESTR = \"Herkomstcode\";\r\n    public static final String ORIGINKEYDUTCH_NAMESTR = \"Herkomstsleutel\";\r\n    //endregion O\r\n\r\n    //region P\r\n\r\n    public static final String PACKAGECONTAINER_NAMESTR = \"PackageContainer\";\r\n    public static final String PACKAGECONTAINERTYPE_NAMESTR = \"PackageContainersoort\";\r\n    public static final String PACKAGEITEMCOUNT_NAMESTR = \"PackageItemCount\";\r\n    public static final String PACKAGEWEIGHTING_NAMESTR = \"PackageWeightInG\";\r\n    public static final String PACKAGETYPE_NAMESTR = \"PackageType\";\r\n    public static final String PACKAGESEQUENCENUMBER_NAMESTR = \"PackageSequenceNumber\";\r\n    public static final String PACKINGTABLE_NAMESTR = \"Packingtable\";\r\n    public static final String PHONE_NAMESTR = \"PhoneNumber\";\r\n    public static final String PHONENL_NAMESTR = \"Telefoon\";\r\n    public static final String PICKSALESASKWORKPLACE_NAMESTR = \"Pick_Sales_ask_workplace\";\r\n    public static final String PICKTRANSFERASKWORKPLACE_NAMESTR = \"Pick_Transfer_ask_workplace\";\r\n    public static final String PICKAUTONEXT_NAMESTR = \"Pick_Auto_next\";\r\n    public static final String PICKBARCODECHECK_NAMESTR = \"Pick_Barcode_check\";\r\n    public static final String PICKPICKPVVKKOEACHPIECE_NAMESTR = \"Pick_Pick_PV_VKO_each_piece\";\r\n    public static final String PICKPICKTOCONTAINER_NAMESTR = \"Pick_Pick_to_container\";\r\n    public static final String PICKPICKTOCONTAINERTYPE_NAMESTR = \"Pick_Pick_to_container_type\";\r\n    public static final String PICKPRINTADDRESSLABEL_NAMESTR = \"Pick_Print_adreslabel\";\r\n    public static final String PICKPRINTCONTENTLABEL_NAMESTR = \"Pick_Print_contentlabel\";\r\n    public static final String PICKWITHPICTURE_NAMESTR = \"Pick_with_picture\";\r\n    public static final String PICKWITHPICTURE_AUTO_OPEN_NAMESTR = \"Pick_with_picture_auto_open\";\r\n    public static final String PICKWITHPICTURE_PREFETCH_NAMESTR = \"Pick_with_picture_prefetch\";\r\n    public static final String PICKACTIVITYBINREQUIRED_NAMESTR = \"Pick_Activity_bin_required\";\r\n    public static final String PICKQCCHECKCOUNT_NAMESTR = \"Pick_Qc_check_count\";\r\n\r\n    public static final String POSITIONSTART_NAMESTR = \"Position_start\";\r\n    public static final String POSITIONEND_NAMESTR = \"Position_end\";\r\n\r\n    public  static final String PRIORITY_NAMESTR = \"Priority\";\r\n\r\n    public static final String PRICE_NAMESTR = \"Price\";\r\n    public static final String PRINTDOCUMENTS_NAMESTR = \"PrintDocuments\";\r\n    public static final String PROCESSINGSEQUENCE_NAMESTR = \"ProcessingSequence\";\r\n    public static final String PROPERTY_NAMESTR = \"Property\";\r\n    public static final String PROPERTYCODE_NAMESTR = \"Propertycode\";\r\n    public static final String PROPERTYDUTCH_NAMESTR = \"Propertie\";\r\n    public static final String PROPERTYSDUTCH_NAMESTR = \"Properties\";\r\n    public static final String PROPERTYGROUP_NAMESTR = \"Propertiegroep\";\r\n    public static final String ADDRESSES_NAMESTR = \"Addresses\";\r\n    public static final String SHIPPINGMETHODS_NAMESTR = \"ShippingMethods\";\r\n    public static final String COMPOSITEBARCODESPLITTED_NAMESTR = \"Composite_barcode\";\r\n    public static final String COMPOSITEBARCODETYPE_NAMESTR = \"Compositebarcode_type\";\r\n    public static final String FIELDSEPERATOR_NAMESTR = \"Field_separator\";\r\n    public static final String LAYOUTREGEX_NAMESTR = \"Layout_regex\";\r\n    public static final String LAYOUTTYPE_NAMESTR = \"Layout_type\";\r\n\r\n\r\n    public static final String PICKORDERLINEBARCODE_LINENO = \"LineNo\";\r\n    public static final String PICKORDERLINEBARCODE_BARCODE = \"Barcode\";\r\n    public static final String PICKORDERLINEBARCODE_QUANTITY = \"Quantity\";\r\n    public static final String PICKORDERLINEBARCODE_ISMANUAL = \"IsManual\";\r\n    //endregion P\r\n\r\n    //region Q\r\n    public static final String QUANTITY_NAMESTR = \"Quantity\";\r\n\r\n    public static final String QUANTITYAVAILABLE_NAMESTR = \"Voorraad_beschikbaar\";\r\n    public static final String QUANTITYHANDLED_NAMESTR = \"QuantityHandled\";\r\n    public static final String QUANTITYHANDLEDALLSCANNERS_NAMESTR = \"QuantityHandledAllScanners\";\r\n    public static final String QUANTITYHANDLEDSUM_NAMESTR = \"QuantityHandledSum\";\r\n    public static final String QUANTITYPERUNITOFMEASURE_NAMESTR = \"QtyPerUnitOfMeasure\";\r\n    public static final String QUANTITYREJECTED_NAMESTR = \"QuantityRejected\";\r\n    public static final String QUANTITYCHECKED_NAMESTR = \"QuantityChecked\";\r\n    public static final String QUANTITYTOTAL_NAMESTR = \"QuantityTotal\";\r\n    public static final String QUANTITYTAKEN_NAMESTR = \"QuantityTaken\";\r\n    public static final String QUANTITYHANDLEDTAKE_NAMESTR = \"QuantityHandled_take\";\r\n    public static final String QUANTITYTAKE_NAMESTR = \"Quantity_take\";\r\n    public static final String QUANTITYTAKENOTEXPORTED_NAMESTR = \"QuantityHandled_take_not_exported\";\r\n    public static final String QUANTITYTAKEEXPORTED_NAMESTR = \"QuantityHandled_take_exported\";\r\n    //endregion Q\r\n\r\n    //region R\r\n    public static final String RECEIVEDEFAULTBIN_NAMESTR = \"Receive_default_bin\";\r\n    public static final String REGION_NAMESTR = \"Regio\";\r\n    public static final String REJECTPICK_NAMESTR = \"RejectPick\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGINTAKE_NAMESTR = \"Receive_intake_eo_packaging_intake\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGSHIPPED_NAMESTR = \"Receive_intake_eo_packaging_shipped\";\r\n\r\n    public static final String RECEIVEWITHPICTURE_NAMESTR = \"Receive_with_picture\";\r\n    public static final String RECEIVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Receive_with_picture_auto_open\";\r\n    public static final String RECEIVEWITHPICTURE_PREFETCH_NAMESTR = \"Receive_with_picture_prefetch\";\r\n    public static final String REQUESTENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDSTARTDATETIME_NAMESTR = \"RequestedStartDateTime\";\r\n    public static final String REMEMBERVALUE_NAMESTR = \"RememberValue\";\r\n    public static final String RETURNDEFAULTBIN_NAMESTR = \"Retour_default_bin\";\r\n\r\n    public static final String RECEIVEDDATETIME_NAMESTR = \"ReceivedDateTime\";\r\n    public static final String RECEIVEEXPORTPART_NAMESTR = \"Receive_export_part\";\r\n    public static final String RECEIVE_AMOUNT_MANUAL_NAMESTR = \"Receive_Amount_manual\";\r\n    public static final String RECEIVEAMOUNTMANUAL_EO_NAMESTR = \"Receive_Amount_manual_eo\";\r\n    public static final String RECEIVEBARCODECHECK_NAMESTR = \"Receive_Barcode_check\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATREQUESTED_NAMESTR = \"Receive_store_auto_accept_at_requested\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATNEWITEM_NAMESTR = \"Receive_store_auto_accept_at_new_item\";\r\n    public static final String RECEIVESTOREAUTOACCEPTVALIDATIONMESSAGE_NAMESTR = \"Receive_store_auto_accept_validation_message\";\r\n    public static final String RECEIVENOEXTRABINS_NAMESTR = \"Receive_no_extra_bins\";\r\n    public static final String RECEIVENOEXTRAITEMS_NAMESTR = \"Receive_no_extra_items\";\r\n    public static final String RECEIVENOEXTRAPIECES_NAMESTR = \"Receive_no_extra_pieces\";\r\n    public static final String RECEIVEMATAUTOSPLITINCOMPLETELINE_NAMESTR = \"Receive_mat_auto_split_incomplete_line\";\r\n\r\n    public static final String RETOURREDEN_NAMESTR = \"Retourreden\";\r\n    public static final String RETOURAMAOUNTMANUAL_NAMESTR = \"Retour_Amount_manual\";\r\n    public static final String RETOURBARCODECHECK_NAMESTR = \"Retour_Barcode_check\";\r\n    public static final String RETOURMULTIDOCUMENT_NAMESTR = \"Retour_multi_document\";\r\n    public static final String RETOURORDERBINNOCHECK_NAMESTR = \"Retour_Order_bin_no_check\";\r\n\r\n\r\n    public static final String REASON_NAMESTR = \"Reason\";\r\n    public static final String REASONNL_NAMESTR = \"Reden\";\r\n    public static final String RETURN_NAMESTR = \"Return\";\r\n    public static final String RETURNEXTERNAL_NAMESTR = \"ReturnExternal\";\r\n\r\n    public static final String RETOURWITHPICTURE_NAMESTR = \"Retour_with_picture\";\r\n    public static final String RETURNADDRESSCODE_NAMESTR = \"ReturnAddressCode\";\r\n    public static final String RETURNSENDERADDRESSCODE_NAMESTR = \"ReturnSenderAddressCode\";\r\n    public static final String RETURNSHIPPINGADDRESSCODE_NAMESTR = \"ReturnShippingAddressCode\";\r\n    //endregion R\r\n\r\n    //region S\r\n    public static final String SALESORDER_NAMESTR = \"Salesorder\";\r\n    public static final String SCANNER_NAMESTR = \"Scanner\";\r\n    public static final String SENDERADDRESSCODE_NAMESTR = \"SenderAddressCode\";\r\n\r\n    public static final String SEQUENCENOHANDLED_NAMESTR = \"SequenceNoHandled\";\r\n    public static final String SETTINGCODE_NAMESTR = \"SettingCode\";\r\n    public static final String SETTINGVALUE_NAMESTR = \"SettingValue\";\r\n    public static final String SETTING_NAMESTR = \"Instelling\";\r\n    public static final String SINGLEARTICLEORDERS_NAMESTR = \"SingleArticleOrders\";\r\n    public static final String STATUS_NAMESTR = \"Status\";\r\n    public static final String STATUSSHIPPING_NAMESTR = \"StatusShipping\";\r\n    public static final String STATUSPACKING_NAMESTR = \"StatusPacking\";\r\n    public static final String STATUSPRINTATSTART_NAMESTR = \"StatusPrintAtStart\";\r\n    public static final String STOCKOWNER_NAMESTR = \"StockOwner\";\r\n    public static final String SORTORDER_NAMESTR = \"Volgorde\";\r\n    public static final String SORTING_NAMESTR = \"Sortering\";\r\n    public static final String SOURCEDOCUMENT_NAMESTR = \"SourceDocument\";\r\n    public static final String SOURCENO_NAMESTR = \"SourceNo\";\r\n    public static final String SORTINGSEQUENCENO_NAMESTR = \"SortingSequenceNo\";\r\n    public static final String SORTINGSEQUENCENOPLACE_NAMESTR = \"SortingSequenceNo_place\";\r\n    public static final String STORAGEBINCODE_NAMESTR = \"StorageBinCode\";\r\n    public static final String STOREBINCODE_NAMESTR = \"StoreBinCode\";\r\n    public static final String STORESOURCEORDER_NAMESTR = \"StoreSourceOpdracht\";\r\n    public static final String STREETNL_NAMESTR = \"Straat\";\r\n    public static final String STREET_NAMESTR = \"Street\";\r\n    public static final String STREETCOMPLEMENTERD_NAMESTR = \"StreetComplemented\";\r\n    public static final String SEQUENCE_NAMESTR = \"Order\";\r\n    public static final String SHIPPINGAGENT_NAMESTR = \"Expediteur\";\r\n    public static final String SHIPPINGLABELS_NAMESTR = \"ShippingLabels\";\r\n    public static final String SERVICE_NAMESTR = \"Service\";\r\n    public static final String SHIPPINGUNIT_NAMESTR = \"Verzendeenheid\";\r\n    public static final String SHIPPINGMETHOD_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGMETHODCODE_NAMESTR = \"ShippingMethodCode\";\r\n    public static final String SHIPPINGMETHODVALUE_NAMESTR = \"ShippingMethodValue\";\r\n    public static final String SHIPPINGUNITQUANTITYUSED_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGAGENTCODE_NAMESTR = \"ShippingAgentCode\";\r\n    public static final String SHIPPINGAGENTSERVICECODE_NAMESTR = \"ShippingAgentServiceCode\";\r\n    public static final String SHIPPINGADDRESSCODE_NAMESTR = \"ShippingAddressCode\";\r\n    public static final String SHIPPINGADDRESSTYPE_NAMESTR = \"ShippingAddressType\";\r\n\r\n    public static final String SHOWONTERMINAL_NAMESTR = \"ShowOnTerminal\";\r\n    public static final String SOURCETYPE_NAMESTR = \"SourceType\";\r\n    public static final String SORTINGSEQUENCENOTAKE_NAMESTR = \"SortingSequenceNo_take\";\r\n    public static final String STRIPTHIS_NAMESTR = \"Strip_this\";\r\n    //endregion S\r\n\r\n    //region T\r\n    public static final String TAKENTIMESTAMP_NAMESTR = \"TakenTimestamp\";\r\n    public static final String TEMPLATE_NAMESTR = \"Template\";\r\n    public static final String TEXTDUTCH_NAMESTR = \"Tekst\";\r\n    public static final String TRANSLATIONDUTCH_NAMESTR = \"Vertaling\";\r\n    //endregion T\r\n\r\n\r\n    //region U\r\n    public static final String USEFORSTORAGE_NAMESTR = \"UseForStorage\";\r\n    public static final String USEFORRETURNSALES_NAMESTR = \"UseForReturnSales\";\r\n    public static final String UNIQUNESS_NAMESTR = \"Uniqueness\";\r\n    public static final String UNITOFMEASURE_NAMESTR = \"UnitOfMeasure\";\r\n    public static final String USERNAME_NAMESTR = \"Gebruikersnaam\";\r\n    //endregion U\r\n\r\n    //region V\r\n    public static final String VALUE_NAMESTR = \"Value\";\r\n    public static final String VALUENL_NAMESTR = \"Waarde\";\r\n    public static final String VALUEHANDLED_NAMESTR = \"ValueHandled\";\r\n    public static final String VARIANTCODE_NAMESTR = \"VariantCode\";\r\n    public static final String VENDORITEMNO_NAMESTR = \"VendorItemNo\";\r\n    public static final String VENDORITEMDESCRIPTION_NAMESTR = \"VendorItemDescription\";\r\n    public static final String VALUETYPE_NAMESTR = \"ValueType\";\r\n    public static final String VERZENDLABEL_STATUS_NAMESTR = \"Verzendlabel_status\";\r\n\r\n\r\n    //endregion V\r\n\r\n    //region W\r\n    public static final String WAREHOUSELOCATION_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String WEBSERVICETIMEOUTERPINS_NAMESTR = \"Webservice_timeout_erp_in_s\";\r\n    public static final String WORKPLACE_NAMESTR = \"Workplace\";\r\n    public static final String WORKPLACE_DUTCH_NAMESTR = \"Werkplek\";\r\n    //endregion W\r\n\r\n    //region Z\r\n    public static final String ZIPCODENL_NAMESTR = \"Postcode\";\r\n    public static final String ZIPCODE_NAMESTR = \"Zipcode\";\r\n    public static final String ZONE_NAMESTR = \"Zone\";\r\n\r\n\r\n\r\n    //endregion Z\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/General/cDatabase.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/SSU_WHS/General/cDatabase.java	(date 1617283728673)
---+@@ -46,6 +46,8 @@
---+     public static final String TABLENAME_INVENTORYORDER = "InventoryOrder";
---+     public static final String TABLENAME_INVENTORYORDERBIN = "InventoryOrderBin";
---+     public static final String TABLENAME_INVENTORYORDERLINE = "InventoryOrderLines";
---++    public static final String TABLENAME_INVENTORYORDERLINEPROPERTY = "InventoryorderlineProperty";
---++    public static final String TABLENAME_INVENTORYORDERLINEPROPERTYVALUE = "InventoryorderlinePropertyValue";
---+     public static final String TABLENAME_INVENTORYORDERBARCODE = "InventoryOrderBarcodes";
---+     public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = "InventoryOrderLineBarcodes";
---+     public static final String TABLENAME_INTAKEORDERMATLINES  = "IntakeLinesMAT";
---+Index: app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package SSU_WHS.General;\r\n\r\nimport android.content.Context;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.RoomDatabase;\r\n\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageEntity;\r\nimport SSU_WHS.Basics.ArticleImages.iArticleImageDao;\r\nimport SSU_WHS.Basics.Authorisations.cAuthorisationEntity;\r\nimport SSU_WHS.Basics.Authorisations.iAuthorisationDao;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwnerEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayoutEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.iBarcodeLayoutDao;\r\nimport SSU_WHS.Basics.Branches.cBranchEntity;\r\nimport SSU_WHS.Basics.Branches.iBranchDao;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcodeEntity;\r\nimport SSU_WHS.Basics.CompositeBarcode.iCompositeBarcodeDao;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.cCompositeBarcodePropertyEntity;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.iCompositeBarcodePropertyDao;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisationEntity;\r\nimport SSU_WHS.Basics.CustomAuthorisations.iCustomAuthorisationDao;\r\nimport SSU_WHS.Basics.ItemProperty.cItemPropertyEntity;\r\nimport SSU_WHS.Basics.ItemProperty.iItemPropertyDao;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplateEntity;\r\nimport SSU_WHS.Basics.LabelTemplate.iLabelTemplateDao;\r\nimport SSU_WHS.Basics.Packaging.cPackagingEntity;\r\nimport SSU_WHS.Basics.Packaging.iPackagingDao;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroupEntity;\r\nimport SSU_WHS.Basics.PropertyGroup.iPropertyGroupDao;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.cPropertyGroupPropertyEntity;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.iPropertyGroupPropertyDao;\r\nimport SSU_WHS.Basics.Scanners.cScannerEntity;\r\nimport SSU_WHS.Basics.Scanners.iScannerDao;\r\nimport SSU_WHS.Basics.Settings.cSettingsEntity;\r\nimport SSU_WHS.Basics.Settings.iSettingsDao;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnitEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.iShippingAgentServiceShippingUnitDao;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentServiceEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServices.iShippingAgentServiceDao;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgentEntity;\r\nimport SSU_WHS.Basics.ShippingAgents.iShippingAgentDao;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentServiceShipMethodEntity;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.iShippingAgentServiceShipMethodDao;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwnerEntity;\r\nimport SSU_WHS.Basics.StockOwner.iStockOwnerDao;\r\nimport SSU_WHS.Basics.Translations.cTranslationEntity;\r\nimport SSU_WHS.Basics.Translations.iTranslationDao;\r\nimport SSU_WHS.Basics.Users.cUserEntity;\r\nimport SSU_WHS.Basics.Users.iUserDao;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceEntity;\r\nimport SSU_WHS.Basics.Workplaces.iWorkplaceDao;\r\nimport SSU_WHS.General.Comments.cCommentEntity;\r\nimport SSU_WHS.General.Comments.iCommentDao;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.iIntakeorderBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.cIntakeorderMATLineBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.iIntakeorderMATLineBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLineEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.iIntakeorderMATLineDao;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorderEntity;\r\nimport SSU_WHS.Intake.Intakeorders.iIntakeorderDao;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorderEntity;\r\nimport SSU_WHS.Inventory.InventoryOrders.iInventoryorderDao;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.iInventoryorderBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.iInventoryorderLineBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.iInventoryorderLineDao;\r\nimport SSU_WHS.Move.Moveorders.cMoveorderEntity;\r\nimport SSU_WHS.Move.Moveorders.iMoveorderDao;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderBarcodes.iMoveorderBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.iMoveorderLineBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLineEntity;\r\nimport SSU_WHS.Move.MoveorderLines.iMoveorderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.cPackAndShipAddressEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.iPackAndShipAddressDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.cPackAndShipBarcodeEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.iPackAndShipBarcodeDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.cPackAndShipOrderLineEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.iPackAndShipOrderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrderEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.iPackAndShipOrderDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.cPackAndShipSettingEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.iPackAndShipSettingDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.cPackAndShipShipmentEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.iPackAndShipShipmentDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.cPackAndShipShippingMethodEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.iPackAndShipShippingMethodDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.cPackAndShipShippingPackageEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.iPackAndShipShippingPackageDao;\r\nimport SSU_WHS.Picken.FinishSinglePieceLine.cPickorderLineFinishSinglePieceEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.cPickorderAddressEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.iPickorderAddressDao;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderBarcodes.iPickorderBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.iPickorderCompositeBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.iPickorderLineBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLinePackAndShip.cPickorderLinePackAndShipEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.iPickorderLinePropertyDao;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.iPickorderLinePropertyValueDao;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.PickorderSetting.cPickorderSettingEntity;\r\nimport SSU_WHS.Picken.PickorderSetting.iPickorderSettingDao;\r\nimport SSU_WHS.Picken.PickorderShipPackages.cPickorderShipPackageEntity;\r\nimport SSU_WHS.Picken.PickorderShipPackages.iPickorderShipPackageDao;\r\nimport SSU_WHS.Picken.Pickorders.cPickorderEntity;\r\nimport SSU_WHS.Picken.Pickorders.iPickorderDao;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTableEntity;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.iSalesOrderPackingTableDao;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLineEntity;\r\nimport SSU_WHS.Receive.ReceiveLines.iReceiveorderLineDao;\r\nimport SSU_WHS.Return.ReturnOrder.cReturnorderEntity;\r\nimport SSU_WHS.Return.ReturnOrder.iReturnorderDao;\r\nimport SSU_WHS.Return.ReturnorderBarcode.cReturnorderBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderBarcode.iReturnorderBarcodeDao;\r\nimport SSU_WHS.Return.ReturnorderDocument.cReturnorderDocumentEntity;\r\nimport SSU_WHS.Return.ReturnorderDocument.iReturnorderDocumentDao;\r\nimport SSU_WHS.Return.ReturnorderLine.cReturnorderLineEntity;\r\nimport SSU_WHS.Return.ReturnorderLine.iReturnorderLineDao;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.cReturnorderLineBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.iReturnorderLineBarcodeDao;\r\nimport SSU_WHS.ScannerLogon.cScannerLogonEntity;\r\nimport SSU_WHS.ScannerLogon.iScannerLogonDao;\r\n\r\n@Database(entities = {\r\n        cScannerLogonEntity.class,\r\n        cWorkplaceEntity.class,\r\n        cBarcodeLayoutEntity.class,\r\n        cAuthorisationEntity.class,\r\n        cUserEntity.class,\r\n        cBranchEntity.class,\r\n        cSettingsEntity.class,\r\n        cPickorderEntity.class,\r\n        cPickorderLineEntity.class,\r\n        cPickorderLineBarcodeEntity.class,\r\n        cPickorderLinePropertyEntity.class,\r\n        cPickorderLinePropertyValueEntity.class,\r\n        cArticleImageEntity.class,\r\n        cPickorderBarcodeEntity.class,\r\n        cPickorderCompositeBarcodeEntity.class,\r\n        cCommentEntity.class,\r\n        cSalesOrderPackingTableEntity.class,\r\n        cPickorderAddressEntity.class,\r\n        cShippingAgentEntity.class,\r\n        cShippingAgentServiceEntity.class,\r\n        cShippingAgentServiceShippingUnitEntity.class,\r\n        cShippingAgentServiceShipMethodEntity.class,\r\n        cPickorderShipPackageEntity.class,\r\n        cPickorderLineFinishSinglePieceEntity.class,\r\n        cPickorderSettingEntity.class,\r\n        cItemPropertyEntity.class,\r\n        cPropertyGroupEntity.class,\r\n        cPropertyGroupPropertyEntity.class,\r\n        cPickorderLinePackAndShipEntity.class,\r\n        cInventoryorderEntity.class,\r\n        cInventoryorderBinEntity.class,\r\n        cInventoryorderLineEntity.class,\r\n        cInventoryorderBarcodeEntity.class,\r\n        cInventoryorderLineBarcodeEntity.class,\r\n        cIntakeorderEntity.class,\r\n        cIntakeorderMATLineEntity.class,\r\n        cIntakeorderBarcodeEntity.class,\r\n        cIntakeorderMATLineBarcodeEntity.class,\r\n        cReturnorderEntity.class,\r\n        cReturnorderBarcodeEntity.class,\r\n        cReturnorderDocumentEntity.class,\r\n        cReturnorderLineEntity.class,\r\n        cReturnorderLineBarcodeEntity.class,\r\n        cReceiveorderLineEntity.class,\r\n        cMoveorderEntity.class,\r\n        cMoveorderLineEntity.class,\r\n        cMoveorderBarcodeEntity.class,\r\n        cMoveorderLineBarcodeEntity.class,\r\n        cPackagingEntity.class,\r\n        cScannerEntity.class,\r\n        cCustomAuthorisationEntity.class,\r\n        cTranslationEntity.class,\r\n        cCompositeBarcodeEntity.class,\r\n        cCompositeBarcodePropertyEntity.class,\r\n        cPackAndShipOrderEntity.class,\r\n        cPackAndShipOrderLineEntity.class,\r\n        cPackAndShipBarcodeEntity.class,\r\n        cPackAndShipShipmentEntity.class,\r\n        cPackAndShipAddressEntity.class,\r\n        cPackAndShipSettingEntity.class,\r\n        cPackAndShipShippingMethodEntity.class,\r\n        cPackAndShipShippingPackageEntity.class,\r\n        cStockOwnerEntity.class,\r\n        cAuthorizedStockOwnerEntity.class,\r\n        cLabelTemplateEntity.class,\r\n        },version = 150)\r\n\r\n\r\npublic abstract class acScanSuiteDatabase extends RoomDatabase {\r\n    public abstract iScannerLogonDao scannerLogonDao();\r\n    public abstract iSettingsDao settingsDao();\r\n    public abstract iBarcodeLayoutDao barcodeLayoutDao();\r\n    public abstract iAuthorisationDao authorisationDao();\r\n    public abstract iScannerDao scannerDao();\r\n    public abstract iWorkplaceDao workplaceDao();\r\n    public abstract iBranchDao branchDao();\r\n    public abstract iUserDao userDao();\r\n    public abstract iPickorderDao pickorderDao();\r\n    public abstract iPickorderLineDao pickorderLineDao();\r\n    public abstract iPickorderLineBarcodeDao pickorderLineBarcodeDao();\r\n    public abstract iPickorderLinePropertyDao pickorderLinePropertyDao();\r\n    public abstract iPickorderLinePropertyValueDao pickorderLinePropertyValueDao();\r\n    public abstract iArticleImageDao articleImageDao();\r\n    public abstract iPickorderBarcodeDao pickorderBarcodeDao();\r\n    public abstract iPickorderCompositeBarcodeDao pickorderCompositeBarcodeDao();\r\n    public abstract iCommentDao commentDao();\r\n    public abstract iSalesOrderPackingTableDao salesOrderPackingTableDao();\r\n    public abstract iPickorderAddressDao pickorderAddressDao();\r\n    public abstract iPickorderSettingDao pickorderSettingDao();\r\n    public abstract iShippingAgentDao shippingAgentDao();\r\n    public abstract iShippingAgentServiceDao shippingAgentServiceDao();\r\n    public abstract iShippingAgentServiceShippingUnitDao shippingAgentServiceShippingUnitDao();\r\n    public abstract iShippingAgentServiceShipMethodDao shippingAgentServiceShipMethodDao();\r\n    public abstract iPickorderShipPackageDao pickorderShipPackageDao();\r\n    public abstract iItemPropertyDao itemPropertyDao();\r\n    public abstract iPropertyGroupDao propertyGroupDao();\r\n    public abstract iPropertyGroupPropertyDao propertyGroupPropertyDao();\r\n    public abstract iCompositeBarcodeDao compositeBarcodeDao();\r\n    public abstract iCompositeBarcodePropertyDao compositeBarcodePropertyDao();\r\n    public abstract iInventoryorderDao inventoryorderDao();\r\n    public abstract iInventoryorderBinDao inventoryorderBinDao();\r\n    public abstract iInventoryorderLineDao inventoryorderLineDao();\r\n    public abstract iInventoryorderBarcodeDao inventoryorderBarcodeDao();\r\n    public abstract iInventoryorderLineBarcodeDao inventoryorderLineBarcodeDao();\r\n    public abstract iIntakeorderMATLineDao intakeorderMATLineDao();\r\n    public abstract iIntakeorderDao intakeorderDao();\r\n    public abstract iIntakeorderBarcodeDao intakeorderBarcodeDao();\r\n    public abstract iIntakeorderMATLineBarcodeDao intakeorderMATLineBarcodeDao();\r\n    public abstract iReturnorderDao returnorderDao();\r\n    public abstract iReturnorderDocumentDao returnorderDocumentDao();\r\n    public abstract iReturnorderLineDao returnorderLineDao();\r\n    public abstract iReturnorderBarcodeDao returnorderBarcodeDao();\r\n    public abstract iReturnorderLineBarcodeDao returnorderLineBarcodeDao();\r\n    public abstract iReceiveorderLineDao receiveorderLineDao();\r\n    public  abstract iMoveorderDao moveorderDao();\r\n    public  abstract iMoveorderLineDao moveorderLineDao();\r\n    public  abstract iMoveorderLineBarcodeDao moveorderLineBarcodeDao();\r\n    public  abstract iMoveorderBarcodeDao moveorderBarcodeDao();\r\n    public  abstract iPackagingDao packagingDao();\r\n    public  abstract iCustomAuthorisationDao customAuthorisationDao();\r\n    public  abstract iTranslationDao translationDao();\r\n    public  abstract iPackAndShipOrderDao packAndShipOrderDao();\r\n    public  abstract iPackAndShipOrderLineDao packAndShipOrderLineDao();\r\n    public  abstract iPackAndShipSettingDao packAndShipSettingDao();\r\n    public  abstract iPackAndShipBarcodeDao packAndShipBarcodeDao();\r\n    public  abstract iPackAndShipShipmentDao packAndShipShipmentDao();\r\n    public  abstract iPackAndShipAddressDao packAndShipAddressDao();\r\n    public  abstract iPackAndShipShippingMethodDao packAndShipShippingMethodDao();\r\n    public  abstract iPackAndShipShippingPackageDao packAndShipShippingPackageDao();\r\n    public  abstract iStockOwnerDao stockOwnerDao();\r\n    public  abstract iLabelTemplateDao labelTemplateDao();\r\n\r\n    private static acScanSuiteDatabase INSTANCE;\r\n\r\n    public static acScanSuiteDatabase pGetDatabase(final Context context) {\r\n        if (INSTANCE == null) {\r\n            synchronized (acScanSuiteDatabase.class) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(), acScanSuiteDatabase.class, \"SSU_WHS\").fallbackToDestructiveMigration().build();\r\n                }\r\n            }\r\n        }\r\n        return INSTANCE;\r\n    }\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(date 1617284664624)
---+@@ -71,6 +71,10 @@
---+ import SSU_WHS.Inventory.InventoryorderLineBarcodes.iInventoryorderLineBarcodeDao;
---+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
---+ import SSU_WHS.Inventory.InventoryorderLines.iInventoryorderLineDao;
---++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLinePropertyEntity;
---++import SSU_WHS.Inventory.InventoryorderlineProperty.iInventoryorderlinePropertyDao;
---++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValueEntity;
---++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.iInventoryorderLinePropertyValueDao;
---+ import SSU_WHS.Move.Moveorders.cMoveorderEntity;
---+ import SSU_WHS.Move.Moveorders.iMoveorderDao;
---+ import SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcodeEntity;
---+@@ -169,6 +173,8 @@
---+         cInventoryorderLineEntity.class,
---+         cInventoryorderBarcodeEntity.class,
---+         cInventoryorderLineBarcodeEntity.class,
---++        cInventoryorderLinePropertyEntity.class,
---++        cInventoryorderLinePropertyValueEntity.class,
---+         cIntakeorderEntity.class,
---+         cIntakeorderMATLineEntity.class,
---+         cIntakeorderBarcodeEntity.class,
---+@@ -200,7 +206,7 @@
---+         cStockOwnerEntity.class,
---+         cAuthorizedStockOwnerEntity.class,
---+         cLabelTemplateEntity.class,
---+-        },version = 150)
---++        },version = 151)
---+ 
---+ 
---+ public abstract class acScanSuiteDatabase extends RoomDatabase {
---+@@ -239,6 +245,9 @@
---+     public abstract iInventoryorderLineDao inventoryorderLineDao();
---+     public abstract iInventoryorderBarcodeDao inventoryorderBarcodeDao();
---+     public abstract iInventoryorderLineBarcodeDao inventoryorderLineBarcodeDao();
---++    public abstract iInventoryorderlinePropertyDao inventoryorderlinePropertyDao();
---++    public  abstract  iInventoryorderLinePropertyValueDao inventoryorderLinePropertyValueDao();
---++
---+     public abstract iIntakeorderMATLineDao intakeorderMATLineDao();
---+     public abstract iIntakeorderDao intakeorderDao();
---+     public abstract iIntakeorderBarcodeDao intakeorderBarcodeDao();
---+Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>package nl.icsvertex.scansuite.Activities.Inventory;\r\n\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.InputType;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class InventoryArticleActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    //End Region Public Properties\r\n\r\n    //Region Private\r\n\r\n    private  ConstraintLayout inventoryArticleDetailContainer;\r\n\r\n    private Toolbar toolbar;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n    private  TextView articleDescriptionText;\r\n    private  TextView articleDescription2Text;\r\n    private  TextView articleItemText;\r\n    private  TextView articleBarcodeText;\r\n    private  ImageView articleThumbImageView;\r\n\r\n    private TextView binText;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n\r\n    private  int inventoryCounterMinusHelperInt;\r\n    private  int inventoryCounterPlusHelperInt;\r\n    private  Handler minusHandler;\r\n    private  Handler plusHandler;\r\n\r\n    private  ImageView imageButtonDone;\r\n    private  ImageButton imageButtonBarcode;\r\n    private ImageView imageButtonNoInputPropertys;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public InventoryArticleActivity() {\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_inventoryarticle);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n            super.onPause();\r\n\r\n            if (cAppExtension.activity instanceof  InventoryArticleActivity) {\r\n                cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            }\r\n             LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_intakeactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n\r\n//        invalidateOptionsMenu();\r\n\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(true);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mStartInventoryBINActivity();\r\n                return true;\r\n\r\n            case R.id.item_print_item:\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.message_scan_article));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.inventoryArticleDetailContainer = findViewById(R.id.inventoryArticleDetailContainer);\r\n\r\n        this.toolbar =  findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.binText = findViewById(R.id.binText);\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_inventory);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        String subTitleStr = cInventoryorder.currentInventoryOrder.getOrderNumberStr();\r\n        this.toolbarSubTitle.setText(subTitleStr);\r\n        this.toolbarSubTitle.setSelected(true);\r\n\r\n        setSupportActionBar(this.toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInvAmountManualBln()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        this.inventoryCounterPlusHelperInt = 0;\r\n        this. inventoryCounterMinusHelperInt = 0;\r\n\r\n        this.articleDescriptionText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n        this.articleItemText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());\r\n\r\n        this.binText.setText(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n\r\n        this.mShowQuantityInfo();\r\n        this.mShowArticleImage();\r\n        this.mShowBarcodeInfo();\r\n        this.mHideArticleInfo();\r\n\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n       this.mSetDoneListener();\r\n\r\n        if (cSetting.INV_AMOUNT_MANUAL()) {\r\n            this.mSetNumberListener();\r\n            this.mSetImageButtonBarcodeListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(final cBarcodeScan pvBarcodeScan){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        //Only ARTICLE scans are allowed\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n            mDoUnknownScan(cAppExtension.context.getString(R.string.error_article_scan_mandatory));\r\n            return;\r\n        }\r\n\r\n        //Check if the scanned value belongs to this line\r\n        if (! cInventoryorder.currentInventoryOrder.pCheckBarcodeWithLineBarcodesBln(pvBarcodeScan)) {\r\n\r\n            //Keep the scan, so BIN activity can handle it\r\n            InventoryorderBinActivity.barcodeScanToHandle = pvBarcodeScan;\r\n\r\n            //Close this activity, we are done with the current article\r\n            this.mHandleDone();\r\n           return;\r\n        }\r\n\r\n        this.mShowBarcodeInfo();\r\n\r\n        //Try to raise quantityDbl\r\n        this.mTryToChangeInventoryQuantity(true, false,cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() );\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mTryToChangeInventoryQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n\r\n                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),\r\n                                                                          cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );\r\n\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n            } else {\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;\r\n            }\r\n\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n            return;\r\n        }\r\n\r\n        //negative\r\n\r\n        //Check if value already is zero\r\n        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {\r\n\r\n            //If we have a decimal, correct it to zero\r\n            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {\r\n                pvAmountDbl = 0;\r\n                pvAmountFixedBln = true;\r\n\r\n            } else {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (pvAmountDbl < 0) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n        if (pvAmountFixedBln) {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n        }else {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;\r\n        }\r\n\r\n        //Change quantityDbl in activity\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n    }\r\n\r\n    private  void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cInventoryorderLine.currentInventoryOrderLine.articleImage == null || cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap());\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo() {\r\n\r\n        this.quantityText.setImeOptions(EditorInfo.IME_ACTION_DONE);\r\n        this.quantityText.setSelectAllOnFocus(true);\r\n        this.quantityText.requestFocus();\r\n        this.quantityText.setSingleLine();\r\n        this.quantityText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_TEXT_VARIATION_NORMAL);\r\n        this.quantityText.setCursorVisible(false);\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n        this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (!cSetting.INV_AMOUNT_MANUAL()) {\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n            cUserInterface.pDoNope(this.quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() > 1) {\r\n\r\n            //Try to switch to another barcode for the same article, so the user doesn't have to manually\r\n            cInventoryorderBarcode inventoryorderBarcode = cInventoryorderBarcode.getSingleQuantityBarcodeForItemAndVariant(cInventoryorderBarcode.currentInventoryOrderBarcode);\r\n            if (inventoryorderBarcode != null) {\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n            }\r\n            else\r\n            {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n\r\n    private  void mHandleDone() {\r\n\r\n        //Try to save the line to the database\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pSaveLineViaWebserviceBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_line_save_failed),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        //Change quantityDbl handled in database\r\n        cInventoryorderLine.currentInventoryOrderLine.pUpdateQuantityInDatabase();\r\n\r\n        cUserInterface.pHideGettingData();\r\n        this.mResetCurrents();\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    private void mDoUnknownScan(String pvErrorMessageStr) {\r\n        cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer,pvErrorMessageStr,null,true);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(this.inventoryArticleDetailContainer);\r\n        constraintSetSpace.connect(this.articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(this.inventoryArticleDetailContainer);\r\n\r\n    }\r\n\r\n    private  void mShowBarcodeInfo(){\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode != null) {\r\n            this.articleBarcodeText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getUnitOfMeasureInfoStr());\r\n        } else {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.message_unknown_barcode));\r\n        }\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl() == null || cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 1) {\r\n                    pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLine.currentInventoryOrderLine.barcodesObl().get(0).getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEFRAGMENT_LIST_TAG);\r\n    }\r\n\r\n    private void mStartInventoryBINActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        InventoryorderBinActivity.busyBln = false;\r\n\r\n        final Intent intent = new Intent(cAppExtension.context, InventoryorderBinActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n            cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mResetCurrents(){\r\n        cInventoryorderLine.currentInventoryOrderLine = null;\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = null;\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode = null;\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityHandledDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,99999);\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    inventoryCounterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n                mTryToChangeInventoryQuantity(true, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    inventoryCounterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n                mTryToChangeInventoryQuantity(false, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mSetDoneListener(){\r\n\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mHandleDone();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n        this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n    }\r\n\r\n    //End Region Private Methods\r\n}\r\n
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(date 1617289789323)
---+@@ -48,6 +48,9 @@
---+ import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
---+ import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
---+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
---++import SSU_WHS.Picken.PickorderLines.cPickorderLine;
---++import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
---++import nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;
---+ import nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;
---+ import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
---+ import nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;
---+@@ -62,6 +65,8 @@
---+ 
---+     //Region Private
---+ 
---++    public static boolean cancelledViaPropertysBln;
---++    public static boolean handledViaPropertysBln;
---+     private  ConstraintLayout inventoryArticleDetailContainer;
---+ 
---+     private Toolbar toolbar;
---+@@ -330,6 +335,17 @@
---+     @Override
---+     public void mInitScreen() {
---+ 
---++        if (InventoryArticleActivity.handledViaPropertysBln) {
---++            this.mHandleDone();
---++            return;
---++        }
---++        else
---++        {
---++            if (!InventoryArticleActivity.cancelledViaPropertysBln && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl() != null && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().size() > 0 ) {
---++                mShowItemPropertyInputActivity();
---++                return;
---++            }
---++        }
---+     }
---+ 
---+     //End Region iICSDefaultActivity defaults
---+@@ -358,6 +374,9 @@
---+            return;
---+         }
---+ 
---++
---++
---++
---+         this.mShowBarcodeInfo();
---+ 
---+         //Try to raise quantityDbl
---+@@ -761,5 +780,12 @@
---+         this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);
---+     }
---+ 
---++    private  void mShowItemPropertyInputActivity() {
---++        cUserInterface.pCheckAndCloseOpenDialogs();
---++        Intent intent = new Intent(cAppExtension.context, InventoryorderLineItemPropertyInputActvity.class);
---++        cAppExtension.activity.startActivity(intent);
---++        cAppExtension.activity.finish();
---++    }
---++
---+     //End Region Private Methods
---+ }
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java	(date 1617289071926)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java	(date 1617289071926)
---+@@ -0,0 +1,291 @@
---++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---++
---++import android.text.TextUtils;
---++import android.view.LayoutInflater;
---++import android.view.View;
---++import android.view.ViewGroup;
---++import android.view.animation.AnimationUtils;
---++import android.widget.ImageView;
---++import android.widget.LinearLayout;
---++import android.widget.TextView;
---++
---++import androidx.annotation.NonNull;
---++import androidx.appcompat.widget.AppCompatImageButton;
---++import androidx.appcompat.widget.AppCompatImageView;
---++import androidx.constraintlayout.widget.ConstraintLayout;
---++import androidx.recyclerview.widget.RecyclerView;
---++
---++import java.util.ArrayList;
---++import java.util.List;
---++
---++import ICS.Utils.Scanning.cBarcodeScan;
---++import ICS.Utils.cText;
---++import ICS.cAppExtension;
---++import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderLineItemPropertyInputActvity;
---++import nl.icsvertex.scansuite.R;
---++
---++public class cInventoryorderLinePropertyValueInputAdapter extends RecyclerView.Adapter<cInventoryorderLinePropertyValueInputAdapter.commentViewHolder>{
---++
---++    public static class commentViewHolder extends RecyclerView.ViewHolder{
---++
---++        private final AppCompatImageView imageViewPropertyType;
---++        private final TextView textViewDescription;
---++        private final TextView textViewValue;
---++        private TextView textViewQuantityUsed;
---++        private final ConstraintLayout primaryContent;
---++        private final ConstraintLayout secondaryContent;
---++        private final AppCompatImageButton imageButtonMinus;
---++        private final AppCompatImageButton imageButtonPlus;
---++        private final AppCompatImageButton imageButtonZero;
---++        private final  AppCompatImageButton imageButtonManual;
---++        private final AppCompatImageView imageChevronDown;
---++
---++        public LinearLayout itemPropertyValueInputItemLinearLayout;
---++
---++        public commentViewHolder(View pvView) {
---++            super(pvView);
---++
---++            this.imageViewPropertyType =  pvView.findViewById(R.id.imageViewPropertyType);
---++
---++            this.textViewDescription = pvView.findViewById(R.id.textViewDescription);
---++            this.textViewDescription.setEllipsize(TextUtils.TruncateAt.MARQUEE);
---++            this.textViewDescription.setSingleLine(true);
---++            this.textViewDescription.setMarqueeRepeatLimit(5);
---++            this.textViewDescription.setSelected(true);
---++
---++            this.textViewValue = pvView.findViewById(R.id.textViewValue);
---++
---++            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);
---++
---++            this.itemPropertyValueInputItemLinearLayout = pvView.findViewById(R.id.itemPropertyValueInputItemLinearLayout);
---++            this.primaryContent = pvView.findViewById(R.id.primaryContent);
---++            this.secondaryContent = pvView.findViewById(R.id.secondaryContent);
---++            this.secondaryContent.setVisibility(View.GONE);
---++
---++            this.imageButtonPlus = pvView.findViewById(R.id.imageButtonPlus);
---++            this.imageButtonMinus = pvView.findViewById(R.id.imageButtonMinus);
---++            this.imageButtonZero = pvView.findViewById(R.id.imageButtonZero);
---++            this.imageButtonManual = pvView.findViewById(R.id.imageButtonManual);
---++            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);
---++            this.imageChevronDown = pvView.findViewById(R.id.imageChevronDown);
---++        }
---++    }
---++
---++    //Region Private Properties
---++    private final LayoutInflater layoutInflaterObject;
---++    private final List<LinearLayout> itemPropertyValueLinearLayoutObl = new ArrayList<>();
---++    private List<cInventoryorderLinePropertyValue> localItemPropertyValueObl;
---++    //End Region Private Properties
---++
---++    //Region Constructor
---++    public cInventoryorderLinePropertyValueInputAdapter() {
---++        this.layoutInflaterObject = LayoutInflater.from(cAppExtension.context);
---++    }
---++    //End Region Constructor
---++
---++    @NonNull
---++    @Override
---++    public commentViewHolder onCreateViewHolder(@NonNull ViewGroup pvParentVieGroup, int pvViewTypeInt) {
---++        View itemView = this.layoutInflaterObject.inflate(R.layout.recycler_itempropertyvalue_input, pvParentVieGroup, false);
---++        return new commentViewHolder(itemView);
---++    }
---++
---++    @Override
---++    public void onBindViewHolder(final commentViewHolder pvHolder, int pvPositionInt) {
---++
---++        this.itemPropertyValueLinearLayoutObl.add(pvHolder.itemPropertyValueInputItemLinearLayout);
---++
---++        if (this.localItemPropertyValueObl != null && this.localItemPropertyValueObl.size() > 0) {
---++
---++            final cInventoryorderLinePropertyValue inventoryorderLinePropertyValue = this.localItemPropertyValueObl.get(pvPositionInt);
---++
---++
---++            switch (inventoryorderLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase()) {
---++
---++                case "BOOLEAN":
---++                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_check_black_24dp);
---++                    break;
---++
---++                case "DECIMAL":
---++                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_counter_black_24dp);
---++                    break;
---++
---++                case "TEXT" :
---++                case "CODE":
---++                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_text_black_24dp);
---++                    break;
---++
---++                case "DATE":
---++                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_calendar_black_24dp);
---++                    break;
---++            }
---++
---++            pvHolder.textViewDescription.setText(inventoryorderLinePropertyValue.getItemProperty().getOmschrijvingStr());
---++            pvHolder.textViewValue.setText(inventoryorderLinePropertyValue.getValueStr());
---++            pvHolder.textViewQuantityUsed.setText(cText.pDoubleToStringStr(inventoryorderLinePropertyValue.getQuantityDbl()));
---++
---++            if (inventoryorderLinePropertyValue.getQuantityDbl() == 0 ) {
---++                pvHolder.imageChevronDown.setVisibility(View.GONE);
---++            }
---++
---++            if (inventoryorderLinePropertyValue.getItemProperty().getUniqueBln() && inventoryorderLinePropertyValue.getQuantityDbl() > 0 ) {
---++                pvHolder.imageButtonPlus.setVisibility(View.INVISIBLE);
---++                pvHolder.imageButtonManual.setVisibility(View.INVISIBLE);
---++            }
---++
---++            if (inventoryorderLinePropertyValue == cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue) {
---++                pvHolder.secondaryContent.setVisibility(View.VISIBLE);
---++            }
---++
---++
---++            pvHolder.primaryContent.setOnClickListener(new View.OnClickListener() {
---++                @Override
---++                public void onClick(final View view) {
---++
---++                    if (inventoryorderLinePropertyValue.getQuantityDbl() == 0) {
---++                        return;
---++                    }
---++
---++                    AnimationUtils.loadAnimation(cAppExtension.context.getApplicationContext(), R.anim.rotate_180);
---++
---++                    //Close all others
---++                    for (LinearLayout aLayout : itemPropertyValueLinearLayoutObl) {
---++                        ConstraintLayout secondaryLayout = aLayout.findViewById(R.id.secondaryContent);
---++                        ConstraintLayout primaryLayout = aLayout.findViewById(R.id.primaryContent);
---++                        if (secondaryLayout != null) {
---++                            if (primaryLayout != view) {
---++                                if (secondaryLayout.getVisibility() == View.VISIBLE) {
---++                                    ImageView chevronImage = primaryLayout.findViewById(R.id.imageChevronDown);
---++                                    if (chevronImage != null) {
---++                                        chevronImage.animate().rotation(0).start();
---++                                    }
---++                                }
---++                                secondaryLayout.animate().scaleY(0).start();
---++                                secondaryLayout.setVisibility(View.GONE);
---++                            }
---++                        }
---++                    }
---++
---++                    boolean isExpanded;
---++                    isExpanded = pvHolder.secondaryContent.getVisibility() == View.VISIBLE;
---++
---++                    if (isExpanded) {
---++                        pvHolder.imageChevronDown.animate().rotation(0).start();
---++                        pvHolder.secondaryContent.animate().scaleY(0).start();
---++                        pvHolder.secondaryContent.setVisibility(View.GONE);
---++                    }
---++                    else {
---++                        pvHolder.imageChevronDown.animate().rotation(180).start();
---++                        pvHolder.secondaryContent.animate().scaleY(1).start();
---++                        pvHolder.secondaryContent.setVisibility(View.VISIBLE);
---++                    }
---++
---++
---++                }
---++            });
---++
---++            pvHolder.imageButtonPlus.setOnClickListener(new View.OnClickListener() {
---++                @Override
---++                public void onClick(View view) {
---++
---++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---++
---++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---++                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity)cAppExtension.activity;
---++                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
---++                        inventoryorderLineItemPropertyInputActvity.pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.getValueStr()));
---++                    }
---++
---++                }
---++            });
---++
---++            pvHolder.imageButtonMinus.setOnClickListener(new View.OnClickListener() {
---++                @Override
---++                public void onClick(View view) {
---++
---++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---++
---++                    int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());
---++                    int newQuantity = currentQuantity - 1;
---++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl = newQuantity;
---++
---++                    final InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity;
---++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---++                        inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
---++
---++                        if (newQuantity == 0) {
---++                            inventoryorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();
---++                        }
---++                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
---++                        inventoryorderLineItemPropertyInputActvity.pTryToChangeCountedQuantity(false, false,1);
---++                    }
---++                }
---++            });
---++
---++            pvHolder.imageButtonZero.setOnClickListener(new View.OnClickListener() {
---++                @Override
---++                public void onClick(View view) {
---++
---++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---++
---++                    final InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity;
---++
---++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---++                        inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
---++
---++                        double countDbl = cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl;
---++
---++                        while (countDbl > 0) {
---++                            inventoryorderLineItemPropertyInputActvity.pTryToChangeCountedQuantity(false, false,1);
---++                            cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl --;
---++                            countDbl--;
---++                        }
---++
---++                        inventoryorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();
---++                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
---++                    }
---++                }
---++            });
---++
---++            pvHolder.imageButtonManual.setOnClickListener(new View.OnClickListener() {
---++                @Override
---++                public void onClick(View view) {
---++
---++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl = 0;
---++
---++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---++                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
---++                        inventoryorderLineItemPropertyInputActvity.pShowNumericInputFragment();
---++                    }
---++                }
---++            });
---++
---++            pvHolder.imageViewPropertyType.setOnClickListener(new View.OnClickListener() {
---++                @Override
---++                public void onClick(View view) {
---++
---++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
---++
---++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
---++                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
---++                        inventoryorderLineItemPropertyInputActvity.pShowTextInputFragment();
---++                    }
---++                }
---++            });
---++        }
---++    }
---++
---++    public void pFillData(List<cInventoryorderLinePropertyValue> pvDataObl) {
---++        this.localItemPropertyValueObl = pvDataObl;
---++        notifyDataSetChanged();
---++    }
---++
---++
---++    @Override
---++    public int getItemCount () {
---++        if (this.localItemPropertyValueObl != null)
---++            return this.localItemPropertyValueObl.size();
---++        else return 0;
---++    }
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java	(date 1617282805885)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java	(date 1617282805885)
---+@@ -0,0 +1,77 @@
---++package SSU_WHS.Inventory.InventoryorderlineProperty;
---++
---++import androidx.room.ColumnInfo;
---++import androidx.room.Entity;
---++import androidx.room.PrimaryKey;
---++
---++import org.json.JSONException;
---++import org.json.JSONObject;
---++
---++import ICS.Utils.cText;
---++import SSU_WHS.General.cDatabase;
---++
---++@Entity(tableName=cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
---++public class cInventoryorderLinePropertyEntity {
---++
---++    @PrimaryKey(autoGenerate = true)
---++    public Integer recordid;
---++    public Integer getRecordidInt() {return this.recordid;}
---++
---++    @ColumnInfo(name = cDatabase.LINENO_NAMESTR )
---++    public Integer linenoInt;
---++    public Integer getLineNoInt() {return this.linenoInt;}
---++
---++    @ColumnInfo(name = cDatabase.PROPERTYCODE_NAMESTR)
---++    public String propertyCodeStr;
---++    public String getPropertyCodeStr() {return this.propertyCodeStr;}
---++
---++    @ColumnInfo(name = cDatabase.SEQUENCENOHANDLED_NAMESTR )
---++    public Integer sequenceNoHandledInt;
---++    public Integer getSequenceNoHandledInt() {return this.sequenceNoHandledInt;}
---++
---++    @ColumnInfo(name = cDatabase.SORTINGSEQUENCENO_NAMESTR )
---++    public Integer sortingSequenceNoInt;
---++    public Integer getSortingSequenceNoInt() {return this.sortingSequenceNoInt;}
---++
---++    @ColumnInfo(name = cDatabase.LAYOUT_NAMESTR)
---++    public String layoutStr;
---++    public String getLayoutStr() {return this.layoutStr;}
---++
---++    @ColumnInfo(name = cDatabase.ISINPUT_NAMESTR)
---++    public boolean isInputBln;
---++    public boolean getIsInputBln() {return this.isInputBln;}
---++
---++    @ColumnInfo(name = cDatabase.ISREQUIRED_NAMESTR)
---++    public boolean isRequiredBln;
---++    public boolean getIsRequiredBln() {return this.isRequiredBln;}
---++
---++    @ColumnInfo(name = cDatabase.VALUEHANDLED_NAMESTR)
---++    public String valueHandledStr;
---++    public String getValueHandledStr() {return this.valueHandledStr;}
---++
---++    //empty constructor
---++    public cInventoryorderLinePropertyEntity() {
---++
---++    }
---++
---++    public cInventoryorderLinePropertyEntity(JSONObject pvJsonObject) {
---++        try {
---++            this.linenoInt = pvJsonObject.getInt(cDatabase.LINENO_NAMESTR);
---++            this.propertyCodeStr = pvJsonObject.getString(cDatabase.PROPERTYCODE_NAMESTR);
---++            this.sequenceNoHandledInt = pvJsonObject.getInt(cDatabase.SEQUENCENOHANDLED_NAMESTR);
---++            this.sortingSequenceNoInt = pvJsonObject.getInt(cDatabase.SORTINGSEQUENCENO_NAMESTR);
---++            this.layoutStr = pvJsonObject.getString(cDatabase.LAYOUT_NAMESTR);
---++            this.isInputBln = cText.pStringToBooleanBln(pvJsonObject.getString(cDatabase.ISINPUT_NAMESTR), false) ;
---++            this.isRequiredBln = cText.pStringToBooleanBln(pvJsonObject.getString(cDatabase.ISREQUIRED_NAMESTR), false) ;
---++            this.valueHandledStr = pvJsonObject.getString(cDatabase.VALUEHANDLED_NAMESTR);
---++
---++        } catch (JSONException e) {
---++            e.printStackTrace();
---++        }
---++    }
---++
---++
---++
---++
---++
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java	(date 1617282982916)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java	(date 1617282982916)
---+@@ -0,0 +1,33 @@
---++package SSU_WHS.Inventory.InventoryorderlineProperty;
---++
---++import androidx.room.Dao;
---++import androidx.room.Delete;
---++import androidx.room.Insert;
---++import androidx.room.OnConflictStrategy;
---++import androidx.room.Query;
---++
---++import java.util.List;
---++
---++import SSU_WHS.General.cDatabase;
---++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
---++
---++@Dao
---++public interface iInventoryorderlinePropertyDao {
---++
---++    //Standard SQL functions
---++    @Delete
---++    void deletePickorder(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity);
---++
---++    @Insert(onConflict = OnConflictStrategy.REPLACE)
---++    void insert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity);
---++
---++
---++    @Query("DELETE FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
---++    void deleteAll();
---++
---++    @Query("SELECT * FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
---++    List<cPickorderLinePropertyEntity> getAll();
---++    //Get inventorylines
---++
---++
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java	(date 1617287945968)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java	(date 1617287945968)
---+@@ -0,0 +1,176 @@
---++package SSU_WHS.Inventory.InventoryorderlineProperty;
---++
---++import androidx.lifecycle.ViewModelProvider;
---++
---++import org.json.JSONObject;
---++
---++import java.util.ArrayList;
---++import java.util.List;
---++
---++import ICS.Utils.cResult;
---++import ICS.cAppExtension;
---++import SSU_WHS.Basics.ItemProperty.cItemProperty;
---++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
---++import nl.icsvertex.scansuite.R;
---++
---++public class cInventoryorderLineProperty {
---++
---++    //Public Properties
---++    private Integer lineNoInt;
---++    public Integer getLineNoInt() {return lineNoInt;}
---++
---++    private String propertyCodeStr;
---++    public String getPropertyCodeStr() {return propertyCodeStr;}
---++
---++    public cItemProperty getItemProperty() {
---++
---++        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {
---++            return  null;
---++        }
---++
---++        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {
---++            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
---++                return  itemProperty;
---++            }
---++        }
---++
---++        return  null;
---++
---++    }
---++
---++    private Integer sequenceNoHandledInt;
---++    public Integer getSequenceNoHandledInt() {return sequenceNoHandledInt;}
---++
---++    private Integer sortingSequenceNoInt;
---++    public Integer getSortingSequenceNoInt() {return sortingSequenceNoInt;}
---++
---++    private String layoutStr;
---++    public String getLayoutStr() {return layoutStr;}
---++
---++    private boolean isInputBln;
---++    public boolean getIsInputBln() {return isInputBln;}
---++
---++    private boolean isRequiredBln;
---++    public boolean getIsRequiredBln() {return isRequiredBln;}
---++
---++    private String valueHandledStr;
---++    public String getValueHandledStr() {return valueHandledStr;}
---++
---++    private cInventoryorderLinePropertyEntity inventoryorderLinePropertyEntity;
---++
---++    public  static cInventoryorderLineProperty currentInventoryorderLineProperty;
---++    public static ArrayList<cInventoryorderLineProperty> allLinePropertysObl;
---++
---++    public List<cInventoryorderLinePropertyValue> propertyValueObl() {
---++
---++        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
---++
---++        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null || cInventoryorderLinePropertyValue.allLinePropertysValuesObl.size() == 0)  {
---++            return  resultObl;
---++        }
---++
---++        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : cInventoryorderLinePropertyValue.allLinePropertysValuesObl) {
---++            if (inventoryorderLinePropertyValue.getLineNoInt() == this.getLineNoInt() && inventoryorderLinePropertyValue.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
---++                resultObl.add(inventoryorderLinePropertyValue);
---++            }
---++        }
---++
---++        return  resultObl;
---++
---++    }
---++
---++    private cInventoryorderLinePropertyViewModel getInventoryorderLinePropertyViewModel() {
---++        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyViewModel.class);
---++    }
---++
---++    public cInventoryorderLineProperty(JSONObject pvJsonObject) {
---++        this.inventoryorderLinePropertyEntity = new cInventoryorderLinePropertyEntity(pvJsonObject);
---++        this.lineNoInt = this.inventoryorderLinePropertyEntity.getLineNoInt();
---++        this.propertyCodeStr = this.inventoryorderLinePropertyEntity.getPropertyCodeStr();
---++        this.sequenceNoHandledInt = this.inventoryorderLinePropertyEntity.getSequenceNoHandledInt();
---++        this.sortingSequenceNoInt = this.inventoryorderLinePropertyEntity.getSortingSequenceNoInt();
---++        this.layoutStr = this.inventoryorderLinePropertyEntity.getLayoutStr();
---++        this.isInputBln = this.inventoryorderLinePropertyEntity.getIsInputBln();
---++        this.isRequiredBln = this.inventoryorderLinePropertyEntity.getIsRequiredBln();
---++        this.valueHandledStr = this.inventoryorderLinePropertyEntity.getValueHandledStr();
---++    }
---++
---++    public boolean pInsertInDatabaseBln() {
---++        this.getInventoryorderLinePropertyViewModel().insert(this.inventoryorderLinePropertyEntity);
---++
---++        if (cInventoryorderLineProperty.allLinePropertysObl == null) {
---++            cInventoryorderLineProperty.allLinePropertysObl = new ArrayList<>();
---++        }
---++        cInventoryorderLineProperty.allLinePropertysObl.add(this);
---++        return true;
---++    }
---++
---++    public void pValueAdded(String pvValueStr) {
---++
---++        //Try to find value with same value
---++        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.propertyValueObl()) {
---++            if (inventoryorderLinePropertyValue.getValueStr().equalsIgnoreCase(pvValueStr)) {
---++                inventoryorderLinePropertyValue.quantityDbl += 1;
---++                return;
---++            }
---++        }
---++
---++        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null) {
---++            cInventoryorderLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();
---++        }
---++
---++        //Add a new value
---++        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.add(new cInventoryorderLinePropertyValue(this.getLineNoInt(), this.getPropertyCodeStr(),pvValueStr));
---++    }
---++
---++    public cResult pCheckScanForUniquePropertyRst(String pvPropertyValueStr) {
---++
---++        cResult resultRst = new cResult();
---++        resultRst.resultBln = true;
---++
---++        if (!this.getItemProperty().getUniqueBln() || this.propertyValueObl() == null ||this.propertyValueObl().size() ==0 ) {
---++            resultRst.resultBln = true;
---++            return  resultRst;
---++        }
---++
---++
---++
---++        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.propertyValueObl()) {
---++
---++            if (inventoryorderLinePropertyValue.getValueStr().equalsIgnoreCase(pvPropertyValueStr)) {
---++
---++                // We have a match, and this hasn't been scanned already
---++                if (inventoryorderLinePropertyValue.getQuantityDbl() == 0) {
---++                    resultRst.resultBln = true;
---++                    return  resultRst;
---++                }
---++                else
---++                {
---++                    resultRst.resultBln = false;
---++                    resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_itempropery_value_already_used));
---++                    return  resultRst;
---++                }
---++            }
---++        }
---++
---++        resultRst.resultBln = true;
---++        return  resultRst;
---++
---++    }
---++
---++    public boolean pDeleteFromDatabaseBln() {
---++        if (cInventoryorderLineProperty.allLinePropertysObl != null) {
---++            cInventoryorderLineProperty.allLinePropertysObl.remove(this);
---++        }
---++        return true;
---++    }
---++
---++    public static boolean pTruncateTableBln() {
---++
---++        cInventoryorderLinePropertyViewModel inventoryorderLinePropertyViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyViewModel.class);
---++        inventoryorderLinePropertyViewModel.deleteAll();
---++        cInventoryorderLineProperty.allLinePropertysObl = null;
---++        return true;
---++    }
---++
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java	(date 1617283458046)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java	(date 1617283458046)
---+@@ -0,0 +1,28 @@
---++package SSU_WHS.Inventory.InventoryorderlineProperty;
---++
---++import android.app.Application;
---++
---++import androidx.lifecycle.AndroidViewModel;
---++
---++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
---++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyRepository;
---++
---++public class cInventoryorderLinePropertyViewModel extends AndroidViewModel {
---++
---++    //Region Public Properties
---++    private cInventoryorderLinePropertyRepository Repository;
---++    //End Region Public Properties
---++
---++    //Region Constructor
---++    public cInventoryorderLinePropertyViewModel(Application pvApplication) {
---++        super(pvApplication);
---++        this.Repository = new cInventoryorderLinePropertyRepository(pvApplication);
---++    }
---++    //End Region Constructor
---++
---++    public void insert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {this.Repository.pInsert(pvInventoryorderLinePropertyEntity);}
---++    public void deleteAll() {this.Repository.pTruncate();}
---++    public void delete(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {this.Repository.pDelete(pvInventoryorderLinePropertyEntity);}
---++
---++
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java	(date 1617283407238)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java	(date 1617283407238)
---+@@ -0,0 +1,81 @@
---++package SSU_WHS.Inventory.InventoryorderlineProperty;
---++
---++import android.app.Application;
---++import android.os.AsyncTask;
---++
---++import SSU_WHS.General.acScanSuiteDatabase;
---++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
---++import SSU_WHS.Picken.PickorderLineProperty.iPickorderLinePropertyDao;
---++
---++public class cInventoryorderLinePropertyRepository {
---++
---++    //Region Public Properties
---++    private iInventoryorderlinePropertyDao inventoryorderlinePropertyDao;
---++    //End Region Public Properties
---++
---++    //End Region Private Properties
---++
---++    //Region Constructor
---++    public cInventoryorderLinePropertyRepository(Application pvApplication) {
---++        //Region Private Properties
---++        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);
---++        this.inventoryorderlinePropertyDao = db.inventoryorderlinePropertyDao();
---++    }
---++    //End Region Constructor
---++
---++    //Region Public Methods
---++
---++    public void pInsert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {
---++        new mInsertInDatabaseAsyncTask(this.inventoryorderlinePropertyDao).execute(pvInventoryorderLinePropertyEntity);
---++    }
---++
---++    public void pDelete(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {
---++        new mDeleteAsyncTask(this.inventoryorderlinePropertyDao).execute(pvInventoryorderLinePropertyEntity);
---++    }
---++
---++    public void pTruncate() {
---++        new cInventoryorderLinePropertyRepository.deleteAllAsyncTask(this.inventoryorderlinePropertyDao).execute();
---++    }
---++
---++    //End Region Public Methods
---++
---++    private static class mInsertInDatabaseAsyncTask extends AsyncTask<cInventoryorderLinePropertyEntity, Void, Void> {
---++        private iInventoryorderlinePropertyDao mAsyncTaskDao;
---++
---++        mInsertInDatabaseAsyncTask(iInventoryorderlinePropertyDao dao) {
---++            mAsyncTaskDao = dao;
---++        }
---++        @Override
---++        protected Void doInBackground(final cInventoryorderLinePropertyEntity... params) {
---++            mAsyncTaskDao.insert(params[0]);
---++            return null;
---++        }
---++    }
---++
---++    private static class mDeleteAsyncTask extends AsyncTask<cInventoryorderLinePropertyEntity, Void, Void> {
---++        private iInventoryorderlinePropertyDao mAsyncTaskDao;
---++
---++        mDeleteAsyncTask(iInventoryorderlinePropertyDao dao) { mAsyncTaskDao = dao; }
---++        @Override
---++        protected Void doInBackground(final cInventoryorderLinePropertyEntity... params) {
---++            mAsyncTaskDao.deletePickorder(params[0]);
---++            return null;
---++        }
---++    }
---++
---++    private static class deleteAllAsyncTask extends AsyncTask<Void, Void, Void> {
---++        private iInventoryorderlinePropertyDao mAsyncTaskDao;
---++
---++        deleteAllAsyncTask(iInventoryorderlinePropertyDao dao) {
---++            mAsyncTaskDao = dao;
---++        }
---++        @Override
---++        protected Void doInBackground(final Void... params) {
---++            mAsyncTaskDao.deleteAll();
---++            return null;
---++        }
---++    }
---++
---++
---++
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java	(date 1617284128378)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java	(date 1617284128378)
---+@@ -0,0 +1,32 @@
---++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---++
---++import androidx.room.Dao;
---++import androidx.room.Delete;
---++import androidx.room.Insert;
---++import androidx.room.OnConflictStrategy;
---++import androidx.room.Query;
---++
---++import java.util.List;
---++
---++import SSU_WHS.General.cDatabase;
---++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
---++
---++@Dao
---++public interface iInventoryorderLinePropertyValueDao {
---++
---++    //Standard SQL functions
---++    @Delete
---++    void deletePickorder(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity);
---++
---++    @Insert(onConflict = OnConflictStrategy.REPLACE)
---++    void insert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity);
---++
---++    @Query("DELETE FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
---++    void deleteAll();
---++
---++    @Query("SELECT * FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
---++    List<cInventoryorderLinePropertyValueEntity> getAll();
---++    //Get picklines
---++
---++
---++}
---+Index: app/release/normal/release/output-metadata.json
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---+<+>{\r\n  \"version\": 2,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"nl.icsvertex.scansuite\",\r\n  \"variantName\": \"processNormalReleaseResources\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"versionCode\": 15891,\r\n      \"versionName\": \"1.5.8.91A\",\r\n      \"outputFile\": \"app-normal-release.apk\"\r\n    }\r\n  ]\r\n}
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/release/normal/release/output-metadata.json	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
---++++ app/release/normal/release/output-metadata.json	(date 1615995006673)
---+@@ -10,8 +10,8 @@
---+     {
---+       "type": "SINGLE",
---+       "filters": [],
---+-      "versionCode": 15891,
---+-      "versionName": "1.5.8.91A",
---++      "versionCode": 15892,
---++      "versionName": "1.5.8.92A",
---+       "outputFile": "app-normal-release.apk"
---+     }
---+   ]
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java	(date 1617284608363)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java	(date 1617284608363)
---+@@ -0,0 +1,134 @@
---++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---++
---++import androidx.lifecycle.ViewModelProvider;
---++
---++import org.json.JSONObject;
---++
---++import java.util.ArrayList;
---++
---++import ICS.Utils.cText;
---++import ICS.cAppExtension;
---++import SSU_WHS.Basics.ItemProperty.cItemProperty;
---++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
---++import nl.icsvertex.scansuite.R;
---++
---++public class cInventoryorderLinePropertyValue implements Comparable{
---++
---++    //Public Properties
---++    private int lineNoInt;
---++
---++    public int getLineNoInt() {return lineNoInt;}
---++
---++    private String propertyCodeStr;
---++    public String getPropertyCodeStr() {return propertyCodeStr;}
---++
---++    public cInventoryorderLineProperty getInventoryorderLineProperty(){
---++
---++        if (this.getPropertyCodeStr().isEmpty() || cInventoryorderLineProperty.allLinePropertysObl == null || cInventoryorderLineProperty.allLinePropertysObl.size() == 0) {
---++            return  null;
---++        }
---++
---++        for (cInventoryorderLineProperty inventoryorderLineProperty :cInventoryorderLineProperty.allLinePropertysObl ) {
---++            if (inventoryorderLineProperty.getLineNoInt().equals(this.getLineNoInt()) && inventoryorderLineProperty.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
---++                return inventoryorderLineProperty;
---++            }
---++        }
---++
---++        return  null;
---++
---++    }
---++
---++    public cItemProperty getItemProperty() {
---++
---++        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {
---++            return  null;
---++        }
---++
---++        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {
---++            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
---++                return  itemProperty;
---++            }
---++        }
---++
---++        return  null;
---++
---++    }
---++
---++    private String valueStr;
---++    public String getValueStr() {return valueStr;}
---++
---++    private int sortingSequenceNoInt;
---++    public  int getSortingSequenceNoInt(){return sortingSequenceNoInt;}
---++
---++    public double quantityDbl;
---++    public double getQuantityDbl() {return quantityDbl;}
---++
---++    private cInventoryorderLinePropertyValueEntity inventoryorderLinePropertyValueEntity;
---++
---++    public static cInventoryorderLinePropertyValue currentInventoryorderLinePropertyValue;
---++    public static ArrayList<cInventoryorderLinePropertyValue> allLinePropertysValuesObl;
---++
---++    private cInventoryorderLinePropertyValueViewModel getInventoryorderLinePropertyValueViewModel() {
---++        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyValueViewModel.class);
---++    }
---++
---++    public cInventoryorderLinePropertyValue(JSONObject pvJsonObject) {
---++        this.inventoryorderLinePropertyValueEntity = new cInventoryorderLinePropertyValueEntity(pvJsonObject);
---++        this.lineNoInt = this.inventoryorderLinePropertyValueEntity.getLineNoInt();
---++        this.propertyCodeStr = this.inventoryorderLinePropertyValueEntity.getPropertyCodeStr();
---++        this.valueStr = this.inventoryorderLinePropertyValueEntity.getValueStr();
---++        this.sortingSequenceNoInt = this.inventoryorderLinePropertyValueEntity.getSortingSequenceNoInt();
---++        this.quantityDbl = 0;
---++    }
---++
---++    public cInventoryorderLinePropertyValue(cInventoryorderLineProperty pvInventoryorderLineProperty) {
---++        this.inventoryorderLinePropertyValueEntity = null;
---++
---++        this.lineNoInt = 0;
---++        this.propertyCodeStr = pvInventoryorderLineProperty.getPropertyCodeStr();
---++        this.valueStr = cAppExtension.activity.getString(R.string.novalueyet);
---++        this.sortingSequenceNoInt = 0;
---++        this.quantityDbl = 0;
---++    }
---++
---++    public cInventoryorderLinePropertyValue(int pvLineNoInt, String pvPropertyCodeStr, String pvValueStr) {
---++        this.inventoryorderLinePropertyValueEntity = null;
---++        this.lineNoInt = pvLineNoInt;
---++        this.propertyCodeStr = pvPropertyCodeStr;
---++        this.valueStr = pvValueStr;
---++        this.sortingSequenceNoInt = 0;
---++        this.quantityDbl = 1;
---++    }
---++
---++    public boolean pInsertInDatabaseBln() {
---++        this.getInventoryorderLinePropertyValueViewModel().insert(this.inventoryorderLinePropertyValueEntity);
---++
---++        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null) {
---++            cInventoryorderLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();
---++        }
---++        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.add(this);
---++        return true;
---++    }
---++
---++    public boolean pDeleteFromDatabaseBln() {
---++        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl != null) {
---++            cInventoryorderLinePropertyValue.allLinePropertysValuesObl.remove(this);
---++        }
---++        return true;
---++    }
---++
---++    public static boolean pTruncateTableBln() {
---++
---++        cInventoryorderLinePropertyValueViewModel inventoryorderLinePropertyValueViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyValueViewModel.class);
---++        inventoryorderLinePropertyValueViewModel.deleteAll();
---++        cInventoryorderLinePropertyValue.allLinePropertysValuesObl = null;
---++        return true;
---++    }
---++
---++    @Override
---++    public int compareTo(Object o) {
---++        int compareint = cText.pDoubleToInt(((cInventoryorderLinePropertyValue)o).getQuantityDbl());
---++        return compareint- cText.pDoubleToInt(this.getQuantityDbl());
---++
---++    }
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java	(date 1617283763783)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java	(date 1617283763783)
---+@@ -0,0 +1,55 @@
---++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---++
---++import androidx.room.ColumnInfo;
---++import androidx.room.Entity;
---++import androidx.room.PrimaryKey;
---++
---++import org.json.JSONException;
---++import org.json.JSONObject;
---++
---++import SSU_WHS.General.cDatabase;
---++
---++@Entity(tableName=cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
---++public class cInventoryorderLinePropertyValueEntity {
---++
---++    @PrimaryKey(autoGenerate = true)
---++    public Integer recordid;
---++    public Integer getRecordidInt() {return this.recordid;}
---++
---++    @ColumnInfo(name = cDatabase.LINENO_NAMESTR)
---++    public int lineNoInt;
---++    public int getLineNoInt() {return this.lineNoInt;}
---++
---++    @ColumnInfo(name = cDatabase.PROPERTYCODE_NAMESTR )
---++    public String propertyCodeStr;
---++    public String getPropertyCodeStr() {return this.propertyCodeStr;}
---++
---++    @ColumnInfo(name = cDatabase.VALUE_NAMESTR )
---++    public String valueStr;
---++    public String getValueStr() {return this.valueStr;}
---++
---++    @ColumnInfo(name = cDatabase.SORTINGSEQUENCENO_NAMESTR)
---++    public Integer sortingSequenceNoInt;
---++    public Integer getSortingSequenceNoInt() {return this.sortingSequenceNoInt;}
---++
---++    //empty constructor
---++    public cInventoryorderLinePropertyValueEntity() {
---++
---++    }
---++
---++    public cInventoryorderLinePropertyValueEntity(JSONObject pvJsonObject) {
---++        try {
---++            this.lineNoInt = pvJsonObject.getInt(cDatabase.LINENO_NAMESTR);
---++            this.propertyCodeStr = pvJsonObject.getString(cDatabase.PROPERTYCODE_NAMESTR);
---++            this.valueStr = pvJsonObject.getString(cDatabase.VALUE_NAMESTR);
---++            this.sortingSequenceNoInt = pvJsonObject.getInt(cDatabase.SORTINGSEQUENCENO_NAMESTR);
---++        } catch (JSONException e) {
---++            e.printStackTrace();
---++        }
---++    }
---++
---++
---++
---++
---++
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java	(date 1617284053514)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java	(date 1617284053514)
---+@@ -0,0 +1,28 @@
---++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---++
---++import android.app.Application;
---++
---++import androidx.lifecycle.AndroidViewModel;
---++
---++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
---++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueRepository;
---++
---++public class cInventoryorderLinePropertyValueViewModel extends AndroidViewModel {
---++
---++    //Region Public Properties
---++    private cInventoryorderLinePropertyValueRepository Repository;
---++    //End Region Public Properties
---++
---++    //Region Constructor
---++    public cInventoryorderLinePropertyValueViewModel(Application pvApplication) {
---++        super(pvApplication);
---++        this.Repository = new cInventoryorderLinePropertyValueRepository(pvApplication);
---++    }
---++    //End Region Constructor
---++
---++    public void insert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {this.Repository.pInsert(pvInventoryorderLinePropertyValueEntity);}
---++    public void deleteAll() {this.Repository.pTruncate();}
---++    public void delete(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {this.Repository.pDelete(pvInventoryorderLinePropertyValueEntity);}
---++
---++
---++}
---+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java
---+IDEA additional info:
---+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---+<+>UTF-8
---+===================================================================
---+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java	(date 1617284123755)
---++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java	(date 1617284123755)
---+@@ -0,0 +1,81 @@
---++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
---++
---++import android.app.Application;
---++import android.os.AsyncTask;
---++
---++import SSU_WHS.General.acScanSuiteDatabase;
---++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
---++import SSU_WHS.Picken.PickorderLinePropertyValue.iPickorderLinePropertyValueDao;
---++
---++public class cInventoryorderLinePropertyValueRepository {
---++
---++    //Region Public Properties
---++    private iInventoryorderLinePropertyValueDao inventoryorderLinePropertyValueDao;
---++    //End Region Public Properties
---++
---++    //End Region Private Properties
---++
---++    //Region Constructor
---++    public cInventoryorderLinePropertyValueRepository(Application pvApplication) {
---++        //Region Private Properties
---++        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);
---++        this.inventoryorderLinePropertyValueDao = db.inventoryorderLinePropertyValueDao();
---++    }
---++    //End Region Constructor
---++
---++    //Region Public Methods
---++
---++    public void pInsert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {
---++        new mInsertInDatabaseAsyncTask(this.inventoryorderLinePropertyValueDao).execute(pvInventoryorderLinePropertyValueEntity);
---++    }
---++
---++    public void pDelete(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {
---++        new mDeleteAsyncTask(this.inventoryorderLinePropertyValueDao).execute(pvInventoryorderLinePropertyValueEntity);
---++    }
---++
---++    public void pTruncate() {
---++        new cInventoryorderLinePropertyValueRepository.deleteAllAsyncTask(this.inventoryorderLinePropertyValueDao).execute();
---++    }
---++
---++    //End Region Public Methods
---++
---++    private static class mInsertInDatabaseAsyncTask extends AsyncTask<cInventoryorderLinePropertyValueEntity, Void, Void> {
---++        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
---++
---++        mInsertInDatabaseAsyncTask(iInventoryorderLinePropertyValueDao dao) {
---++            mAsyncTaskDao = dao;
---++        }
---++        @Override
---++        protected Void doInBackground(final cInventoryorderLinePropertyValueEntity... params) {
---++            mAsyncTaskDao.insert(params[0]);
---++            return null;
---++        }
---++    }
---++
---++    private static class mDeleteAsyncTask extends AsyncTask<cInventoryorderLinePropertyValueEntity, Void, Void> {
---++        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
---++
---++        mDeleteAsyncTask(iInventoryorderLinePropertyValueDao dao) { mAsyncTaskDao = dao; }
---++        @Override
---++        protected Void doInBackground(final cInventoryorderLinePropertyValueEntity... params) {
---++            mAsyncTaskDao.deletePickorder(params[0]);
---++            return null;
---++        }
---++    }
---++
---++    private static class deleteAllAsyncTask extends AsyncTask<Void, Void, Void> {
---++        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
---++
---++        deleteAllAsyncTask(iInventoryorderLinePropertyValueDao dao) {
---++            mAsyncTaskDao = dao;
---++        }
---++        @Override
---++        protected Void doInBackground(final Void... params) {
---++            mAsyncTaskDao.deleteAll();
---++            return null;
---++        }
---++    }
---++
---++
---++
---++}
---Index: app/schemas/SSU_WHS.General.acScanSuiteDatabase/152.json
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/schemas/SSU_WHS.General.acScanSuiteDatabase/152.json	(date 1617965443120)
---+++ app/schemas/SSU_WHS.General.acScanSuiteDatabase/152.json	(date 1617965443120)
---@@ -0,0 +1,4379 @@
---+{
---+  "formatVersion": 1,
---+  "database": {
---+    "version": 152,
---+    "identityHash": "c3903465ac711d7815c8d3aea34ee5e6",
---+    "entities": [
---+      {
---+        "tableName": "ScannerLogon",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`FixedScannerBranch` TEXT, `ScannerDescription` TEXT NOT NULL, `RequiredScannerVersion` TEXT, `ApplicationEnvironment` TEXT, `Languages` TEXT, `RequiredScannerConfiguration` TEXT, `ReapplyScannerConfiguration` TEXT, `VersionConfigAppCurrentScanner` TEXT, `VersionConfigAppRequiredScanner` TEXT, `ColorSet` TEXT, PRIMARY KEY(`ScannerDescription`))",
---+        "fields": [
---+          {
---+            "fieldPath": "fixedscannerbranch",
---+            "columnName": "FixedScannerBranch",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "scannerdescription",
---+            "columnName": "ScannerDescription",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "requiredscannerversion",
---+            "columnName": "RequiredScannerVersion",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "applicationenvironment",
---+            "columnName": "ApplicationEnvironment",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "languages",
---+            "columnName": "Languages",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "requiredscannerconfiguration",
---+            "columnName": "RequiredScannerConfiguration",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "reapplyscannerconfiguration",
---+            "columnName": "ReapplyScannerConfiguration",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "versionconfigappcurrentscanner",
---+            "columnName": "VersionConfigAppCurrentScanner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "versionconfigapprequiredscanner",
---+            "columnName": "VersionConfigAppRequiredScanner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "colorset",
---+            "columnName": "ColorSet",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "ScannerDescription"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Workplaces",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Werkplek` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Werkplek`))",
---+        "fields": [
---+          {
---+            "fieldPath": "workplace",
---+            "columnName": "Werkplek",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Werkplek"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "BarcodeLayouts",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcodelayout` TEXT NOT NULL, `Layout` TEXT NOT NULL, PRIMARY KEY(`Barcodelayout`, `Layout`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcodelayout",
---+            "columnName": "Barcodelayout",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "layoutvalue",
---+            "columnName": "Layout",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcodelayout",
---+            "Layout"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Authorisations",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Autorisatie` TEXT NOT NULL, `Order` INTEGER, `License` TEXT, PRIMARY KEY(`Autorisatie`))",
---+        "fields": [
---+          {
---+            "fieldPath": "authorisation",
---+            "columnName": "Autorisatie",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "order",
---+            "columnName": "Order",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "license",
---+            "columnName": "License",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Autorisatie"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Users",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Gebruikersnaam` TEXT NOT NULL, `Naam` TEXT, PRIMARY KEY(`Gebruikersnaam`))",
---+        "fields": [
---+          {
---+            "fieldPath": "username",
---+            "columnName": "Gebruikersnaam",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "name",
---+            "columnName": "Naam",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Gebruikersnaam"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Branches",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Vestiging` TEXT NOT NULL, `Vestigingtype` TEXT, `Name` TEXT, `BinMandatory` TEXT, `Receive_default_bin` TEXT, `Retour_default_bin` TEXT, `Move_default_bin` TEXT, `Pick_default_storage_bin` TEXT, PRIMARY KEY(`Vestiging`))",
---+        "fields": [
---+          {
---+            "fieldPath": "branch",
---+            "columnName": "Vestiging",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "branchtype",
---+            "columnName": "Vestigingtype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "branchname",
---+            "columnName": "Name",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "binmandatory",
---+            "columnName": "BinMandatory",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receivedefaultbin",
---+            "columnName": "Receive_default_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returndefaultbin",
---+            "columnName": "Retour_default_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "movedefaultbin",
---+            "columnName": "Move_default_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickDefaultStorageBinStr",
---+            "columnName": "Pick_default_storage_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Vestiging"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Settings",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Instelling` TEXT NOT NULL, `Waarde` TEXT, PRIMARY KEY(`Instelling`))",
---+        "fields": [
---+          {
---+            "fieldPath": "name",
---+            "columnName": "Instelling",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "value",
---+            "columnName": "Waarde",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Instelling"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Pickorders",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Ordernumber` TEXT NOT NULL, `Ordertype` TEXT, `QuantityTotal` TEXT, `SingleArticleOrders` TEXT, `Pick_Sales_ask_workplace` TEXT, `Pick_Transfer_ask_workplace` TEXT, `Pick_Pick_PV_VKO_each_piece` TEXT, `Pick_with_picture` TEXT, `Pick_with_picture_auto_open` TEXT, `Pick_with_picture_prefetch` TEXT, `Pick_activity_bin_required` TEXT, `Pick_auto_next` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Currentlocation` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `IsSelected` INTEGER NOT NULL, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Ordernumber`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Ordernumber",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Ordertype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantitytotal",
---+            "columnName": "QuantityTotal",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "singleArticleOrders",
---+            "columnName": "SingleArticleOrders",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickSalesaskworkplace",
---+            "columnName": "Pick_Sales_ask_workplace",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickTransferaskworkplace",
---+            "columnName": "Pick_Transfer_ask_workplace",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickPickPVVKOeachpiece",
---+            "columnName": "Pick_Pick_PV_VKO_each_piece",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickWithPicture",
---+            "columnName": "Pick_with_picture",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickWithPictureAutoOpen",
---+            "columnName": "Pick_with_picture_auto_open",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickWithPicturePrefetch",
---+            "columnName": "Pick_with_picture_prefetch",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickActivityBinRequired",
---+            "columnName": "Pick_activity_bin_required",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickAutoNext",
---+            "columnName": "Pick_auto_next",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockOwner",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentlocation",
---+            "columnName": "Currentlocation",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "interfaceresultmethod",
---+            "columnName": "Interface_result_method",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isSelected",
---+            "columnName": "IsSelected",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Ordernumber"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Pickorderlines",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `StorageBinCode` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `QuantityRejected` REAL, `SourceNo` TEXT, `DestinationNo` TEXT, `ProcessingSequence` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Status` INTEGER, `StatusShipping` INTEGER, `StatusPacking` INTEGER, `QuantityTaken` REAL NOT NULL, `TakenTimestamp` TEXT, `LocalStatus` INTEGER NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "storageBincode",
---+            "columnName": "StorageBinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityRejected",
---+            "columnName": "QuantityRejected",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "destinationno",
---+            "columnName": "DestinationNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "processingsequence",
---+            "columnName": "ProcessingSequence",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusShipping",
---+            "columnName": "StatusShipping",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusPacking",
---+            "columnName": "StatusPacking",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantitytaken",
---+            "columnName": "QuantityTaken",
---+            "affinity": "REAL",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "takenTimeStamp",
---+            "columnName": "TakenTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderLineBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` TEXT NOT NULL, `Barcode` TEXT NOT NULL, `Quantity` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "lineNoStr",
---+            "columnName": "LineNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandledStr",
---+            "columnName": "Quantity",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "LineNo",
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderlineProperty",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `Propertycode` TEXT, `SequenceNoHandled` INTEGER, `SortingSequenceNo` INTEGER, `Layout` TEXT, `IsInput` INTEGER NOT NULL, `Isrequired` INTEGER NOT NULL, `ValueHandled` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "linenoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "propertyCodeStr",
---+            "columnName": "Propertycode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sequenceNoHandledInt",
---+            "columnName": "SequenceNoHandled",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "layoutStr",
---+            "columnName": "Layout",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isInputBln",
---+            "columnName": "IsInput",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "isRequiredBln",
---+            "columnName": "Isrequired",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "valueHandledStr",
---+            "columnName": "ValueHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderlinePropertyValue",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Propertycode` TEXT, `Value` TEXT, `SortingSequenceNo` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "propertyCodeStr",
---+            "columnName": "Propertycode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "valueStr",
---+            "columnName": "Value",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ArticleImage",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Itemno` TEXT NOT NULL, `Variantcode` TEXT NOT NULL, `Image` TEXT, PRIMARY KEY(`Itemno`, `Variantcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "Itemno",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "Variantcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "image",
---+            "columnName": "Image",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Itemno",
---+            "Variantcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT NOT NULL, `ItemNo` TEXT NOT NULL, `VariantCode` TEXT NOT NULL, `IsUniqueBarcode` TEXT, `QtyPerUnitOfMeasure` TEXT, `QuantityHandled` TEXT, PRIMARY KEY(`Barcode`, `BarCodeType`, `ItemNo`, `VariantCode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityperunitofmeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode",
---+            "BarCodeType",
---+            "ItemNo",
---+            "VariantCode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderCompositeBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Composite_barcode` TEXT NOT NULL, `ItemNo` TEXT NOT NULL, `VariantCode` TEXT NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, PRIMARY KEY(`Composite_barcode`, `ItemNo`, `VariantCode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "compositeBarcodeStr",
---+            "columnName": "Composite_barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "itemNoStr",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "variantCodeStr",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Composite_barcode",
---+            "ItemNo",
---+            "VariantCode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Comment",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`CommentLineNo` INTEGER NOT NULL, `CommentCode` TEXT, `CommentText` TEXT, PRIMARY KEY(`CommentLineNo`))",
---+        "fields": [
---+          {
---+            "fieldPath": "commentLineNoLng",
---+            "columnName": "CommentLineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "commentcodeStr",
---+            "columnName": "CommentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "commentTextStr",
---+            "columnName": "CommentText",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "CommentLineNo"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "SalesOrderPackingTable",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Salesorder` TEXT NOT NULL, `Packingtable` TEXT NOT NULL, PRIMARY KEY(`Salesorder`))",
---+        "fields": [
---+          {
---+            "fieldPath": "salesorder",
---+            "columnName": "Salesorder",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "packingtable",
---+            "columnName": "Packingtable",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Salesorder"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderAddress",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Adrescode` TEXT NOT NULL, `Naam` TEXT, `Naamtoevoeging` TEXT, `Address` TEXT, `Adrestoevoeging` TEXT, `Street` TEXT, `Huisnummer` TEXT, `Huisnummertoevoeging` TEXT, `Zipcode` TEXT, `Plaats` TEXT, `Land` TEXT, PRIMARY KEY(`Adrescode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "addrescode",
---+            "columnName": "Adrescode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "name",
---+            "columnName": "Naam",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "nameAddition",
---+            "columnName": "Naamtoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "address",
---+            "columnName": "Address",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressAddition",
---+            "columnName": "Adrestoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "street",
---+            "columnName": "Street",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressNumber",
---+            "columnName": "Huisnummer",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressNumberAddition",
---+            "columnName": "Huisnummertoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "zipcode",
---+            "columnName": "Zipcode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "city",
---+            "columnName": "Plaats",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "country",
---+            "columnName": "Land",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Adrescode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ShippingAgents",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Expediteur`))",
---+        "fields": [
---+          {
---+            "fieldPath": "shippingagent",
---+            "columnName": "Expediteur",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Expediteur"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ShippingAgentServices",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Expediteur`, `Service`))",
---+        "fields": [
---+          {
---+            "fieldPath": "shippingagent",
---+            "columnName": "Expediteur",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "service",
---+            "columnName": "Service",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Expediteur",
---+            "Service"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ShippingAgentServiceShippingUnits",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Verzendeenheid` TEXT NOT NULL, `Omschrijving` TEXT, `Containersoort` TEXT, PRIMARY KEY(`Expediteur`, `Service`, `Verzendeenheid`))",
---+        "fields": [
---+          {
---+            "fieldPath": "shippingagent",
---+            "columnName": "Expediteur",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "service",
---+            "columnName": "Service",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shippingunit",
---+            "columnName": "Verzendeenheid",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "containertype",
---+            "columnName": "Containersoort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Expediteur",
---+            "Service",
---+            "Verzendeenheid"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ShippingAgentServiceShipMethods",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Verzendmethode` TEXT NOT NULL, `Omschrijving` TEXT, `ValueType` TEXT, `DefaultValue` TEXT, `EnumerationValues` TEXT, PRIMARY KEY(`Expediteur`, `Service`, `Verzendmethode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "shippingagent",
---+            "columnName": "Expediteur",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "service",
---+            "columnName": "Service",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shippingMethodStr",
---+            "columnName": "Verzendmethode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "valuetype",
---+            "columnName": "ValueType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "defaultvalue",
---+            "columnName": "DefaultValue",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "enumerationvalues",
---+            "columnName": "EnumerationValues",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Expediteur",
---+            "Service",
---+            "Verzendmethode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderShipPackages",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceNo` TEXT NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `PackageType` TEXT, `PackageSequenceNumber` TEXT, PRIMARY KEY(`SourceNo`))",
---+        "fields": [
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shipagentcode",
---+            "columnName": "ShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shipagentservicecode",
---+            "columnName": "ShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packagetype",
---+            "columnName": "PackageType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packagesequencenumber",
---+            "columnName": "PackageSequenceNumber",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "SourceNo"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderLineFinishSinglePiece",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SourceNo` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `Verzendlabel_status` INTEGER NOT NULL, `LocalStatus` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Verzendlabel_status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderSetting",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SettingCode` TEXT NOT NULL, `SettingValue` TEXT, PRIMARY KEY(`SettingCode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "settingCode",
---+            "columnName": "SettingCode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "settingValue",
---+            "columnName": "SettingValue",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "SettingCode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ItemProperties",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Property` TEXT NOT NULL, `Layout` TEXT, `Omschrijving` TEXT, `IsUnique` INTEGER, `Uniqueness` TEXT, `RememberValue` INTEGER, `ValueType` TEXT, PRIMARY KEY(`Property`))",
---+        "fields": [
---+          {
---+            "fieldPath": "property",
---+            "columnName": "Property",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "layout",
---+            "columnName": "Layout",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "omschrijving",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isUnique",
---+            "columnName": "IsUnique",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "uniqueness",
---+            "columnName": "Uniqueness",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "rememberValue",
---+            "columnName": "RememberValue",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "valueType",
---+            "columnName": "ValueType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Property"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PropertyGroup",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Propertiegroep` TEXT NOT NULL, `Omschrijving` TEXT, `Naam_kort` TEXT, `Image_base64` TEXT, PRIMARY KEY(`Propertiegroep`))",
---+        "fields": [
---+          {
---+            "fieldPath": "propertyGroup",
---+            "columnName": "Propertiegroep",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shortName",
---+            "columnName": "Naam_kort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "imageBase64",
---+            "columnName": "Image_base64",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Propertiegroep"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PropertyGroupProperty",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Herkomstcode` TEXT, `Herkomstsleutel` TEXT, `Propertie` TEXT NOT NULL, `Volgorde` INTEGER NOT NULL, PRIMARY KEY(`Propertie`))",
---+        "fields": [
---+          {
---+            "fieldPath": "origin",
---+            "columnName": "Herkomstcode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "originKey",
---+            "columnName": "Herkomstsleutel",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "property",
---+            "columnName": "Propertie",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "order",
---+            "columnName": "Volgorde",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Propertie"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderLinePackAndShip",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `LineNoTake` INTEGER, `SourceNo` TEXT, `DestinationNo` TEXT, `DeliveryAddressCode` TEXT, `ProcessingSequence` TEXT, `StatusShipping` INTEGER NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Quantity` REAL, `QuantityChecked` REAL, `QuantityHandled` REAL, `Status` INTEGER NOT NULL, `LocalStatus` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "linenoTake",
---+            "columnName": "LineNoTake",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "destinationno",
---+            "columnName": "DestinationNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "deliveryaddresscode",
---+            "columnName": "DeliveryAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "processingsequence",
---+            "columnName": "ProcessingSequence",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusshipping",
---+            "columnName": "StatusShipping",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shippingagentcode",
---+            "columnName": "ShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingagentservicecode",
---+            "columnName": "ShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityChecked",
---+            "columnName": "QuantityChecked",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrder",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `Inv_Amount_manual` TEXT, `Inv_barcode_check` TEXT, `Inv_add_extra_bin` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `Inventory_with_picture` TEXT, `Inventory_with_picture_auto_open` TEXT, `Inventory_with_picture_prefetch` TEXT, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "numberofBins",
---+            "columnName": "Aantal_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "invAmountManual",
---+            "columnName": "Inv_Amount_manual",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "invBarcodeCheck",
---+            "columnName": "Inv_barcode_check",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "invAddExtraBin",
---+            "columnName": "Inv_add_extra_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockOwner",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "interfaceresultmethod",
---+            "columnName": "Interface_result_method",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "inventoryWithPicture",
---+            "columnName": "Inventory_with_picture",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "inventoryWithPictureAutoOpen",
---+            "columnName": "Inventory_with_picture_auto_open",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "inventoryWithPicturePrefetch",
---+            "columnName": "Inventory_with_picture_prefetch",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrderBin",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`BinCode` TEXT NOT NULL, `Lines` INTEGER NOT NULL, `HandledTimestamp` TEXT, `Status` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, PRIMARY KEY(`BinCode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "lines",
---+            "columnName": "Lines",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "handledTimeStamp",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "BinCode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrderLines",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `ItemNo` TEXT, `VariantCode` TEXT, `Itemsoort` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `SortingSequenceNo` INTEGER NOT NULL, `Status` INTEGER NOT NULL, `SourceType` INTEGER NOT NULL, `HandledTimestamp` TEXT, `QuantityHandled` REAL, `QuantityHandledAllScanners` REAL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemtype",
---+            "columnName": "Itemsoort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingsequenceno",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sourcetype",
---+            "columnName": "SourceType",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "handledtimestamp",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandledAllScanners",
---+            "columnName": "QuantityHandledAllScanners",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrderBarcodes",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Itemsoort` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, `Inv_Amount_manual` INTEGER, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemType",
---+            "columnName": "Itemsoort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasure",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "invAmountManual",
---+            "columnName": "Inv_Amount_manual",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrderLineBarcodes",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "lineNoLng",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandledStr",
---+            "columnName": "QuantityHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "LineNo",
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "IntakeOrders",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` INTEGER NOT NULL, `BinCode` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `Receive_Amount_manual_eo` TEXT, `Receive_store_auto_accept_at_requested` TEXT, `Receive_no_extra_bins` TEXT, `Receive_no_extra_items` TEXT, `Receive_no_extra_pieces` TEXT, `SourceDocument` INTEGER NOT NULL, `Document` TEXT, `Document2` TEXT, `ReceivedDateTime` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `Receive_with_picture` TEXT, `Receive_with_picture_auto_open` TEXT, `Receive_intake_eo_packaging_intake` TEXT, `Receive_intake_eo_packaging_shipped` TEXT, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "binCode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockOwner",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveAmountManualEO",
---+            "columnName": "Receive_Amount_manual_eo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveStoreAutoAcceptAtRequested",
---+            "columnName": "Receive_store_auto_accept_at_requested",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveNoExtraBins",
---+            "columnName": "Receive_no_extra_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveNoExtraItems",
---+            "columnName": "Receive_no_extra_items",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveNoExtraPieces",
---+            "columnName": "Receive_no_extra_pieces",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receivedDateTime",
---+            "columnName": "ReceivedDateTime",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "interfaceresultmethod",
---+            "columnName": "Interface_result_method",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveWithPicture",
---+            "columnName": "Receive_with_picture",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveWithPictureAutoOpen",
---+            "columnName": "Receive_with_picture_auto_open",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveIntakeEOPackagingIntake",
---+            "columnName": "Receive_intake_eo_packaging_intake",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveIntakeEOPackagingShipped",
---+            "columnName": "Receive_intake_eo_packaging_shipped",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "IntakeLinesMAT",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Container` TEXT, `BinCodeHandled` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `SourceNo` TEXT, `DestinationNo` TEXT, `IsPartOfMultiLineOrder` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Status` INTEGER, `LocalStatus` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `SourceType` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemNoStr",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCodeStr",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2Str",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "binCodeStr",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "containerStr",
---+            "columnName": "Container",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "binCodehandledStr",
---+            "columnName": "BinCodeHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityDbl",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandledDbl",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceNoStr",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "destinationNoStr",
---+            "columnName": "DestinationNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isPartOfMultilineOrderStr",
---+            "columnName": "IsPartOfMultiLineOrder",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendorItemNoStr",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendorItemDescriptionStr",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusInt",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "localStatusInt",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "extraField1Str",
---+            "columnName": "ExtraField1",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField2Str",
---+            "columnName": "ExtraField2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField3Str",
---+            "columnName": "ExtraField3",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField4Str",
---+            "columnName": "ExtraField4",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField5Str",
---+            "columnName": "ExtraField5",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField6Str",
---+            "columnName": "ExtraField6",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField7Str",
---+            "columnName": "ExtraField7",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField8Str",
---+            "columnName": "ExtraField8",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceTypeInt",
---+            "columnName": "SourceType",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "IntakeOrderBarcodes",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, `Receive_Amount_manual` INTEGER, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasure",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveAmountManual",
---+            "columnName": "Receive_Amount_manual",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "IntakeOrderMATLineBarcodes",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "lineNoLng",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandledStr",
---+            "columnName": "QuantityHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "LineNo",
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Returnorder",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `StockOwner` TEXT, `Status` TEXT, `BinCode` TEXT, `CurrentLocation` TEXT, `ExternalReference` TEXT, `Retour_Amount_manual` INTEGER, `Retour_Barcode_check` INTEGER, `Retour_multi_document` INTEGER, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Reason` TEXT, `Retour_with_picture` INTEGER, `Retour_Order_bin_no_check` INTEGER, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumberStr",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertypeStr",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserIdStr",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserIdStr",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockownerStr",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusStr",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincodeStr",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentLocationStr",
---+            "columnName": "CurrentLocation",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReferenceStr",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourAmountManualBln",
---+            "columnName": "Retour_Amount_manual",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourBarcodeCheckBln",
---+            "columnName": "Retour_Barcode_check",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourMultiDocumentBln",
---+            "columnName": "Retour_multi_document",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocumentStr",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "documentStr",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2Str",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "reasonStr",
---+            "columnName": "Reason",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returnWithPictureBln",
---+            "columnName": "Retour_with_picture",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourOrderBINNoCheckBln",
---+            "columnName": "Retour_Order_bin_no_check",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReturnorderBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeTypeStr",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isUniqueBarcodeBln",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemNoStr",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasureDbl",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasureStr",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandledDbl",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReturnorderDocument",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceDocument` TEXT NOT NULL, `Status` INTEGER NOT NULL, PRIMARY KEY(`SourceDocument`))",
---+        "fields": [
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "SourceDocument"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReturnorderLine",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ItemNo` TEXT, `VariantCode` TEXT, `Document` TEXT, `Retourreden` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `SortingSequenceNo_take` INTEGER NOT NULL, `Quantity_take` REAL, `QuantityHandled_take` REAL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `Generated` INTEGER NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourreden",
---+            "columnName": "Retourreden",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingsequenceno",
---+            "columnName": "SortingSequenceNo_take",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantitytake",
---+            "columnName": "Quantity_take",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandledtake",
---+            "columnName": "QuantityHandled_take",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield1",
---+            "columnName": "ExtraField1",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield2",
---+            "columnName": "ExtraField2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield3",
---+            "columnName": "ExtraField3",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield4",
---+            "columnName": "ExtraField4",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield5",
---+            "columnName": "ExtraField5",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield6",
---+            "columnName": "ExtraField6",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield7",
---+            "columnName": "ExtraField7",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield8",
---+            "columnName": "ExtraField8",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "generated",
---+            "columnName": "Generated",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReturnorderLineBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoLng",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandledStr",
---+            "columnName": "QuantityHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReceiveLines",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `SortingSequenceNo` INTEGER NOT NULL, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `HandledTimestamp` TEXT, `Status` INTEGER, `LocalStatus` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemNoStr",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCodeStr",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2Str",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "binCodeStr",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityDbl",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandledDbl",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoStr",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "vendorItemNoStr",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendorItemDescriptionStr",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "handledTimeStampStr",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusInt",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "localStatusInt",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "extraField1Str",
---+            "columnName": "ExtraField1",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField2Str",
---+            "columnName": "ExtraField2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField3Str",
---+            "columnName": "ExtraField3",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField4Str",
---+            "columnName": "ExtraField4",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField5Str",
---+            "columnName": "ExtraField5",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField6Str",
---+            "columnName": "ExtraField6",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField7Str",
---+            "columnName": "ExtraField7",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField8Str",
---+            "columnName": "ExtraField8",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "MoveOrder",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `BinCode` TEXT, `StockOwner` TEXT, `ExternalReference` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Move_Amount_manual` TEXT, `Move_Barcode_check` TEXT, `Move_validate_stock` TEXT, `Move_validate_stock_enforce` TEXT, `Move_auto_accept_at_requested` TEXT, `Move_no_extra_bins` TEXT, `Move_no_extra_items` TEXT, `Move_no_extra_pieces` TEXT, `Move_with_picture` TEXT, `Move_with_picture_auto_open` TEXT, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "numberofBins",
---+            "columnName": "Aantal_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockownerStr",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveAmountManual",
---+            "columnName": "Move_Amount_manual",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveBarcodeCheck",
---+            "columnName": "Move_Barcode_check",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveValidateStock",
---+            "columnName": "Move_validate_stock",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveValidateStockEnforce",
---+            "columnName": "Move_validate_stock_enforce",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveAutoAcceptAtRequested",
---+            "columnName": "Move_auto_accept_at_requested",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveNoExtraBins",
---+            "columnName": "Move_no_extra_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveNoExtraItems",
---+            "columnName": "Move_no_extra_items",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveNoExtraPieces",
---+            "columnName": "Move_no_extra_pieces",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveWithPicture",
---+            "columnName": "Move_with_picture",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveWithPictureAutoOpen",
---+            "columnName": "Move_with_picture_auto_open",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "MoveOrderLine",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `ActionTypeCode` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL NOT NULL, `QuantityHandled` REAL, `HandledTimestamp` TEXT, `SourceNo` TEXT, `Status` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `LocalStatus` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `LocalQuantityTaken` REAL NOT NULL, `LocalQuantityPlaced` REAL NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "actiontypecode",
---+            "columnName": "ActionTypeCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "handledtimestamp",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNo",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "extrafield1",
---+            "columnName": "ExtraField1",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield2",
---+            "columnName": "ExtraField2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield3",
---+            "columnName": "ExtraField3",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield4",
---+            "columnName": "ExtraField4",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield5",
---+            "columnName": "ExtraField5",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield6",
---+            "columnName": "ExtraField6",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield7",
---+            "columnName": "ExtraField7",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield8",
---+            "columnName": "ExtraField8",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityTaken",
---+            "columnName": "LocalQuantityTaken",
---+            "affinity": "REAL",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityPlaced",
---+            "columnName": "LocalQuantityPlaced",
---+            "affinity": "REAL",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "MoveOrdeBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasure",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "MoveOrderLineBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` REAL, PRIMARY KEY(`LineNo`, `Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "LineNo",
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Packaging",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Emballage` TEXT NOT NULL, `Description` TEXT NOT NULL, PRIMARY KEY(`Emballage`))",
---+        "fields": [
---+          {
---+            "fieldPath": "codeStr",
---+            "columnName": "Emballage",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Emballage"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Scanners",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Werkplek` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Werkplek`))",
---+        "fields": [
---+          {
---+            "fieldPath": "scanner",
---+            "columnName": "Werkplek",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "omschrijving",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Werkplek"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "CustomAuthorisations",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Autorisatie` TEXT NOT NULL, `Omschrijving` TEXT, `Autorisatie_basis` TEXT, `Filter_veld` TEXT, `Filter_waarde` TEXT, `Image_base64` TEXT, PRIMARY KEY(`Autorisatie`))",
---+        "fields": [
---+          {
---+            "fieldPath": "authorisation",
---+            "columnName": "Autorisatie",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "authorisationbase",
---+            "columnName": "Autorisatie_basis",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "filterfield",
---+            "columnName": "Filter_veld",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "filtervalue",
---+            "columnName": "Filter_waarde",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "imagebase64",
---+            "columnName": "Image_base64",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Autorisatie"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Translations",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Tekst` TEXT NOT NULL, `Taal` TEXT NOT NULL, `Vertaling` TEXT, PRIMARY KEY(`Tekst`, `Taal`))",
---+        "fields": [
---+          {
---+            "fieldPath": "text",
---+            "columnName": "Tekst",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "language",
---+            "columnName": "Taal",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "translation",
---+            "columnName": "Vertaling",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Tekst",
---+            "Taal"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "CompositeBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`CompositeBarcode` TEXT NOT NULL, `Compositebarcode_type` TEXT, `Description` TEXT, `Field_separator` TEXT, `Layout_regex` TEXT, `Layout_type` TEXT, PRIMARY KEY(`CompositeBarcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "compositeBarcodeStr",
---+            "columnName": "CompositeBarcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "compositeBarcodeTypeStr",
---+            "columnName": "Compositebarcode_type",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "fieldSeperatorStr",
---+            "columnName": "Field_separator",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "layoutRegexStr",
---+            "columnName": "Layout_regex",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "layoutTypeStr",
---+            "columnName": "Layout_type",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "CompositeBarcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "CompositeBarcodeProperty",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Comment` TEXT, `Field` TEXT NOT NULL, `Field_identifier` TEXT, `Field_type` TEXT, `Position_start` INTEGER NOT NULL, `Position_end` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `Strip_this` TEXT, PRIMARY KEY(`Field`))",
---+        "fields": [
---+          {
---+            "fieldPath": "commentStr",
---+            "columnName": "Comment",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "fieldStr",
---+            "columnName": "Field",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "fieldIdentifierStr",
---+            "columnName": "Field_identifier",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "fieldTypeStr",
---+            "columnName": "Field_type",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "positionStartInt",
---+            "columnName": "Position_start",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "positionEndInt",
---+            "columnName": "Position_end",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "stripThisStr",
---+            "columnName": "Strip_this",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Field"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndSHipOrder",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentLocation` TEXT, `CurrentUserId` TEXT, `DestinationNo` TEXT, `Document` TEXT, `Document2` TEXT, `DocumentType` TEXT, `DocumentType2` TEXT, `ExternalReference` TEXT, `Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `SourceDocument` TEXT, `Status` TEXT, `Workplace` TEXT, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "numberofBins",
---+            "columnName": "Aantal_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentLocation",
---+            "columnName": "CurrentLocation",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "destinationNo",
---+            "columnName": "DestinationNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "documentType",
---+            "columnName": "DocumentType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "documentType2",
---+            "columnName": "DocumentType2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "workplace",
---+            "columnName": "Workplace",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipOrderLine",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ActionTypeCode` TEXT, `BinCode` TEXT, `Description` TEXT, `Description2` TEXT, `HandledTimestamp` TEXT, `ItemNo` TEXT, `LineNo` INTEGER NOT NULL, `Quantity` REAL NOT NULL, `QuantityHandled` REAL, `SortingSequenceNo` INTEGER NOT NULL, `Status` INTEGER NOT NULL, `VariantCode` TEXT, `LocalStatus` INTEGER NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "actiontypecode",
---+            "columnName": "ActionTypeCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "handledtimestamp",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNo",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasure",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipShipment",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SourceNo` TEXT, `ShippingLabels` TEXT, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `ActualShippingAgentCode` TEXT, `ActualShippingAgentServiceCode` TEXT, `ShippingAddressType` TEXT, `ShippingAddressCode` TEXT, `DeliveryAddressType` TEXT, `DeliveryAddressCode` TEXT, `SenderAddressCode` TEXT, `ReturnAddressCode` TEXT, `ReturnSenderAddressCode` TEXT, `ReturnShippingAddressCode` TEXT, `BillingAddressCode` TEXT, `StatusShipping` INTEGER NOT NULL, `StatusPacking` INTEGER NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceNoStr",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingLabelsStr",
---+            "columnName": "ShippingLabels",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAgentCodeStr",
---+            "columnName": "ShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAgentServiceCodeStr",
---+            "columnName": "ShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "actualShippingAgentCodeStr",
---+            "columnName": "ActualShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "actualShippingAgentServiceCodeStr",
---+            "columnName": "ActualShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAddressTypeStr",
---+            "columnName": "ShippingAddressType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAddressCodeStr",
---+            "columnName": "ShippingAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "deliveryAddressTypeStr",
---+            "columnName": "DeliveryAddressType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "deliveryAddressCodeStr",
---+            "columnName": "DeliveryAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "senderAddressCodeStr",
---+            "columnName": "SenderAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returnAddressCodeStr",
---+            "columnName": "ReturnAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returnSenderAddressCodeStr",
---+            "columnName": "ReturnSenderAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returnShippingAddressCodeStr",
---+            "columnName": "ReturnShippingAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "billingAddressCodeStr",
---+            "columnName": "BillingAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusShippingInt",
---+            "columnName": "StatusShipping",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "statusPackingInt",
---+            "columnName": "StatusPacking",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipAddress",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Adrescode` TEXT NOT NULL, `AddressName` TEXT, `AddressType` TEXT, `Naamtoevoeging` TEXT, `Address` TEXT, `Adrestoevoeging` TEXT, `Street` TEXT, `Huisnummer` INTEGER NOT NULL, `Huisnummertoevoeging` TEXT, `Zipcode` TEXT, `Regio` TEXT, `Plaats` TEXT, `Land` TEXT, `Email` TEXT, `Telefoon` TEXT, `Contactpersoon` TEXT, PRIMARY KEY(`Adrescode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "addressCodeStr",
---+            "columnName": "Adrescode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "addressNameStr",
---+            "columnName": "AddressName",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressTypeStr",
---+            "columnName": "AddressType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "nameAdditionStr",
---+            "columnName": "Naamtoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressStr",
---+            "columnName": "Address",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressAdditionStr",
---+            "columnName": "Adrestoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "streetStr",
---+            "columnName": "Street",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressNumberInt",
---+            "columnName": "Huisnummer",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "addressNumberAdditionStr",
---+            "columnName": "Huisnummertoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "zipcodeStr",
---+            "columnName": "Zipcode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "regionStr",
---+            "columnName": "Regio",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "cityStr",
---+            "columnName": "Plaats",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "countryStr",
---+            "columnName": "Land",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "emailStr",
---+            "columnName": "Email",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "phoneStr",
---+            "columnName": "Telefoon",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "contactPersonStr",
---+            "columnName": "Contactpersoon",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Adrescode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipSetting",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SettingCode` TEXT, `SettingValue` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "settingCodeStr",
---+            "columnName": "SettingCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "settingValueStr",
---+            "columnName": "SettingValue",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipShippingMethod",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ShippingMethodCode` TEXT, `ShippingMethodValue` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingMethodCodeStr",
---+            "columnName": "ShippingMethodCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingMethodValueStr",
---+            "columnName": "ShippingMethodValue",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipShippingPackage",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceNo` TEXT NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `PackageType` TEXT, `PackageSequenceNumber` INTEGER NOT NULL, `PackageItemCount` INTEGER NOT NULL, `PackageWeightInG` INTEGER NOT NULL, `PackageContainersoort` TEXT, `PackageContainer` TEXT, PRIMARY KEY(`SourceNo`))",
---+        "fields": [
---+          {
---+            "fieldPath": "sourceNoStr",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shippingAgentCodeStr",
---+            "columnName": "ShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAgentServiceCodeStr",
---+            "columnName": "ShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packageTypeStr",
---+            "columnName": "PackageType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packageSequenceNumberInt",
---+            "columnName": "PackageSequenceNumber",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "packageItemCountInt",
---+            "columnName": "PackageItemCount",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "packageWeightInGInt",
---+            "columnName": "PackageWeightInG",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "packageContainerTypeStr",
---+            "columnName": "PackageContainersoort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packageContainerStr",
---+            "columnName": "PackageContainer",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "SourceNo"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "StockOwner",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`StockOwner` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`StockOwner`))",
---+        "fields": [
---+          {
---+            "fieldPath": "stockownerStr",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "StockOwner"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "AutorizedStockOwner",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`StockOwner` TEXT NOT NULL, `Vestiging` TEXT, PRIMARY KEY(`StockOwner`))",
---+        "fields": [
---+          {
---+            "fieldPath": "stockownerStr",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "vestigingStr",
---+            "columnName": "Vestiging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "StockOwner"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Labeltemplate",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Labelcode` TEXT NOT NULL, `Template` TEXT, PRIMARY KEY(`Labelcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "labelcodeStr",
---+            "columnName": "Labelcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "templateStr",
---+            "columnName": "Template",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Labelcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      }
---+    ],
---+    "views": [],
---+    "setupQueries": [
---+      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
---+      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'c3903465ac711d7815c8d3aea34ee5e6')"
---+    ]
---+  }
---+}
---\ No newline at end of file
---Index: build.gradle
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    \r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.1.2'\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n        classpath 'com.google.gms:google-services:4.3.5'\r\n        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.0'\r\n        classpath 'com.android.tools.build:gradle:4.1.2'\r\n        classpath 'com.google.firebase:perf-plugin:1.3.4'  // Performance Monitoring plugin\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url \"https://jitpack.io\" }\r\n        maven {\r\n            url 'https://maven.google.com/'\r\n        }\r\n        maven {\r\n            url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases/'\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\next {\r\n    androidSupportVersion = '28.0.0'\r\n    roomVersion = '1.1.1'\r\n    archLifecycleVersion = '1.1.1'\r\n}\r\n\r\n\r\n\r\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ build.gradle	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ build.gradle	(date 1617965689006)
---@@ -8,12 +8,12 @@
---     }
--- 
---     dependencies {
----        classpath 'com.android.tools.build:gradle:4.1.2'
---+        classpath 'com.android.tools.build:gradle:4.1.3'
---         // NOTE: Do not place your application dependencies here; they belong
---         // in the individual module build.gradle files
---         classpath 'com.google.gms:google-services:4.3.5'
---         classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.0'
----        classpath 'com.android.tools.build:gradle:4.1.2'
---+        classpath 'com.android.tools.build:gradle:4.1.3'
---         classpath 'com.google.firebase:perf-plugin:1.3.4'  // Performance Monitoring plugin
---     }
--- }
---Index: app/release/normal/release/output-metadata.json
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>{\r\n  \"version\": 2,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"nl.icsvertex.scansuite\",\r\n  \"variantName\": \"processNormalReleaseResources\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"versionCode\": 15891,\r\n      \"versionName\": \"1.5.8.91A\",\r\n      \"outputFile\": \"app-normal-release.apk\"\r\n    }\r\n  ]\r\n}
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/release/normal/release/output-metadata.json	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
---+++ app/release/normal/release/output-metadata.json	(date 1617964993454)
---@@ -10,8 +10,8 @@
---     {
---       "type": "SINGLE",
---       "filters": [],
----      "versionCode": 15891,
----      "versionName": "1.5.8.91A",
---+      "versionCode": 15892,
---+      "versionName": "1.5.8.92A",
---       "outputFile": "app-normal-release.apk"
---     }
---   ]
---Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml	(date 1617965228484)
---+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml	(date 1617965228484)
---@@ -0,0 +1,14 @@
---+<changelist name="Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]" date="1617964994205" recycled="true" deleted="true">
---+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch" />
---+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 9-4-2021 12:43 [Default Changelist]" />
---+  <binary>
---+    <option name="BEFORE_PATH" value="app/release/normal/release/scansuite.apk" />
---+    <option name="AFTER_PATH" value="app/release/normal/release/scansuite.apk" />
---+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/scansuite.apk" />
---+  </binary>
---+  <binary>
---+    <option name="BEFORE_PATH" value=".idea/caches/build_file_checksums.ser" />
---+    <option name="AFTER_PATH" value=".idea/caches/build_file_checksums.ser" />
---+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/build_file_checksums.ser" />
---+  </binary>
---+</changelist>
---\ No newline at end of file
---Index: app/schemas/SSU_WHS.General.acScanSuiteDatabase/151.json
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
------ app/schemas/SSU_WHS.General.acScanSuiteDatabase/151.json	(date 1617285538653)
---+++ app/schemas/SSU_WHS.General.acScanSuiteDatabase/151.json	(date 1617285538653)
---@@ -0,0 +1,4491 @@
---+{
---+  "formatVersion": 1,
---+  "database": {
---+    "version": 151,
---+    "identityHash": "b971f1cbeb59fe9dccff03b56f01ba4b",
---+    "entities": [
---+      {
---+        "tableName": "ScannerLogon",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`FixedScannerBranch` TEXT, `ScannerDescription` TEXT NOT NULL, `RequiredScannerVersion` TEXT, `ApplicationEnvironment` TEXT, `Languages` TEXT, `RequiredScannerConfiguration` TEXT, `ReapplyScannerConfiguration` TEXT, `VersionConfigAppCurrentScanner` TEXT, `VersionConfigAppRequiredScanner` TEXT, `ColorSet` TEXT, PRIMARY KEY(`ScannerDescription`))",
---+        "fields": [
---+          {
---+            "fieldPath": "fixedscannerbranch",
---+            "columnName": "FixedScannerBranch",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "scannerdescription",
---+            "columnName": "ScannerDescription",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "requiredscannerversion",
---+            "columnName": "RequiredScannerVersion",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "applicationenvironment",
---+            "columnName": "ApplicationEnvironment",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "languages",
---+            "columnName": "Languages",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "requiredscannerconfiguration",
---+            "columnName": "RequiredScannerConfiguration",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "reapplyscannerconfiguration",
---+            "columnName": "ReapplyScannerConfiguration",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "versionconfigappcurrentscanner",
---+            "columnName": "VersionConfigAppCurrentScanner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "versionconfigapprequiredscanner",
---+            "columnName": "VersionConfigAppRequiredScanner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "colorset",
---+            "columnName": "ColorSet",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "ScannerDescription"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Workplaces",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Werkplek` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Werkplek`))",
---+        "fields": [
---+          {
---+            "fieldPath": "workplace",
---+            "columnName": "Werkplek",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Werkplek"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "BarcodeLayouts",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcodelayout` TEXT NOT NULL, `Layout` TEXT NOT NULL, PRIMARY KEY(`Barcodelayout`, `Layout`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcodelayout",
---+            "columnName": "Barcodelayout",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "layoutvalue",
---+            "columnName": "Layout",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcodelayout",
---+            "Layout"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Authorisations",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Autorisatie` TEXT NOT NULL, `Order` INTEGER, `License` TEXT, PRIMARY KEY(`Autorisatie`))",
---+        "fields": [
---+          {
---+            "fieldPath": "authorisation",
---+            "columnName": "Autorisatie",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "order",
---+            "columnName": "Order",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "license",
---+            "columnName": "License",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Autorisatie"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Users",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Gebruikersnaam` TEXT NOT NULL, `Naam` TEXT, PRIMARY KEY(`Gebruikersnaam`))",
---+        "fields": [
---+          {
---+            "fieldPath": "username",
---+            "columnName": "Gebruikersnaam",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "name",
---+            "columnName": "Naam",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Gebruikersnaam"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Branches",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Vestiging` TEXT NOT NULL, `Vestigingtype` TEXT, `Name` TEXT, `BinMandatory` TEXT, `Receive_default_bin` TEXT, `Retour_default_bin` TEXT, `Move_default_bin` TEXT, `Pick_default_storage_bin` TEXT, PRIMARY KEY(`Vestiging`))",
---+        "fields": [
---+          {
---+            "fieldPath": "branch",
---+            "columnName": "Vestiging",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "branchtype",
---+            "columnName": "Vestigingtype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "branchname",
---+            "columnName": "Name",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "binmandatory",
---+            "columnName": "BinMandatory",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receivedefaultbin",
---+            "columnName": "Receive_default_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returndefaultbin",
---+            "columnName": "Retour_default_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "movedefaultbin",
---+            "columnName": "Move_default_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickDefaultStorageBinStr",
---+            "columnName": "Pick_default_storage_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Vestiging"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Settings",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Instelling` TEXT NOT NULL, `Waarde` TEXT, PRIMARY KEY(`Instelling`))",
---+        "fields": [
---+          {
---+            "fieldPath": "name",
---+            "columnName": "Instelling",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "value",
---+            "columnName": "Waarde",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Instelling"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Pickorders",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Ordernumber` TEXT NOT NULL, `Ordertype` TEXT, `QuantityTotal` TEXT, `SingleArticleOrders` TEXT, `Pick_Sales_ask_workplace` TEXT, `Pick_Transfer_ask_workplace` TEXT, `Pick_Pick_PV_VKO_each_piece` TEXT, `Pick_with_picture` TEXT, `Pick_with_picture_auto_open` TEXT, `Pick_with_picture_prefetch` TEXT, `Pick_activity_bin_required` TEXT, `Pick_auto_next` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Currentlocation` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `IsSelected` INTEGER NOT NULL, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Ordernumber`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Ordernumber",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Ordertype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantitytotal",
---+            "columnName": "QuantityTotal",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "singleArticleOrders",
---+            "columnName": "SingleArticleOrders",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickSalesaskworkplace",
---+            "columnName": "Pick_Sales_ask_workplace",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickTransferaskworkplace",
---+            "columnName": "Pick_Transfer_ask_workplace",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickPickPVVKOeachpiece",
---+            "columnName": "Pick_Pick_PV_VKO_each_piece",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickWithPicture",
---+            "columnName": "Pick_with_picture",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickWithPictureAutoOpen",
---+            "columnName": "Pick_with_picture_auto_open",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickWithPicturePrefetch",
---+            "columnName": "Pick_with_picture_prefetch",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickActivityBinRequired",
---+            "columnName": "Pick_activity_bin_required",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "pickAutoNext",
---+            "columnName": "Pick_auto_next",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockOwner",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentlocation",
---+            "columnName": "Currentlocation",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "interfaceresultmethod",
---+            "columnName": "Interface_result_method",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isSelected",
---+            "columnName": "IsSelected",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Ordernumber"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Pickorderlines",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `StorageBinCode` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `QuantityRejected` REAL, `SourceNo` TEXT, `DestinationNo` TEXT, `ProcessingSequence` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Status` INTEGER, `StatusShipping` INTEGER, `StatusPacking` INTEGER, `QuantityTaken` REAL NOT NULL, `TakenTimestamp` TEXT, `LocalStatus` INTEGER NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "storageBincode",
---+            "columnName": "StorageBinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityRejected",
---+            "columnName": "QuantityRejected",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "destinationno",
---+            "columnName": "DestinationNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "processingsequence",
---+            "columnName": "ProcessingSequence",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusShipping",
---+            "columnName": "StatusShipping",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusPacking",
---+            "columnName": "StatusPacking",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantitytaken",
---+            "columnName": "QuantityTaken",
---+            "affinity": "REAL",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "takenTimeStamp",
---+            "columnName": "TakenTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderLineBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` TEXT NOT NULL, `Barcode` TEXT NOT NULL, `Quantity` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "lineNoStr",
---+            "columnName": "LineNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandledStr",
---+            "columnName": "Quantity",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "LineNo",
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderlineProperty",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `Propertycode` TEXT, `SequenceNoHandled` INTEGER, `SortingSequenceNo` INTEGER, `Layout` TEXT, `IsInput` INTEGER NOT NULL, `Isrequired` INTEGER NOT NULL, `ValueHandled` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "linenoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "propertyCodeStr",
---+            "columnName": "Propertycode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sequenceNoHandledInt",
---+            "columnName": "SequenceNoHandled",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "layoutStr",
---+            "columnName": "Layout",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isInputBln",
---+            "columnName": "IsInput",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "isRequiredBln",
---+            "columnName": "Isrequired",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "valueHandledStr",
---+            "columnName": "ValueHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderlinePropertyValue",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Propertycode` TEXT, `Value` TEXT, `SortingSequenceNo` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "propertyCodeStr",
---+            "columnName": "Propertycode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "valueStr",
---+            "columnName": "Value",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ArticleImage",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Itemno` TEXT NOT NULL, `Variantcode` TEXT NOT NULL, `Image` TEXT, PRIMARY KEY(`Itemno`, `Variantcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "Itemno",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "Variantcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "image",
---+            "columnName": "Image",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Itemno",
---+            "Variantcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT NOT NULL, `ItemNo` TEXT NOT NULL, `VariantCode` TEXT NOT NULL, `IsUniqueBarcode` TEXT, `QtyPerUnitOfMeasure` TEXT, `QuantityHandled` TEXT, PRIMARY KEY(`Barcode`, `BarCodeType`, `ItemNo`, `VariantCode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityperunitofmeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode",
---+            "BarCodeType",
---+            "ItemNo",
---+            "VariantCode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderCompositeBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Composite_barcode` TEXT NOT NULL, `ItemNo` TEXT NOT NULL, `VariantCode` TEXT NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, PRIMARY KEY(`Composite_barcode`, `ItemNo`, `VariantCode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "compositeBarcodeStr",
---+            "columnName": "Composite_barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "itemNoStr",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "variantCodeStr",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Composite_barcode",
---+            "ItemNo",
---+            "VariantCode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Comment",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`CommentLineNo` INTEGER NOT NULL, `CommentCode` TEXT, `CommentText` TEXT, PRIMARY KEY(`CommentLineNo`))",
---+        "fields": [
---+          {
---+            "fieldPath": "commentLineNoLng",
---+            "columnName": "CommentLineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "commentcodeStr",
---+            "columnName": "CommentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "commentTextStr",
---+            "columnName": "CommentText",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "CommentLineNo"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "SalesOrderPackingTable",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Salesorder` TEXT NOT NULL, `Packingtable` TEXT NOT NULL, PRIMARY KEY(`Salesorder`))",
---+        "fields": [
---+          {
---+            "fieldPath": "salesorder",
---+            "columnName": "Salesorder",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "packingtable",
---+            "columnName": "Packingtable",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Salesorder"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderAddress",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Adrescode` TEXT NOT NULL, `Naam` TEXT, `Naamtoevoeging` TEXT, `Address` TEXT, `Adrestoevoeging` TEXT, `Street` TEXT, `Huisnummer` TEXT, `Huisnummertoevoeging` TEXT, `Zipcode` TEXT, `Plaats` TEXT, `Land` TEXT, PRIMARY KEY(`Adrescode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "addrescode",
---+            "columnName": "Adrescode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "name",
---+            "columnName": "Naam",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "nameAddition",
---+            "columnName": "Naamtoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "address",
---+            "columnName": "Address",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressAddition",
---+            "columnName": "Adrestoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "street",
---+            "columnName": "Street",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressNumber",
---+            "columnName": "Huisnummer",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressNumberAddition",
---+            "columnName": "Huisnummertoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "zipcode",
---+            "columnName": "Zipcode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "city",
---+            "columnName": "Plaats",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "country",
---+            "columnName": "Land",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Adrescode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ShippingAgents",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Expediteur`))",
---+        "fields": [
---+          {
---+            "fieldPath": "shippingagent",
---+            "columnName": "Expediteur",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Expediteur"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ShippingAgentServices",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Expediteur`, `Service`))",
---+        "fields": [
---+          {
---+            "fieldPath": "shippingagent",
---+            "columnName": "Expediteur",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "service",
---+            "columnName": "Service",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Expediteur",
---+            "Service"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ShippingAgentServiceShippingUnits",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Verzendeenheid` TEXT NOT NULL, `Omschrijving` TEXT, `Containersoort` TEXT, PRIMARY KEY(`Expediteur`, `Service`, `Verzendeenheid`))",
---+        "fields": [
---+          {
---+            "fieldPath": "shippingagent",
---+            "columnName": "Expediteur",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "service",
---+            "columnName": "Service",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shippingunit",
---+            "columnName": "Verzendeenheid",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "containertype",
---+            "columnName": "Containersoort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Expediteur",
---+            "Service",
---+            "Verzendeenheid"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ShippingAgentServiceShipMethods",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Verzendmethode` TEXT NOT NULL, `Omschrijving` TEXT, `ValueType` TEXT, `DefaultValue` TEXT, `EnumerationValues` TEXT, PRIMARY KEY(`Expediteur`, `Service`, `Verzendmethode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "shippingagent",
---+            "columnName": "Expediteur",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "service",
---+            "columnName": "Service",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shippingMethodStr",
---+            "columnName": "Verzendmethode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "valuetype",
---+            "columnName": "ValueType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "defaultvalue",
---+            "columnName": "DefaultValue",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "enumerationvalues",
---+            "columnName": "EnumerationValues",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Expediteur",
---+            "Service",
---+            "Verzendmethode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderShipPackages",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceNo` TEXT NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `PackageType` TEXT, `PackageSequenceNumber` TEXT, PRIMARY KEY(`SourceNo`))",
---+        "fields": [
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shipagentcode",
---+            "columnName": "ShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shipagentservicecode",
---+            "columnName": "ShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packagetype",
---+            "columnName": "PackageType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packagesequencenumber",
---+            "columnName": "PackageSequenceNumber",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "SourceNo"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderLineFinishSinglePiece",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SourceNo` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `Verzendlabel_status` INTEGER NOT NULL, `LocalStatus` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Verzendlabel_status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderSetting",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SettingCode` TEXT NOT NULL, `SettingValue` TEXT, PRIMARY KEY(`SettingCode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "settingCode",
---+            "columnName": "SettingCode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "settingValue",
---+            "columnName": "SettingValue",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "SettingCode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ItemProperties",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Property` TEXT NOT NULL, `Layout` TEXT, `Omschrijving` TEXT, `IsUnique` INTEGER, `Uniqueness` TEXT, `RememberValue` INTEGER, `ValueType` TEXT, PRIMARY KEY(`Property`))",
---+        "fields": [
---+          {
---+            "fieldPath": "property",
---+            "columnName": "Property",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "layout",
---+            "columnName": "Layout",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "omschrijving",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isUnique",
---+            "columnName": "IsUnique",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "uniqueness",
---+            "columnName": "Uniqueness",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "rememberValue",
---+            "columnName": "RememberValue",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "valueType",
---+            "columnName": "ValueType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Property"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PropertyGroup",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Propertiegroep` TEXT NOT NULL, `Omschrijving` TEXT, `Naam_kort` TEXT, `Image_base64` TEXT, PRIMARY KEY(`Propertiegroep`))",
---+        "fields": [
---+          {
---+            "fieldPath": "propertyGroup",
---+            "columnName": "Propertiegroep",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shortName",
---+            "columnName": "Naam_kort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "imageBase64",
---+            "columnName": "Image_base64",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Propertiegroep"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PropertyGroupProperty",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Herkomstcode` TEXT, `Herkomstsleutel` TEXT, `Propertie` TEXT NOT NULL, `Volgorde` INTEGER NOT NULL, PRIMARY KEY(`Propertie`))",
---+        "fields": [
---+          {
---+            "fieldPath": "origin",
---+            "columnName": "Herkomstcode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "originKey",
---+            "columnName": "Herkomstsleutel",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "property",
---+            "columnName": "Propertie",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "order",
---+            "columnName": "Volgorde",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Propertie"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PickorderLinePackAndShip",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `LineNoTake` INTEGER, `SourceNo` TEXT, `DestinationNo` TEXT, `DeliveryAddressCode` TEXT, `ProcessingSequence` TEXT, `StatusShipping` INTEGER NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Quantity` REAL, `QuantityChecked` REAL, `QuantityHandled` REAL, `Status` INTEGER NOT NULL, `LocalStatus` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "linenoTake",
---+            "columnName": "LineNoTake",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "destinationno",
---+            "columnName": "DestinationNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "deliveryaddresscode",
---+            "columnName": "DeliveryAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "processingsequence",
---+            "columnName": "ProcessingSequence",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusshipping",
---+            "columnName": "StatusShipping",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shippingagentcode",
---+            "columnName": "ShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingagentservicecode",
---+            "columnName": "ShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityChecked",
---+            "columnName": "QuantityChecked",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrder",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `Inv_Amount_manual` TEXT, `Inv_barcode_check` TEXT, `Inv_add_extra_bin` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `Inventory_with_picture` TEXT, `Inventory_with_picture_auto_open` TEXT, `Inventory_with_picture_prefetch` TEXT, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "numberofBins",
---+            "columnName": "Aantal_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "invAmountManual",
---+            "columnName": "Inv_Amount_manual",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "invBarcodeCheck",
---+            "columnName": "Inv_barcode_check",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "invAddExtraBin",
---+            "columnName": "Inv_add_extra_bin",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockOwner",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "interfaceresultmethod",
---+            "columnName": "Interface_result_method",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "inventoryWithPicture",
---+            "columnName": "Inventory_with_picture",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "inventoryWithPictureAutoOpen",
---+            "columnName": "Inventory_with_picture_auto_open",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "inventoryWithPicturePrefetch",
---+            "columnName": "Inventory_with_picture_prefetch",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrderBin",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`BinCode` TEXT NOT NULL, `Lines` INTEGER NOT NULL, `HandledTimestamp` TEXT, `Status` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, PRIMARY KEY(`BinCode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "lines",
---+            "columnName": "Lines",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "handledTimeStamp",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "BinCode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrderLines",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `ItemNo` TEXT, `VariantCode` TEXT, `Itemsoort` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `SortingSequenceNo` INTEGER NOT NULL, `Status` INTEGER NOT NULL, `SourceType` INTEGER NOT NULL, `HandledTimestamp` TEXT, `QuantityHandled` REAL, `QuantityHandledAllScanners` REAL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemtype",
---+            "columnName": "Itemsoort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingsequenceno",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sourcetype",
---+            "columnName": "SourceType",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "handledtimestamp",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityhandledAllScanners",
---+            "columnName": "QuantityHandledAllScanners",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrderBarcodes",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Itemsoort` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, `Inv_Amount_manual` INTEGER, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemType",
---+            "columnName": "Itemsoort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasure",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "invAmountManual",
---+            "columnName": "Inv_Amount_manual",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryOrderLineBarcodes",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "lineNoLng",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandledStr",
---+            "columnName": "QuantityHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "LineNo",
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryorderlineProperty",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `Propertycode` TEXT, `SequenceNoHandled` INTEGER, `SortingSequenceNo` INTEGER, `Layout` TEXT, `IsInput` INTEGER NOT NULL, `Isrequired` INTEGER NOT NULL, `ValueHandled` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "linenoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "propertyCodeStr",
---+            "columnName": "Propertycode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sequenceNoHandledInt",
---+            "columnName": "SequenceNoHandled",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "layoutStr",
---+            "columnName": "Layout",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isInputBln",
---+            "columnName": "IsInput",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "isRequiredBln",
---+            "columnName": "Isrequired",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "valueHandledStr",
---+            "columnName": "ValueHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "InventoryorderlinePropertyValue",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Propertycode` TEXT, `Value` TEXT, `SortingSequenceNo` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "propertyCodeStr",
---+            "columnName": "Propertycode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "valueStr",
---+            "columnName": "Value",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "IntakeOrders",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` INTEGER NOT NULL, `BinCode` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `Receive_Amount_manual_eo` TEXT, `Receive_store_auto_accept_at_requested` TEXT, `Receive_no_extra_bins` TEXT, `Receive_no_extra_items` TEXT, `Receive_no_extra_pieces` TEXT, `SourceDocument` INTEGER NOT NULL, `Document` TEXT, `Document2` TEXT, `ReceivedDateTime` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `Receive_with_picture` TEXT, `Receive_with_picture_auto_open` TEXT, `Receive_intake_eo_packaging_intake` TEXT, `Receive_intake_eo_packaging_shipped` TEXT, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "binCode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockOwner",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveAmountManualEO",
---+            "columnName": "Receive_Amount_manual_eo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveStoreAutoAcceptAtRequested",
---+            "columnName": "Receive_store_auto_accept_at_requested",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveNoExtraBins",
---+            "columnName": "Receive_no_extra_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveNoExtraItems",
---+            "columnName": "Receive_no_extra_items",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveNoExtraPieces",
---+            "columnName": "Receive_no_extra_pieces",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receivedDateTime",
---+            "columnName": "ReceivedDateTime",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "interfaceresultmethod",
---+            "columnName": "Interface_result_method",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveWithPicture",
---+            "columnName": "Receive_with_picture",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveWithPictureAutoOpen",
---+            "columnName": "Receive_with_picture_auto_open",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveIntakeEOPackagingIntake",
---+            "columnName": "Receive_intake_eo_packaging_intake",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveIntakeEOPackagingShipped",
---+            "columnName": "Receive_intake_eo_packaging_shipped",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "IntakeLinesMAT",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Container` TEXT, `BinCodeHandled` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `SourceNo` TEXT, `DestinationNo` TEXT, `IsPartOfMultiLineOrder` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Status` INTEGER, `LocalStatus` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `SourceType` INTEGER)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemNoStr",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCodeStr",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2Str",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "binCodeStr",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "containerStr",
---+            "columnName": "Container",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "binCodehandledStr",
---+            "columnName": "BinCodeHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityDbl",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandledDbl",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceNoStr",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "destinationNoStr",
---+            "columnName": "DestinationNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isPartOfMultilineOrderStr",
---+            "columnName": "IsPartOfMultiLineOrder",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendorItemNoStr",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendorItemDescriptionStr",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusInt",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "localStatusInt",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "extraField1Str",
---+            "columnName": "ExtraField1",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField2Str",
---+            "columnName": "ExtraField2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField3Str",
---+            "columnName": "ExtraField3",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField4Str",
---+            "columnName": "ExtraField4",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField5Str",
---+            "columnName": "ExtraField5",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField6Str",
---+            "columnName": "ExtraField6",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField7Str",
---+            "columnName": "ExtraField7",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField8Str",
---+            "columnName": "ExtraField8",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceTypeInt",
---+            "columnName": "SourceType",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "IntakeOrderBarcodes",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, `Receive_Amount_manual` INTEGER, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasure",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "receiveAmountManual",
---+            "columnName": "Receive_Amount_manual",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "IntakeOrderMATLineBarcodes",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "lineNoLng",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandledStr",
---+            "columnName": "QuantityHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "LineNo",
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Returnorder",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `StockOwner` TEXT, `Status` TEXT, `BinCode` TEXT, `CurrentLocation` TEXT, `ExternalReference` TEXT, `Retour_Amount_manual` INTEGER, `Retour_Barcode_check` INTEGER, `Retour_multi_document` INTEGER, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Reason` TEXT, `Retour_with_picture` INTEGER, `Retour_Order_bin_no_check` INTEGER, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumberStr",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertypeStr",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserIdStr",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserIdStr",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockownerStr",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusStr",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincodeStr",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentLocationStr",
---+            "columnName": "CurrentLocation",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReferenceStr",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourAmountManualBln",
---+            "columnName": "Retour_Amount_manual",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourBarcodeCheckBln",
---+            "columnName": "Retour_Barcode_check",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourMultiDocumentBln",
---+            "columnName": "Retour_multi_document",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocumentStr",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "documentStr",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2Str",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "reasonStr",
---+            "columnName": "Reason",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returnWithPictureBln",
---+            "columnName": "Retour_with_picture",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourOrderBINNoCheckBln",
---+            "columnName": "Retour_Order_bin_no_check",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReturnorderBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeTypeStr",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isUniqueBarcodeBln",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemNoStr",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasureDbl",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasureStr",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandledDbl",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReturnorderDocument",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceDocument` TEXT NOT NULL, `Status` INTEGER NOT NULL, PRIMARY KEY(`SourceDocument`))",
---+        "fields": [
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "SourceDocument"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReturnorderLine",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ItemNo` TEXT, `VariantCode` TEXT, `Document` TEXT, `Retourreden` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `SortingSequenceNo_take` INTEGER NOT NULL, `Quantity_take` REAL, `QuantityHandled_take` REAL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `Generated` INTEGER NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "retourreden",
---+            "columnName": "Retourreden",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemno",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendoritemdescription",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingsequenceno",
---+            "columnName": "SortingSequenceNo_take",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantitytake",
---+            "columnName": "Quantity_take",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandledtake",
---+            "columnName": "QuantityHandled_take",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield1",
---+            "columnName": "ExtraField1",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield2",
---+            "columnName": "ExtraField2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield3",
---+            "columnName": "ExtraField3",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield4",
---+            "columnName": "ExtraField4",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield5",
---+            "columnName": "ExtraField5",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield6",
---+            "columnName": "ExtraField6",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield7",
---+            "columnName": "ExtraField7",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield8",
---+            "columnName": "ExtraField8",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "generated",
---+            "columnName": "Generated",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReturnorderLineBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoLng",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandledStr",
---+            "columnName": "QuantityHandled",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "ReceiveLines",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `SortingSequenceNo` INTEGER NOT NULL, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `HandledTimestamp` TEXT, `Status` INTEGER, `LocalStatus` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemNoStr",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCodeStr",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2Str",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "binCodeStr",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityDbl",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandledDbl",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoStr",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "vendorItemNoStr",
---+            "columnName": "VendorItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "vendorItemDescriptionStr",
---+            "columnName": "VendorItemDescription",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "handledTimeStampStr",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusInt",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "localStatusInt",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "extraField1Str",
---+            "columnName": "ExtraField1",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField2Str",
---+            "columnName": "ExtraField2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField3Str",
---+            "columnName": "ExtraField3",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField4Str",
---+            "columnName": "ExtraField4",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField5Str",
---+            "columnName": "ExtraField5",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField6Str",
---+            "columnName": "ExtraField6",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField7Str",
---+            "columnName": "ExtraField7",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extraField8Str",
---+            "columnName": "ExtraField8",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "MoveOrder",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `BinCode` TEXT, `StockOwner` TEXT, `ExternalReference` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Move_Amount_manual` TEXT, `Move_Barcode_check` TEXT, `Move_validate_stock` TEXT, `Move_validate_stock_enforce` TEXT, `Move_auto_accept_at_requested` TEXT, `Move_no_extra_bins` TEXT, `Move_no_extra_items` TEXT, `Move_no_extra_pieces` TEXT, `Move_with_picture` TEXT, `Move_with_picture_auto_open` TEXT, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "numberofBins",
---+            "columnName": "Aantal_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "stockownerStr",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveAmountManual",
---+            "columnName": "Move_Amount_manual",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveBarcodeCheck",
---+            "columnName": "Move_Barcode_check",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveValidateStock",
---+            "columnName": "Move_validate_stock",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveValidateStockEnforce",
---+            "columnName": "Move_validate_stock_enforce",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveAutoAcceptAtRequested",
---+            "columnName": "Move_auto_accept_at_requested",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveNoExtraBins",
---+            "columnName": "Move_no_extra_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveNoExtraItems",
---+            "columnName": "Move_no_extra_items",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveNoExtraPieces",
---+            "columnName": "Move_no_extra_pieces",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveWithPicture",
---+            "columnName": "Move_with_picture",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "moveWithPictureAutoOpen",
---+            "columnName": "Move_with_picture_auto_open",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "MoveOrderLine",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `ActionTypeCode` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL NOT NULL, `QuantityHandled` REAL, `HandledTimestamp` TEXT, `SourceNo` TEXT, `Status` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `LocalStatus` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `LocalQuantityTaken` REAL NOT NULL, `LocalQuantityPlaced` REAL NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "actiontypecode",
---+            "columnName": "ActionTypeCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "handledtimestamp",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceno",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNo",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "extrafield1",
---+            "columnName": "ExtraField1",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield2",
---+            "columnName": "ExtraField2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield3",
---+            "columnName": "ExtraField3",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield4",
---+            "columnName": "ExtraField4",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield5",
---+            "columnName": "ExtraField5",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield6",
---+            "columnName": "ExtraField6",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield7",
---+            "columnName": "ExtraField7",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "extrafield8",
---+            "columnName": "ExtraField8",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityTaken",
---+            "columnName": "LocalQuantityTaken",
---+            "affinity": "REAL",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityPlaced",
---+            "columnName": "LocalQuantityPlaced",
---+            "affinity": "REAL",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "MoveOrdeBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasure",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "MoveOrderLineBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` REAL, PRIMARY KEY(`LineNo`, `Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "lineNoInt",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodeStr",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "LineNo",
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Packaging",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Emballage` TEXT NOT NULL, `Description` TEXT NOT NULL, PRIMARY KEY(`Emballage`))",
---+        "fields": [
---+          {
---+            "fieldPath": "codeStr",
---+            "columnName": "Emballage",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Emballage"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Scanners",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Werkplek` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Werkplek`))",
---+        "fields": [
---+          {
---+            "fieldPath": "scanner",
---+            "columnName": "Werkplek",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "omschrijving",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Werkplek"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "CustomAuthorisations",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Autorisatie` TEXT NOT NULL, `Omschrijving` TEXT, `Autorisatie_basis` TEXT, `Filter_veld` TEXT, `Filter_waarde` TEXT, `Image_base64` TEXT, PRIMARY KEY(`Autorisatie`))",
---+        "fields": [
---+          {
---+            "fieldPath": "authorisation",
---+            "columnName": "Autorisatie",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "authorisationbase",
---+            "columnName": "Autorisatie_basis",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "filterfield",
---+            "columnName": "Filter_veld",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "filtervalue",
---+            "columnName": "Filter_waarde",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "imagebase64",
---+            "columnName": "Image_base64",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Autorisatie"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Translations",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Tekst` TEXT NOT NULL, `Taal` TEXT NOT NULL, `Vertaling` TEXT, PRIMARY KEY(`Tekst`, `Taal`))",
---+        "fields": [
---+          {
---+            "fieldPath": "text",
---+            "columnName": "Tekst",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "language",
---+            "columnName": "Taal",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "translation",
---+            "columnName": "Vertaling",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Tekst",
---+            "Taal"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "CompositeBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`CompositeBarcode` TEXT NOT NULL, `Compositebarcode_type` TEXT, `Description` TEXT, `Field_separator` TEXT, `Layout_regex` TEXT, `Layout_type` TEXT, PRIMARY KEY(`CompositeBarcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "compositeBarcodeStr",
---+            "columnName": "CompositeBarcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "compositeBarcodeTypeStr",
---+            "columnName": "Compositebarcode_type",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "fieldSeperatorStr",
---+            "columnName": "Field_separator",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "layoutRegexStr",
---+            "columnName": "Layout_regex",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "layoutTypeStr",
---+            "columnName": "Layout_type",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "CompositeBarcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "CompositeBarcodeProperty",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Comment` TEXT, `Field` TEXT NOT NULL, `Field_identifier` TEXT, `Field_type` TEXT, `Position_start` INTEGER NOT NULL, `Position_end` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `Strip_this` TEXT, PRIMARY KEY(`Field`))",
---+        "fields": [
---+          {
---+            "fieldPath": "commentStr",
---+            "columnName": "Comment",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "fieldStr",
---+            "columnName": "Field",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "fieldIdentifierStr",
---+            "columnName": "Field_identifier",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "fieldTypeStr",
---+            "columnName": "Field_type",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "positionStartInt",
---+            "columnName": "Position_start",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "positionEndInt",
---+            "columnName": "Position_end",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNoInt",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "stripThisStr",
---+            "columnName": "Strip_this",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Field"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndSHipOrder",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentLocation` TEXT, `CurrentUserId` TEXT, `DestinationNo` TEXT, `Document` TEXT, `Document2` TEXT, `DocumentType` TEXT, `DocumentType2` TEXT, `ExternalReference` TEXT, `Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `SourceDocument` TEXT, `Status` TEXT, `Workplace` TEXT, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
---+        "fields": [
---+          {
---+            "fieldPath": "numberofBins",
---+            "columnName": "Aantal_bins",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "assignedUserId",
---+            "columnName": "AssignedUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentLocation",
---+            "columnName": "CurrentLocation",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "currentUserId",
---+            "columnName": "CurrentUserId",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "destinationNo",
---+            "columnName": "DestinationNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document",
---+            "columnName": "Document",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "document2",
---+            "columnName": "Document2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "documentType",
---+            "columnName": "DocumentType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "documentType2",
---+            "columnName": "DocumentType2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "externalReference",
---+            "columnName": "ExternalReference",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "ordernumber",
---+            "columnName": "Opdrachtnummer",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "ordertype",
---+            "columnName": "Opdrachttype",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceDocument",
---+            "columnName": "SourceDocument",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "workplace",
---+            "columnName": "Workplace",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isprocessingorparked",
---+            "columnName": "IsProcessingOrParked",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "priorityInt",
---+            "columnName": "Priority",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Opdrachtnummer"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipOrderLine",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ActionTypeCode` TEXT, `BinCode` TEXT, `Description` TEXT, `Description2` TEXT, `HandledTimestamp` TEXT, `ItemNo` TEXT, `LineNo` INTEGER NOT NULL, `Quantity` REAL NOT NULL, `QuantityHandled` REAL, `SortingSequenceNo` INTEGER NOT NULL, `Status` INTEGER NOT NULL, `VariantCode` TEXT, `LocalStatus` INTEGER NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "actiontypecode",
---+            "columnName": "ActionTypeCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "bincode",
---+            "columnName": "BinCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description",
---+            "columnName": "Description",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "description2",
---+            "columnName": "Description2",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "handledtimestamp",
---+            "columnName": "HandledTimestamp",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "lineno",
---+            "columnName": "LineNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantity",
---+            "columnName": "Quantity",
---+            "affinity": "REAL",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "quantityhandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sortingSequenceNo",
---+            "columnName": "SortingSequenceNo",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "status",
---+            "columnName": "Status",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "variantcode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "localstatus",
---+            "columnName": "LocalStatus",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipBarcode",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "barcode",
---+            "columnName": "Barcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "barcodetype",
---+            "columnName": "BarCodeType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "isuniquebarcode",
---+            "columnName": "IsUniqueBarcode",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "itemno",
---+            "columnName": "ItemNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "variantCode",
---+            "columnName": "VariantCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityPerUnitOfMeasure",
---+            "columnName": "QtyPerUnitOfMeasure",
---+            "affinity": "REAL",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "unitOfMeasure",
---+            "columnName": "UnitOfMeasure",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "quantityHandled",
---+            "columnName": "QuantityHandled",
---+            "affinity": "REAL",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Barcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipShipment",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SourceNo` TEXT, `ShippingLabels` TEXT, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `ActualShippingAgentCode` TEXT, `ActualShippingAgentServiceCode` TEXT, `ShippingAddressType` TEXT, `ShippingAddressCode` TEXT, `DeliveryAddressType` TEXT, `DeliveryAddressCode` TEXT, `SenderAddressCode` TEXT, `ReturnAddressCode` TEXT, `ReturnSenderAddressCode` TEXT, `ReturnShippingAddressCode` TEXT, `BillingAddressCode` TEXT, `StatusShipping` INTEGER NOT NULL, `StatusPacking` INTEGER NOT NULL)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "sourceNoStr",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingLabelsStr",
---+            "columnName": "ShippingLabels",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAgentCodeStr",
---+            "columnName": "ShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAgentServiceCodeStr",
---+            "columnName": "ShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "actualShippingAgentCodeStr",
---+            "columnName": "ActualShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "actualShippingAgentServiceCodeStr",
---+            "columnName": "ActualShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAddressTypeStr",
---+            "columnName": "ShippingAddressType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAddressCodeStr",
---+            "columnName": "ShippingAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "deliveryAddressTypeStr",
---+            "columnName": "DeliveryAddressType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "deliveryAddressCodeStr",
---+            "columnName": "DeliveryAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "senderAddressCodeStr",
---+            "columnName": "SenderAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returnAddressCodeStr",
---+            "columnName": "ReturnAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returnSenderAddressCodeStr",
---+            "columnName": "ReturnSenderAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "returnShippingAddressCodeStr",
---+            "columnName": "ReturnShippingAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "billingAddressCodeStr",
---+            "columnName": "BillingAddressCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "statusShippingInt",
---+            "columnName": "StatusShipping",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "statusPackingInt",
---+            "columnName": "StatusPacking",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipAddress",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Adrescode` TEXT NOT NULL, `AddressName` TEXT, `AddressType` TEXT, `Naamtoevoeging` TEXT, `Address` TEXT, `Adrestoevoeging` TEXT, `Street` TEXT, `Huisnummer` INTEGER NOT NULL, `Huisnummertoevoeging` TEXT, `Zipcode` TEXT, `Regio` TEXT, `Plaats` TEXT, `Land` TEXT, `Email` TEXT, `Telefoon` TEXT, `Contactpersoon` TEXT, PRIMARY KEY(`Adrescode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "addressCodeStr",
---+            "columnName": "Adrescode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "addressNameStr",
---+            "columnName": "AddressName",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressTypeStr",
---+            "columnName": "AddressType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "nameAdditionStr",
---+            "columnName": "Naamtoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressStr",
---+            "columnName": "Address",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressAdditionStr",
---+            "columnName": "Adrestoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "streetStr",
---+            "columnName": "Street",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "addressNumberInt",
---+            "columnName": "Huisnummer",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "addressNumberAdditionStr",
---+            "columnName": "Huisnummertoevoeging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "zipcodeStr",
---+            "columnName": "Zipcode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "regionStr",
---+            "columnName": "Regio",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "cityStr",
---+            "columnName": "Plaats",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "countryStr",
---+            "columnName": "Land",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "emailStr",
---+            "columnName": "Email",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "phoneStr",
---+            "columnName": "Telefoon",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "contactPersonStr",
---+            "columnName": "Contactpersoon",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Adrescode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipSetting",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SettingCode` TEXT, `SettingValue` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "settingCodeStr",
---+            "columnName": "SettingCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "settingValueStr",
---+            "columnName": "SettingValue",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipShippingMethod",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ShippingMethodCode` TEXT, `ShippingMethodValue` TEXT)",
---+        "fields": [
---+          {
---+            "fieldPath": "recordid",
---+            "columnName": "recordid",
---+            "affinity": "INTEGER",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingMethodCodeStr",
---+            "columnName": "ShippingMethodCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingMethodValueStr",
---+            "columnName": "ShippingMethodValue",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "recordid"
---+          ],
---+          "autoGenerate": true
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "PackAndShipShippingPackage",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceNo` TEXT NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `PackageType` TEXT, `PackageSequenceNumber` INTEGER NOT NULL, `PackageItemCount` INTEGER NOT NULL, `PackageWeightInG` INTEGER NOT NULL, `PackageContainersoort` TEXT, `PackageContainer` TEXT, PRIMARY KEY(`SourceNo`))",
---+        "fields": [
---+          {
---+            "fieldPath": "sourceNoStr",
---+            "columnName": "SourceNo",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "shippingAgentCodeStr",
---+            "columnName": "ShippingAgentCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "shippingAgentServiceCodeStr",
---+            "columnName": "ShippingAgentServiceCode",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packageTypeStr",
---+            "columnName": "PackageType",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packageSequenceNumberInt",
---+            "columnName": "PackageSequenceNumber",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "packageItemCountInt",
---+            "columnName": "PackageItemCount",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "packageWeightInGInt",
---+            "columnName": "PackageWeightInG",
---+            "affinity": "INTEGER",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "packageContainerTypeStr",
---+            "columnName": "PackageContainersoort",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          },
---+          {
---+            "fieldPath": "packageContainerStr",
---+            "columnName": "PackageContainer",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "SourceNo"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "StockOwner",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`StockOwner` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`StockOwner`))",
---+        "fields": [
---+          {
---+            "fieldPath": "stockownerStr",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "descriptionStr",
---+            "columnName": "Omschrijving",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "StockOwner"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "AutorizedStockOwner",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`StockOwner` TEXT NOT NULL, `Vestiging` TEXT, PRIMARY KEY(`StockOwner`))",
---+        "fields": [
---+          {
---+            "fieldPath": "stockownerStr",
---+            "columnName": "StockOwner",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "vestigingStr",
---+            "columnName": "Vestiging",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "StockOwner"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      },
---+      {
---+        "tableName": "Labeltemplate",
---+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Labelcode` TEXT NOT NULL, `Template` TEXT, PRIMARY KEY(`Labelcode`))",
---+        "fields": [
---+          {
---+            "fieldPath": "labelcodeStr",
---+            "columnName": "Labelcode",
---+            "affinity": "TEXT",
---+            "notNull": true
---+          },
---+          {
---+            "fieldPath": "templateStr",
---+            "columnName": "Template",
---+            "affinity": "TEXT",
---+            "notNull": false
---+          }
---+        ],
---+        "primaryKey": {
---+          "columnNames": [
---+            "Labelcode"
---+          ],
---+          "autoGenerate": false
---+        },
---+        "indices": [],
---+        "foreignKeys": []
---+      }
---+    ],
---+    "views": [],
---+    "setupQueries": [
---+      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
---+      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'b971f1cbeb59fe9dccff03b56f01ba4b')"
---+    ]
---+  }
---+}
---\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59__Default_Changelist_.xml
--===================================================================
----- .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59__Default_Changelist_.xml	(revision 2d394166f7aefdd7dd0045032e90c52d5d086e88)
--+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59__Default_Changelist_.xml	(revision 2d394166f7aefdd7dd0045032e90c52d5d086e88)
--@@ -1,24 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]" date="1617965993176" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 9-4-2021 12:59 [Default Changelist]" />
---  <binary>
---    <option name="BEFORE_PATH" />
---    <option name="AFTER_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/scansuite.apk" />
---    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/scansuite.apk" />
---  </binary>
---  <binary>
---    <option name="BEFORE_PATH" value="app/release/normal/release/scansuite.apk" />
---    <option name="AFTER_PATH" value="app/release/normal/release/scansuite.apk" />
---    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/scansuite1.apk" />
---  </binary>
---  <binary>
---    <option name="BEFORE_PATH" />
---    <option name="AFTER_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/build_file_checksums.ser" />
---    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/build_file_checksums.ser" />
---  </binary>
---  <binary>
---    <option name="BEFORE_PATH" value=".idea/caches/build_file_checksums.ser" />
---    <option name="AFTER_PATH" value=".idea/caches/build_file_checksums.ser" />
---    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/build_file_checksums1.ser" />
---  </binary>
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml
--===================================================================
----- .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml	(revision 2d394166f7aefdd7dd0045032e90c52d5d086e88)
--+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml	(revision 2d394166f7aefdd7dd0045032e90c52d5d086e88)
--@@ -1,14 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]" date="1617964994205" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 9-4-2021 12:43 [Default Changelist]" />
---  <binary>
---    <option name="BEFORE_PATH" value="app/release/normal/release/scansuite.apk" />
---    <option name="AFTER_PATH" value="app/release/normal/release/scansuite.apk" />
---    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/scansuite.apk" />
---  </binary>
---  <binary>
---    <option name="BEFORE_PATH" value=".idea/caches/build_file_checksums.ser" />
---    <option name="AFTER_PATH" value=".idea/caches/build_file_checksums.ser" />
---    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/build_file_checksums.ser" />
---  </binary>
---</changelist>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37__Default_Changelist_.xml
-===================================================================
---- .idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37__Default_Changelist_.xml	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ .idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37__Default_Changelist_.xml	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-@@ -1,44 +0,0 @@
--<changelist name="Uncommitted_changes_before_Merge_at_21-4-2021_15_37_[Default_Changelist]" date="1619012428323" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37_[Default_Changelist]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Merge at 21-4-2021 15:37 [Default Changelist]" />
--  <binary>
--    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/build_file_checksums.ser" />
--    <option name="AFTER_PATH" />
--    <option name="SHELVED_PATH" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/build_file_checksums1.ser" />
--    <option name="AFTER_PATH" />
--    <option name="SHELVED_PATH" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="app/release/normal/release/scansuite.apk" />
--    <option name="AFTER_PATH" />
--    <option name="SHELVED_PATH" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/scansuite1.apk" />
--    <option name="AFTER_PATH" />
--    <option name="SHELVED_PATH" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value="app/release/normal/release/app-normal-release.apk" />
--    <option name="AFTER_PATH" value="app/release/normal/release/app-normal-release.apk" />
--    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_21-4-2021_15_37_[Default_Changelist]/app-normal-release.apk" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/scansuite.apk" />
--    <option name="AFTER_PATH" />
--    <option name="SHELVED_PATH" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/scansuite.apk" />
--    <option name="AFTER_PATH" />
--    <option name="SHELVED_PATH" />
--  </binary>
--  <binary>
--    <option name="BEFORE_PATH" value=".idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_59_[Default_Changelist]/build_file_checksums.ser" />
--    <option name="AFTER_PATH" />
--    <option name="SHELVED_PATH" />
--  </binary>
--</changelist>
-\ No newline at end of file
-Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/NumberpickerFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.Button;\r\nimport android.widget.ImageButton;\r\nimport android.widget.NumberPicker;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class NumberpickerFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    private  NumberPicker quantityNumberPicker;\r\n    private  int currentQuantity;\r\n    private  Double maxQuantityDbl;\r\n    private  int maxQuantityInt;\r\n\r\n    private  ImageButton imageButtonPlus;\r\n    private  ImageButton imageButtonMinus;\r\n\r\n    private  Button buttonPlus5;\r\n    private  Button buttonPlus10;\r\n    private  Button buttonMax;\r\n    private  Button buttonMinus5;\r\n    private  Button buttonMinus10;\r\n    private  Button buttonMin;\r\n\r\n    private  Button doneButton;\r\n    private  Button cancelButton;\r\n\r\n    public NumberpickerFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_numberpicker, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        Bundle args = getArguments();\r\n\r\n        if (args != null) {\r\n            this.currentQuantity = args.getInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, 0);\r\n            this.maxQuantityDbl = args.getDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, 0);\r\n        }\r\n\r\n        this.maxQuantityInt = (int) Math.round(this.maxQuantityDbl);\r\n        if (this.maxQuantityInt > this.maxQuantityDbl) {\r\n            this.maxQuantityInt -= -1;\r\n        }\r\n\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        if (getView() != null) {\r\n            this.quantityNumberPicker = getView().findViewById(R.id.quantityNumberPicker);\r\n            this.imageButtonPlus = getView().findViewById(R.id.imageButtonPlus);\r\n            this.imageButtonMinus = getView().findViewById(R.id.imageButtonMinus);\r\n\r\n            this.buttonPlus5 = getView().findViewById(R.id.buttonPlus5);\r\n            this.buttonPlus10 = getView().findViewById(R.id.buttonPlus10);\r\n            this.buttonMax = getView().findViewById(R.id.buttonMax);\r\n            this.buttonMinus5 = getView().findViewById(R.id.buttonMinus5);\r\n            this.buttonMinus10 = getView().findViewById(R.id.buttonMinus10);\r\n            this.buttonMin = getView().findViewById(R.id.buttonMin);\r\n\r\n            this.doneButton = getView().findViewById(R.id.doneButton);\r\n            this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n        }\r\n\r\n\r\n    }\r\n\r\n     @Override\r\n    public void mFieldsInitialize() {\r\n         this.quantityNumberPicker.setMaxValue(this.maxQuantityInt);\r\n         this.quantityNumberPicker.setValue(this.currentQuantity);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetNumberListeners();\r\n        this.mSetNumpadListeners();\r\n        this.mSetDoneListener();\r\n        this.mSetCancelListener();\r\n    }\r\n\r\n    private void mSetDoneListener() {\r\n        this.doneButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                    PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();\r\n\r\n                    pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity();\r\n                    pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n                    dismiss();\r\n                    return;\r\n                }\r\n                if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                    ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();\r\n\r\n                    receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                    receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    dismiss();\r\n                    return;\r\n                }\r\n                if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                    IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();\r\n\r\n                    intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                    intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    dismiss();\r\n                    return;\r\n                }\r\n                quantityNumberPicker.clearFocus();\r\n                Intent intent = new Intent(cPublicDefinitions.NUMBERINTENT_NUMBER);\r\n                intent.putExtra(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER, quantityNumberPicker.getValue());\r\n                LocalBroadcastManager.getInstance(cAppExtension.context).sendBroadcast(intent);\r\n                dismiss();\r\n            }\r\n        });\r\n\r\n    }\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListeners() {\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (quantityNumberPicker.getValue() == quantityNumberPicker.getMaxValue()) {\r\n                    cUserInterface.pDoNope(quantityNumberPicker, true, true);\r\n                }\r\n                else {\r\n                    changeValueByOne(quantityNumberPicker, true);\r\n                }\r\n            }\r\n        });\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (quantityNumberPicker.getValue() < 1) {\r\n                    cUserInterface.pDoNope(quantityNumberPicker, true, true);\r\n                }\r\n                else {\r\n                    changeValueByOne(quantityNumberPicker, false);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumpadListeners() {\r\n        this.buttonPlus5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberPickerChange(5,true);\r\n            }\r\n        });\r\n\r\n        this.buttonPlus10.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberPickerChange(10,true);\r\n            }\r\n        });\r\n\r\n        this.buttonMax.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                quantityNumberPicker.setValue(quantityNumberPicker.getMaxValue());\r\n            }\r\n        });\r\n\r\n        this.buttonMinus5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberPickerChange(5,false);\r\n            }\r\n        });\r\n\r\n        this.buttonMinus10.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberPickerChange(10,false);\r\n            }\r\n        });\r\n\r\n        this.buttonMin.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                quantityNumberPicker.setValue(quantityNumberPicker.getMinValue());\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mNumberPickerChange(int changeValue, boolean isMore) {\r\n        int currentValue = this.quantityNumberPicker.getValue();\r\n        int maxValue = this.quantityNumberPicker.getMaxValue();\r\n        int minValue = this.quantityNumberPicker.getMinValue();\r\n        int newValue;\r\n\r\n        if (isMore) {\r\n            //plus\r\n            newValue = currentValue + changeValue;\r\n            this.quantityNumberPicker.setValue(Math.min(newValue, maxValue));\r\n        }\r\n        else {\r\n            //minus\r\n            if (changeValue > currentValue) {\r\n                this.quantityNumberPicker.setValue(minValue);\r\n            }\r\n            else {\r\n                newValue = currentValue - changeValue;\r\n                this.quantityNumberPicker.setValue(newValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void changeValueByOne(final NumberPicker higherPicker, final boolean increment) {\r\n\r\n        Method method;\r\n        try {\r\n            // reflection call for\r\n            method = higherPicker.getClass().getDeclaredMethod(\"changeValueByOne\", boolean.class);\r\n            method.setAccessible(true);\r\n            method.invoke(higherPicker, increment);\r\n\r\n        } catch (final NoSuchMethodException | IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/NumberpickerFragment.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/NumberpickerFragment.java	(date 1619709127983)
-@@ -27,6 +27,7 @@
- import SSU_WHS.General.cPublicDefinitions;
- import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
-+import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
- import nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;
- import nl.icsvertex.scansuite.R;
-@@ -154,6 +155,15 @@
-                     intakeOrderLinePropertyInputActivity.pRefreshActivity();
-                     dismiss();
-                     return;
-+                }
-+                if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+                    InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;
-+                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();
-+
-+                    inventoryLinePropertyInputActivity.pTryToChangeQuantity();
-+                    inventoryLinePropertyInputActivity.pRefreshActivity();
-+                    dismiss();
-+                    return;
-                 }
-                 quantityNumberPicker.clearFocus();
-                 Intent intent = new Intent(cPublicDefinitions.NUMBERINTENT_NUMBER);
-Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/DatePickerFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\n\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic  class DatePickerFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    public DatePickerFragment(ArrayList<cLinePropertyValue> pvLinePropertyValues){\r\n        if (pvLinePropertyValues != null){\r\n            this.propertyObl = new ArrayList<>();\r\n            for (cLinePropertyValue propertyValue : pvLinePropertyValues){\r\n                this.propertyObl.add(propertyValue.getValueStr());\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private ArrayList<String> propertyObl;\r\n    private Button buttonCancel;\r\n    private  Button buttonOk;\r\n    private DatePicker datePicker;\r\n    private String dateStr;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_select_date, container, false);\r\n\r\n    }\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n\r\n        mFindViews();\r\n        mSetListeners();\r\n        mFieldsInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        if (getView() != null) {\r\n            this.buttonCancel = getView().findViewById(R.id.buttonCancel);\r\n            this.buttonOk = getView().findViewById(R.id.buttonOk);\r\n            this.datePicker = getView().findViewById(R.id.datePicker);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        Calendar calendar;\r\n\r\n        if (cLinePropertyValue.currentLinePropertyValue.getValueStr() != null) {\r\n            calendar = Calendar(cLinePropertyValue.currentLinePropertyValue.getValueStr());\r\n            if (calendar == null){\r\n                calendar = Calendar.getInstance();\r\n            }\r\n            this.datePicker.init(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH), null);\r\n        }\r\n        else{\r\n            calendar = Calendar.getInstance();\r\n            this.datePicker.init(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH), null);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetCancelListener();\r\n        this.mSetOKListener();\r\n    }\r\n\r\n    private void mSetOKListener() {\r\n\r\n        this.buttonOk.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                int year = datePicker.getYear();\r\n                int month = datePicker.getMonth();\r\n                int day = datePicker.getDayOfMonth();\r\n\r\n                Calendar calendar = Calendar.getInstance();\r\n                calendar.set(year, month, day);\r\n\r\n                @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat format = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n                dateStr = format.format(calendar.getTime());\r\n                mHandleOk();\r\n            }\r\n        });\r\n    }\r\n\r\n    private Calendar Calendar (String strDate)\r\n    {\r\n\r\n        try\r\n        {\r\n            @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yyyy\");// this is your date format \"12/24/2013\" = \"MM/dd/yyy\"\r\n            java.util.Date date = formatter.parse(strDate);//convert to date\r\n            Calendar cal = Calendar.getInstance();// get calendar instance\r\n            cal.setTime(date);//set the calendar date to your date\r\n            return cal;\r\n        }\r\n        catch (ParseException e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private void mSetCancelListener() {\r\n        this.buttonCancel.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n        this.dateStr= pvBarcodeScan.getBarcodeOriginalStr();\r\n        mHandleOk();\r\n    }\r\n\r\n    private void mHandleOk() {\r\n        if (!this.mCheckValueAllowedBln()) {return;}\r\n\r\n        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));\r\n            dismiss();\r\n        }\r\n        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity){\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));\r\n            dismiss();\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));\r\n            dismiss();\r\n        }\r\n    }\r\n\r\n    private boolean mCheckValueAllowedBln(){\r\n        if (this.propertyObl == null || this.propertyObl.size() < 1){\r\n            return true;\r\n        }\r\n\r\n        for (String string: this.propertyObl) {\r\n            if (string.equalsIgnoreCase(this.dateStr)){\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        cUserInterface.pDoNope(this.datePicker, true, true);\r\n        cUserInterface.pShowSnackbarMessage(this.buttonOk, cAppExtension.activity.getString(R.string.message_property_not_allowed),R.raw.headsupsound,false);\r\n\r\n        return false;\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/DatePickerFragment.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/DatePickerFragment.java	(date 1619709127850)
-@@ -24,6 +24,7 @@
- import ICS.cAppExtension;
- import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
-+import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
- import nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;
- import nl.icsvertex.scansuite.R;
-@@ -195,6 +196,11 @@
-             IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;
-             intakeOrderLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));
-             dismiss();
-+        }
-+        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){
-+            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
-+            inventoryLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.dateStr));
-+            dismiss();
-         }
-     }
- 
-Index: app/src/main/AndroidManifest.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"nl.icsvertex.scansuite\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n\r\n    <application\r\n        android:name=\"ICS.cAppExtension\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"false\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        android:largeHeap=\"true\">\r\n        <provider\r\n            android:name=\".cGenericFileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n        <activity\r\n            android:name=\".Activities.General.MainDefaultActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.MenuActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.General.LoginActivity\"\r\n\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".Activities.General.BarcodeInfoActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.LoginActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderPickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLineItemPropertyInputActvity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Pick.CreatePickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderLinesGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderPickGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSortActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n        <activity android:name=\".Activities.Sort.SortorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShipLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.QualityControl.QualityControlLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.QualityControl.PickorderQCActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.CreateInventoryActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryArticleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Receive.CreateReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.CreateIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMASLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderLinePropertyInputActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveOrderReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveorderLinePropertyInputActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Returns.ReturnorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.CreateReturnActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnArticleDetailActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Move.MoveorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.CreateMoveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesPlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveMISinglepieceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveorderLinesPlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Packaging.PackagingActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.CreatePackAndShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSingleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipMultiActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <meta-data\r\n            android:name=\"io.fabric.ApiKey\"\r\n            android:value=\"0a3a15057e61fb1e84d5024bd01b5657d9a4c76e\" />\r\n    </application>\r\n\r\n</manifest>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/AndroidManifest.xml	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/AndroidManifest.xml	(date 1619709127891)
-@@ -248,6 +248,12 @@
-             android:screenOrientation="portrait"
-             android:windowSoftInputMode="adjustPan">
-         </activity>
-+        <activity android:name=".Activities.Inventory.InventoryLinePropertyInputActivity"
-+            android:configChanges="keyboardHidden|orientation|screenSize"
-+            android:parentActivityName=".Activities.Inventory.InventoryorderBinActivity"
-+            android:screenOrientation="portrait"
-+            android:windowSoftInputMode="adjustPan">
-+        </activity>
-         <activity
-             android:name=".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity"
-             android:configChanges="keyboardHidden|orientation|screenSize"
-Index: app/src/main/java/SSU_WHS/Intake/Intakeorders/cIntakeorder.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package SSU_WHS.Intake.Intakeorders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.SortedMap;\r\nimport java.util.TreeMap;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleProperty.cArticleProperty;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Packaging.cPackaging;\r\nimport SSU_WHS.Basics.Scanners.cScanner;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.cIntakeorderMATLineBarcode;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLine;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLineViewModel;\r\nimport SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cIntakeorder {\r\n\r\n    private String ordernumberStr;\r\n    public String getOrderNumberStr() {return this.ordernumberStr;}\r\n\r\n    private String ordertypeStr;\r\n    public String getOrderTypeStr() {return this.ordertypeStr;}\r\n\r\n    private String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {return this.assignedUserIdStr;}\r\n\r\n    private String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {return this.currentUserIdStr;}\r\n\r\n    private int statusInt;\r\n    public int getStatusInt() {return this.statusInt;}\r\n\r\n    private String binCodeStr;\r\n    public String getBinCodeStr() {return this.binCodeStr;}\r\n\r\n    private String externalReferenceStr;\r\n    public String getExternalReferenceStr() {return this.externalReferenceStr;}\r\n\r\n    private String stockownerStr;\r\n    public String getStockownerStr() {\r\n        return stockownerStr;\r\n    }\r\n\r\n    private String documentStr;\r\n    public  String getDocumentStr(){ return this.documentStr;\r\n    }\r\n\r\n    private int sourceDocumentInt;\r\n    private int getSourceDocumentInt(){return  this.sourceDocumentInt;}\r\n\r\n    private boolean receiveAmountManualEOBln;\r\n    public boolean getReceiveAmountManualEOBln() {return this.receiveAmountManualEOBln;}\r\n\r\n    private boolean receiveStoreAutoAcceptAtRequestedBln;\r\n    public boolean getReceiveStoreAutoAcceptAtRequestedBln() {return this.receiveStoreAutoAcceptAtRequestedBln;}\r\n\r\n    private boolean receiveNoExtraBinsBln;\r\n    public boolean getReceiveNoExtraBinsBln() {return this.receiveNoExtraBinsBln;}\r\n\r\n    private boolean receiveNoExtraItemsBln;\r\n    public boolean getReceiveNoExtraItemsBln() {return this.receiveNoExtraItemsBln;}\r\n\r\n    private boolean receiveNoExtraPiecesBln;\r\n    public boolean getReceiveNoExtraPiecesBln() {return this.receiveNoExtraPiecesBln;}\r\n\r\n    public   boolean isBINScanPossible(){\r\n        return this.getReceiveNoExtraBinsBln() && this.getReceiveNoExtraItemsBln();\r\n\r\n    }\r\n\r\n    private String receivedDateTime;\r\n    public String getReceivedDateTime() {return this.receivedDateTime;}\r\n\r\n    private Boolean isProcessingOrParkedBln;\r\n    public Boolean getProcessingOrParkedBln() {\r\n        return isProcessingOrParkedBln;\r\n    }\r\n\r\n    private boolean receiveWithPictureBln;\r\n    public boolean isReceiveWithPictureBln() {\r\n        return receiveWithPictureBln;\r\n    }\r\n\r\n    private boolean receiveWithPictureAutoOpenBln;\r\n    public boolean isReceiveWithPictureAutoOpenBln() {\r\n        return receiveWithPictureAutoOpenBln;\r\n    }\r\n\r\n    private boolean receiveIntakeEOPackagingIntakeBln;\r\n    public boolean isReceiveIntakeEOPackagingIntakeBln() {\r\n        return receiveIntakeEOPackagingIntakeBln;\r\n    }\r\n\r\n    private boolean receiveIntakeEOPackagingshippedBln;\r\n    public boolean isReceiveIntakeEOPackagingShippedBln() {\r\n        return receiveIntakeEOPackagingshippedBln;\r\n    }\r\n\r\n    public  boolean isGenerated(){\r\n        return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n    }\r\n\r\n    private cIntakeorderEntity intakeorderEntity;\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    private cIntakeorderViewModel getIntakeorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n    }\r\n\r\n    private cReceiveorderLineViewModel getReceiveorderLineViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cReceiveorderLineViewModel.class);\r\n    }\r\n\r\n    public static List<cIntakeorder> allIntakeordersObl;\r\n    public static cIntakeorder currentIntakeOrder;\r\n    public SortedMap<String, cArticle> articleObl;\r\n\r\n    public List<cLineProperty> linePropertysObl() { return  cLineProperty.allLinePropertysObl; }\r\n\r\n    private int unknownVariantCounterInt = 0;\r\n    public int getUnknownVariantCounterInt() {\r\n        return unknownVariantCounterInt;\r\n    }\r\n\r\n    public List<cIntakeorderMATSummaryLine> summaryMATLinesObl(){\r\n        return  cIntakeorderMATSummaryLine.sortedMATSummaryLinesObl();\r\n    }\r\n\r\n    public List<cIntakeorderMATLine> linesMATObl(){\r\n        return  cIntakeorderMATLine.allIntakeorderMATLinesObl;\r\n    }\r\n\r\n    public List<cIntakeorderMATLine> linesHandledMATForBinObl(String pvBinCodeStr){\r\n\r\n        List<cIntakeorderMATLine> resultObl = new ArrayList<>();\r\n\r\n        if ( cIntakeorderMATLine.allIntakeorderMATLinesObl == null) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cIntakeorderMATLine intakeorderMATLine : cIntakeorderMATLine.allIntakeorderMATLinesObl) {\r\n\r\n            if (intakeorderMATLine.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr) && intakeorderMATLine.getQuantityHandledDbl() > 0) {\r\n                resultObl.add(intakeorderMATLine);\r\n            }\r\n\r\n        }\r\n\r\n        if (resultObl.size() > 1) {\r\n            Collections.reverse(resultObl);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cReceiveorderSummaryLine> summaryReceiveLinesObl(){\r\n        return  cReceiveorderSummaryLine.allReceiveorderSummaryLinesObl;\r\n    }\r\n\r\n    private List<cComment> commentsObl(){\r\n        return  cComment.allCommentsObl;\r\n    }\r\n    public List<cIntakeorderBarcode> barcodesObl () {return  cIntakeorderBarcode.allBarcodesObl;}\r\n    public List<cPackaging> packagingInObl;\r\n    public List<cPackaging> packagingOutObl;\r\n\r\n    public cIntakeorderBarcode intakeorderBarcodeScanned;\r\n\r\n    public List<String> sourceNoObl;\r\n    public boolean showDeviationsBln = true;\r\n    public cBranchBin currentBin;\r\n\r\n    //Region Constructor\r\n\r\n    public cIntakeorder(JSONObject pvJsonObject) {\r\n\r\n        this.intakeorderEntity = new cIntakeorderEntity(pvJsonObject);\r\n        this.ordernumberStr = this.intakeorderEntity.getOrdernumberStr();\r\n        this.ordertypeStr = this.intakeorderEntity.getOrderTypeStr();\r\n\r\n        this.assignedUserIdStr = this.intakeorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.intakeorderEntity.getCurrentUserIdStr();\r\n\r\n        this.stockownerStr = this.intakeorderEntity.getStockOwnerStr();\r\n        this.statusInt = this.intakeorderEntity.getStatusInt();\r\n        this.binCodeStr = this.intakeorderEntity.getBinCodeStr();\r\n        this.externalReferenceStr = this.intakeorderEntity.getExternalReferenceStr();\r\n        this.documentStr = this.intakeorderEntity.getDocumentStr();\r\n\r\n        this.receiveAmountManualEOBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveAmountManualEOStr(), false);\r\n\r\n        this.receiveStoreAutoAcceptAtRequestedBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveStoreAutoAcceptAtRequestedStr(), false);\r\n\r\n\r\n        this.receivedDateTime = this.intakeorderEntity.getReceivedDateTime();\r\n        this.isProcessingOrParkedBln = this.intakeorderEntity.getIsProcessingOrParkedStr();\r\n\r\n        this.sourceDocumentInt = this.intakeorderEntity.getSourceDocumentInt();\r\n\r\n        this.receiveWithPictureBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveWithPictureStr(),false);\r\n        this.receiveWithPictureAutoOpenBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveWithPictureAutoOpenStr(),false);\r\n        this.receiveNoExtraBinsBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraBinsStr(), false);\r\n        this.receiveNoExtraItemsBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraItemsStr(), false);\r\n        this.receiveNoExtraPiecesBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraPiecesStr(), false);\r\n        this.receiveIntakeEOPackagingIntakeBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveIntakeEOPackagingIntake(), false);\r\n        this.receiveIntakeEOPackagingshippedBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveIntakeEOPackagingshipped(), false);\r\n    }\r\n\r\n    public cIntakeorder(cIntakeorderEntity pvIntakeorderEntity) {\r\n\r\n        this.intakeorderEntity = pvIntakeorderEntity;\r\n        this.ordernumberStr = this.intakeorderEntity.getOrdernumberStr();\r\n        this.ordertypeStr = this.intakeorderEntity.getOrderTypeStr();\r\n\r\n        this.assignedUserIdStr = this.intakeorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.intakeorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.intakeorderEntity.getStockOwnerStr();\r\n        this.statusInt = this.intakeorderEntity.getStatusInt();\r\n        this.binCodeStr = this.intakeorderEntity.getBinCodeStr();\r\n        this.externalReferenceStr = this.intakeorderEntity.getExternalReferenceStr();\r\n        this.documentStr = this.intakeorderEntity.getDocumentStr();\r\n\r\n        this.receiveAmountManualEOBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveAmountManualEOStr(), false);\r\n\r\n        this.receiveWithPictureBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveWithPictureStr(),false);\r\n        this.receiveWithPictureAutoOpenBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveWithPictureAutoOpenStr(),false);\r\n        this.receiveStoreAutoAcceptAtRequestedBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveStoreAutoAcceptAtRequestedStr(), false);\r\n        this.receiveNoExtraBinsBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraBinsStr(), false);\r\n        this.receiveNoExtraItemsBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraItemsStr(), false);\r\n        this.receiveNoExtraPiecesBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveNoExtraPiecesStr(), false);\r\n        this.receiveIntakeEOPackagingIntakeBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveIntakeEOPackagingIntake(), false);\r\n        this.receiveIntakeEOPackagingshippedBln = cText.pStringToBooleanBln(this.intakeorderEntity.getReceiveIntakeEOPackagingshipped(), false);\r\n\r\n        this.receivedDateTime = this.intakeorderEntity.getReceivedDateTime();\r\n        this.isProcessingOrParkedBln = this.intakeorderEntity.getIsProcessingOrParkedStr();\r\n\r\n\r\n        this.sourceDocumentInt = this.intakeorderEntity.getSourceDocumentInt();\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getIntakeorderViewModel().insert(this.intakeorderEntity);\r\n\r\n        if (cIntakeorder.allIntakeordersObl == null) {\r\n            cIntakeorder.allIntakeordersObl = new ArrayList<>();\r\n        }\r\n        cIntakeorder.allIntakeordersObl.add(this);\r\n        return true;\r\n    }\r\n\r\n    public static boolean pGetIntakeOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cIntakeorder.allIntakeordersObl = null;\r\n            cIntakeorder.mTruncateTable();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        cIntakeorderViewModel intakeorderViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        WebResult = intakeorderViewModel.pGetIntakeordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cIntakeorder intakeorder = new cIntakeorder(jsonObject);\r\n                intakeorder.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static List<cIntakeorder> pGetIntakesWithFilterFromDatabasObl() {\r\n\r\n        List<cIntakeorder> resultObl = new ArrayList<>();\r\n        List<cIntakeorderEntity> hulpResultObl;\r\n\r\n        cIntakeorderViewModel intakeorderViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        hulpResultObl =  intakeorderViewModel.pGetIntakeordersFromDatabaseWithFilterObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cIntakeorderEntity intakeorderEntity : hulpResultObl ) {\r\n            cIntakeorder intakeorder = new cIntakeorder(intakeorderEntity);\r\n            resultObl.add(intakeorder);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public cResult pInvalidateViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n\r\n        webresult =  this.getIntakeorderViewModel().pInvalidateViaWebserviceWrs();\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_could_not_invalidate_order));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    public cResult pPackagingHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n        webresult =  this.getIntakeorderViewModel().pPackagingHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cIntakeorder.currentIntakeOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    public cResult pMATHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n\r\n        webresult =  this.getIntakeorderViewModel().pMATHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cIntakeorder.currentIntakeOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    public cResult pReceiveHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n\r\n        webresult =  this.getIntakeorderViewModel().pReceiveHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cIntakeorder.currentIntakeOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n    }\r\n\r\n    public List<cComment> pCommentObl(){\r\n\r\n        if (this.commentsObl() == null || this.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.RECEIVE);\r\n\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (this.commentsObl() == null || this.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst()        {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        cWarehouseorder.StepCodeEnu stepCodeEnu = cWarehouseorder.StepCodeEnu.Unkown;\r\n        int workflowStepInt = 0;\r\n\r\n\r\n        switch (this.getOrderTypeStr()){\r\n            case \"MAT\":\r\n            case \"MAS\":\r\n                stepCodeEnu = cWarehouseorder.StepCodeEnu.Receive_Store;\r\n                workflowStepInt = cWarehouseorder.WorkflowReceiveStoreStepEnu.Receive_Store;\r\n                break;\r\n\r\n\r\n            case \"EOS\":\r\n                stepCodeEnu = cWarehouseorder.StepCodeEnu.Receive_InTake;\r\n                workflowStepInt = cWarehouseorder.WorkflowExternalReceiveStepEnu.Receive_External;\r\n                break;\r\n        }\r\n\r\n\r\n        if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n            ignoreBusyBln = true;\r\n        }\r\n\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.ONTVANGST.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), stepCodeEnu.toString(), workflowStepInt, ignoreBusyBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n            Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln()&& Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n            Webresult.getResultObl().size() > 0 && !Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getNameStr())) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            //TODO WTF is this?\r\n            //cIntakeorder.currentIntakeOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln() {\r\n\r\n        cWebresult Webresult = null;\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAT\") || cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\")) {\r\n            Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.ONTVANGST.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), cWarehouseorder.StepCodeEnu.Receive_Store.toString(), cWarehouseorder.WorkflowReceiveStoreStepEnu.Receive_Store);\r\n        }\r\n\r\n        //We try to release an order thats not created\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"EOR\")){\r\n            return  true;\r\n        }\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"EOS\")){\r\n            Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.ONTVANGST.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), cWarehouseorder.StepCodeEnu.Receive_InTake.toString(), cWarehouseorder.WorkflowExternalReceiveStepEnu.Receive_External);\r\n        }\r\n\r\n\r\n        return Objects.requireNonNull(Webresult).getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n\r\n    public boolean pDeleteViaWebserviceBln() {\r\n\r\n        cWebresult Webresult;\r\n\r\n        Webresult =  this.getIntakeorderViewModel().pDeleteViaWebserviceWrs();\r\n        return Webresult.getResultBln() && Webresult.getSuccessBln();\r\n    }\r\n\r\n    private boolean mGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n        cWebresult webresult;\r\n        webresult = this.getIntakeorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : webresult.getResultDtt()) {\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mMatchBarcodesAndLinesBln() {\r\n\r\n      if (cIntakeorderBarcode.allBarcodesObl == null || cIntakeorderBarcode.allBarcodesObl.size() == 0 ||\r\n         cIntakeorderMATLineBarcode.allMATLineBarcodesObl == null || cIntakeorderMATLineBarcode.allMATLineBarcodesObl.size() == 0 ||\r\n         cIntakeorderMATLine.allIntakeorderMATLinesObl == null ||  cIntakeorderMATLine.allIntakeorderMATLinesObl.size() == 0 )  {\r\n          return true;\r\n      }\r\n\r\n      for (cIntakeorderMATLineBarcode intakeorderMATLineBarcode : cIntakeorderMATLineBarcode.allMATLineBarcodesObl) {\r\n\r\n        cIntakeorderBarcode intakeorderBarcode =   cIntakeorderBarcode.pGetIntakeOrderBarcodeByBarcode(intakeorderMATLineBarcode.getBarcodeStr());\r\n          if (intakeorderBarcode == null) {\r\n              continue;\r\n          }\r\n\r\n        cIntakeorderMATLine intakeorderMATLine =   cIntakeorderMATLine.pGetLineByLineNo(intakeorderMATLineBarcode.getLineNoLng().intValue());\r\n          if (intakeorderMATLine == null) {\r\n              continue;\r\n          }\r\n\r\n          if (intakeorderMATLine.barcodesObl == null) {\r\n              intakeorderMATLine.barcodesObl = new ArrayList<>();\r\n          }\r\n\r\n          intakeorderMATLine.barcodesObl.add(intakeorderBarcode);\r\n      }\r\n\r\n      return  true;\r\n    }\r\n\r\n    public double pQuantityHandledDbl() {\r\n\r\n        Double resultDbl =this.getIntakeorderViewModel().pQuantityHandledDbl();\r\n\r\n        if (resultDbl == null) {\r\n            resultDbl  = 0.0;\r\n        }\r\n\r\n        return  resultDbl;\r\n    }\r\n\r\n    public boolean pDeleteDetailsBln(){\r\n\r\n        cIntakeorderBarcode.pTruncateTableBln();\r\n        cIntakeorderMATLineBarcode.pTruncateTableBln();\r\n        cIntakeorderMATLine.pTruncateTableBln();\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cIntakeorderBarcode.allBarcodesObl = null;\r\n            cIntakeorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        if (this.articleObl == null) {\r\n            this.articleObl = new TreeMap<>();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderBarcodesFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(jsonObject);\r\n                intakeorderBarcode.pInsertInDatabaseBln();\r\n                if (!cIntakeorder.currentIntakeOrder.articleObl.containsKey(intakeorderBarcode.getItemNoAndVariantCodeStr())) {\r\n                    cArticle article = new cArticle(jsonObject);\r\n                    article.descriptionStr = intakeorderBarcode.getBarcodeStr();\r\n                    this.articleObl.put(intakeorderBarcode.getItemNoAndVariantCodeStr(), article);\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pReceiveAddUnkownBarcodeAndItemVariantBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cIntakeorder.currentIntakeOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        //First create Item Varianr\r\n        WebResult =  this.getReceiveorderLineViewModel().pReceiveAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n\r\n                cReceiveorderLine receiveorderLine = new cReceiveorderLine(WebResult.getResultDtt().get(0),true);\r\n                cReceiveorderSummaryLine receiveorderSummaryLine = new cReceiveorderSummaryLine(WebResult.getResultDtt().get(0));\r\n                cReceiveorderSummaryLine.pAddSummaryLine(receiveorderSummaryLine);\r\n                cReceiveorderSummaryLine.currentReceiveorderSummaryLine = receiveorderSummaryLine;\r\n                cReceiveorderSummaryLine.currentReceiveorderSummaryLine.pAddLine(receiveorderLine);\r\n                if (cArticle.currentArticle.propertyObl != null){\r\n                    int lineNoInt = receiveorderLine.getLineNoInt();\r\n\r\n                    for (cArticleProperty articleProperty:cArticle.currentArticle.propertyObl ){\r\n                        cLineProperty lineProperty = new cLineProperty(articleProperty, lineNoInt);\r\n\r\n                        if(cLineProperty.allLinePropertysObl == null){\r\n                            cLineProperty.allLinePropertysObl = new ArrayList<>();\r\n                        }\r\n                        cLineProperty.allLinePropertysObl.add(lineProperty);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        else {\r\n            cIntakeorder.currentIntakeOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        //Then add barcode\r\n        WebResult =  this.getReceiveorderLineViewModel().pReceiveAddUnknownBarcodeViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                if (cIntakeorderBarcode.allBarcodesObl == null) {\r\n                    cIntakeorderBarcode.allBarcodesObl = new ArrayList<>();\r\n                }\r\n\r\n                cIntakeorderBarcode.allBarcodesObl.add(intakeorderBarcode);\r\n                cIntakeorderBarcode.currentIntakeOrderBarcode = intakeorderBarcode;\r\n                cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = intakeorderBarcode;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pIntakeAddUnkownBarcodeAndItemVariantBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cIntakeorder.currentIntakeOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        //First create Item Varianr\r\n        WebResult =  this.getReceiveorderLineViewModel().pIntakeAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cIntakeorderMATSummaryLine intakeorderMATSummaryLine = new cIntakeorderMATSummaryLine(WebResult.getResultDtt().get(0));\r\n                cIntakeorderMATSummaryLine.pAddSummaryLine(intakeorderMATSummaryLine);\r\n                cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine = intakeorderMATSummaryLine;\r\n            }\r\n        }\r\n\r\n        else {\r\n            cIntakeorder.currentIntakeOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        //Then add barcode\r\n        WebResult =  this.getReceiveorderLineViewModel().pIntakeAddUnknownBarcodeViaWebserviceWrs(pvBarcodeScan, false);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                if (cIntakeorderBarcode.allBarcodesObl == null) {\r\n                    cIntakeorderBarcode.allBarcodesObl = new ArrayList<>();\r\n                }\r\n\r\n                cIntakeorderBarcode.allBarcodesObl.add(intakeorderBarcode);\r\n                cIntakeorderBarcode.currentIntakeOrderBarcode = intakeorderBarcode;\r\n                cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = intakeorderBarcode;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if (cArticle.currentArticle == null) {\r\n            return false;\r\n        }\r\n\r\n        //Get barcodes for this article\r\n        if (!cArticle.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"EOS\")) {\r\n            WebResult =  this.getReceiveorderLineViewModel().pAddERPItemViaWebserviceWrs(pvBarcodeScan);\r\n\r\n            if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n                if (WebResult.getResultDtt().size() == 1) {\r\n                    cReceiveorderLine receiveorderLine = new cReceiveorderLine(WebResult.getResultDtt().get(0),true);\r\n                    cReceiveorderSummaryLine receiveorderSummaryLine = new cReceiveorderSummaryLine(WebResult.getResultDtt().get(0));\r\n                    cReceiveorderSummaryLine.pAddSummaryLine(receiveorderSummaryLine);\r\n                    cReceiveorderSummaryLine.currentReceiveorderSummaryLine = receiveorderSummaryLine;\r\n                    this.mGetLinePropertysViaWebserviceBln();\r\n                    cReceiveorderSummaryLine.currentReceiveorderSummaryLine.pAddLine(receiveorderLine);\r\n\r\n//                    if (cArticle.currentArticle.propertyObl != null){\r\n//                        int lineNoInt = receiveorderLine.getLineNoInt();\r\n//\r\n//                        for (cArticleProperty articleProperty:cArticle.currentArticle.propertyObl ){\r\n//                            cLineProperty lineProperty = new cLineProperty(articleProperty, lineNoInt);\r\n//\r\n//                            if(cLineProperty.allLinePropertysObl == null){\r\n//                                cLineProperty.allLinePropertysObl = new ArrayList<>();\r\n//                            }\r\n//                            cLineProperty.allLinePropertysObl.add(lineProperty);\r\n//                        }\r\n//                    }\r\n                }\r\n            }\r\n\r\n            else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n                return  false;\r\n            }\r\n\r\n            //Then add barcode\r\n            WebResult =  this.getReceiveorderLineViewModel().pReceiveAddERPBarcodeViaWebserviceWrs(pvBarcodeScan);\r\n            if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n                if (WebResult.getResultDtt().size() == 1) {\r\n                    cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                    if (cIntakeorderBarcode.allBarcodesObl == null) {\r\n                        cIntakeorderBarcode.allBarcodesObl = new ArrayList<>();\r\n                    }\r\n\r\n                    cIntakeorderBarcode.allBarcodesObl.add(intakeorderBarcode);\r\n                    cIntakeorderBarcode.currentIntakeOrderBarcode = intakeorderBarcode;\r\n                    cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = intakeorderBarcode;\r\n                }\r\n            }\r\n            else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEBARCODECREATE);\r\n                return  false;\r\n            }\r\n        }\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\")) {\r\n            WebResult =  this.getReceiveorderLineViewModel().pIntakeAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n\r\n            if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n                if (WebResult.getResultDtt().size() == 1) {\r\n                    cIntakeorderMATSummaryLine intakeorderMATSummaryLine = new cIntakeorderMATSummaryLine(WebResult.getResultDtt().get(0));\r\n                    cIntakeorderMATSummaryLine.pAddSummaryLine(intakeorderMATSummaryLine);\r\n                    cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine = intakeorderMATSummaryLine;\r\n                }\r\n            }\r\n\r\n            else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n                return  false;\r\n            }\r\n\r\n            boolean isUniqueBarcodeBln = false;\r\n\r\n            if (cArticle.currentArticle.barcodesObl != null &&  cArticle.currentArticle.barcodesObl.size() > 0 &&  cArticle.currentArticle.barcodesObl.get(0).getUniqueBarcodeBln()) {\r\n                isUniqueBarcodeBln = true;\r\n            }\r\n\r\n            //Then add barcode\r\n            WebResult =  this.getReceiveorderLineViewModel().pIntakeAddUnknownBarcodeViaWebserviceWrs(pvBarcodeScan, isUniqueBarcodeBln);\r\n\r\n            if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n                if (WebResult.getResultDtt().size() == 1) {\r\n                    cIntakeorderBarcode intakeorderBarcode = new cIntakeorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                    if (cIntakeorderBarcode.allBarcodesObl == null) {\r\n                        cIntakeorderBarcode.allBarcodesObl = new ArrayList<>();\r\n                    }\r\n\r\n                    cIntakeorderBarcode.allBarcodesObl.add(intakeorderBarcode);\r\n                    cIntakeorderBarcode.currentIntakeOrderBarcode = intakeorderBarcode;\r\n                    cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = intakeorderBarcode;\r\n                }\r\n            }\r\n            else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEBARCODECREATE);\r\n                return  false;\r\n            }\r\n        }\r\n\r\n\r\n        return  true;\r\n    }\r\n\r\n    public cIntakeorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cIntakeorderBarcode intakeorderBarcode : this.barcodesObl()) {\r\n\r\n            if (intakeorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr()) ||\r\n                intakeorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr())) {\r\n                return  intakeorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    public static cResult pCreateReceiveOrderViaWebserviceRst(String pvDocumentStr, String pvPackingSlipStr, String pvBinCodeStr, boolean pvCheckBarcodesBln) {\r\n\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cIntakeorderViewModel intakeorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        WebResult = intakeorderViewModel.pCreateReceiverOderViaWebserviceWrs(pvDocumentStr, pvPackingSlipStr, pvBinCodeStr, pvCheckBarcodesBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (WebResult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n\r\n            // We got a succesfull response, but we need to do something with this activity\r\n\r\n            Long actionLng = WebResult.getResultLng();\r\n\r\n            if (WebResult.getResultLng() < 10 ) {\r\n                actionLng = WebResult.getResultLng();\r\n            }\r\n\r\n            if (WebResult.getResultLng() > 100) {\r\n                actionLng  = WebResult.getResultLng()/100;\r\n            }\r\n\r\n\r\n\r\n            //Try to convert action long to action enumerate\r\n            result.activityActionEnu= cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n                return  result;\r\n            }\r\n\r\n            if (result.activityActionEnu== cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_has_deleted_by_erp)));\r\n                return  result;\r\n            }\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Next) {\r\n                result.resultBln = true;\r\n                result.pSetResultAction(WebResult.pGetNextActivityObl());\r\n                return  result;\r\n            }\r\n\r\n            //No activty created\r\n            if (WebResult.getResultDtt() == null || WebResult.getResultDtt().size() == 0) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_order_not_created)));\r\n                return  result;\r\n            }\r\n\r\n            //Something went wrong, we received a comment\r\n            if (actionLng == 80) {\r\n                result.resultBln = false;\r\n                cComment comment = new cComment(WebResult.getResultDtt().get(0));\r\n                result.pAddErrorMessage(comment.commentTextStr);\r\n                return  result;\r\n            }\r\n\r\n            cIntakeorder intakeorder = new cIntakeorder(WebResult.getResultDtt().get(0));\r\n            intakeorder.pInsertInDatabaseBln();\r\n            cIntakeorder.currentIntakeOrder = intakeorder;\r\n\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVECREATE);\r\n            result.resultBln = false;\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n    public static cResult pCreateIntakeOrderViaWebserviceRst(String pvDocumentStr, String pvBinStr, boolean pvCheckBarcodesBln) {\r\n\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cIntakeorderViewModel intakeorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        WebResult = intakeorderViewModel.pCreateIntakeOrderViaWebserviceWrs(pvDocumentStr, pvBinStr, pvCheckBarcodesBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (WebResult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n\r\n            // We got a succesfull response, but we need to do something with this activity\r\n\r\n            Long actionLng = WebResult.getResultLng();\r\n\r\n            if (WebResult.getResultLng() < 10 ) {\r\n                actionLng = WebResult.getResultLng();\r\n            }\r\n\r\n            if (WebResult.getResultLng() > 100) {\r\n                actionLng  = WebResult.getResultLng()/100;\r\n            }\r\n\r\n\r\n\r\n            //Try to convert action long to action enumerate\r\n            result.activityActionEnu= cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n                return  result;\r\n            }\r\n\r\n            if (result.activityActionEnu== cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_has_deleted_by_erp)));\r\n                return  result;\r\n            }\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Next) {\r\n                result.resultBln = true;\r\n                result.pSetResultAction(WebResult.pGetNextActivityObl());\r\n                return  result;\r\n            }\r\n\r\n            //No activty created\r\n            if (WebResult.getResultDtt() == null || WebResult.getResultDtt().size() == 0) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_order_not_created)));\r\n                return  result;\r\n            }\r\n\r\n            //Something went wrong, we received a comment\r\n            if (actionLng == 80) {\r\n                result.resultBln = false;\r\n                cComment comment = new cComment(WebResult.getResultDtt().get(0));\r\n                result.pAddErrorMessage(comment.commentTextStr);\r\n                return  result;\r\n            }\r\n\r\n            cIntakeorder intakeorder = new cIntakeorder(WebResult.getResultDtt().get(0));\r\n            intakeorder.pInsertInDatabaseBln();\r\n            cIntakeorder.currentIntakeOrder = intakeorder;\r\n\r\n\r\n\r\n            return result;\r\n\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVECREATE);\r\n            result.resultBln = false;\r\n            return result;\r\n        }\r\n\r\n    }\r\n\r\n    public  cResult pGetOrderDetailsRst(){\r\n\r\n\r\n        if (this.getOrderTypeStr().equalsIgnoreCase(\"MAT\") || this.getOrderTypeStr().equalsIgnoreCase(\"MAS\")) {\r\n            return  this.mGetMATOrderDetailsRst();\r\n        }\r\n\r\n        else {\r\n            return  this.mGetReceiveOrderDetailsRst();\r\n        }\r\n\r\n     }\r\n\r\n    private   cResult mGetReceiveOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all Items for current order, if size = 0 or webservice error then stop\r\n        if (!cIntakeorder.currentIntakeOrder.mGetReceiveItemsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_intakelines_failed));\r\n            return result;\r\n        }\r\n\r\n        int indexInt = 0;\r\n\r\n        for (cScanner scanner : cScanner.allScannerObl ) {\r\n\r\n            boolean refreshBln = false;\r\n\r\n            if (indexInt == 0) {\r\n                refreshBln = true;\r\n            }\r\n\r\n            //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n            if (!cIntakeorder.currentIntakeOrder.mGetReceiveLinesViaWebserviceBln(refreshBln, scanner.getScannerStr()) ) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_intakelines_failed));\r\n                return result;\r\n            }\r\n\r\n            indexInt += 1;\r\n\r\n        }\r\n\r\n        //Provided lines have no scanner so also retrieve the lines.\r\n        if(!cIntakeorder.currentIntakeOrder.isGenerated()){\r\n            if (!cIntakeorder.currentIntakeOrder.mGetReceiveLinesViaWebserviceBln(false, \"\") ) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_intakelines_failed));\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // Get all barcodes, if size =0 or webservice error then stop\r\n        if (!cIntakeorder.currentIntakeOrder.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get packaging\r\n        if (!cIntakeorder.currentIntakeOrder.mGetPackagingViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_packaging_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!cIntakeorder.currentIntakeOrder.mGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all propertys, if webservice error then stop\r\n        if (!this.mGetLinePropertysViaWebserviceBln( )) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all property values, if webservice error then stop\r\n        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    private boolean mGetReceiveLinesViaWebserviceBln(Boolean pvRefreshBln, String pvScannerStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cReceiveorderLine.allReceiveorderLines = null;\r\n            cIntakeorderMATLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderReceiveLinesFromWebserviceWrs(pvScannerStr);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cReceiveorderLine receiveorderLine = new cReceiveorderLine(jsonObject);\r\n\r\n                if (receiveorderLine.getHandledTimeStampStr().equalsIgnoreCase(\"null\") && cIntakeorder.currentIntakeOrder.isGenerated()) {\r\n                    continue;\r\n                }\r\n\r\n                receiveorderLine.pInsertInDatabaseBln();\r\n\r\n                cReceiveorderSummaryLine receiveorderSummaryLine = cReceiveorderSummaryLine.pGetSummaryLine(receiveorderLine.getItemNoStr(),\r\n                        receiveorderLine.getVariantCodeStr());\r\n\r\n                if (receiveorderSummaryLine == null ) {\r\n                    //Thats weird, but continue\r\n                    continue;\r\n                }\r\n\r\n                receiveorderSummaryLine.pAddLine(receiveorderLine);\r\n            }\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetReceiveItemsViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cReceiveorderSummaryLine.allReceiveorderSummaryLinesObl = null;\r\n            cReceiveorderLine.pTruncateTableBln();\r\n        }\r\n\r\n        cReceiveorderSummaryLine.allReceiveorderSummaryLinesObl = new ArrayList<>();\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderReceiveItemsFromWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cReceiveorderSummaryLine receiveorderSummaryLine  = new cReceiveorderSummaryLine(jsonObject);\r\n                cReceiveorderSummaryLine.pAddSummaryLine(receiveorderSummaryLine);\r\n\r\n                if (receiveorderSummaryLine.getItemNoStr().equalsIgnoreCase(\"UNKNOWN\")) {\r\n                    cIntakeorder.currentIntakeOrder.unknownVariantCounterInt += 1;\r\n                }\r\n\r\n            }\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetPackagingViaWebserviceBln() {\r\n\r\n\r\n        this.packagingInObl = new ArrayList<>();\r\n        this.packagingOutObl = new ArrayList<>();\r\n\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderPackagingFromWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cPackaging packaging  = new cPackaging(jsonObject);\r\n                this.packagingInObl.add(packaging);\r\n                this.packagingOutObl.add(packaging);\r\n            }\r\n\r\n\r\n\r\n            //If there is no packaging defined, use the general list from the BASICS as a starting point\r\n            if (cPackaging.allPackaging == null)  {\r\n                return true;\r\n            }\r\n\r\n            if ( this.packagingInObl.size() == 0 || this.packagingOutObl.size() ==0 ) {\r\n\r\n                for (cPackaging packaging : cPackaging.allPackaging ) {\r\n                    packaging.quantityInUsedInt = 0;\r\n                    packaging.quantityOutUsedInt = 0;\r\n                }\r\n\r\n                this.packagingInObl.addAll(cPackaging.allPackaging);\r\n                this.packagingOutObl.addAll(cPackaging.allPackaging);\r\n            }\r\n\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private cResult mGetMATOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!cIntakeorder.currentIntakeOrder.mGetMATLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_intakelines_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get line barcodes for current order\r\n        if (!cIntakeorder.currentIntakeOrder.mGetMATLineBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_linebarcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all barcodes, if size =0 or webservice error then stop\r\n        if (!cIntakeorder.currentIntakeOrder.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        if (!cIntakeorder.currentIntakeOrder.mMatchBarcodesAndLinesBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_matching_lines_and_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!cIntakeorder.currentIntakeOrder.mGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\") && cIntakeorder.currentIntakeOrder.isGenerated()) {\r\n            if (cIntakeorderMATSummaryLine.allIntakeorderMATSummaryLinesObl == null) {\r\n                cIntakeorderMATSummaryLine.allIntakeorderMATSummaryLinesObl = new ArrayList<>();\r\n            }\r\n        }\r\n        // Get all propertys, if webservice error then stop\r\n        if (!this.mGetLinePropertysViaWebserviceBln( )) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all property values, if webservice error then stop\r\n        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));\r\n            return result;\r\n        }\r\n\r\n\r\n        return  result;\r\n    }\r\n\r\n    private boolean mGetMATLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cIntakeorderMATLine.allIntakeorderMATLinesObl = null;\r\n            cIntakeorderMATSummaryLine.allIntakeorderMATSummaryLinesObl = null;\r\n            cIntakeorderMATLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderMATLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n            this.sourceNoObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cIntakeorderMATLine intakeorderMATLine = new cIntakeorderMATLine(jsonObject);\r\n\r\n                if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\") && intakeorderMATLine.getQuantityHandledDbl() == 0) {\r\n                    continue;\r\n                }\r\n\r\n                intakeorderMATLine.pInsertInDatabaseBln();\r\n\r\n                if (!this.sourceNoObl.contains(intakeorderMATLine.getSourceNoStr())) {\r\n                    this.sourceNoObl.add(intakeorderMATLine.getSourceNoStr());\r\n                }\r\n\r\n                cIntakeorderMATSummaryLine intakeorderMATSummaryLine = cIntakeorderMATSummaryLine.pGetSummaryLine(intakeorderMATLine.getItemNoStr(),\r\n                        intakeorderMATLine.getVariantCodeStr(),\r\n                        intakeorderMATLine.getSourceNoStr());\r\n\r\n                if (intakeorderMATSummaryLine == null ) {\r\n                    cIntakeorderMATSummaryLine summaryLineToAdd = new cIntakeorderMATSummaryLine(intakeorderMATLine.getItemNoStr(),\r\n                            intakeorderMATLine.getVariantCodeStr(),\r\n                            intakeorderMATLine.getSourceNoStr());\r\n\r\n                    summaryLineToAdd.sortingSequenceInt = intakeorderMATLine.getSortingSequenceInt();\r\n                    summaryLineToAdd.containerStr = intakeorderMATLine.getContainerStr();\r\n\r\n                    cIntakeorderMATSummaryLine.pAddSummaryLine(summaryLineToAdd);\r\n\r\n                    if (!intakeorderMATLine.getBinCodeStr().isEmpty()){\r\n                        summaryLineToAdd.binCodeStr = intakeorderMATLine.getBinCodeStr();\r\n                    }\r\n\r\n\r\n\r\n                    summaryLineToAdd.pAddMATLine(intakeorderMATLine);\r\n                    continue;\r\n                }\r\n\r\n                intakeorderMATSummaryLine.pAddMATLine(intakeorderMATLine);\r\n            }\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetMATLineBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cIntakeorderMATLineBarcode.allMATLineBarcodesObl = null;\r\n            cIntakeorderMATLineBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult = this.getIntakeorderViewModel().pGetIntakeorderMATLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cIntakeorderMATLineBarcode cIntakeorderMATLineBarcode = new cIntakeorderMATLineBarcode(jsonObject);\r\n                cIntakeorderMATLineBarcode.pInsertInDatabaseBln();\r\n            }\r\n\r\n            return true;\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINTAKEORDERMATLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private static void mTruncateTable() {\r\n        cIntakeorderViewModel intakeorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cIntakeorderViewModel.class);\r\n        intakeorderViewModel.deleteAll();\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n\r\n        for (JSONObject jsonObject : pvResultDtt) {\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n    }\r\n    private boolean mGetLinePropertysViaWebserviceBln() {\r\n\r\n        cLineProperty.allLinePropertysObl = null;\r\n        cLineProperty.pTruncateTableBln();\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getIntakeorderViewModel().pGetLinePropertysViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cLineProperty lineProperty = new cLineProperty(jsonObject);\r\n                lineProperty.pInsertInDatabaseBln();\r\n            }\r\n\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetLinePropertyValuesViaWebserviceBln() {\r\n\r\n\r\n        cLinePropertyValue.pTruncateTableBln();\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getIntakeorderViewModel().pGetLinePropertyValuesViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cLinePropertyValue linePropertyValue = new cLinePropertyValue(jsonObject);\r\n                linePropertyValue.pInsertInDatabaseBln();\r\n                if (linePropertyValue.getValueStr() !=null){\r\n                    if (this.getOrderTypeStr().equalsIgnoreCase(\"MAT\") || this.getOrderTypeStr().equalsIgnoreCase(\"MAS\")){\r\n                        for (cIntakeorderMATLine intakeorderMATLine : cIntakeorderMATLine.allIntakeorderMATLinesObl){\r\n                            if (intakeorderMATLine.getLineNoInt() == linePropertyValue.getLineNoInt()){\r\n                                if (intakeorderMATLine.presetValueObl == null) {\r\n                                    intakeorderMATLine.presetValueObl = new ArrayList<>();\r\n                                }\r\n                                intakeorderMATLine.presetValueObl.add(linePropertyValue);\r\n                            }\r\n                        }\r\n                    }else {\r\n\r\n                    for (cReceiveorderLine receiveorderLine : cReceiveorderLine.allReceiveorderLines){\r\n                        if (receiveorderLine.getLineNoInt() == linePropertyValue.getLineNoInt()){\r\n                            if (receiveorderLine.presetValueObl == null) {\r\n                                receiveorderLine.presetValueObl = new ArrayList<>();\r\n                            }\r\n                            receiveorderLine.presetValueObl.add(linePropertyValue);\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/SSU_WHS/Intake/Intakeorders/cIntakeorder.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/SSU_WHS/Intake/Intakeorders/cIntakeorder.java	(date 1619704585221)
-@@ -946,18 +946,6 @@
-                     this.mGetLinePropertysViaWebserviceBln();
-                     cReceiveorderSummaryLine.currentReceiveorderSummaryLine.pAddLine(receiveorderLine);
- 
--//                    if (cArticle.currentArticle.propertyObl != null){
--//                        int lineNoInt = receiveorderLine.getLineNoInt();
--//
--//                        for (cArticleProperty articleProperty:cArticle.currentArticle.propertyObl ){
--//                            cLineProperty lineProperty = new cLineProperty(articleProperty, lineNoInt);
--//
--//                            if(cLineProperty.allLinePropertysObl == null){
--//                                cLineProperty.allLinePropertysObl = new ArrayList<>();
--//                            }
--//                            cLineProperty.allLinePropertysObl.add(lineProperty);
--//                        }
--//                    }
-                 }
-             }
- 
-Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectPropertyFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Packaging.PackagingActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class AcceptRejectPropertyFragment  extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private Button cancelButton;\r\n    private ImageView acceptImageView;\r\n    private  ImageView rejectImageView;\r\n    private TextView acceptRejectHeader;\r\n    private  TextView acceptRejectText;\r\n    private  TextView textReject;\r\n    private  TextView textAccept;\r\n\r\n    private final String  titleStr;\r\n    private final String  messageStr;\r\n    private final String  acceptStr;\r\n    private final String rejectStr;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public AcceptRejectPropertyFragment(String pvTitleStr, String pvMessageStr, String pvRejectStr, String pvAcceptStr) {\r\n        this.titleStr = pvTitleStr;\r\n        this.messageStr = pvMessageStr;\r\n\r\n        this.acceptStr = pvAcceptStr;\r\n        this.rejectStr = pvRejectStr;\r\n    }\r\n    //End Region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n    @Override\r\n    public View onCreateView(LayoutInflater pvInflater, ViewGroup pvViewGroup,\r\n                             Bundle pvSavedInstanceState) {\r\n\r\n        // Inflate the layout for this fragment\r\n        return pvInflater.inflate(R.layout.fragment_accept_reject, pvViewGroup, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        if (getView() != null) {\r\n            this.acceptImageView = getView().findViewById(R.id.acceptImageView);\r\n            this.rejectImageView = getView().findViewById(R.id.rejectImageView);\r\n            this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n            this.textReject = getView().findViewById(R.id.textReject);\r\n            this.textAccept = getView().findViewById(R.id.textAccept);\r\n            this.acceptRejectHeader = getView().findViewById(R.id.textViewAcceptRejectHeader);\r\n            this.acceptRejectText = getView().findViewById(R.id.textViewAcceptRejectText);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                acceptRejectHeader.setText(titleStr);\r\n                acceptRejectText.setText(messageStr);\r\n                textReject.setText(rejectStr);\r\n                textAccept.setText(acceptStr);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetAcceptListener();\r\n        this.mSetRejectListener();\r\n        this.mSetCancelListener();\r\n    }\r\n    //End Region Default Methods\r\n\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetAcceptListener() {\r\n\r\n        this.acceptImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mAccept();\r\n            }\r\n        });\r\n\r\n        this.textAccept.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mAccept();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetRejectListener() {\r\n        this.rejectImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mReject();\r\n            }\r\n        });\r\n        this.textReject.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mReject();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mAccept() {\r\n\r\n        if (cAppExtension.activity instanceof  PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.amountHandledBln = true;\r\n            pickorderLineItemPropertyInputActvity.pResetTab(false);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.amountHandledBln = true;\r\n            receiveorderLinePropertyInputActivity.pResetTab(false);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.amountHandledBln = true;\r\n            intakeOrderLinePropertyInputActivity.pResetTab(false);\r\n            this.dismiss();\r\n\r\n        }\r\n    }\r\n\r\n    private void mReject() {\r\n\r\n        if (cAppExtension.activity instanceof  PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.amountHandledBln = false;\r\n            pickorderLineItemPropertyInputActvity.pResetTab(true);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof  ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.amountHandledBln = false;\r\n            receiveorderLinePropertyInputActivity.pResetTab(true);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof  IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.amountHandledBln = false;\r\n            intakeOrderLinePropertyInputActivity.pResetTab(true);\r\n            this.dismiss();\r\n\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectPropertyFragment.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectPropertyFragment.java	(date 1619706195437)
-@@ -20,6 +20,7 @@
- import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;
-+import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;
- import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;
- import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
-@@ -203,6 +204,13 @@
-             intakeOrderLinePropertyInputActivity.amountHandledBln = true;
-             intakeOrderLinePropertyInputActivity.pResetTab(false);
-             this.dismiss();
-+
-+        }
-+        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;
-+            inventoryLinePropertyInputActivity.amountHandledBln = true;
-+            inventoryLinePropertyInputActivity.pResetTab(false);
-+            this.dismiss();
- 
-         }
-     }
-@@ -228,6 +236,13 @@
-             intakeOrderLinePropertyInputActivity.amountHandledBln = false;
-             intakeOrderLinePropertyInputActivity.pResetTab(true);
-             this.dismiss();
-+
-+        }
-+        if (cAppExtension.activity instanceof  InventoryLinePropertyInputActivity) {
-+            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;
-+            inventoryLinePropertyInputActivity.amountHandledBln = false;
-+            inventoryLinePropertyInputActivity.pResetTab(true);
-+            this.dismiss();
- 
-         }
-     }
-Index: app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValueInputAdapter.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package SSU_WHS.LineItemProperty.LinePropertyValue;\r\n\r\nimport android.text.TextUtils;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.AppCompatImageView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;\r\nimport SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cLinePropertyValueInputAdapter extends RecyclerView.Adapter<cLinePropertyValueInputAdapter.commentViewHolder> {\r\n    public static class commentViewHolder extends RecyclerView.ViewHolder{\r\n\r\n        private final AppCompatImageView imageViewPropertyType;\r\n        private final TextView textViewDescription;\r\n        private final TextView textViewValue;\r\n        private TextView textViewQuantityUsed;\r\n        private final ConstraintLayout primaryContent;\r\n        private final ConstraintLayout secondaryContent;\r\n        private final AppCompatImageButton imageButtonMinus;\r\n        private final AppCompatImageButton imageButtonPlus;\r\n        private final AppCompatImageButton imageButtonZero;\r\n        private final  AppCompatImageButton imageButtonManual;\r\n        private final AppCompatImageView imageChevronDown;\r\n        private final Button imageButtonMax;\r\n\r\n        public LinearLayout itemPropertyValueInputItemLinearLayout;\r\n\r\n        public commentViewHolder(View pvView) {\r\n            super(pvView);\r\n\r\n            this.imageViewPropertyType =  pvView.findViewById(R.id.imageViewPropertyType);\r\n\r\n            this.textViewDescription = pvView.findViewById(R.id.textViewDescription);\r\n            this.textViewDescription.setEllipsize(TextUtils.TruncateAt.MARQUEE);\r\n            this.textViewDescription.setSingleLine(true);\r\n            this.textViewDescription.setMarqueeRepeatLimit(5);\r\n            this.textViewDescription.setSelected(true);\r\n\r\n            this.textViewValue = pvView.findViewById(R.id.textViewValue);\r\n\r\n            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);\r\n\r\n            this.itemPropertyValueInputItemLinearLayout = pvView.findViewById(R.id.itemPropertyValueInputItemLinearLayout);\r\n            this.primaryContent = pvView.findViewById(R.id.primaryContent);\r\n            this.secondaryContent = pvView.findViewById(R.id.secondaryContent);\r\n            this.secondaryContent.setVisibility(View.GONE);\r\n\r\n            this.imageButtonPlus = pvView.findViewById(R.id.imageButtonPlus);\r\n            this.imageButtonMinus = pvView.findViewById(R.id.imageButtonMinus);\r\n            this.imageButtonZero = pvView.findViewById(R.id.imageButtonZero);\r\n            this.imageButtonManual = pvView.findViewById(R.id.imageButtonManual);\r\n            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);\r\n            this.imageChevronDown = pvView.findViewById(R.id.imageChevronDown);\r\n            this.imageButtonMax = pvView.findViewById(R.id.imageButtonMax);\r\n        }\r\n    }\r\n\r\n    //Region Private Properties\r\n    private final LayoutInflater layoutInflaterObject;\r\n    private final List<LinearLayout> itemPropertyValueLinearLayoutObl = new ArrayList<>();\r\n    private List<cLinePropertyValue> localItemPropertyValueObl;\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public cLinePropertyValueInputAdapter() {\r\n        this.layoutInflaterObject = LayoutInflater.from(cAppExtension.context);\r\n    }\r\n    //End Region Constructor\r\n\r\n    @NonNull\r\n    @Override\r\n    public cLinePropertyValueInputAdapter.commentViewHolder onCreateViewHolder(@NonNull ViewGroup pvParentVieGroup, int pvViewTypeInt) {\r\n        View itemView = this.layoutInflaterObject.inflate(R.layout.recycler_itempropertyvalue_input, pvParentVieGroup, false);\r\n        return new cLinePropertyValueInputAdapter.commentViewHolder(itemView);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(final cLinePropertyValueInputAdapter.commentViewHolder pvHolder, int pvPositionInt) {\r\n\r\n        this.itemPropertyValueLinearLayoutObl.add(pvHolder.itemPropertyValueInputItemLinearLayout);\r\n\r\n        if (this.localItemPropertyValueObl != null && this.localItemPropertyValueObl.size() > 0) {\r\n\r\n            final cLinePropertyValue linePropertyValue = this.localItemPropertyValueObl.get(pvPositionInt);\r\n\r\n\r\n            switch (linePropertyValue.getItemProperty().getValueTypeStr().toUpperCase()) {\r\n\r\n                case \"BOOLEAN\":\r\n                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_check_black_24dp);\r\n                    break;\r\n\r\n                case \"DECIMAL\":\r\n                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_counter_black_24dp);\r\n                    break;\r\n\r\n                case \"TEXT\" :\r\n                case \"CODE\":\r\n                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_text_black_24dp);\r\n                    break;\r\n\r\n                case \"DATE\":\r\n                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_calendar_black_24dp);\r\n                    break;\r\n            }\r\n\r\n            pvHolder.textViewDescription.setText(linePropertyValue.getItemProperty().getOmschrijvingStr());\r\n            pvHolder.textViewValue.setText(linePropertyValue.getValueStr());\r\n            pvHolder.textViewQuantityUsed.setText(cText.pDoubleToStringStr(linePropertyValue.getQuantityDbl()));\r\n\r\n            if (linePropertyValue.getQuantityDbl() == 0 ) {\r\n                pvHolder.imageChevronDown.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (linePropertyValue.getItemProperty().getUniqueBln() && linePropertyValue.getQuantityDbl() > 0 ) {\r\n                pvHolder.imageButtonPlus.setVisibility(View.INVISIBLE);\r\n                pvHolder.imageButtonManual.setVisibility(View.INVISIBLE);\r\n                pvHolder.imageButtonMax.setVisibility(View.INVISIBLE);\r\n            }\r\n\r\n            if (linePropertyValue == cLinePropertyValue.currentLinePropertyValue) {\r\n                pvHolder.secondaryContent.setVisibility(View.VISIBLE);\r\n            }\r\n\r\n            pvHolder.primaryContent.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(final View view) {\r\n\r\n                    if (linePropertyValue.getQuantityDbl() == 0) {\r\n                        return;\r\n                    }\r\n\r\n                    AnimationUtils.loadAnimation(cAppExtension.context.getApplicationContext(), R.anim.rotate_180);\r\n\r\n                    //Close all others\r\n                    for (LinearLayout aLayout : itemPropertyValueLinearLayoutObl) {\r\n                        ConstraintLayout secondaryLayout = aLayout.findViewById(R.id.secondaryContent);\r\n                        ConstraintLayout primaryLayout = aLayout.findViewById(R.id.primaryContent);\r\n                        if (secondaryLayout != null) {\r\n                            if (primaryLayout != view) {\r\n                                if (secondaryLayout.getVisibility() == View.VISIBLE) {\r\n                                    ImageView chevronImage = primaryLayout.findViewById(R.id.imageChevronDown);\r\n                                    if (chevronImage != null) {\r\n                                        chevronImage.animate().rotation(0).start();\r\n                                    }\r\n                                }\r\n                                secondaryLayout.animate().scaleY(0).start();\r\n                                secondaryLayout.setVisibility(View.GONE);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    boolean isExpanded;\r\n                    isExpanded = pvHolder.secondaryContent.getVisibility() == View.VISIBLE;\r\n\r\n                    if (isExpanded) {\r\n                        pvHolder.imageChevronDown.animate().rotation(0).start();\r\n                        pvHolder.secondaryContent.animate().scaleY(0).start();\r\n                        pvHolder.secondaryContent.setVisibility(View.GONE);\r\n                    }\r\n                    else {\r\n                        pvHolder.imageChevronDown.animate().rotation(180).start();\r\n                        pvHolder.secondaryContent.animate().scaleY(1).start();\r\n                        pvHolder.secondaryContent.setVisibility(View.VISIBLE);\r\n                    }\r\n\r\n\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonMax.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    double availableDbl = 0.0;\r\n                    if(cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity){\r\n                        availableDbl = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() - cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityHandledDbl();\r\n                    }\r\n                    if(cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){\r\n                        availableDbl = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl() - cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityHandledDbl();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        availableDbl = cPickorderLine.currentPickOrderLine.getQuantityDbl();\r\n                    }\r\n\r\n                    ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(linePropertyValue.getPropertyCodeStr());\r\n\r\n                    for (cLinePropertyValue linePropertyValue1 : loopList ) {\r\n                        availableDbl -= linePropertyValue1.getQuantityDbl();\r\n                    }\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl += availableDbl;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n\r\n                        pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity( );\r\n                        pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity){\r\n                        if (linePropertyValue.getQuantityDbl()>= (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() - cReceiveorderSummaryLine.currentReceiveorderSummaryLine.quantityHandledDbl)){\r\n                            if (cIntakeorder.currentIntakeOrder.getReceiveNoExtraPiecesBln() && !cIntakeorder.currentIntakeOrder.isGenerated() && cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() > 0 ) {\r\n                                cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);\r\n                                cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus, cAppExtension.context.getString(R.string.number_cannot_be_higher),R.raw.headsupsound,false);\r\n                                return ;\r\n                            }\r\n                            if (cSetting.RECEIVE_EXTRA_PIECES_PERCENTAGE() > 0 && cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() > 0  && (cSetting.RECEIVE_EXTRA_PIECES_PERCENTAGE_MANDATORY())) {\r\n                                //Check if the new quantity would exceed the allowed quantity\r\n                                if (linePropertyValue.getQuantityDbl() > cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getAllowedQuantityDbl()) {\r\n                                    //We would exceed the allowed quantity so show that this is not allowed\r\n                                    cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);\r\n                                    cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus,  cAppExtension.context.getString(R.string.number_received_total_cant_be_higher_then, cText.pDoubleToStringStr(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getAllowedQuantityDbl())),R.raw.headsupsound,false);\r\n                                    return ;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        if (linePropertyValue.getQuantityDbl()== cPickorderLine.currentPickOrderLine.getQuantityDbl()){\r\n                            cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);\r\n                            cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus, cAppExtension.activity.getString(R.string.message_overpick_not_allowed),R.raw.headsupsound,false);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){\r\n                        if (linePropertyValue.getQuantityDbl()== cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl()&& cSetting.RECEIVE_NO_EXTRA_ITEMS() && cSetting.RECEIVE_NO_EXTRA_PIECES()){\r\n                            cUserInterface.pDoNope(pvHolder.imageButtonPlus, true, true);\r\n                            cUserInterface.pShowSnackbarMessage(pvHolder.imageButtonPlus,  cAppExtension.context.getString(R.string.number_cannot_be_higher),R.raw.headsupsound,false);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = currentQuantity + 1;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n\r\n                        pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity();\r\n                        pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n\r\n                    int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());\r\n                    int newQuantity = currentQuantity - 1;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = newQuantity;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity  receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        if (newQuantity == 0) {\r\n                            receiveorderLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        }\r\n\r\n                        receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity  intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        if (newQuantity == 0) {\r\n                            intakeOrderLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        }\r\n\r\n                        intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                        if (newQuantity == 0) {\r\n                            pickorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();\r\n                        }\r\n\r\n                        pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity();\r\n                        pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n                    }\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonZero.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    double countDbl =  cLinePropertyValue.currentLinePropertyValue.quantityDbl;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity  receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n\r\n                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;\r\n                        receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        receiveorderLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity  intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n\r\n                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;\r\n                        intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                        intakeOrderLinePropertyInputActivity.pDeleteValueFromRecyler();\r\n                        intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                        while (countDbl > 0) {\r\n\r\n                            countDbl--;\r\n                        }\r\n\r\n                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;\r\n                        pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity();\r\n                        pickorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();\r\n                        pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            pvHolder.imageButtonManual.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = 0;\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                        ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n                        receiveorderLinePropertyInputActivity.pShowNumericInputFragment();\r\n                    }\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                        IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n                        intakeOrderLinePropertyInputActivity.pShowNumericInputFragment();\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pShowNumericInputFragment();\r\n                    }\r\n                }\r\n            });\r\n\r\n            pvHolder.imageViewPropertyType.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n\r\n                    cLinePropertyValue.currentLinePropertyValue = linePropertyValue;\r\n                    cLineProperty.currentLineProperty = cLinePropertyValue.currentLinePropertyValue.getLineProperty();\r\n\r\n                    String propertyValueStr = linePropertyValue.getItemProperty().getValueTypeStr().toUpperCase();\r\n\r\n                    if(propertyValueStr.equals(\"BOOLEAN\") || propertyValueStr.equals(\"DECIMAL\") || propertyValueStr.equals(\"TEXT\") || propertyValueStr.equals(\"CODE\")){\r\n                        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n                            receiveorderLinePropertyInputActivity.pShowTextInputFragment();\r\n                        }\r\n                        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n                            intakeOrderLinePropertyInputActivity.pShowTextInputFragment();\r\n                        }\r\n                        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                            pickorderLineItemPropertyInputActvity.pShowTextInputFragment();\r\n                        }\r\n                    }\r\n                    if(propertyValueStr.equals(\"DATE\")){\r\n                        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n                            receiveorderLinePropertyInputActivity.pShowDatePickerDialog();\r\n                        }\r\n                        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n                            intakeOrderLinePropertyInputActivity.pShowDatePickerDialog();\r\n                        }\r\n                        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){\r\n                            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n                            pickorderLineItemPropertyInputActvity.pShowDatePickerDialog();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public void pFillData(List<cLinePropertyValue> pvDataObl) {\r\n        this.localItemPropertyValueObl = pvDataObl;\r\n        notifyDataSetChanged();\r\n    }\r\n\r\n    private LinkedHashMap<String, ArrayList<cLinePropertyValue>> localItemPropertySortObl(){\r\n        LinkedHashMap<String, ArrayList<cLinePropertyValue>> linkedHashMap = new LinkedHashMap<>();;\r\n\r\n        for (cLinePropertyValue linePropertyValue : localItemPropertyValueObl) {\r\n            //Create the hasmap dynammically and fill it\r\n            ArrayList<cLinePropertyValue> loopList = linkedHashMap.get(linePropertyValue.getPropertyCodeStr());\r\n            if (loopList == null) {\r\n                ArrayList<cLinePropertyValue> propertyValues = new ArrayList<>();\r\n                propertyValues.add(linePropertyValue);\r\n                linkedHashMap.put(linePropertyValue.getPropertyCodeStr(), propertyValues);\r\n            }\r\n            else{\r\n                loopList.add(linePropertyValue);\r\n            }\r\n\r\n        }\r\n        return linkedHashMap;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount () {\r\n        if (this.localItemPropertyValueObl != null)\r\n            return this.localItemPropertyValueObl.size();\r\n        else return 0;\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValueInputAdapter.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValueInputAdapter.java	(date 1619709127880)
-@@ -26,11 +26,13 @@
- import SSU_WHS.Basics.Settings.cSetting;
- import SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;
- import SSU_WHS.Intake.Intakeorders.cIntakeorder;
-+import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
- import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
- import SSU_WHS.Picken.PickorderLines.cPickorderLine;
- import SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;
- import SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
-+import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
- import nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;
- import nl.icsvertex.scansuite.R;
-@@ -211,6 +213,9 @@
-                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
-                         availableDbl = cPickorderLine.currentPickOrderLine.getQuantityDbl();
-                     }
-+                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){
-+                        availableDbl = cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl();
-+                    }
- 
-                     ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(linePropertyValue.getPropertyCodeStr());
- 
-@@ -234,6 +239,13 @@
-                         intakeOrderLinePropertyInputActivity.pRefreshActivity();
-                     }
- 
-+                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+                        InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
-+
-+                        inventoryLinePropertyInputActivity.pTryToChangeQuantity();
-+                        inventoryLinePropertyInputActivity.pRefreshActivity();
-+                    }
-+
-                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
-                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
- 
-@@ -298,6 +310,12 @@
-                         intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();
-                         intakeOrderLinePropertyInputActivity.pRefreshActivity();
-                     }
-+                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+                        InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
-+
-+                        inventoryLinePropertyInputActivity.pTryToChangeQuantity();
-+                        inventoryLinePropertyInputActivity.pRefreshActivity();
-+                    }
-                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
-                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
- 
-@@ -339,6 +357,16 @@
-                         intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();
-                         intakeOrderLinePropertyInputActivity.pRefreshActivity();
-                     }
-+                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+                        InventoryLinePropertyInputActivity  inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
-+
-+                        if (newQuantity == 0) {
-+                            inventoryLinePropertyInputActivity.pDeleteValueFromRecyler();
-+                        }
-+
-+                        inventoryLinePropertyInputActivity.pTryToChangeQuantity();
-+                        inventoryLinePropertyInputActivity.pRefreshActivity();
-+                    }
-                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
-                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
-                         if (newQuantity == 0) {
-@@ -375,6 +403,14 @@
-                         intakeOrderLinePropertyInputActivity.pDeleteValueFromRecyler();
-                         intakeOrderLinePropertyInputActivity.pRefreshActivity();
-                     }
-+                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+                        InventoryLinePropertyInputActivity  inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
-+
-+                        cLinePropertyValue.currentLinePropertyValue.quantityDbl --;
-+                        inventoryLinePropertyInputActivity.pTryToChangeQuantity();
-+                        inventoryLinePropertyInputActivity.pDeleteValueFromRecyler();
-+                        inventoryLinePropertyInputActivity.pRefreshActivity();
-+                    }
-                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
-                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
-                         while (countDbl > 0) {
-@@ -406,6 +442,10 @@
-                         IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;
-                         intakeOrderLinePropertyInputActivity.pShowNumericInputFragment();
-                     }
-+                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+                        InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
-+                        inventoryLinePropertyInputActivity.pShowNumericInputFragment();
-+                    }
-                     if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity){
-                         PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
-                         pickorderLineItemPropertyInputActvity.pShowNumericInputFragment();
-@@ -435,6 +475,10 @@
-                             PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
-                             pickorderLineItemPropertyInputActvity.pShowTextInputFragment();
-                         }
-+                        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){
-+                            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
-+                            inventoryLinePropertyInputActivity.pShowTextInputFragment();
-+                        }
-                     }
-                     if(propertyValueStr.equals("DATE")){
-                         if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {
-@@ -449,6 +493,10 @@
-                             PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
-                             pickorderLineItemPropertyInputActvity.pShowDatePickerDialog();
-                         }
-+                        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){
-+                            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
-+                            inventoryLinePropertyInputActivity.pShowDatePickerDialog();
-+                        }
-                     }
-                 }
-             });
-Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class cInventoryorder {\r\n\r\n    private final String orderNumberStr;\r\n    public String getOrderNumberStr() {\r\n        return orderNumberStr;\r\n    }\r\n\r\n    private final String orderTypeStr;\r\n    public String getOrderTypeStr() {\r\n        return orderTypeStr;\r\n    }\r\n\r\n    private final int numberOfBinsInt;\r\n    public int getNumberOfBinsInt() {\r\n        return numberOfBinsInt;\r\n    }\r\n\r\n    private final String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {\r\n        return assignedUserIdStr;\r\n    }\r\n\r\n    private final String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {\r\n        return currentUserIdStr;\r\n    }\r\n\r\n    private String stockownerStr;\r\n    public String getStockownerStr() {\r\n        return stockownerStr;\r\n    }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() {\r\n        return statusInt;\r\n    }\r\n\r\n    private final boolean invAmountManualBln;\r\n    public boolean isInvAmountManualBln() {\r\n        return invAmountManualBln;\r\n    }\r\n\r\n    private final boolean invBarcodeCheckBln;\r\n    public boolean isInvBarcodeCheckBln() {\r\n        return invBarcodeCheckBln;\r\n    }\r\n\r\n    private final boolean invAddExtraBinBln;\r\n    public boolean isInvAddExtraBinBln() {\r\n        return invAddExtraBinBln;\r\n    }\r\n\r\n    private final String externalReferenceStr;\r\n    public String getExternalReferenceStr() {\r\n        return externalReferenceStr;\r\n    }\r\n\r\n    private final int sourceDocumentInt;\r\n    private int getSourceDocumentInt() { return sourceDocumentInt; }\r\n\r\n    private final String documentStr;\r\n    public String getDocumentStr() {\r\n        return documentStr;\r\n    }\r\n\r\n    private final boolean inventoryWithPictureBln;\r\n    public boolean isInventoryWithPictureBln() {\r\n        return inventoryWithPictureBln;\r\n    }\r\n\r\n    private final boolean inventoryWithPicturePrefetchBln;\r\n    private boolean isInventoryWithPicturePrefetchBln() {\r\n        return inventoryWithPicturePrefetchBln;\r\n    }\r\n\r\n    public Boolean isGeneratedBln() {\r\n        return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n    }\r\n\r\n    public int unknownVariantCounterInt = 0;\r\n    public int getUnknownVariantCounterInt() {\r\n        return unknownVariantCounterInt;\r\n    }\r\n\r\n    public  LinkedHashMap<Integer, List<JSONObject>>  itemProperyDataObl;\r\n    private final cInventoryorderEntity inventoryorderEntity;\r\n\r\n    private cInventoryorderViewModel getInventoryorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n    }\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    public List<cComment> commentsObl() {\r\n        return cComment.allCommentsObl;\r\n    }\r\n    public List<cInventoryorderBarcode> barcodesObl () {return  cInventoryorderBarcode.allInventoryorderBarcodesObl;}\r\n    private List<cInventoryorderLine> linesObl() {return  cInventoryorderLine.allLinesObl;}\r\n    private List<cArticleImage> imagesObl()  {\r\n        return  cArticleImage.allImages;\r\n    }\r\n\r\n    private static List<cInventoryorder> allCachedOrdersObl;\r\n    public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){\r\n\r\n        if (pvRefreshBln) {\r\n             cInventoryorder.allCachedOrdersObl = null;\r\n        }\r\n\r\n        if (cInventoryorder.allCachedOrdersObl != null) {\r\n            return  cInventoryorder.allCachedOrdersObl;\r\n        }\r\n\r\n        cInventoryorder.allCachedOrdersObl  = new ArrayList<>();\r\n\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        List<cInventoryorderEntity> hulpObl  =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), false);\r\n\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpObl) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            cInventoryorder.allCachedOrdersObl.add(inventoryorder);\r\n        }\r\n\r\n        return  cInventoryorder.allCachedOrdersObl;\r\n\r\n\r\n    }\r\n\r\n    private static List<String> binsObl;\r\n\r\n    public static cInventoryorder currentInventoryOrder;\r\n\r\n    //Region Public Properties\r\n\r\n    //Region Constructor\r\n\r\n    public cInventoryorder(JSONObject pvJsonObject) {\r\n\r\n        this.inventoryorderEntity = new cInventoryorderEntity(pvJsonObject);\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr()) ;\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n    }\r\n\r\n    public cInventoryorder(cInventoryorderEntity pvInventoryorderEntity) {\r\n\r\n        this.inventoryorderEntity = pvInventoryorderEntity;\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt =  cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr());\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Orders\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderViewModel().insert(this.inventoryorderEntity);\r\n        return true;\r\n    }\r\n\r\n    public static Boolean pCreateInventoryOrderViaWebserviceBln(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        cWebresult WebResult;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(WebResult.getResultDtt().get(0));\r\n                inventoryorder.pInsertInDatabaseBln();\r\n                cInventoryorder.currentInventoryOrder = inventoryorder;\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS);\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static boolean pGetInventoryOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorder.mTruncateTable();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            List<cInventoryorderEntity> insertObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(jsonObject);\r\n                insertObl.add(inventoryorder.inventoryorderEntity);\r\n            }\r\n\r\n            //Batch insert in database\r\n            cInventoryorder.mInsertAllInDatabase(insertObl);\r\n\r\n            //Make sure memory is filled\r\n            cInventoryorder.allInventoryOrdersObl(true);\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS);\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n            ignoreBusyBln = true;\r\n        }\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(),\r\n                this.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvStepCodeEnu.toString(),\r\n                pvWorkFlowStepInt,\r\n                ignoreBusyBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() > 0 && ! Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getUsernameStr())) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln()&& Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        cWebresult Webresult;\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvStepCodeEnu.toString(), pvWorkFlowStepInt);\r\n\r\n        return Webresult.getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n    public void pDeleteDetails() {\r\n        cInventoryorderLine.pTruncateTableBln();\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorderBarcode.pTruncateTableBln();\r\n        cInventoryorderLineBarcode.pTruncateTableBln();\r\n    }\r\n\r\n    public cResult pOrderHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n\r\n        cWebresult webresult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        webresult =  inventoryorderViewModel.pHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n\r\n    }\r\n\r\n    public static List<cInventoryorder> pGetInventoriesWithFilterFromDatabasObl() {\r\n\r\n        List<cInventoryorder> resultObl = new ArrayList<>();\r\n        List<cInventoryorderEntity> hulpResultObl;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        hulpResultObl =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpResultObl ) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            resultObl.add(inventoryorder);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public  boolean pCheckBarcodeWithLineBarcodesBln(cBarcodeScan pvBarcodeScan){\r\n\r\n        //If scanned value matches the current barcodeStr, then we have a match\r\n        if (pvBarcodeScan.getBarcodeOriginalStr().equalsIgnoreCase(cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr()) ||\r\n            pvBarcodeScan.getBarcodeFormattedStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeWithoutCheckDigitStr()) ) {\r\n            //We have a match, so leave\r\n            return  true;\r\n        }\r\n\r\n        //Check if this is a barcodeStr we already know\r\n        cInventoryorderBarcode inventoryorderBarcode = cInventoryorder.currentInventoryOrder.pGetOrderBarcode(pvBarcodeScan);\r\n\r\n        //We scanned a barcodeStr unknown to the order\r\n        if (inventoryorderBarcode == null) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr for a different article\r\n        if (!inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) ||\r\n            ! inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLine.currentInventoryOrderLine.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode = inventoryorderLineBarcode;\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        //Scanned barcodeStr is correct, but we need to create a line barcodeStr\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode =  cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(inventoryorderBarcode.getBarcodeStr(),inventoryorderBarcode.getQuantityPerUnitOfMeasureDbl(), true);\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n        return  true;\r\n\r\n    }\r\n\r\n    private static  void mTruncateTable() {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.deleteAll();\r\n    }\r\n\r\n    //End Region Orders\r\n\r\n    //Region Lines\r\n\r\n    public boolean pGetLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderLine.allLinesObl = null;\r\n            cInventoryorderLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n\r\n        WebResult = getInventoryorderViewModel().pGetLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderLine.allLinesObl == null) {\r\n                cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderLineEntity> importObl = new ArrayList<>();\r\n            List<cInventoryorderLine> objectObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cInventoryorderLine inventoryorderLine = new cInventoryorderLine(jsonObject);\r\n\r\n                if (inventoryorderLine.getQuantityHandledAllScannersDbl() > inventoryorderLine.getQuantityDbl()) {\r\n                    inventoryorderLine.quantityHandledDbl = inventoryorderLine.getQuantityHandledAllScannersDbl();\r\n                }\r\n\r\n\r\n                importObl.add(inventoryorderLine.inventoryorderLineEntity);\r\n                objectObl.add((inventoryorderLine));\r\n\r\n                if (! inventoryorderLine.getHandeledTimeStampStr().isEmpty()) {\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin  =   cInventoryorder.currentInventoryOrder.pGetBin(inventoryorderLine.getBinCodeStr());\r\n                    if ( cInventoryorderBin.currentInventoryOrderBin == null) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                        cInventoryorderBin.currentInventoryOrderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.InventoryDone;\r\n                    }\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin.pUpdateStatusAndTimeStampInDatabase();\r\n                    cInventoryorderBin.currentInventoryOrderBin = null;\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderLine.pInsertAllInDatabase(objectObl,importObl);\r\n\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddLineBln() {\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pAddLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderLine.currentInventoryOrderLine= new cInventoryorderLine(WebResult.getResultDtt().get(0));\r\n                cInventoryorderLine.currentInventoryOrderLine.pInsertInDatabaseBln();\r\n                cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr(),cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl(), false);\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public List<cInventoryorderLine> pGetLinesForBinObl(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderLine> resultObl = new ArrayList<>();\r\n        for (cInventoryorderLine inventoryorderLine : cInventoryorder.currentInventoryOrder.linesObl()) {\r\n            if (inventoryorderLine.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                resultObl.add((inventoryorderLine));\r\n            }\r\n        }\r\n\r\n        if (resultObl.size() > 1) {\r\n            Collections.reverse(resultObl);\r\n        }\r\n\r\n        return resultObl;\r\n    }\r\n\r\n    public Double pGetTotalItemCountDbl() {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetTotalCountDbl();\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetItemCountForBinDbl(String pvBincodeStr) {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetCountForBinCodeDbl(pvBincodeStr);\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public cInventoryorderLine pGetLineForArticleAndBin() {\r\n\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            //Check if BIN matches current BIN\r\n            if (! inventoryorderLine.getBinCodeStr().equalsIgnoreCase(   cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr())) {\r\n                continue;\r\n            }\r\n\r\n            //Check if item matches scanned item\r\n            if (inventoryorderLine.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) &&\r\n                    inventoryorderLine.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n                return  inventoryorderLine;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pGetOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all bins for current order, if webservice error then stop\r\n        if (!this.mGetBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.pGetLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_lines_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.mGetPossibleBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_possible_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!this.pGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all barcodes\r\n        if (!this.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all inventorylinebarcodes\r\n        if (!this.mGetLineBarcodesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all article images, only if neccesary\r\n        if (!this.mGetArticleImagesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    private cInventoryorderLine mGetLineWithLineNo(Long pvLineNoLng) {\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            if (cText.pIntToStringStr(inventoryorderLine.getLineNoInt()).equalsIgnoreCase(cText.pLongToStringStr(pvLineNoLng))) {\r\n                return  inventoryorderLine;\r\n            }\r\n\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Lines\r\n\r\n    //Region BINS\r\n\r\n    private boolean mGetBinsViaWebserviceBln() {\r\n\r\n        cInventoryorderBin.allInventoryorderBinsObl = null;\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorder.binsObl = new ArrayList<>();\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            List<cInventoryorderBinEntity> insertObl = new ArrayList<>();\r\n            List<cInventoryorderBin> closedBinsObl = new ArrayList<>();\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n\r\n                insertObl.add(inventoryorderBin.inventoryorderBinEntity);\r\n\r\n                if (inventoryorderBin.getStatusInt() ==  cWarehouseorder.InventoryBinStatusEnu.InventoryDoneOnServer && !cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                    closedBinsObl.add(inventoryorderBin);\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderBin.pInsertAllInDatabase(insertObl);\r\n\r\n            //Close all BINS in database after they got inserted\r\n            for (cInventoryorderBin inventoryorderBin : closedBinsObl) {\r\n                inventoryorderBin.pCloseBln(false);\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetPossibleBinsViaWebserviceBln() {\r\n\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetPossibleBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n\r\n                if (cInventoryorder.binsObl.contains(inventoryorderBin.getBinCodeStr())) {\r\n                    continue;\r\n                }\r\n\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n                inventoryorderBin.pInsertInDatabaseBln();\r\n                inventoryorderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.New;\r\n                inventoryorderBin.pUpdateStatusAndTimeStampInDatabase();\r\n\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsNotDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsNotDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsTotalFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsTotalFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public cInventoryorderBin pGetBin(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderBin> hulpObl;\r\n\r\n        hulpObl = this.pGetBinsTotalFromDatabasObl();\r\n\r\n        if (hulpObl == null || hulpObl.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        for (cInventoryorderBin inventoryorderBin : hulpObl) {\r\n            if (inventoryorderBin.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                return  inventoryorderBin;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cInventoryorderBin pAddInventoryBin(cBranchBin pvBranchBin) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddBinViaWebserviceWrs(pvBranchBin.getBinCodeStr());\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBin InventoryorderBin = new cInventoryorderBin(WebResult.getResultDtt().get(0));\r\n                InventoryorderBin.pInsertInDatabaseBln();\r\n                return  InventoryorderBin;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  null;\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    //End Region BINS\r\n\r\n    //Region Barcodes\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderBarcode.allInventoryorderBarcodesObl = null;\r\n            cInventoryorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pGetBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln() ){\r\n\r\n            if (cInventoryorderBarcode.allInventoryorderBarcodesObl == null) {\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderBarcodeEntity> inventoryorderEntities = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject :WebResult.getResultDtt() ) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(jsonObject);\r\n                inventoryorderEntities.add(inventoryorderBarcode.inventoryorderBarcodeEntity);\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl.add(inventoryorderBarcode);\r\n            }\r\n\r\n            cInventoryorderBarcode.pInsertAllInDatabase(inventoryorderEntities);\r\n            return true;\r\n        }\r\n\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddUnkownBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cInventoryorder.currentInventoryOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(WebResult.getResultDtt().get(0));\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if (cArticle.currentArticle == null) {\r\n            return false;\r\n        }\r\n\r\n        //Get barcodes for this article\r\n        if (!cArticle.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        //Search for the scanned barcodeStr in the article barcodes\r\n        cArticleBarcode matchedArticleBarcode = null;\r\n        for (cArticleBarcode articleBarcode : cArticle.currentArticle.barcodesObl) {\r\n            if (articleBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    articleBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                matchedArticleBarcode = articleBarcode;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //We didn't find a match, so no use in adding the line\r\n        if (matchedArticleBarcode == null) {\r\n            return  false;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddERPItemViaWebserviceWrs(matchedArticleBarcode);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            for (cArticleBarcode articleBarcode :  cArticle.currentArticle.barcodesObl) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(articleBarcode);\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n\r\n                if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                        inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                    cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Barcodes\r\n\r\n    //Region Line Barcode\r\n\r\n    private boolean mGetLineBarcodesViaWebserviceBln() {\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = null;\r\n            cInventoryorderLineBarcode.pTruncateTableBln();\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pGetLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<cInventoryorderLineBarcodeEntity> insertObl = new ArrayList<>();\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode(jsonObject);\r\n                insertObl.add((inventoryorderLineBarcode.inventoryorderLineBarcodeEntity));\r\n\r\n                //Search for line that belongs to this barcodeStr\r\n                cInventoryorderLine inventoryorderLine = cInventoryorder.currentInventoryOrder.mGetLineWithLineNo(inventoryorderLineBarcode.getLineNoLng());\r\n\r\n                //If we can't find it, skip this\r\n                if (inventoryorderLine == null) {\r\n                    continue;\r\n                }\r\n\r\n                //Add barcodeStr to line\r\n                inventoryorderLine.pAddLineBarcode(inventoryorderLineBarcode.getBarcodeStr(),inventoryorderLineBarcode.getQuantityhandledDbl(), false);\r\n\r\n            }\r\n\r\n            cInventoryorderLineBarcode.pInsertAllInDatabase(insertObl);\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Line Barcode\r\n\r\n    //Region Barcode\r\n\r\n    public cInventoryorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderBarcode inventoryorderBarcode : this.barcodesObl()) {\r\n\r\n            if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr())) {\r\n                return  inventoryorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Barcode\r\n\r\n    //Region Images\r\n\r\n    private boolean mGetArticleImagesViaWebserviceBln() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()  || !cInventoryorder.currentInventoryOrder.isInventoryWithPicturePrefetchBln()) {\r\n            return  true;\r\n        }\r\n\r\n\r\n            cArticleImage.allImages = null;\r\n            cArticleImage.pTruncateTableBln();\r\n\r\n\r\n        if (this.imagesObl()  != null) {\r\n            return  true;\r\n        }\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  false;\r\n        }\r\n\r\n        List<String> itemNoAndVariantCodeObl;\r\n        itemNoAndVariantCodeObl = new ArrayList<>();\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n            String itemNoAndVariantCodeStr = inventoryorderLine.getItemNoStr() + \";\" + inventoryorderLine.getVariantCodeStr();\r\n\r\n            if (!itemNoAndVariantCodeObl.contains(itemNoAndVariantCodeStr)) {\r\n                itemNoAndVariantCodeObl.add(itemNoAndVariantCodeStr);\r\n            }\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        WebResult =  articleImageViewModel.pGetArticleImagesFromWebserviceWrs(itemNoAndVariantCodeObl);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            cArticleImage.allImages = new ArrayList<>();\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cArticleImage articleImage = new cArticleImage(jsonObject);\r\n\r\n                if ( !cArticleImage.allImages.contains(articleImage)) {\r\n                    articleImage.pInsertInDatabaseBln();\r\n                    cArticleImage.allImages.add((articleImage));\r\n                }\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEIMAGESMULTIPLE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    //End Region Images\r\n\r\n    //Region Comments\r\n\r\n    public boolean pGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n        cWebresult webresult;\r\n        webresult = getInventoryorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln()&& webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            List<JSONObject> myList = webresult.getResultDtt();\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (cInventoryorder.currentInventoryOrder.commentsObl() == null || cInventoryorder.currentInventoryOrder.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    private static  void mInsertAllInDatabase(List<cInventoryorderEntity> pvInventoryOrderEntityObl ) {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.insertAll (pvInventoryOrderEntityObl);\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n        for (JSONObject jsonObject : pvResultDtt) {\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //End Region Comments\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(date 1619704585271)
-@@ -35,6 +35,9 @@
- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
- import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;
-+import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
-+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
-+import SSU_WHS.Picken.PickorderLines.cPickorderLine;
- import SSU_WHS.Webservice.cWebresult;
- import SSU_WHS.Webservice.cWebserviceDefinitions;
- import nl.icsvertex.scansuite.R;
-@@ -740,6 +743,20 @@
-             return result;
-         }
- 
-+        // Get all propertys, if webservice error then stop
-+        if (!this.mGetLinePropertysViaWebserviceBln( )) {
-+            result.resultBln = false;
-+            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));
-+            return result;
-+        }
-+
-+        // Get all property values, if webservice error then stop
-+        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {
-+            result.resultBln = false;
-+            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));
-+            return result;
-+        }
-+
-         return  result;
-     }
- 
-@@ -1033,6 +1050,8 @@
-             return  false;
-         }
- 
-+        this.mGetLinePropertysViaWebserviceBln();
-+
-         cWebresult WebResult;
-         WebResult =  getInventoryorderViewModel().pAddERPItemViaWebserviceWrs(matchedArticleBarcode);
-         if (WebResult.getResultBln() && WebResult.getSuccessBln()){
-@@ -1238,6 +1257,58 @@
- 
- 
-     }
-+    private boolean mGetLinePropertysViaWebserviceBln() {
-+
-+        cLineProperty.allLinePropertysObl = null;
-+        cLineProperty.pTruncateTableBln();
-+
-+        cWebresult WebResult;
-+        WebResult =  this.getInventoryorderViewModel().pGetLinePropertysViaWebserviceWrs();
-+        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
-+
-+            for (JSONObject jsonObject : WebResult.getResultDtt()) {
-+                cLineProperty pickorderLineProperty = new cLineProperty(jsonObject);
-+                pickorderLineProperty.pInsertInDatabaseBln();
-+            }
-+
-+            return  true;
-+        }
-+        else {
-+            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET);
-+            return  false;
-+        }
-+    }
-+
-+    private boolean mGetLinePropertyValuesViaWebserviceBln() {
-+
-+        cLinePropertyValue.allLinePropertysValuesObl = null;
-+        cLinePropertyValue.pTruncateTableBln();
-+
-+        cWebresult WebResult;
-+        WebResult =  this.getInventoryorderViewModel().pGetLinePropertyValuesViaWebserviceWrs();
-+        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
-+
-+            for (JSONObject jsonObject : WebResult.getResultDtt()) {
-+                cLinePropertyValue linePropertyValue = new cLinePropertyValue(jsonObject);
-+                linePropertyValue.pInsertInDatabaseBln();
-+                if (linePropertyValue.getValueStr() !=null){
-+                    for (cInventoryorderLine inventoryorderLine : this.linesObl()){
-+                        if (inventoryorderLine.getLineNoInt() == linePropertyValue.getLineNoInt()){
-+                            if (inventoryorderLine.presetValueObl == null) {
-+                                inventoryorderLine.presetValueObl = new ArrayList<>();
-+                            }
-+                            inventoryorderLine.presetValueObl.add(linePropertyValue);
-+                        }
-+                    }
-+                }
-+            }
-+            return  true;
-+        }
-+        else {
-+            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET);
-+            return  false;
-+        }
-+    }
- 
-     //End Region Comments
- 
-Index: app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package ICS.Utils.Scanning;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.BarcodeInfoActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.CreateIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveMISinglepieceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipMultiActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSingleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.CreateReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.CreateReturnActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderShipActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddEnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BranchFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SearchArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SetBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PasswordFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ReasonFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.CreateInventoryActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\n\r\npublic class cBarcodeScan {\r\n\r\n    private static String currentActivityContextStr = \"\";\r\n\r\n    public static class BarcodeType {\r\n\r\n        public static final int Unknown = 0;\r\n        public static final int EAN8 = 1;\r\n        public static final int EAN13 = 2;\r\n    }\r\n\r\n    private String barcodeFormattedStr;\r\n    public String getBarcodeFormattedStr() {\r\n        return barcodeFormattedStr;\r\n    }\r\n\r\n    public String barcodeOriginalStr;\r\n    public String getBarcodeOriginalStr() {\r\n        return barcodeOriginalStr;\r\n    }\r\n\r\n    public String barcodeTypeStr;\r\n    public String getBarcodeTypeStr() {\r\n        return barcodeTypeStr;\r\n    }\r\n\r\n    private   Boolean containsCrlf = false;\r\n    public Boolean getContainsCrlfBln() {\r\n        return containsCrlf;\r\n    }\r\n\r\n    public cBarcodeScan(){\r\n\r\n    }\r\n\r\n    private static IntentFilter BarcodeIntentFilter;\r\n    private static void getBarcodeIntentFilter() {\r\n        if (BarcodeIntentFilter == null) {\r\n            BarcodeIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static IntentFilter BarcodeFragmentIntentFilter;\r\n    private static void getBarcodeFragmentIntentFilter() {\r\n        if (BarcodeFragmentIntentFilter == null) {\r\n            BarcodeFragmentIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeFragmentIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeFragmentIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeReceiver;\r\n    private static void getBarcodeReceiver() {\r\n        if (BarcodeReceiver == null) {\r\n            BarcodeReceiver = new BroadcastReceiver(){\r\n                @Override\r\n                public void onReceive(Context pvContext, Intent pvIntent) {\r\n\r\n                    if (pvContext != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(pvIntent);\r\n\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    //Login\r\n                    if (cAppExtension.activity instanceof LoginActivity) {\r\n                        LoginActivity loginActivity = (LoginActivity)cAppExtension.activity;\r\n                        loginActivity.pHandleScan(barcodeScan);\r\n                       }\r\n\r\n                    //BarcodeInfo\r\n                    if (cAppExtension.activity instanceof BarcodeInfoActivity) {\r\n                        BarcodeInfoActivity barcodeInfoActivity = (BarcodeInfoActivity)cAppExtension.activity;\r\n                        barcodeInfoActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Pick\r\n                    if (cAppExtension.activity instanceof PickorderSelectActivity){\r\n                        PickorderSelectActivity pickorderSelectActivity = (PickorderSelectActivity)cAppExtension.activity;\r\n                        pickorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                        pickorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                        pickorderLinesGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n                        PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                        pickorderPickActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n                        PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n                        pickorderPickGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Sort\r\n                    if (cAppExtension.activity instanceof SortorderSelectActivity){\r\n                        SortorderSelectActivity sortorderSelectActivity = (SortorderSelectActivity)cAppExtension.activity;\r\n                        sortorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderLinesActivity){\r\n                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                        sortorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderSortActivity){\r\n                        SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n                        sortorderSortActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Ship\r\n                    if (cAppExtension.activity instanceof ShiporderSelectActivity){\r\n                        ShiporderSelectActivity shiporderSelectActivity = (ShiporderSelectActivity)cAppExtension.activity;\r\n                        shiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderLinesActivity){\r\n                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                        shiporderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderShipActivity){\r\n                        ShiporderShipActivity shiporderShipActivity = (ShiporderShipActivity)cAppExtension.activity;\r\n                        shiporderShipActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Finish Single Pieces\r\n                    if (cAppExtension.activity instanceof FinishShiporderSelectActivity){\r\n                        FinishShiporderSelectActivity finishShiporderSelectActivity = (FinishShiporderSelectActivity)cAppExtension.activity;\r\n                        finishShiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof FinishShipLinesActivity){\r\n                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                        finishShipLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //QC\r\n                    if (cAppExtension.activity instanceof QualityControlLinesActivity){\r\n                        QualityControlLinesActivity qualityControlLinesActivity = (QualityControlLinesActivity)cAppExtension.activity;\r\n                        qualityControlLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderQCActivity){\r\n                        PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n                        pickorderQCActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Inventory\r\n                    if (cAppExtension.activity instanceof CreateInventoryActivity) {\r\n                        CreateInventoryActivity createInventoryActivity = (CreateInventoryActivity)cAppExtension.activity;\r\n                        createInventoryActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderSelectActivity){\r\n                        InventoryorderSelectActivity inventoryorderSelectActivity = (InventoryorderSelectActivity)cAppExtension.activity;\r\n                        inventoryorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinsActivity){\r\n                        InventoryorderBinsActivity inventoryorderBinsActivity = (InventoryorderBinsActivity)cAppExtension.activity;\r\n                        inventoryorderBinsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinActivity){\r\n                        InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n                        inventoryorderBinActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n                        InventoryArticleActivity inventoryArticleDetailActivity = (InventoryArticleActivity)cAppExtension.activity;\r\n                        inventoryArticleDetailActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    //Intake\r\n                    if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){\r\n                        IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;\r\n                        intakeAndReceiveSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReceiveActivity){\r\n                        CreateReceiveActivity createReceiveActivity = (CreateReceiveActivity)cAppExtension.activity;\r\n                        createReceiveActivity.pHandleScan(barcodeScan,false,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateIntakeActivity){\r\n                        CreateIntakeActivity createIntakeActivity = (CreateIntakeActivity)cAppExtension.activity;\r\n                        createIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveLinesActivity){\r\n                        ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                        receiveLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n                        ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n                        receiveOrderReceiveActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity){\r\n                        ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n                        receiveorderLinePropertyInputActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n                        IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n                        intakeorderMATLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n                        IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n                        intakeorderMASLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n                        IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n                        IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeGeneratedActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){\r\n                        IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n                        intakeOrderLinePropertyInputActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Return\r\n                    if (cAppExtension.activity instanceof ReturnorderSelectActivity){\r\n                        ReturnorderSelectActivity returnorderSelectActivity = (ReturnorderSelectActivity)cAppExtension.activity;\r\n                        returnorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                        ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                        returnorderDocumentsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                        ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                        returnorderDocumentActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReturnActivity) {\r\n                        CreateReturnActivity createReturnActivity = (CreateReturnActivity)cAppExtension.activity;\r\n                        createReturnActivity.pHandleScan(barcodeScan,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                        ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                        returnArticleDetailActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Move\r\n                    if (cAppExtension.activity instanceof MoveorderSelectActivity){\r\n                        MoveorderSelectActivity moveorderSelectActivity = (MoveorderSelectActivity)cAppExtension.activity;\r\n                        moveorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateMoveActivity){\r\n                        CreateMoveActivity createMoveActivity = (CreateMoveActivity)cAppExtension.activity;\r\n                        createMoveActivity.pHandleScan(barcodeScan, false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n                        MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n                        moveLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n                        MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n                        moveLinesTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n                        MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n                        moveLineTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n                        MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n                        moveLinesPlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n                        MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n                        moveLinePlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLineTakeActivity){\r\n                        MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n                        moveLineTakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceActivity){\r\n                        MoveLinePlaceActivity moveLinePlaceActivity = (MoveLinePlaceActivity)cAppExtension.activity;\r\n                        moveLinePlaceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveMISinglepieceActivity){\r\n                        MoveMISinglepieceActivity moveMISinglepieceActivity = (MoveMISinglepieceActivity)cAppExtension.activity;\r\n                        moveMISinglepieceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity){\r\n                        MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveorderLinesPlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity){\r\n                        MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveLinePlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipSingleActivity){\r\n                        PackAndShipSingleActivity packAndShipSingleActivity = (PackAndShipSingleActivity)cAppExtension.activity;\r\n                        packAndShipSingleActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipMultiActivity){\r\n                        PackAndShipMultiActivity packAndShipMultiActivity = (PackAndShipMultiActivity)cAppExtension.activity;\r\n                        packAndShipMultiActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderSelectActivity){\r\n                        StoreorderSelectActivity storeorderSelectActivity = (StoreorderSelectActivity)cAppExtension.activity;\r\n                        storeorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderLinesActivity){\r\n                        StoreorderLinesActivity storeorderLinesActivity = (StoreorderLinesActivity)cAppExtension.activity;\r\n                        storeorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeFragmentReceiver;\r\n    private static void getBarcodeFragmentReceiver() {\r\n        if (BarcodeFragmentReceiver == null) {\r\n            BarcodeFragmentReceiver = new BroadcastReceiver(){\r\n\r\n                @Override\r\n                public void onReceive(Context context, Intent intent) {\r\n\r\n                    if (context != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(intent);\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    if (cAppExtension.dialogFragment instanceof BranchFragment) {\r\n                        BranchFragment branchFragment = (BranchFragment)cAppExtension.dialogFragment;\r\n                        branchFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof StepDoneFragment) {\r\n                        StepDoneFragment stepDoneFragment = (StepDoneFragment)cAppExtension.dialogFragment;\r\n                        stepDoneFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof WorkplaceFragment) {\r\n                        WorkplaceFragment workplaceFragment = (WorkplaceFragment)cAppExtension.dialogFragment;\r\n                        workplaceFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof CurrentLocationFragment) {\r\n                        CurrentLocationFragment currentLocationFragment = (CurrentLocationFragment)cAppExtension.dialogFragment;\r\n                        currentLocationFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof ArticleFullViewFragment) {\r\n                        ArticleFullViewFragment articleFullViewFragment = (ArticleFullViewFragment)cAppExtension.dialogFragment;\r\n                        articleFullViewFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof EnvironmentFragment) {\r\n                        EnvironmentFragment environmentFragment = (EnvironmentFragment)cAppExtension.dialogFragment;\r\n                        environmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddEnvironmentFragment) {\r\n                        AddEnvironmentFragment addEnvironmentFragment = (AddEnvironmentFragment)cAppExtension.dialogFragment;\r\n                        addEnvironmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddBinFragment) {\r\n                        AddBinFragment addBinFragment = (AddBinFragment)cAppExtension.dialogFragment;\r\n                        addBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof SetBinFragment) {\r\n                        SetBinFragment setBinFragment = (SetBinFragment)cAppExtension.dialogFragment;\r\n                        setBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddArticleFragment) {\r\n                        AddArticleFragment addArticleFragment = (AddArticleFragment)cAppExtension.dialogFragment;\r\n                        addArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanArticleFragment) {\r\n                        ScanArticleFragment scanArticleFragment = (ScanArticleFragment)cAppExtension.dialogFragment;\r\n                        scanArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n                    if (cAppExtension.dialogFragment instanceof SearchArticleFragment) {\r\n                        SearchArticleFragment searchArticleFragment = (SearchArticleFragment)cAppExtension.dialogFragment;\r\n                        searchArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanBinFragment) {\r\n                        ScanBinFragment scanBinFragment = (ScanBinFragment)cAppExtension.dialogFragment;\r\n                        scanBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof PasswordFragment) {\r\n                        PasswordFragment passwordFragment = (PasswordFragment)cAppExtension.dialogFragment;\r\n                        passwordFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ReasonFragment) {\r\n                        ReasonFragment reasonFragment = (ReasonFragment)cAppExtension.dialogFragment;\r\n                        reasonFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment  instanceof ItemPropertyTextInputFragment){\r\n                        ItemPropertyTextInputFragment itemPropertyTextInputFragment = (ItemPropertyTextInputFragment)cAppExtension.dialogFragment;\r\n                        itemPropertyTextInputFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment  instanceof DatePickerFragment){\r\n                        DatePickerFragment datePickerFragment = (DatePickerFragment)cAppExtension.dialogFragment;\r\n                        datePickerFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public static void pRegisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeIntentFilter();\r\n        cBarcodeScan.getBarcodeReceiver();\r\n\r\n        //Prevent multiple receivers on same context\r\n        if (cBarcodeScan.currentActivityContextStr.equalsIgnoreCase(cAppExtension.context.getClass().getSimpleName())) {\r\n             return;\r\n        }\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeReceiver,BarcodeIntentFilter);\r\n        cBarcodeScan.currentActivityContextStr  = cAppExtension.context.getClass().getSimpleName();\r\n\r\n\r\n\r\n    }\r\n\r\n    public static void pRegisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeFragmentIntentFilter();\r\n        cBarcodeScan.getBarcodeFragmentReceiver();\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeFragmentReceiver,BarcodeFragmentIntentFilter);\r\n\r\n    }\r\n\r\n    public static void pUnregisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n         cAppExtension.context.unregisterReceiver(BarcodeReceiver);\r\n            cBarcodeScan.currentActivityContextStr = \"\";\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void pUnregisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n            cAppExtension.context.unregisterReceiver(BarcodeFragmentReceiver);\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static cBarcodeScan pFakeScan(String pvBarcodeStr) {\r\n        cBarcodeScan result = new cBarcodeScan();\r\n        result.barcodeOriginalStr = pvBarcodeStr;\r\n        result.barcodeFormattedStr = pvBarcodeStr;\r\n        result.barcodeTypeStr = cText.pIntToStringStr( BarcodeType.Unknown);\r\n        return  result;\r\n    }\r\n\r\n    private static cBarcodeScan mGetBarcode(Intent pvIntent) {\r\n\r\n        cBarcodeScan resultBarcodeScan;\r\n\r\n        Bundle extras = pvIntent.getExtras();\r\n        String returnBarcodeStr;\r\n        String scannedBarcodeStr = \"\";\r\n        String barcodeTypeStr = \"\";\r\n\r\n\r\n        if (extras != null) {\r\n\r\n            //so who is sending us this?\r\n            if (Objects.requireNonNull(pvIntent.getAction()).equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_TC55_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODE);\r\n                String honeywellBarcodeType = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODETYPE);\r\n                barcodeTypeStr = cBarcodeScanDefinitions.pGetHoneyWellBarcodeTypeStr(honeywellBarcodeType);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        assert scannedBarcodeStr != null;\r\n\r\n        scannedBarcodeStr = mCleanBarcodeStr(scannedBarcodeStr);\r\n        returnBarcodeStr =  mCleanBarcodeStr(scannedBarcodeStr) ;\r\n\r\n        //If it's an EAN barcodeStr cut off checkdigit\r\n        assert barcodeTypeStr != null;\r\n        if (barcodeTypeStr.toUpperCase().contains(\"EAN\") ) {\r\n\r\n            if (returnBarcodeStr.length() == 13) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,12);\r\n            }\r\n\r\n            if (returnBarcodeStr.length() == 8) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,8);\r\n            }\r\n        }\r\n\r\n        if (barcodeTypeStr.contains(\"GS1\")) {\r\n            barcodeTypeStr = \"GS1-128\";\r\n        }\r\n\r\n        resultBarcodeScan = new cBarcodeScan();\r\n        resultBarcodeScan.barcodeOriginalStr = scannedBarcodeStr;\r\n        resultBarcodeScan.barcodeFormattedStr = returnBarcodeStr;\r\n        resultBarcodeScan.barcodeTypeStr = barcodeTypeStr;\r\n        resultBarcodeScan.containsCrlf = scannedBarcodeStr.contains(\"\\\\n\");\r\n\r\n\r\n\r\n        return resultBarcodeScan;\r\n    }\r\n\r\n    private static String mCleanBarcodeStr(String pvDirtyBarcodeStr) {\r\n        return  pvDirtyBarcodeStr.replaceAll(\"([\\\\r\\\\n\\\\t])\",\"\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(revision b6dae57e9cdc903f2b4c737d3d9c827f8e2edd62)
-+++ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(date 1619709127929)
-@@ -23,6 +23,7 @@
- import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;
- import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;
-+import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
- import nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;
- import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;
- import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
-@@ -285,6 +286,12 @@
-                         inventoryArticleDetailActivity.pHandleScan(barcodeScan);
-                         return;
-                     }
-+
-+                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
-+                        InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;
-+                        inventoryLinePropertyInputActivity.pHandleScan(barcodeScan);
-+                        return;
-+                    }
- 
-                     //Intake
-                     if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){
Index: .idea/shelf/Uncommitted_changes_before_Merge_at_4-5-2021_13_02_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Merge_at_4-5-2021_13_02_[Default_Changelist]/shelved.patch	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ .idea/shelf/Uncommitted_changes_before_Merge_at_4-5-2021_13_02_[Default_Changelist]/shelved.patch	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
@@ -1,59 +0,0 @@
-Index: app/build.gradle
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    defaultConfig {\r\n        applicationId \"nl.icsvertex.scansuite\"\r\n        minSdkVersion 19\r\n        targetSdkVersion 30\r\n        versionCode 15896\r\n        versionName \"1.5.8.96A\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        android.defaultConfig.vectorDrawables.useSupportLibrary = true\r\n        multiDexEnabled true\r\n\r\n        //for database history\r\n        javaCompileOptions {\r\n            annotationProcessorOptions {\r\n                arguments = [\"room.schemaLocation\": \"$projectDir/schemas\".toString()]\r\n            }\r\n        }\r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    flavorDimensions(\"default\")\r\n    productFlavors {\r\n        normal {\r\n            dimension \"default\"\r\n        }\r\n    }\r\n\r\n    lintOptions {\r\n        checkReleaseBuilds false\r\n        // Or, if you prefer, you can continue to check for errors in release builds,\r\n        // but continue the build even when errors are found:\r\n        abortOnError false\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ndependencies {\r\n\r\n    //Shimmer\r\n    implementation 'com.facebook.shimmer:shimmer:0.1.0@aar'\r\n\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.android.material:material:1.3.0'\r\n    implementation 'androidx.exifinterface:exifinterface:1.3.2'\r\n    implementation 'androidx.preference:preference:1.1.1'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n\r\n    //Firebase\r\n\r\n    implementation 'com.google.firebase:firebase-crashlytics:17.4.1'\r\n    implementation 'com.google.firebase:firebase-analytics:18.0.3'\r\n    implementation platform('com.google.firebase:firebase-bom:26.5.0')\r\n    implementation 'com.google.firebase:firebase-perf'\r\n\r\n\r\n    //Android X\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test:runner:1.3.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.google.code.ksoap2-android:ksoap2-android:3.6.1'\r\n\r\n    // Room components\r\n    implementation 'androidx.room:room-runtime:2.2.6'\r\n    annotationProcessor 'androidx.room:room-compiler:2.2.6'\r\n    androidTestImplementation 'androidx.room:room-testing:2.2.6'\r\n\r\n    // Lifecycle components\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.3.1'\r\n    //noinspection LifecycleAnnotationProcessorWithJava8\r\n    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.3.1'\r\n\r\n    //Images\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n\r\n    //Scanner (device)\r\n    implementation 'com.github.datalogic:datalogic-android-sdk:1.19.1'\r\n\r\n    //Zxing\r\n    implementation 'com.google.zxing:core:3.4.0'\r\n    implementation 'com.google.zxing:android-core:3.3.0'\r\n\r\n    //Circular image\r\n    implementation 'com.mikhaellopez:circularimageview:3.2.0'\r\n    implementation 'com.balysv:material-ripple:1.0.2'\r\n\r\n\r\n    //LeakCanary\r\n//    debugImplementation \"com.squareup.leakcanary:leakcanary-android:2.2\"\r\n}\r\n\r\n\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'com.google.firebase.crashlytics'\r\napply plugin: 'com.google.firebase.firebase-perf'
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/build.gradle	(revision 814c19680fae75ac3dd99ed73e834b4f1528ba29)
-+++ app/build.gradle	(date 1620125872002)
-@@ -6,8 +6,8 @@
-         applicationId "nl.icsvertex.scansuite"
-         minSdkVersion 19
-         targetSdkVersion 30
--        versionCode 15896
--        versionName "1.5.8.96A"
-+        versionCode 15897
-+        versionName "1.5.8.98A"
-         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
-         android.defaultConfig.vectorDrawables.useSupportLibrary = true
-         multiDexEnabled true
-Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/BranchFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.facebook.shimmer.ShimmerFrameLayout;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Branches.cBranch;\r\nimport SSU_WHS.Basics.Branches.cBranchAdapter;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class BranchFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n    private  RecyclerView branchRecyclerview;\r\n    private  Button buttonClose;\r\n\r\n    private  ShimmerFrameLayout shimmerViewContainer;\r\n\r\n    private cBranchAdapter branchAdapter;\r\n    private  cBranchAdapter getBranchAdapter(){\r\n        if (this.branchAdapter == null) {\r\n            this.branchAdapter = new cBranchAdapter();\r\n        }\r\n\r\n        return  branchAdapter;\r\n    }\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public BranchFragment() {\r\n\r\n    }\r\n    //End region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View rootview = inflater.inflate(R.layout.fragment_branch, container);\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        return rootview;\r\n    }\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        this.shimmerViewContainer.stopShimmerAnimation();\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        super.onPause();\r\n    }\r\n    @Override\r\n    public void onDestroy() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n\r\n        this.shimmerViewContainer.startShimmerAnimation();\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = getResources().getDisplayMetrics().heightPixels - getResources().getDimensionPixelSize(R.dimen.default_double_margin);\r\n\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n\r\n   //Region iICSDefaultFragment defaults\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        if (getView() != null) {\r\n            this.branchRecyclerview = getView().findViewById(R.id.branchRecyclerview);\r\n            this.buttonClose = getView().findViewById(R.id.buttonClose);\r\n            this.shimmerViewContainer = getView().findViewById(R.id.shimmerViewContainer);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.mFillRecyclerView();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetCloseListener();\r\n    }\r\n\r\n    //End Region iICSDefaultFragment defaults\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan){\r\n\r\n        String barcodeWithoutPrefixStr;\r\n\r\n        //No prefix\r\n        if (!cRegex.pHasPrefix(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            this.mBranchScanned(pvBarcodeScan.getBarcodeOriginalStr());\r\n            return;\r\n        }\r\n\r\n        boolean foundBln = false;\r\n\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.LOCATION)) {\r\n            foundBln = true;\r\n        }\r\n\r\n        //has prefix, is branch\r\n        if (foundBln) {\r\n            barcodeWithoutPrefixStr = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n            this.mBranchScanned(barcodeWithoutPrefixStr);\r\n        }\r\n        else {\r\n            //has prefix, isn't branch\r\n            cUserInterface.pDoNope(branchRecyclerview, true, true);\r\n        }\r\n    }\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private  void mBranchScanned(String pvBarcodeStr) {\r\n\r\n        cBranch branch = cBranch.pGetUserBranchByCode(pvBarcodeStr);\r\n        if (branch == null) {\r\n            cUserInterface.pDoNope(this.branchRecyclerview, true, true);\r\n            return;\r\n        }\r\n\r\n        if (cAppExtension.activity instanceof LoginActivity) {\r\n            cUser.currentUser.currentBranch = branch;\r\n            LoginActivity loginActivity = (LoginActivity)cAppExtension.activity;\r\n            loginActivity.pBranchSelected(branch);\r\n        }\r\n    }\r\n\r\n    private void mFillRecyclerView() {\r\n\r\n        this.branchRecyclerview.setHasFixedSize(false);\r\n        this.branchRecyclerview.setAdapter(this.getBranchAdapter());\r\n        this.branchRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n\r\n        //Stopping Shimmer Effect's animation after data is loaded\r\n        this.shimmerViewContainer.stopShimmerAnimation();\r\n        this.shimmerViewContainer.setVisibility(View.GONE);\r\n    }\r\n\r\n    private void mSetCloseListener() {\r\n        this.buttonClose.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (cAppExtension.dialogFragment != null) {\r\n                    cAppExtension.dialogFragment.dismiss();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/BranchFragment.java	(revision 814c19680fae75ac3dd99ed73e834b4f1528ba29)
-+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/BranchFragment.java	(date 1620112507723)
-@@ -198,6 +198,9 @@
-         //Stopping Shimmer Effect's animation after data is loaded
-         this.shimmerViewContainer.stopShimmerAnimation();
-         this.shimmerViewContainer.setVisibility(View.GONE);
-+
-+
-+
-     }
- 
-     private void mSetCloseListener() {
-Index: app/release/normal/release/output-metadata.json
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>{\r\n  \"version\": 2,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"nl.icsvertex.scansuite\",\r\n  \"variantName\": \"processNormalReleaseResources\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"versionCode\": 15895,\r\n      \"versionName\": \"1.5.8.95A\",\r\n      \"outputFile\": \"app-normal-release.apk\"\r\n    }\r\n  ]\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/release/normal/release/output-metadata.json	(revision 814c19680fae75ac3dd99ed73e834b4f1528ba29)
-+++ app/release/normal/release/output-metadata.json	(date 1619698401928)
-@@ -10,8 +10,8 @@
-     {
-       "type": "SINGLE",
-       "filters": [],
--      "versionCode": 15895,
--      "versionName": "1.5.8.95A",
-+      "versionCode": 15896,
-+      "versionName": "1.5.8.96A",
-       "outputFile": "app-normal-release.apk"
-     }
-   ]
Index: app/src/main/res/values-nl-rNL/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <string name=\"app_name\">ScanSuite</string>\r\n    <string name=\"do_something\">Doe iets</string>\r\n    <string name=\"yes\">Ja</string>\r\n    <string name=\"no\">Nee</string>\r\n    <string name=\"ok\">OK</string>\r\n    <string name=\"cancel\">Annuleer</string>\r\n    <string name=\"print\">Print</string>\r\n    <string name=\"search\">Zoek</string>\r\n    <string name=\"done\">Klaar</string>\r\n    <string name=\"nothing_here\">Er is hier nog niets</string>\r\n    <string name=\"string_divider\">/</string>\r\n    <string name=\"articleimage_thumb_description\">artikel afbeelding thumbnail</string>\r\n    <string name=\"articleimage_full_description\">artikel afbeelding</string>\r\n    <string name=\"plus_5\">+5</string>\r\n    <string name=\"plus_10\">+10</string>\r\n    <string name=\"plus_max\">max</string>\r\n    <string name=\"minus_5\">-5</string>\r\n    <string name=\"minus_10\">-10</string>\r\n    <string name=\"minus_min\">min</string>\r\n    <string name=\"device_manufacturer\">Fabrikant</string>\r\n    <string name=\"device_brand\">Merk</string>\r\n    <string name=\"device_model\">Model</string>\r\n    <string name=\"device_serialnumber\">Serienummer</string>\r\n    <string name=\"android_version\">Android versie</string>\r\n    <string name=\"application_version\">Versie</string>\r\n    <string name=\"update_file_not_found\">Update bestand niet gevonden</string>\r\n    <string name=\"webservice\">Webservice</string>\r\n    <string name=\"message_downloading\">Downloaden&#8230;</string>\r\n    <string name=\"message_webservice_live\">De webservice is wakker en bereikbaar</string>\r\n    <string name=\"message_webservice_not_live\">Kan de webservice niet bereiken</string>\r\n    <string name=\"mysettings\">Mijn instellingen</string>\r\n    <string name=\"iconattribution_freepik\">Icoontjes door Freepik van www.flaticon.com</string>\r\n    <string name=\"label_ssid\">Netwerk naam</string>\r\n    <string name=\"label_ip\">IP nummer</string>\r\n    <string name=\"label_internet_connected\">Internet?</string>\r\n    <string name=\"internet_connected\">Verbonden met het internet</string>\r\n    <string name=\"internet_not_connected\">Niet verbonden met het internet</string>\r\n    <string name=\"choose_workplace\">Waar wilt u printen?</string>\r\n    <string name=\"screentitle_main\">Welkom</string>\r\n    <string name=\"screentitle_settings\">Instellingen</string>\r\n    <string name=\"screentitle_support\">Support en info</string>\r\n    <string name=\"screentitle_language\">Taal</string>\r\n    <string name=\"screentitle_datetime\">Datum en tijd</string>\r\n    <string name=\"logo_description\">ScanSuite logo</string>\r\n    <string name=\"text_gettingready\">Momentje, we halen gegevens op.</string>\r\n    <string name=\"button_get_started\">Begin</string>\r\n    <string name=\"question_no_internet_open_settings\">Het lijkt erop dat er geen internetverbinding is. Wil je het internet instellingenscherm openen?</string>\r\n    <string name=\"open\">open</string>\r\n    <string name=\"question_no_internet_open_settings_title\">Geen internet</string>\r\n    <string name=\"mainmenu_title\">Scansuite menu</string>\r\n    <string name=\"mainmenu_home\">Home</string>\r\n    <string name=\"mainmenu_menu\">Menu</string>\r\n    <string name=\"mainmenu_settings\">Instellingen</string>\r\n    <string name=\"mainmenu_support\">Support en info</string>\r\n    <string name=\"mainmenu_language\">Taal</string>\r\n    <string name=\"mainmenu_datetime\">Datum en tijd</string>\r\n    <string name=\"changelanguage_description\">Wijzig taal</string>\r\n    <string name=\"changedatetime_description\">Wijzig datum en tijd</string>\r\n    <string name=\"tab_support_network\">Netwerk</string>\r\n    <string name=\"tab_support_application\">Applicatie</string>\r\n    <string name=\"tab_support_device\">Apparaat</string>\r\n    <string name=\"error_couldnt_get_ip\">Kan het ip nummer niet ophalen</string>\r\n    <string name=\"error_couldnt_get_ssid\">Kan de netwerknaam niet ophalen</string>\r\n    <string name=\"label_connectiontype\">Verbinding type</string>\r\n    <string name=\"connectiontype_none\">Niet verbonden</string>\r\n    <string name=\"connectiontype_wifi\">WiFi</string>\r\n    <string name=\"connectiontype_ethernet\">Ethernet</string>\r\n    <string name=\"connectiontype_mobiledata\">Mobiele data</string>\r\n    <string name=\"connectiontype_unknown\">Geen idee</string>\r\n    <string name=\"screentitle_menu\">Menu</string>\r\n    <string name=\"menuitem_external_return\">Picking return supplier</string>\r\n    <string name=\"menuitem_intake\">Ontvangst en Opslag</string>\r\n    <string name=\"menuitem_intake_eo\">Externe Ontvangsten</string>\r\n    <string name=\"menuitem_intake_ma\">Magazijnopslag</string>\r\n    <string name=\"menuitem_intake_om\">Interne Ontvangsten</string>\r\n    <string name=\"menuitem_intake_close\">Afsluiten ontvangst</string>\r\n    <string name=\"menuitem_inventory\">Inventarisatie</string>\r\n    <string name=\"menuitem_inventoryclose\">Inventarisatie sluiten</string>\r\n    <string name=\"menuitem_move\">Verplaatsen</string>\r\n    <string name=\"menuitem_move_mi\">Verplaatsen (alleen place)</string>\r\n    <string name=\"menuitem_move_mi_singlepiece\">Verplaatsen (alleen place singlepiece)</string>\r\n    <string name=\"menuitem_move_mo\">Verplaatsen (alleen picken)</string>\r\n    <string name=\"menuitem_move_mv\">Verplaatsen (pick en place)</string>\r\n    <string name=\"menuitem_moveitem\">Verplaats item</string>\r\n    <string name=\"menuitem_pick\">Pick</string>\r\n    <string name=\"menuitem_pick_pf\">Picken filiaal</string>\r\n    <string name=\"menuitem_pick_pv\">Picken verkooporders</string>\r\n    <string name=\"ordertype_pa\">Transfer pick item</string>\r\n    <string name=\"ordertype_pf\">Transfer pick vestiging</string>\r\n    <string name=\"ordertype_pv\">Pick en sorteer</string>\r\n    <string name=\"menuitem_selfpick\">Picken door klant</string>\r\n    <string name=\"menuitem_sort\">Sorteren</string>\r\n    <string name=\"menuitem_ship\">Verzenden</string>\r\n    <string name=\"ordertype_bc\">Batch picking sorteren per document</string>\r\n    <string name=\"ordertype_bm\">Picken zonder sortering op scanner</string>\r\n    <string name=\"ordertype_bp\">Batch picking sorteren per artikel</string>\r\n    <string name=\"ordertype_eom\">Externe Ontvangst Multi-user</string>\r\n    <string name=\"ordertype_eoom\">Externe Ontvangst en Opslag Multi-user</string>\r\n    <string name=\"ordertype_eoos\">Externe Ontvangst en Opslag Single-user</string>\r\n    <string name=\"ordertype_eor\">Registratie Externe Ontvangst</string>\r\n    <string name=\"ordertype_eos\">Externe Ontvangst Single-user</string>\r\n    <string name=\"ordertype_er\">Retour Leverancier</string>\r\n    <string name=\"ordertype_ivm\">Inventarisatie Multi-user</string>\r\n    <string name=\"ordertype_ivs\">Inventarisatie Single-user</string>\r\n    <string name=\"ordertype_mam\">Magazijnopslag Multi-user</string>\r\n    <string name=\"ordertype_mas\">Magazijnopslag Single-user</string>\r\n    <string name=\"ordertype_mat\">Magazijnopslag taak</string>\r\n    <string name=\"ordertype_mi\">Verplaatsen alleen plaatsen</string>\r\n    <string name=\"ordertype_mo\">Verplaatsen alleen nemen</string>\r\n    <string name=\"ordertype_mt\">Verplaats taak</string>\r\n    <string name=\"ordertype_mv\">Verplaatsen</string>\r\n    <string name=\"ordertype_mvi\">Verplaatsen item</string>\r\n    <string name=\"ordertype_omm\">Interne Ontvangst Multi-user</string>\r\n    <string name=\"ordertype_omom\">Interne Ontvangst en Magazijnopslag Multi-user</string>\r\n    <string name=\"ordertype_omos\">Interne Ontvangst en Magazijnopslag Single-user</string>\r\n    <string name=\"ordertype_omr\">Registreren Interne Ontvangst</string>\r\n    <string name=\"ordertype_oms\">Interne Ontvangst Single-user</string>\r\n    <string name=\"ordertype_rvr\">Registreren Verkoop Retour</string>\r\n    <string name=\"ordertype_rvs\">Verkoop Retour</string>\r\n    <string name=\"menuitem_return\">Retouren</string>\r\n    <string name=\"ordertype_spv\">Picken op eigen initiatief</string>\r\n    <string name=\"ordertype_unknown\">Onbekend</string>\r\n    <string name=\"screentitle_login\">Login</string>\r\n    <string name=\"hint_password\">Wachtwoord</string>\r\n    <string name=\"button_login\">Log in</string>\r\n    <string name=\"dialog_password_text\">Geef het wachtwoord voor %1$s</string>\r\n    <string name=\"dialog_password_title\">Log in</string>\r\n    <string name=\"dialog_password_incorrect\">Sorry, dat is hem niet.</string>\r\n    <string name=\"screentitle_inventory\">Inventarisatie</string>\r\n    <string name=\"screentitle_pickorderselect\">Pick orders</string>\r\n    <string name=\"pack\">Inpakken</string>\r\n    <string name=\"question_show_processingorparkedorders_message\">Er zijn nog opdrachten in de wacht of in behandeling. Wil je deze tonen?</string>\r\n    <string name=\"question_show_processingorparkedorders_title\">Alle opdrachten tonen?</string>\r\n    <string name=\"question_show\">Tonen</string>\r\n    <string name=\"question_dontshow\">Niet tonen</string>\r\n    <string name=\"screentitle_pickorderlines\">Pickregels</string>\r\n    <string name=\"tab_pickorderline_topick\">Te picken</string>\r\n    <string name=\"tab_pickorderline_picked\">Gepickt</string>\r\n    <string name=\"tab_pickorderline_total\">Totaal</string>\r\n    <string name=\"im_at\">Ik ben op</string>\r\n    <string name=\"scan_bincode\">Scan BIN</string>\r\n    <string name=\"scan_article_or_bincode\">Scan artikel of BIN</string>\r\n    <string name=\"screentitle_pickorderpick\">Picken</string>\r\n    <string name=\"message_underpick_header\">Manco bevestigen?</string>\r\n    <string name=\"message_underpick_text\">Je hebt er %1$s van deze nodig, je hebt er %2$s gepickt.\\n\\nWeet je zeker dat er geen artikelen meer beschikbaar zijn en dat je deze regel wil afsluiten?</string>\r\n    <string name=\"message_underpick_property_text\">Je hebt er %1$s van deze nodig, je hebt er %2$s gepickt.\\n\\nHet aantal wat je ingeeft in dit tabblad is het gepickte aantal voor dit artikel</string>\r\n    <string name=\"message_undermove_text\">Je hebt er %1$s van deze nodig, je hebt er %2$s verplaatst.\\n\\nWeet je zeker dat er geen artikelen meer beschikbaar zijn en dat je deze regel wil afsluiten?</string>\r\n    <string name=\"message_overpick_not_allowed\">Er mag niet meer worden gepickt dan gevraagd</string>\r\n    <string name=\"button_close_orderline\">Bevestigen</string>\r\n    <string name=\"choose_barcode\">Kies barcode</string>\r\n    <string name=\"quantity_per_scan\">Aantal per scan</string>\r\n    <string name=\"message_fill_all_properties\">Het aantal moet overal gelijk zijn</string>\r\n    <string name=\"message_property_not_allowed\">Property waarde niet toegestaan voor huidige regel</string>\r\n    <string name=\"message_underreceive_text\">Je hebt er %1$s van deze nodig, je hebt er %2$s ontvangen. \\n\\nWeet je zeker dat er geen artikelen meer beschikbaar zijn en dat je deze regel wil afsluiten?</string>\r\n    <string name=\"message_underreceive_property_text\">Je hebt er %1$s van deze nodig, je hebt er %2$s ontvangen.\\n\\nHet aantal wat je ingeeft in dit tabblad is het ontvangen aantal voor dit artikel</string>\r\n    <string name=\"filter_orderlines_title\">Toon opdrachten:</string>\r\n    <string name=\"filter_orderlines_enable\">Gebruik filters</string>\r\n    <string name=\"filter_orderlines_enable_summary\">Onderstaande filters gebruiken</string>\r\n    <string name=\"filter_orderlines_processing\">In behandeling of in de wacht</string>\r\n    <string name=\"filter_orderlines_processing_summary_on\">Deze worden getoond</string>\r\n    <string name=\"filter_orderlines_processing_summary_off\">Deze worden niet getoond</string>\r\n    <string name=\"filter_orderlines_singlearticles\">Single articles pick</string>\r\n    <string name=\"filter_orderlines_singlearticles_summary_on\">Toon ALLEEN single articles</string>\r\n    <string name=\"filter_orderlines_singlearticles_summary_off\">Maakt niet uit</string>\r\n    <string name=\"filter_orderlines_my_orders\">Aan mij toegewezen</string>\r\n    <string name=\"filter_orderlines_my_orders_summary\">Opdrachten die aan mij zijn toegewezen</string>\r\n    <string name=\"filter_orderlines_their_orders\">Aan iemand anders toegewezen</string>\r\n    <string name=\"filter_orderlines_their_orders_summary\">Opdrachten die aan iemand anders zijn toegewezen</string>\r\n    <string name=\"filter_orderlines_nobodys_orders\">Niet toegewezen</string>\r\n    <string name=\"filter_orderlines_nobodys_orders_summary\">Opdrachten die aan niemand zijn toegewezen</string>\r\n    <string name=\"filter_orderlines_apply\">Klik of swipe naar beneden</string>\r\n    <string name=\"label_swipe_up_for_filters\">Swipe omhoog voor filters</string>\r\n    <string name=\"label_swipe_down_to_hide\">Swipe naar beneden om te verbergen</string>\r\n    <string name=\"error_unspecified\">Fout</string>\r\n    <string name=\"error_unknown_barcode\">Onbekende barcode</string>\r\n    <string name=\"orderdone_header_default\">Opdracht is klaar!</string>\r\n    <string name=\"orderdone_text_default\">Je bent klaar met deze opdracht. Wil je hem sluiten?</string>\r\n    <string name=\"choose_branch\">Kies vestiging</string>\r\n    <string name=\"no_orders\">Er zijn geen opdrachten</string>\r\n    <string name=\"show_only_defects\">Toon alleen manco\\'s</string>\r\n    <string name=\"refreshorders_description\">Refresh opdrachten</string>\r\n    <string name=\"couldnt_connect\">Geen verbinding</string>\r\n    <string name=\"message_header_orderdone\">Opdracht %1$s is klaar!</string>\r\n    <string name=\"message_text_orderdone\">Je bent klaar met deze opdracht, wil je hem sluiten?</string>\r\n    <string name=\"button_close_order\">Sluit opdracht</string>\r\n    <string name=\"reset\">Reset</string>\r\n    <string name=\"message_reset_header\">Deze regel resetten?</string>\r\n    <string name=\"message_reset_text\">Het aantal wordt gereset naar 0 met status \\'te picken\\'</string>\r\n    <string name=\"button_reset\">Reset</string>\r\n    <string name=\"abort_order_abort\">Afbreken</string>\r\n    <string name=\"abort_order_order\">opdracht</string>\r\n    <string name=\"message_abort_header\">Deze opdracht afbreken?</string>\r\n    <string name=\"message_abort_text\">Alle open regels worden gesloten met aantal 0</string>\r\n    <string name=\"button_abort\">Afbreken</string>\r\n    <string name=\"message_orderbusy_header\">Opdracht nog in behandeling</string>\r\n    <string name=\"message_orderbusy_text\">Wat wil je met de huidige opdracht doen?</string>\r\n    <string name=\"message_orderbusy_accept\">Accepteren</string>\r\n    <string name=\"message_orderbusy_reject\">Afwijzen</string>\r\n    <string name=\"error_no_more_articles_to_pick\">Er zijn geen artikelen meer voor deze barcode</string>\r\n    <string name=\"error_couldnt_lock_order\">Deze opdracht kon niet gelocked worden</string>\r\n    <string name=\"comments\">opmerkingen</string>\r\n    <string name=\"button_ok\">OK</string>\r\n    <string name=\"lockorder_order_assigned_to_another_user\">Deze opdracht is toegewezen aan een andere gebruiker</string>\r\n    <string name=\"lockorder_order_already_busy_on_other_scanner\">Deze opdracht is al gelocked op een andere scanner</string>\r\n    <string name=\"lockorder_order_already_assigned_to_user\">Het lijkt erop dat je deze opdracht al op een andere scanner had geopend, wil je op deze verdergaan?</string>\r\n    <string name=\"lockorder_order_could_not_be_locked\">Deze opdracht kan niet gelocked worden</string>\r\n    <string name=\"button_lock\">Locken</string>\r\n    <string name=\"button_dont_lock\">Niet locken</string>\r\n    <string name=\"hint_current_location\">Huidige locatie</string>\r\n    <string name=\"details\">Details</string>\r\n    <string name=\"error_no_more_articles_to_sort\">Er zijn geen artikelen meer.</string>\r\n    <string name=\"message_packingtable_already_assigned\">Deze paktafel is al toegewezen aan een andere verkooporder</string>\r\n    <string name=\"message_salesorder_assigned_different_packingtable\">Deze verkooporder is al toegewezen aan een andere paktafel</string>\r\n    <string name=\"message_scan_article_first\">Scan eerst een artikel</string>\r\n    <string name=\"message_sortorderbusy_accept\">Accepteren</string>\r\n    <string name=\"message_sortorderbusy_reject\">Afwijzen</string>\r\n    <string name=\"message_sortorderbusy_text\">Wat wil je doen met de huidige opdracht?</string>\r\n    <string name=\"packing_table\">Paktafel</string>\r\n    <string name=\"question_open_sort\">Doorgaan met sorteren?</string>\r\n    <string name=\"question_open_sort_title\">Sorteren openen?</string>\r\n    <string name=\"message_scan_article\">Scan artikel</string>\r\n    <string name=\"scan_packingtable_parameter1\">Scan paktafel %1$s</string>\r\n    <string name=\"scan_sort_location\">Scan sorteer locatie</string>\r\n    <string name=\"scan_sort_location_parameter1\">Scan sorteer locatie %1$s</string>\r\n    <string name=\"screentitle_sortorderlines\">Sorteerregels</string>\r\n    <string name=\"screentitle_sortorderselect\">Sorteer opdrachten</string>\r\n    <string name=\"screentitle_sortordersort\">Sorteren</string>\r\n    <string name=\"sortorder_nothing_selected\">Selecteer een regel</string>\r\n    <string name=\"tab_sortorderline_sorted\">Gesorteerd</string>\r\n    <string name=\"tab_sortorderline_tosort\">Te sorteren</string>\r\n    <string name=\"unknow_sort_barcode_type\">Deze barcode is geen artikel en geen sorteerlocatie.</string>\r\n    <string name=\"message_sortorderbusy_header\">Sorteerregels bezig</string>\r\n    <string name=\"botton_set_currentlocation\">Zet locatie</string>\r\n    <string name=\"choose_packiging_subtitle\">Klik om aantal te wijzigen</string>\r\n    <string name=\"choose_packiging_title\">Kies verpakking</string>\r\n    <string name=\"currentlocation_header_default\">Huidige locatie</string>\r\n    <string name=\"currentlocation_text_default\">Typ of scan de huidige locatie</string>\r\n    <string name=\"error_could_not_close_order\">De opdracht kon niet afgesloten worden, prbeer het nog eens</string>\r\n    <string name=\"error_no_more_articles_to_ship\">Er zijn geen artikelen meer om te verzenden</string>\r\n    <string name=\"error_unknown_salesorder\">Onbekende verkooporder</string>\r\n    <string name=\"message_sure_leave_screen_positive\">Verlaat</string>\r\n    <string name=\"message_sure_leave_screen_negative\">Blijf</string>\r\n    <string name=\"message_sure_leave_screen_text\">Wil je dit scherm verlaten?</string>\r\n    <string name=\"message_sure_leave_screen_title\">Scherm verlaten?</string>\r\n    <string name=\"question_open_ship\">Wil je doorgaan met verzenden?</string>\r\n    <string name=\"question_open_ship_title\">Verzenden openen?</string>\r\n    <string name=\"scan_salesorder\">Scan verkooporder</string>\r\n    <string name=\"screentitle_determine_transport\">Bepaal vervoer</string>\r\n    <string name=\"screentitle_shiporderlines\">Verzendregels</string>\r\n    <string name=\"screentitle_shiporderselect\">Verzendopdracht</string>\r\n    <string name=\"screentitle_finish_shiporderselect\">Afronden inpakken</string>\r\n    <string name=\"tab_shiporderline_shipped\">Verzonden</string>\r\n    <string name=\"tab_shiporderline_total\">Totaal</string>\r\n    <string name=\"tab_shiporderline_toship\">Te verzenden</string>\r\n    <string name=\"unknown_shippingagent\">Onbekende vervoerder</string>\r\n    <string name=\"unknown_shippingagentservice\">Onbekende verzendwijze</string>\r\n    <string name=\"workplace_updated\">De werkplek is bijgewerkt.</string>\r\n    <string name=\"error_currentlocation_could_not_update\">Er is een fout opgetreden bij het bijwerken van deze opdracht</string>\r\n    <string name=\"error_unknown_shippingunit\">Onbekende verpakking</string>\r\n    <string name=\"advice_locations\">Advieslocaties</string>\r\n    <string name=\"error_unknown_or_article\">Onbekende verkoopopdracht of artikel</string>\r\n    <string name=\"error_unknown_salesorder_or_article\">Onbekende verkoopopdracht of artikel</string>\r\n    <string name=\"error_unknown_user\">Onbekende gebruiker</string>\r\n    <string name=\"no_advice_locations\">Geen advieslocaties</string>\r\n    <string name=\"parameter1_not_found\">%1$s niet gevonden</string>\r\n    <string name=\"ship_pick_at_least_one_package\">Kies een verzendeenheid</string>\r\n    <string name=\"error_scan_packintable_first\">Scan eerst een paktafel</string>\r\n    <string name=\"second\">De tweede knop</string>\r\n    <string name=\"button_open_internet_settings\">Open instellingen</string>\r\n    <string name=\"button_try_again\">Probeer nog een keer</string>\r\n    <string name=\"dialog_notsent\">Niet verzonden</string>\r\n    <string name=\"dialog_sending\">Verzenden</string>\r\n    <string name=\"dialog_sent\">Verzonden!</string>\r\n    <string name=\"fail_scannerlogon\">Scanner kon niet inloggen</string>\r\n    <string name=\"getdata_fail_scannerlogon\">Scanner kon niet inloggen</string>\r\n    <string name=\"getdata_succes_scannerlogon\">Scanner is ingelogd</string>\r\n    <string name=\"getting_data\">Data ophalen</string>\r\n    <string name=\"getting_data_header\">Data ophalen</string>\r\n    <string name=\"getting_data_text\">Momentje</string>\r\n    <string name=\"nothing_more_todo_for_bin\">Er is niets meer te doen voor deze BIN</string>\r\n    <string name=\"succes_scannerlogon\">Scanner is ingelogd</string>\r\n    <string name=\"webservice_error_header\">Oeps!</string>\r\n    <string name=\"webservice_error_text\">Er is iets mis gegaan</string>\r\n    <string name=\"message_pickcartbox_already_assigned\">Dit bakje is al toegewezen aan een andere verkooporder</string>\r\n    <string name=\"message_salesorder_assigned_different_location\">Deze verkooporder is al toegewezen aan %1$s </string>\r\n    <string name=\"message_scan_pickcart_or_salesorder\">Scan pickcart of verkooporder</string>\r\n    <string name=\"message_wrong_sourceno\">Verkeerd sourcenummer</string>\r\n    <string name=\"scan_pickcart_or_salesorder\">Scan pickcartbox of verkoopnummer</string>\r\n    <string name=\"message_unknown_pickcartbox\">Scan pickcartbox of verkoopnummer</string>\r\n    <string name=\"message_unknown_salesorder\">Onbekende verkooporder</string>\r\n    <string name=\"message_wrong_pickcartbox\">Verkeerde pickcartbox</string>\r\n    <string name=\"scan_article_or_salesorder_or_pickcartbox\">Scan artikel, VKO of pickcartbox</string>\r\n    <string name=\"number_cannot_be_lower\">Aantal mag niet lager zijn dan orderaantal</string>\r\n    <string name=\"number_cannot_be_higher\">Aantal mag niet hoger zijn dan orderaantal</string>\r\n    <string name=\"number_cannot_be_higher_than_stock\">Aantal mag niet hoger zijn dan beschikbare voorraad</string>\r\n    <string name=\"select_shippingunit\">Scan of selecteer verzendeenheid</string>\r\n    <string name=\"add_environment\">Voeg omgeving toe</string>\r\n    <string name=\"add_manually\">Voeg handmatig toe</string>\r\n    <string name=\"choose_barcode_first\">Kies eerst een barcode</string>\r\n    <string name=\"choose_environment\">Kies omgeving</string>\r\n    <string name=\"current_environment\">Huidige omgeving</string>\r\n    <string name=\"current_environment_unknown\">onbekend</string>\r\n    <string name=\"delete\">verwijder</string>\r\n    <string name=\"dialog_password_settings_button_login\">Log in</string>\r\n    <string name=\"dialog_password_settings_text\">Geef wachtwoord voor instellingen</string>\r\n    <string name=\"dialog_password_settings_title\">Log in</string>\r\n    <string name=\"environment_hint_description\">omschrijving</string>\r\n    <string name=\"environment_hint_name\">naam</string>\r\n    <string name=\"environment_hint_url\">url</string>\r\n    <string name=\"environment_label_description\">Omschrijving</string>\r\n    <string name=\"environment_label_name\">Naam</string>\r\n    <string name=\"environment_label_url\">URL</string>\r\n    <string name=\"environment_parameter1_saved\">Omgeving %1$s is opgeslagen</string>\r\n    <string name=\"environment_set_to_parameter1\">De omgeving is gezet naar: %1$s</string>\r\n    <string name=\"error_interface_version_should_be_parameter1_is_parameter2\">Interface mismatch web: %1$s lokaal: %2$s</string>\r\n    <string name=\"error_no_environments\">Selecteer eerst een omgeving</string>\r\n    <string name=\"label_current_environment\">Huidig</string>\r\n    <string name=\"manual_input_only_barcodenumber_bigger1\">Handmatige input kan alleen als barcode aantal 1 is</string>\r\n    <string name=\"message_cant_delete_active_environment\">Je kan de huidige omgeving niet verwijderen</string>\r\n    <string name=\"message_downloading_update\">Update downloaden</string>\r\n    <string name=\"parameter1_is_removed\">%1$s is verwijderd</string>\r\n    <string name=\"save\">Sla op</string>\r\n    <string name=\"undo\">herstel</string>\r\n    <string name=\"all_orders_sent\">Alle orders zijn verzonden</string>\r\n    <string name=\"could_not_get_article_image\">Afbeeldingen ophalen mislukt</string>\r\n    <string name=\"couldnt_send_line\">Regel verzenden mislukt</string>\r\n    <string name=\"error_article_scan_not_allowed\">Artikel scan is niet toegestaan</string>\r\n    <string name=\"error_couldnt_abort_order\">Order annuleren mislukt</string>\r\n    <string name=\"error_couldnt_delete_details\">Order details verwijderen mislukt</string>\r\n    <string name=\"error_couldnt_release_lock_order\">Vrijgeven order mislukt</string>\r\n    <string name=\"error_couldnt_reset_line\">Resetten regel mislukt</string>\r\n    <string name=\"error_couldnt_set_line_on_busy\">Order in behandeling nemen mislukt</string>\r\n    <string name=\"error_couldnt_unlock_order\">Order vrijgeven mislukt</string>\r\n    <string name=\"error_get_adresses_failed\">Adressen ophalen mislukt</string>\r\n    <string name=\"error_get_article_images_failed\">Afbeeldingen ophalen mislukt</string>\r\n    <string name=\"error_get_autorisations_failed\">Autorisaties ophalen mislukt</string>\r\n    <string name=\"error_get_barcodes_failed\">Barcodes ophalen mislukt</string>\r\n    <string name=\"error_get_comments_failed\">Opmerkingen ophalen mislukt</string>\r\n    <string name=\"error_get_lines_failed\">Regels van server ophalen mislukt</string>\r\n    <string name=\"error_get_pickorders_failed\">Orders van server ophalen mislukt</string>\r\n    <string name=\"error_get_workplaces_failed\">Werkplekken ophalen mislukt</string>\r\n    <string name=\"error_get_stockowner_failed\">Ophalen toegestane eigenaren mislukt</string>\r\n    <string name=\"error_getting_sort_lines_failed\">Sorteerregels ophalen mislukt</string>\r\n    <string name=\"error_inserting_salesorderpackingtable\">VKO paktafel toevoegen mislukt</string>\r\n    <string name=\"error_no_autorisations_available\">Geen autorisaties beschikbaar voor deze gebruiker</string>\r\n    <string name=\"error_no_workplaces_available\">Geen werkplekken beschikbaar voor deze vestiging</string>\r\n    <string name=\"error_unknown_autorisation\">Autorisatie is onbekend</string>\r\n    <string name=\"error_unknown_branch\">Onbekende vestiging</string>\r\n    <string name=\"error_updating_processing_sequence\">VKO/Tijdelijke locatie bijwerken mislukt</string>\r\n    <string name=\"feedback\">Feedback</string>\r\n    <string name=\"invalid_user_not_assigned\">invalid_user_not_assigned</string>\r\n    <string name=\"lines_to_be_send\">Er zijn nog regels die verzonden moeten worden</string>\r\n    <string name=\"message_another_user_already_started\">Een andere gebruiker heeft de order in behandeling genomen:</string>\r\n    <string name=\"message_couldnt_unlock_order\">Kon de order niet vrijgeven</string>\r\n    <string name=\"message_meant_for_other_user\">De order is aan iemand anders toegewezen:</string>\r\n    <string name=\"message_select_one_of_multiple_barcodes\">Meerdere barcodes beschikbaar, selecteer er één</string>\r\n    <string name=\"message_unknown_barcode\">Onverwachte barcode</string>\r\n    <string name=\"mutiple_barcodes_posible\">Meerdere barcodes mogelijk</string>\r\n    <string name=\"no_barcodes_availabe_for_this_line\">Geen barcodes beschikbaar voor deze regel</string>\r\n    <string name=\"nothing_more_todo_for_article\">Geen openstaande regels voor gescand artikel</string>\r\n    <string name=\"order_cant_be_started\">Order kan niet gestart worden</string>\r\n    <string name=\"order_done_button\">Order afgerond!</string>\r\n    <string name=\"order_done_close\">Sluit</string>\r\n    <string name=\"order_will_be_deleted\">Order wordt verwijderd</string>\r\n    <string name=\"password_header_default\">Wachtwoord</string>\r\n    <string name=\"password_hint_default\">wachtwoord</string>\r\n    <string name=\"password_text_default\">Geef wachtwoord in</string>\r\n    <string name=\"previous_barcode_could_not_be_deleted\">Bekende barcodes konden niet verwijderd worden</string>\r\n    <string name=\"send_order\">Resultaten (opnieuw) versturen</string>\r\n    <string name=\"error_couldnt_handle_step\">Deze stap kon niet afgehandeld worden</string>\r\n    <string name=\"hold_the_order\">Order tegengehouden</string>\r\n    <string name=\"message_empty_description\">Omschrijving is niet gevuld</string>\r\n    <string name=\"message_empty_isdefault\">Default waarde niet gevuld</string>\r\n    <string name=\"message_empty_name\">Naam is niet gevuld</string>\r\n    <string name=\"message_empty_URL\">URL is niet gevuld</string>\r\n    <string name=\"error_get_sorting_detals_failed\">Sorteer details ophalen mislukt</string>\r\n    <string name=\"scan_pickcartbox\">Scan bakje</string>\r\n    <string name=\"all_lines_sent\">Alle regels zijn verzonden</string>\r\n    <string name=\"error_article_scan_mandatory\">Alleen artikelscans toegestaan</string>\r\n    <string name=\"message_scan_packinglocation_or_salesorder\">Scan paktafel of verkooporder</string>\r\n    <string name=\"scan_article_or_sort_location\">Scan artikel of sorteerlocatie</string>\r\n    <string name=\"couldnt_update_line\">De regel kon niet bijgewerkt worden</string>\r\n    <string name=\"error_get_linebarcodes_failed\">Ophalen regel barcodes mislukt</string>\r\n    <string name=\"message_progress_to_send\">Er is nog progressie die overgezonden moet worden</string>\r\n    <string name=\"message_send\">Verzend</string>\r\n    <string name=\"message_send_now\">Wil je nu verzenden?</string>\r\n    <string name=\"error_no_shippingagents_available\">There are no shipping agents available</string>\r\n    <string name=\"error_getting_pack_and_ship_lines_failed\">Verzendregels ophalen mislukt</string>\r\n    <string name=\"error_getting_packages_failed\">Verzendeenheden ophalen mislukt</string>\r\n    <string name=\"error_no_shippingagent_services_available\">Geen vervoerder afdelingen beschikbaar</string>\r\n    <string name=\"error_no_shippingagent_services_units_available\">Geen vervoerder afdeling verzendeenheden beschikbaar</string>\r\n    <string name=\"message_article_not_allowed\">Artikel scan niet toegestaan</string>\r\n    <string name=\"dialog_error\">Fout informatie</string>\r\n    <string name=\"add_bin_header_default\">Locatie toevoegen</string>\r\n    <string name=\"button_add_bin\">Toevoegen</string>\r\n    <string name=\"button_create_inventory\">Aanmaken</string>\r\n    <string name=\"button_new_inventoryorder\">Nieuw</string>\r\n    <string name=\"createinventory_header_default\">Inventarisatie aanmaken</string>\r\n    <string name=\"createinventory_text_default\">Wilt u een nieuwe inventarisatie opdracht aanmaken?</string>\r\n    <string name=\"dont_care\">Negeer</string>\r\n    <string name=\"tab_inventorybin_done\">klaar</string>\r\n    <string name=\"hint_document_inventory\">Document</string>\r\n    <string name=\"message_add_article_now_allowed\">Artikel toevoegen niet toegestaan</string>\r\n    <string name=\"message_adding_erp_article_failed\">ERP artikel toevoegen met barcode %1$s mislukt</string>\r\n    <string name=\"message_close_inventoryorder_text\">U gaat de inventarisatie verzenden, weet u het zeker?</string>\r\n    <string name=\"message_close_inventoryorder\">Inventarisatie afronden</string>\r\n    <string name=\"message_adding_line_failed\">Regel toevoegen mislukt</string>\r\n    <string name=\"message_adding_unkown_article_failed\">Onbekend artikel toevoegen mislukt</string>\r\n    <string name=\"message_add_article_for_this_bin_now_allowed\">Artikel hoort bij een andere locatie, regels toevoegen is niet toegestaan</string>\r\n    <string name=\"message_bin_added\">Locatie %1$s is toegevoegd</string>\r\n    <string name=\"message_bin_not_added\">Locatie %1$s is niet toegevoegd</string>\r\n    <string name=\"message_bin_could_not_be_added_via_webservice\">Locatie kon niet worden toegevoegd via de web service</string>\r\n    <string name=\"error_get_inventorylines_failed\">Inventarisatieregels van server ophalen mislukt</string>\r\n    <string name=\"error_get_inventoryorders_failed\">Inventarisatie opdrachten ophalen van server mislukt</string>\r\n    <string name=\"message_license_error\">Licentie ophalen mislukt</string>\r\n    <string name=\"error_get_line_barcodes_failed\">Regel barcodes ophalen mislukt</string>\r\n    <string name=\"screentitle_inventoryorderbins\">Inventarisatie locaties</string>\r\n    <string name=\"screentitle_inventoryordercount\">Inventarisatie telling</string>\r\n    <string name=\"screentitle_inventoryorderselect\">Inventarisatie</string>\r\n    <string name=\"message_license_release_error\">Licentie vrijgeven mislukt</string>\r\n    <string name=\"tab_inventorybin_todo\">open</string>\r\n    <string name=\"message_couldnt_create_order\">Order kon niet aangemaakt worden</string>\r\n    <string name=\"orders\">opdrachten</string>\r\n    <string name=\"message_line_save_failed\">Opslaan van regel mislukt, probeer het nogmaals</string>\r\n    <string name=\"hint_add_bin\">Geef locatie in</string>\r\n    <string name=\"show_all\">Toon alles</string>\r\n    <string name=\"shown\">getoond</string>\r\n    <string name=\"error_barcode_doesnt_belong_to_line\">Deze barcode hoort niet bij deze regel</string>\r\n    <string name=\"tab_inventorybin_total\">totaal</string>\r\n    <string name=\"message_workplace_not_updated\">Werkplek op server bijwerken mislukt</string>\r\n    <string name=\"message_workplace_selected\">Werkplek geselecteerd</string>\r\n    <string name=\"message_add_bin_not_allowed\">Het is niet toegestaan om een locatie toe te voegen</string>\r\n    <string name=\"items\">Stuks</string>\r\n    <string name=\"lines\">Regels</string>\r\n    <string name=\"message_close_order_text\">U gaat de opdracht sluiten, weet u het zeker?</string>\r\n    <string name=\"message_bin_already_closed\">Deze locatie is reeds gesloten, scan een andere locatie.</string>\r\n    <string name=\"message_bin_text_sure\">Deze locatie is leeg, weet u het zeker?</string>\r\n    <string name=\"message_reset_line_via_webservice_failed\">Resetten regel via webservice is mislukt.</string>\r\n    <string name=\"message_reset_bin_via_webservice_failed\">Resetten locatie via webservice is mislukt.</string>\r\n    <string name=\"message_removing_line_failed\">Regel verwijderen mislukt.</string>\r\n    <string name=\"message_bin_close_failed\">Locatie afsluiten mislukt.</string>\r\n    <string name=\"message_close_order\">Sluit opdracht</string>\r\n    <string name=\"message_close_bin\">Sluit locatie</string>\r\n    <string name=\"scan_article_header_default\">Scan artikel</string>\r\n    <string name=\"add_article_header_default\">Voeg artikel toe</string>\r\n    <string name=\"search_article_header_default\">Zoek artikel</string>\r\n    <string name=\"button_add_article\">Voeg artikel toe</string>\r\n    <string name=\"error_get_intakelines_failed\">Regels ophalen mislukt</string>\r\n    <string name=\"error_get_intakeorders_failed\">Orders ophalen mislukt</string>\r\n    <string name=\"hint_add_itemno\">Geef artikelnummer in</string>\r\n    <string name=\"hint_add_variantcode\">Geef variantcode in</string>\r\n    <string name=\"hint_add_barcode\">Scan of typ barcode</string>\r\n    <string name=\"hint_add_article\">Geef artikel in</string>\r\n    <string name=\"message_accept_switch\">Accepteer tabblad wissel</string>\r\n    <string name=\"message_cancel_switch\">Annuleer wissel</string>\r\n    <string name=\"message_accept_line\">Accepteer scans</string>\r\n    <string name=\"message_accept\">Accepteer</string>\r\n    <string name=\"message_cancel\">Annuleer</string>\r\n    <string name=\"message_cancel_line\">Annuleer scans</string>\r\n    <string name=\"message_close\">Afronden</string>\r\n    <string name=\"message_leave\">Verlaat</string>\r\n    <string name=\"screentitle_intakeorderselect\">Ontvangst</string>\r\n    <string name=\"screentitle_intakeorderlines\">Regels</string>\r\n    <string name=\"message_shipping_basics_invalid\">Stamgegevens voor deze order ontbreken, kan daardoor niet verzonden worden</string>\r\n    <string name=\"tab_done\">Gedaan</string>\r\n    <string name=\"tab_todo\">Te doen</string>\r\n    <string name=\"tab_total\">Totaal</string>\r\n    <string name=\"message_bin_not_valid\">Onbekende BIN</string>\r\n    <string name=\"message_bin_or_item_missing\">BIN of artikel ontbreekt</string>\r\n    <string name=\"message_bin_wrong\">BIN verkeerd</string>\r\n    <string name=\"message_current_line_missing\">Huidige regel niet bekend</string>\r\n    <string name=\"message_extra_items_not_allowed\">Nieuwe items niet toegestaan</string>\r\n    <string name=\"message_extra_pieces_not_allowed\">Extra aantallen niet toegestaan</string>\r\n    <string name=\"message_no_lines_for_this_bin\">Er zijn geen regels bekend voor deze BIN</string>\r\n    <string name=\"message_wrong_bin\">BIN verkeerd</string>\r\n    <string name=\"screentitle_intake\">Ontvangst/Opslag</string>\r\n    <string name=\"android_no_codename\">Geen codenaam</string>\r\n    <string name=\"application_unknown_install_date\">Onbekende installatie datum</string>\r\n    <string name=\"battery_ac\">AC</string>\r\n    <string name=\"battery_at_parameter1_percent\">Batterij is op %1$s%%</string>\r\n    <string name=\"battery_ischarging_over_parameter1\">Batterij wordt opgeladen via %1$s</string>\r\n    <string name=\"battery_isnotcharging\">Batterij laadt niet op</string>\r\n    <string name=\"battery_power_connected\">Verbonden</string>\r\n    <string name=\"battery_power_disconnected\">Niet verbonden</string>\r\n    <string name=\"battery_unknownnotcharging\">Weet niet zeker of de batterij wordt opgeladen</string>\r\n    <string name=\"battery_usb\">USB</string>\r\n    <string name=\"battery_wireless\">draadloos</string>\r\n    <string name=\"label_application_installed\">Geinstalleerd op</string>\r\n    <string name=\"message_bin_not_allowed\">Locatie scans niet toegestaan</string>\r\n    <string name=\"hint_document_receive\">Document</string>\r\n    <string name=\"hint_stockowner\">Eigenaar</string>\r\n    <string name=\"message_close_now\">Nu sluiten</string>\r\n    <string name=\"message_finish_later\">Later afmaken</string>\r\n    <string name=\"message_no_lines_for_this_barcode\">Geen regels beschikbaar voor deze barcode</string>\r\n    <string name=\"message_zero_lines_cant_be_reset\">Regels met aantal 0 kunnen niet gereset worden</string>\r\n    <string name=\"message_bin_unknown\">Locatie %1$s onbekend voor deze vestiging</string>\r\n    <string name=\"multiple_barcodes\">Meerdere barcodes</string>\r\n    <string name=\"message_unknown_barcode_for_this_line\">Onbekende barcode voor deze regel</string>\r\n    <string name=\"message_adding_or_changing_bin_now_allowed\">\"Locaties toevoegen/wijzigen is niet toegestaan \"</string>\r\n    <string name=\"quantity_scanned\">Aantal gescanned:</string>\r\n    <string name=\"error_unknown_location\">Onbekende locatie</string>\r\n    <string name=\"message_split_line\">Splits regel</string>\r\n    <string name=\"supervisor_password_header\">Supervisor</string>\r\n    <string name=\"supervisor_password_text\">Voor deze actie is een supervisor wachtwoord nodig</string>\r\n    <string name=\"application_unknown_update_date\">Onbekende update datum</string>\r\n    <string name=\"label_application_last_update\">Laatste update</string>\r\n    <string name=\"text_copied_to_clipboard\">Tekst is gekopieerd</string>\r\n    <string name=\"text_not_copied_to_clipboard\">Tekst is niet gekopieerd</string>\r\n    <string name=\"button_create_move\">Creeer</string>\r\n    <string name=\"couldnt_send_line_no_connection\">Kan regels niet verzenden omdat er geen internet connectie is</string>\r\n    <string name=\"createmove_header_default\">Creeer verplaatsopdracht</string>\r\n    <string name=\"createmove_text_default\">Nieuwe verplaatsopdracht creeeren?</string>\r\n    <string name=\"error_get_movelines_failed\">Verplaatsregels ophalen mislukt.</string>\r\n    <string name=\"error_get_moveorders_failed\">Verplaats opdrachten ophalen mislukt.</string>\r\n    <string name=\"message_bin_empty_close\">Wil je de BIN sluiten ondanks dat er niks gescanned is?</string>\r\n    <string name=\"message_close_bin_with_progress\">U heeft al progressie gemaakt. Wilt u de BIN echt sluiten?</string>\r\n    <string name=\"message_close_storeorder_text\">U heeft %1$s items opgeslagen\\nU moest %2$s items opslaan\\n\\n%3$s\\n\\nWilt u de order sluiten?</string>\r\n    <string name=\"message_close_generated_storeorder_text\">U heeft %1$s items opgeslagen\\n\\n\\nWilt u de order sluiten?</string>\r\n    <string name=\"message_moveorderbusy_header\">Orderregel nog bezig.</string>\r\n    <string name=\"message_unknown_bin\">Onbekende locatie</string>\r\n    <string name=\"screentitle_moveorderlines\">Verplaats regels</string>\r\n    <string name=\"screentitle_moveorderselect\">Verplaats opdrachten</string>\r\n    <string name=\"screentitle_move_mi_singlepiece\">Verplaatsen Plaats Singlepiece</string>\r\n    <string name=\"screentitle_moveordertake\">Nemen</string>\r\n    <string name=\"show_only_deviations\">Te doen/afwijkingen tonen</string>\r\n    <string name=\"stored\">Opgeslagen:</string>\r\n    <string name=\"tab_moveorderline_done\">Klaar</string>\r\n    <string name=\"tab_moveorderline_notdone\">Niet klaar</string>\r\n    <string name=\"tab_moveorderline_total\">Totaal</string>\r\n    <string name=\"message_exactly_what_you_needed\">De opdracht is conform</string>\r\n    <string name=\"message_bin_required\">Scan een BIN</string>\r\n    <string name=\"connected\">Verbonden</string>\r\n    <string name=\"message_checking_connection\">Connectie controleren.....</string>\r\n    <string name=\"message_no_connection_header\">Geen connectie</string>\r\n    <string name=\"message_no_connection_try_again\">Geen connectie, probeer nogmaals</string>\r\n    <string name=\"message_please_wait\">Een moment…</string>\r\n    <string name=\"not_connected\">Niet verbonden</string>\r\n    <string name=\"error_get_bins_failed\">Locaties ophalen van server mislukt</string>\r\n    <string name=\"error_get_possible_bins_failed\">Mogelijke locaties ophalen van server mislukt</string>\r\n    <string name=\"message_location_incorrect\">Vestiging niet juist</string>\r\n    <string name=\"message_scan_destination\">Scan vestiging</string>\r\n    <string name=\"message_scan_is_not_location\">U dient een vestiging te scannen</string>\r\n    <string name=\"supervisor_deviations_password_text\">U moet een supervisor zijn om dit uit te voeren omdat er afwijkingen zijn waargenomen</string>\r\n    <string name=\"zero\">0</string>\r\n    <string name=\"error_get_returnorderlines_failed\">Ophalen retourregels mislukt</string>\r\n    <string name=\"error_get_returnorders_failed\">Ophalen retouren mislukt</string>\r\n    <string name=\"message_bin_not_allowed_for_return\">Locatie niet toegestaan voor retour</string>\r\n    <string name=\"message_close_document\">Sluit document</string>\r\n    <string name=\"message_document_add_not_allowed\">Niet toegestaan een document toe te voegen</string>\r\n    <string name=\"message_document_close_fail\">Document sluiten mislukt</string>\r\n    <string name=\"message_document_text_sure\">Weet u zeker dat u klaar bent met het document</string>\r\n    <string name=\"message_remove_return_order\">Retour verwijderen mislukt</string>\r\n    <string name=\"message_scan_return_bin\">Scan retour locatie</string>\r\n    <string name=\"message_scan_return_document\">Scan retour document</string>\r\n    <string name=\"message_select_stockowner\">Selecteer een Eigenaar</string>\r\n    <string name=\"multiple_documents\">Meerdere documenten</string>\r\n    <string name=\"create_return\">Aanmaken retour</string>\r\n    <string name=\"createreturn_text_default\">Nieuw retour creëren</string>\r\n    <string name=\"screentitle_return\">Retour</string>\r\n    <string name=\"screentitle_returnorderdocument\">Retour document</string>\r\n    <string name=\"button_add_document\">Document toevoegen</string>\r\n    <string name=\"add_document_header_default\">Document toevoegen</string>\r\n    <string name=\"error_get_returnordersdocuments_failed\">Retourdocumenten ophalen mislukt</string>\r\n    <string name=\"error_getting_return_reasons\">Ophalen retour redenen mislukt</string>\r\n    <string name=\"choose_reason\">Kies retourreden</string>\r\n    <string name=\"hint_add_reason\">Scan of selecteer reden</string>\r\n    <string name=\"select_reason_switch\" translatable=\"false\">Select_reason_switch</string>\r\n\r\n    <!--Region plurals-->\r\n    <plurals name=\"plural_orders\">\r\n        <item quantity=\"one\">opdracht</item>\r\n        <item quantity=\"other\">opdrachten</item>\r\n    </plurals>\r\n\r\n    <plurals name=\"plural_parameter1_orders\">\r\n        <item quantity=\"one\">%d opdracht</item>\r\n        <item quantity=\"other\">%d opdrachten</item>\r\n    </plurals>\r\n    <string name=\"mainmenu_environments\">Omgevingen</string>\r\n    <string name=\"select_reason\">Selecteer retourreden</string>\r\n    <string name=\"screentitle_returnorderdocuments\">Retour documenten</string>\r\n    <string name=\"scan_or_select_document\">Scan of selecteer document</string>\r\n    <string name=\"message_clear_reason\">Verwijder reden</string>\r\n    <string name=\"message_shipment_already_checked\">Deze zending is reeds gechecked</string>\r\n    <string name=\"message_shipment_already_handled\">Deze zending is reeds behandeld</string>\r\n    <string name=\"message_reason_scan_not_allowed\">Retourreden scan is niet toegestaan</string>\r\n    <string name=\"hint_add_packingslip\">Pakbon</string>\r\n    <string name=\"message_document_already_active\">Dit document is het huidige document</string>\r\n    <string name=\"message_reason_unknown\">Retourreden onbekend</string>\r\n    <string name=\"message_scan_reason_first\">Geef reden in voordat u een nieuw artikel scanned</string>\r\n    <string name=\"message_close_receiveorder_generated_text\">U heeft %1$s items ontvangen\\n\\nWilt u de opdracht sluiten?</string>\r\n    <string name=\"create_external_receive\">Creeer externe ontvangst</string>\r\n    <string name=\"error_could_not_invalidate_order\">Opdracht vervallen mislukt</string>\r\n    <string name=\"message_scan_receive_document\">Scan/type document</string>\r\n    <string name=\"screentitle_receive\">Ontvangen</string>\r\n    <string name=\"message_order_invalidated\">Order is vervallen</string>\r\n    <string name=\"message_scan_receive_bin\">Scan ontvangst locatie</string>\r\n    <string name=\"message_bin_not_allowed_for_receive\">BIN niet geschikt voor ontvangst</string>\r\n    <string name=\"message_check_barcodes\">Controleer barcodes bij ERP</string>\r\n    <string name=\"order_has_deleted_by_erp\">Order verwijderd door ERP</string>\r\n    <string name=\"message_extra_items\">EXTRA ontvangen</string>\r\n    <string name=\"message_less_items\">MINDER ontvangen</string>\r\n    <string name=\"message_next_activity_not_found\">Volgende activeit kan niet worden gevonden</string>\r\n    <string name=\"message_current_shipment_unknown\">Huidige zending onbekend</string>\r\n    <string name=\"message_shipping_agent_unkown_or_empty\">Vervoerder onbekend of leeg</string>\r\n    <string name=\"message_shipping_agentservice_shippingingunits_unkown_or_empty\">Paketten onbekend of leeg</string>\r\n    <string name=\"message_shipping_agentservice_unkown_or_empty\">Vervoerder afdeling leeg of onbekend</string>\r\n    <string name=\"screentitle_inventorybincount\">Locatie aantal</string>\r\n    <string name=\"error_get_next_activity_failed\">Volgende activiteit ophalen mislukt</string>\r\n    <string name=\"message_locking_order_failed\">Opdracht blokkeren mislukt</string>\r\n    <string name=\"message_order_not_created\">Opdracht kon niet aangemaakt worden</string>\r\n    <string name=\"message_scan_is_not_document\">De scan komt niet overeen met een document, scan een document</string>\r\n    <string name=\"message_unknown\">Onbekend</string>\r\n    <string name=\"message_orderlinebusy_header\">Regel in behandeling</string>\r\n    <string name=\"message_orderlinebusy_text\">Regel nog in behandeling, weet u zeker dat u de huidige scans wilt laten vervallen?</string>\r\n    <string name=\"message_add_item\">Item toevoegen</string>\r\n    <string name=\"message_add_item_are_you_sure\">U heeft een onverwacht item gescand:\\n\\n%1$s\\n\\nWeet u zeker dat u dit item wilt toevoegen?</string>\r\n    <string name=\"number_received_total_cant_be_higher_then\">Het is niet toegestaan om meer dan %1$s stuks van dit artikel te ontvangen</string>\r\n    <string name=\"number_received_total_eminently_more\">U staat op het punt om %1$s stuks te ontvangen\\n\\nDit is aanzienlijk meer dan het verwachte aantal van %2$s stuks\\n\\nWeet u het zeker?</string>\r\n    <string name=\"message_more_then_expected\">Aantal hoger dan verwacht</string>\r\n    <string name=\"message_reset_variant_via_webservice_failed\">Resetten variant via webservice mislukt</string>\r\n    <string name=\"create_move\">Creeer verplaats opdracht</string>\r\n    <string name=\"tab_moveorderline_take\">Neem</string>\r\n    <string name=\"tab_moveorderline_place\">Plaats</string>\r\n    <string name=\"screentitle_moveline_take\">Neem artikel</string>\r\n    <string name=\"screentitle_moveline_place\">Plaats artikel</string>\r\n    <string name=\"message_article_required\">Artikel verplicht</string>\r\n    <string name=\"inventory_orders\">opdrachten</string>\r\n    <string name=\"no_inventory_orders\">Geen open inventarisatie opdrachten</string>\r\n    <string name=\"image_view_battery\">image view battery</string>\r\n    <string name=\"imageview_is_charging\">imageview is charging</string>\r\n    <string name=\"message_no\">Nee</string>\r\n    <string name=\"message_yes\">Ja</string>\r\n    <string name=\"screentitle_packaging\">Emballage</string>\r\n    <string name=\"message_no_packaging_units_defined\">Geen emballage eenheden gedefinieerd</string>\r\n    <string name=\"message_close_packaging\">Emballage sluiten</string>\r\n    <string name=\"message_close_packaging_text\">Wilt u emballage sluiten?\\n\\nU heeft de volgende eenheden ingegeven:\\n\\n%1$s</string>\r\n    <string name=\"close_dialog\">Sluit venster</string>\r\n    <string name=\"message_close_packaging_question\">Emballage sluiten?</string>\r\n    <string name=\"error_unknown_packagingunit\">Onbekende emballage eenheid</string>\r\n    <string name=\"message_open_packaging_text\">Is er sprake van emballage?</string>\r\n    <string name=\"error_get_packaging_failed\">Verpakkingen ophalen mislukt</string>\r\n    <string name=\"message_extra_pieces_exceeded_header\">Extra aantal toegestaan overschreden</string>\r\n    <string name=\"message_approve\">Akkoord</string>\r\n    <string name=\"tab_in\">In</string>\r\n    <string name=\"tab_out\">Uit</string>\r\n    <string name=\"tab_selected\">Geselecteerd</string>\r\n    <string name=\"message_quantity_sourceno\">Aantal in inkooporder:</string>\r\n    <string name=\"message_scan_bin_first\">Scan eerst een locatie</string>\r\n    <string name=\"message_close_action_first_before_new_bin\">Sluit deze regel, voordar je een nieuwe locatie scanned</string>\r\n    <string name=\"message_already_exists_reset_first\">Er bestaat al een regel voor dit artikel en deze BIN, als je deze regel wilt muteren dien je de regel te resetten</string>\r\n    <string name=\"message_no_stock_available\">Geen voorraad beschikbaar</string>\r\n    <string name=\"message_no_sorting_location_adviced\">Geen advieslocatie</string>\r\n    <string name=\"message_scan_bin_or_article\">Scan BIN of Artikel</string>\r\n    <string name=\"message_scan_article_or_close_line\">Scan artikel of sluit regel</string>\r\n    <string name=\"message_scan_bin\">Scan BIN</string>\r\n    <string name=\"message_unknown_article\">Onbekend artikel</string>\r\n    <string name=\"message_no_place_lines_for_article\">Er is niets te plaatsen voor dit artikel</string>\r\n    <string name=\"message_barcode_unknown_ERP\">Gescande barcode  %1$s niet herkend door ERP</string>\r\n    <string name=\"message_previous_line_send\">Vorige regel is verzonden</string>\r\n    <string name=\"message_unknown_itemvariant\">Onbekend ItemVariant</string>\r\n    <string name=\"message_itemvariant_not_taken_so_cant_be_placed\">ItemVariant niet gepakt, dus er is niks te plaatsen</string>\r\n    <string name=\"show_only_todo\">Toon te doen</string>\r\n    <string name=\"message_itemvariant_unknown\">ItemVariant onbekend</string>\r\n    <string name=\"message_already_placed_so_not_possible\">U kunt deze regel niet resetten omdat er al geplaatste regels voor deze ItemVariant bestaan</string>\r\n    <string name=\"message_shipment_unkown_or_already_send\">Zending onbekend of reeds verzonden</string>\r\n    <string name=\"screentitle_bin_stock\">BIN voorraad</string>\r\n    <string name=\"screentitle_article_stock\">Artikel voorraad</string>\r\n    <string name=\"actionsmenu_title\">Acties</string>\r\n    <string name=\"message_place_line_already_exists\">\"Er bestaat al een plaats regel voor dit artikel op deze BIN, als u wilt muteren dient u deze regel te resetten \"</string>\r\n    <string name=\"ordertype_combined\">Samengevoegde order</string>\r\n    <string name=\"bin_stock\">BIN voorraad</string>\r\n    <string name=\"article_stock\">Artikel voorraad</string>\r\n    <string name=\"check_barcode\">Controleer barcode</string>\r\n    <string name=\"pair_pro_glove\">Koppel Pro Glove</string>\r\n    <string name=\"tab_to_select\">Te selecteren</string>\r\n    <string name=\"combine_picks\">Picks samenvoegen</string>\r\n    <string name=\"select_single_pick\">Selecteer enkele pick</string>\r\n    <string name=\"couldnt_update_order\">Order kan niet bijgewerkt worden</string>\r\n    <string name=\"message_unknown_order\">Onbekende opdracht</string>\r\n    <string name=\"couldnt_create_combined_order\">Gecombineerde opdracht aanmaken mislukt</string>\r\n    <string name=\"couldnt_remove_order_from_combined_order\">Opdracht uit gecombineerde order verwijderen mislukt</string>\r\n    <string name=\"couldnt_remove_combined_order\">Gecombineerde opdracht verwijderen mislukt</string>\r\n    <string name=\"screentitle_qcorderselect\">Kwaliteitscontrole opdrachten</string>\r\n    <string name=\"menuitem_qc\">Kwaliteitscontrole</string>\r\n    <string name=\"screentitle_qclines\">Kwaliteitscontrole regels</string>\r\n    <string name=\"screentitle_qcorders\">Kwaliteitscontrole orders</string>\r\n    <string name=\"error_no_more_articles_to_check\">Er is niks meer om te controleren</string>\r\n    <string name=\"tab_qcorderline_tocheck\">Te checken</string>\r\n    <string name=\"tab_qcorderline_checked\">Gecheckt</string>\r\n    <string name=\"screentitle_qc\">Kwaliteitscontrole</string>\r\n    <string name=\"message_correcy_line_header\">Regel corrigeren?</string>\r\n    <string name=\"message_underplace_text\">Te weinig geplaatst\\n\\nJe wilt %1$s items plaatsen\\n\\Je houdt %2$s te plaatsen items over\\n\\nMaar je kan  nog maximaal %3$s plaatsen op andere locatie(s)</string>\r\n    <string name=\"message_undercheck_text\">Er zijn %1$s items gepickt\\n\\Er zijn %2$s items gecheckt\\n\\nWeet je zeker dat u het gepickte aantal wilt corrigeren?</string>\r\n    <string name=\"message_pick_done\">Pick fase afronden</string>\r\n    <string name=\"message_close_pick_fase\">U bent klaar met picken, wilt u de pick fase afronden?</string>\r\n    <string name=\"message_sort_done\">Sorteren afronden?</string>\r\n    <string name=\"message_close_sort_fase\">Wilt u het sorteren afronden?</string>\r\n    <string name=\"message_qcdone\">Kwaliteitscontrole afronden?</string>\r\n    <string name=\"message_close_qc_fase\">Wilt u de kwaliteitscontrole afronden?</string>\r\n    <string name=\"message_packandshipdone\">Verzenden afronden?</string>\r\n    <string name=\"message_close_packandship_fase\">Wilt u verzenden afronden?</string>\r\n    <string name=\"hint_input_bin\">Scan of type BIN</string>\r\n    <string name=\"scan_bin_header_default\">Scan BIN</string>\r\n    <string name=\"error_get_settings_failed\">Ophalen instellingen mislukt</string>\r\n    <string name=\"screentitle_moveorderlines_take\">Verplaatsregels nemen</string>\r\n    <string name=\"message_no_lines_for_this_bin_and_article\">Geen regels beschikbaar voor deze BIN en het gescande artikel</string>\r\n    <string name=\"message_line_reset_succesfull\">De regel is gereset</string>\r\n    <string name=\"close_take\">Sluit NEMEN</string>\r\n    <string name=\"screentitle_moveorderlines_place\">Verplaatsregels PLAATSEN</string>\r\n    <string name=\"message_close_place\">Sluit plaatsen?</string>\r\n    <string name=\"message_close_place_text\">Weet u zeker dat u het PLAATSEN wilt sluiten?</string>\r\n    <string name=\"menuitem_finish_ship\">Afronden Inpakken</string>\r\n    <string name=\"message_scanning_not_allowed\">U kunt hier niet scannen</string>\r\n    <string name=\"message_print_failed\">Printen mislukt</string>\r\n    <string name=\"screentitle_barcodeinfo\">Barcode info</string>\r\n    <string name=\"barcode_info\">Barcode info</string>\r\n    <string name=\"novalueyet\">\\---</string>\r\n    <string name=\"none\">geen</string>\r\n    <string name=\"enter_BIN\">BIN ingeven</string>\r\n    <string name=\"message_identifier_unknown\">Identifier onbekend</string>\r\n    <string name=\"identifier\">Identificatie</string>\r\n    <string name=\"info\">Info</string>\r\n    <string name=\"destination\">Bestemming</string>\r\n    <string name=\"destination_invalid\">Bestemming onjuist</string>\r\n    <string name=\"message_action_handled\">Actie afgehandeld</string>\r\n    <string name=\"message_action_failed\">Actie mislukt</string>\r\n    <string name=\"instruction\">Instructie</string>\r\n    <string name=\"message_scan_identifier\">Scan Identifier</string>\r\n    <string name=\"message_scan_destination_mi_single_piece\">Scan Bestemming</string>\r\n    <string name=\"hint_set_serial\">Geef serienummer in</string>\r\n    <string name=\"button_set\">Wijzig</string>\r\n    <string name=\"set_serial_header_default\">Wijzig serienummer</string>\r\n    <string name=\"message_set_serial_first\">Serienummer is leeg, geef een serienummer in</string>\r\n    <string name=\"mainmenu_proglove\">Koppel ProGlove</string>\r\n    <string name=\"create_intake_order\">Creeer magazijnopslag</string>\r\n    <string name=\"error_get_property_line_data_failed\">Ophalen regel informatie mislukt</string>\r\n    <string name=\"message_line_send\">De regel is verzonden</string>\r\n    <string name=\"get_stock_failed\">Voorraad opvragen mislukt</string>\r\n    <string name=\"create_pick\">Creeer pick opdracht</string>\r\n    <string name=\"message_barcode_already_scanned_and_unique\">Barcode is al eerder gescanned, en is uniek</string>\r\n    <string name=\"create\">Creeer</string>\r\n    <string name=\"message_scan_article_or_new_bin\">Scan artikel of nieuwe BIN</string>\r\n    <string name=\"error_matching_lines_and_barcodes_failed\">Regels en barcodes koppelen mislukt</string>\r\n    <string name=\"choose_workflow\">Kies workflow</string>\r\n    <string name=\"menuitem_pack_and_ship\">Inpakken en verzenden</string>\r\n    <string name=\"menuitem_pack_and_ship_merge\">Inpakken en verzenden samenvoegen</string>\r\n    <string name=\"screentitle_packandshiporderselect\">Inpakken en verzenden opdrachten</string>\r\n    <string name=\"ordertype_ps1\">Inpakken en Verzenden enkele zending</string>\r\n    <string name=\"ordertype_psm\">Inpakken en Verzenden meerdere zendingen</string>\r\n    <string name=\"create_pack_and_ship\">Creeer Inpakken en Verzenden opdracht</string>\r\n    <string name=\"error_get_packandshiporders_failed\">Ophalen Inpakken en Verzenden opdrachten mislukt</string>\r\n    <string name=\"error_get_shipping_methods_failed\">Ophalen verzendmethoden mislukt</string>\r\n    <string name=\"screentitle_packandship_single\">Inpakken en Verzenden</string>\r\n    <string name=\"scan_document\">Scan document</string>\r\n    <string name=\"scan_next_document_to_close_current\">Scan volgende document om huidige te sluiten, of druk op OK</string>\r\n    <string name=\"message_shipment_not_send\">Document niet verzonden</string>\r\n    <string name=\"message_shipment_send\">Shipment send</string>\r\n    <string name=\"screentitle_packandship_multi\">Inpakken en Verzenden Multi</string>\r\n    <string name=\"message_shipment_incomplete\">Zending incompleet</string>\r\n    <string name=\"message_workplaces_not_available\">Werkplekken niet beschikbaar</string>\r\n    <string name=\"number_of_documents\">Documenten:</string>\r\n    <string name=\"documents\">Documenten</string>\r\n    <string name=\"scan_next_document_or_close\">Scan document voor zelfde adres, of OK om te verzenden</string>\r\n    <string name=\"message_no_addresses_to_check\">Geen adressen om to controleren</string>\r\n    <string name=\"message_address_mismatch\">Adres komt niet overeen</string>\r\n    <string name=\"message_addressname_mismatch\">Ontvanger komt niet overeen</string>\r\n    <string name=\"message_zipcode_mismatch\">Postcode komt niet overeen</string>\r\n    <string name=\"message_city_mismatch\">Plaatsnaam komt niet overeen</string>\r\n    <string name=\"message_country_mismatch\">Land komt niet overeen</string>\r\n    <string name=\"error_get_line_propertys_failed\">Ophalen regel eigenschappen mislukt</string>\r\n    <string name=\"error_get_line_property_values_failed\">Ophalen regel eigenschap waardes mislukt</string>\r\n    <string name=\"create_inventory\">Creeer Inventarisatie</string>\r\n    <string name=\"screentitle_storeorderlines\">Opslag regels</string>\r\n    <string name=\"error_no_more_sourcedocuments_to_sort\">Geen documenten meer om op te slaan</string>\r\n    <string name=\"tab_sortorderline_tostore\">Op te slaan</string>\r\n    <string name=\"tab_sortorderline_stored\">Opgeslagen</string>\r\n    <string name=\"screentitle_storeorderselect\">Opslag opdrachten</string>\r\n    <string name=\"error_getting_store_lines_failed\">Opslagregels kunnen niet opgehaald worden</string>\r\n    <string name=\"menuitem_store\">Opslaan weborders</string>\r\n    <string name=\"button_set_bin\">Bepaal BIN</string>\r\n    <string name=\"hint_storage_bin\">Scan of type opslag BIN</string>\r\n    <string name=\"set_bin_header_default\">Bepaal BIN</string>\r\n    <string name=\"error_unknow_storement\">Geen weborder gevonden met deze barcode</string>\r\n    <string name=\"message_bin_cant_be_used_for_storage\">Deze BIN is niet geschikt voor opslag</string>\r\n    <string name=\"message_close_store_fase\">Wilt u het opslaan afronden?</string>\r\n    <string name=\"message_store_done\">Opslaan afronden?</string>\r\n    <string name=\"message_sure_leave_pick_screen_title\">Pick verlaten?</string>\r\n    <string name=\"message_sure_leave_pick_screen_text\">Weet u zeker dat u deze pick wilt verlaten?\\n\\nU gaat terug naar het pick opdrachten overzicht</string>\r\n    <string name=\"message_sure_leave_qc_screen_title\">Kwaliteitscontrole verlaten?</string>\r\n    <string name=\"message_sure_leave_qc_screen_text\">Weet u zeker dat u deze kwaliteitscontrole wilt verlaten? \\\\n\\\\nu gaat terug naar het kwaliteitscontrole order selectie scherm</string>\r\n    <string name=\"screentitle_itemproperty_no_input\">Weergave artikel eigenschap</string>\r\n    <string name=\"screentitle_itemproperty_input\">Artikel eigenschap ingeven</string>\r\n    <string name=\"message_please_enter_a\">Geef het volgende in</string>\r\n    <string name=\"message_and_a\">en een</string>\r\n    <string name=\"confirm\">Bevestig</string>\r\n    <string name=\"use_darkmode\">Gebruik donkere modus</string>\r\n    <string name=\"quantity_asked\">Aantal gevraagd:</string>\r\n    <string name=\"quantity_handled\">Aantal ingegeven:</string>\r\n    <string name=\"message_please_enter\">Geef een %1$s in</string>\r\n    <string name=\"multi_user_assignments_not_supported_in_android\">Multi user opdrachten worden (momenteel) niet ondersteund in Android</string>\r\n    <string name=\"message_select_a_destination\">Selecteer een vestiging...</string>\r\n    <string name=\"message_itempropery_value_already_used\">\"Deze heb je al gehad\"</string>\r\n    <string name=\"message_itempropery_value_wrong\">Deze waarde is niet toegestaan</string>\r\n    <string name=\"addedorhandled\">toegevoegd/afgehandeld</string>\r\n    <string name=\"error_get_composite_barcodes_failed\">Ophalen samengestelde barcodes mislukt</string>\r\n    <string name=\"message_property_unknown\">Eigenschap onbekend</string>\r\n    <string name=\"message_take_already_exists\">Je kunt dit artikel niet op dezelfde BIN plaatsen als waar je hem genomen hebt</string>\r\n    <string name=\"ordertype_self_generated\">Op eigen initiatief</string>\r\n    <string name=\"print_BIN\">Print BIN</string>\r\n    <string name=\"print_Article\">Print Artikel</string>\r\n    <string name=\"error_print_failed\">Print label mislukt</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-nl-rNL/strings.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/res/values-nl-rNL/strings.xml	(date 1620740448055)
@@ -452,6 +452,7 @@
     <string name="hint_add_itemno">Geef artikelnummer in</string>
     <string name="hint_add_variantcode">Geef variantcode in</string>
     <string name="hint_add_barcode">Scan of typ barcode</string>
+    <string name="hint_add_property">Scan of typ Item Property</string>
     <string name="hint_add_article">Geef artikel in</string>
     <string name="message_accept_switch">Accepteer tabblad wissel</string>
     <string name="message_cancel_switch">Annuleer wissel</string>
@@ -498,6 +499,7 @@
     <string name="message_bin_unknown">Locatie %1$s onbekend voor deze vestiging</string>
     <string name="multiple_barcodes">Meerdere barcodes</string>
     <string name="message_unknown_barcode_for_this_line">Onbekende barcode voor deze regel</string>
+    <string name="message_unknown_value">Waarde niet geldig voor property</string>
     <string name="message_adding_or_changing_bin_now_allowed">"Locaties toevoegen/wijzigen is niet toegestaan "</string>
     <string name="quantity_scanned">Aantal gescanned:</string>
     <string name="error_unknown_location">Onbekende locatie</string>
@@ -565,6 +567,7 @@
     <string name="error_get_returnordersdocuments_failed">Retourdocumenten ophalen mislukt</string>
     <string name="error_getting_return_reasons">Ophalen retour redenen mislukt</string>
     <string name="choose_reason">Kies retourreden</string>
+    <string name="fill_property">Vul item property</string>
     <string name="hint_add_reason">Scan of selecteer reden</string>
     <string name="select_reason_switch" translatable="false">Select_reason_switch</string>
 
@@ -761,6 +764,7 @@
     <string name="screentitle_packandship_multi">Inpakken en Verzenden Multi</string>
     <string name="message_shipment_incomplete">Zending incompleet</string>
     <string name="message_workplaces_not_available">Werkplekken niet beschikbaar</string>
+    <string name="message_templates_not_available">Templates niet beschikbaar</string>
     <string name="number_of_documents">Documenten:</string>
     <string name="documents">Documenten</string>
     <string name="scan_next_document_or_close">Scan document voor zelfde adres, of OK om te verzenden</string>
Index: app/src/main/java/SSU_WHS/General/cDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.General;\r\n\r\npublic class cDatabase {\r\n    //region Tables\r\n\r\n    public static final String TABLENAME_USERS = \"Users\";\r\n    public static final String TABLENAME_SETTINGS = \"Settings\";\r\n    public static final String TABLENAME_SCANNERLOGON = \"ScannerLogon\";\r\n    public static final String TABLENAME_BARCODELAYOUTS = \"BarcodeLayouts\";\r\n    public static final String TABLENAME_BINITEM = \"BinItem\";\r\n    public static final String TABLENAME_TRANSLATION = \"Translations\";\r\n    public static final String TABLENAME_WORKPLACE = \"Workplaces\";\r\n    public static final String TABLENAME_SCANNERS = \"Scanners\";\r\n    public static final String TABLENAME_BRANCH = \"Branches\";\r\n    public static final String TABLENAME_BRANCHBIN = \"BranchBin\";\r\n    public static final String TABLENAME_ITEMPROPERTY = \"ItemProperties\";\r\n    public static final String TABLENAME_LABELTEMPLATE  =  \"Labeltemplate\";\r\n    public static final String TABLENAME_PROPERTYGROUP = \"PropertyGroup\";\r\n    public static final String TABLENAME_PROPERTYGROUPPROPERTY = \"PropertyGroupProperty\";\r\n    public static final String TABLENAME_COMPOSITEBARCODE = \"CompositeBarcode\";\r\n    public static final String TABLENAME_COMPOSITEBARCODEPROPERTY = \"CompositeBarcodeProperty\";\r\n    public static final String TABLENAME_PICKORDERBARCODE = \"PickorderBarcode\";\r\n    public static final String TABLENAME_PICKORDERCOMPOSITEBARCODE = \"PickorderCompositeBarcode\";\r\n    public static final String TABLENAME_PICKORDERLINEBARCODE = \"PickorderLineBarcode\";\r\n    public static final String TABLENAME_ARTICLEIMAGE = \"ArticleImage\";\r\n    public static final String TABLENAME_ARTICLE = \"Article\" ;\r\n    public static final String TABLENAME_ARTICLEBARCODE = \"ArticleBarcode\" ;\r\n    public static final String TABLENAME_ARTICLESTOCK = \"ArticleStock\";\r\n    public static final String TABLENAME_COMMENT = \"Comment\";\r\n    public static final String TABLENAME_AUTHORISATIONS = \"Authorisations\";\r\n    public static final String TABLENAME_SALESORDERPACKINGTABLE = \"SalesOrderPackingTable\";\r\n\r\n    public static final String TABLENAME_PICKORDERLINES = \"Pickorderlines\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTY = \"PickorderlineProperty\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTYVALUE = \"PickorderlinePropertyValue\";\r\n    public static final String TABLENAME_PICKORDERSETTING = \"PickorderSetting\";\r\n    public static final String TABLENAME_PICKORDERADDRESS = \"PickorderAddress\";\r\n    public static final String TABLENAME_SHIPPINGAGENTS = \"ShippingAgents\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICES = \"ShippingAgentServices\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPPINGUNITS = \"ShippingAgentServiceShippingUnits\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPMETHODS = \"ShippingAgentServiceShipMethods\";\r\n    public static final String TABLENAME_PICKORDERSHIPPACKAGES = \"PickorderShipPackages\";\r\n    public static final String TABLENAME_PICKORDERLINEPACKANDSHIP = \"PickorderLinePackAndShip\";\r\n    public static final String TABLENAME_PICKORDERLINEFINISHSINGLEPIECE = \"PickorderLineFinishSinglePiece\";\r\n\r\n    public static final String TABLENAME_INVENTORYORDER = \"InventoryOrder\";\r\n    public static final String TABLENAME_INVENTORYORDERBIN = \"InventoryOrderBin\";\r\n    public static final String TABLENAME_INVENTORYORDERLINE = \"InventoryOrderLines\";\r\n    public static final String TABLENAME_INVENTORYORDERLINEPROPERTY = \"InventoryorderlineProperty\";\r\n    public static final String TABLENAME_INVENTORYORDERLINEPROPERTYVALUE = \"InventoryorderlinePropertyValue\";\r\n    public static final String TABLENAME_INVENTORYORDERBARCODE = \"InventoryOrderBarcodes\";\r\n    public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = \"InventoryOrderLineBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINES  = \"IntakeLinesMAT\";\r\n    public static final String TABLENAME_INTAKEORDER  = \"IntakeOrders\";\r\n    public static final String TABLENAME_INTAKEORDERBARCODE  = \"IntakeOrderBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINEBARCODE  = \"IntakeOrderMATLineBarcodes\";\r\n    public static final String TABLENAME_MOVEORDER = \"MoveOrder\";\r\n    public static final String TABLENAME_MOVEORDERLINE = \"MoveOrderLine\";\r\n    public static final String TABLENAME_MOVEORDERLINEBARCODE = \"MoveOrderLineBarcode\";\r\n    public static final String TABLENAME_MOVEORDERBARCODE = \"MoveOrdeBarcode\";\r\n    public static final String TABLENAME_RETURNORDER = \"Returnorder\";\r\n    public static final String TABLENAME_RETURNORDERLINE = \"ReturnorderLine\";\r\n    public static final String TABLENAME_RETURNORDERLINEBARCODE = \"ReturnorderLineBarcode\";\r\n    public static final String TABLENAME_RETURNORDERBARCODE = \"ReturnorderBarcode\";\r\n    public static final String TABLENAME_RETURNORDERDOCUMENT = \"ReturnorderDocument\";\r\n    public static final String TABLENAME_BRANCHREASON = \"BranchReason\";\r\n    public static final String TABLENAME_RECEIVELINES  = \"ReceiveLines\";\r\n    public static final String TABLENAME_PACKAGING = \"Packaging\";\r\n    public static final String TABLENAME_CUSTOMAUTHORISATIONS = \"CustomAuthorisations\";\r\n    public static final String TABLENAME_IDENTIFIERWITHDESTINATION  = \"IdentifierWithDestination\";\r\n    public static final String TABLENAME_PACKANDSHIPORDER = \"PackAndSHipOrder\";\r\n    public static final String TABLENAME_PACKANDSHIPORDERLINE = \"PackAndShipOrderLine\";\r\n    public static final String TABLENAME_PACKANDSHIPSETTING = \"PackAndShipSetting\";\r\n    public static final String TABLENAME_PACKANDSHIPBARCODE = \"PackAndShipBarcode\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPMENT = \"PackAndShipShipment\";\r\n    public static final String TABLENAME_PACKANDSHIPADDRESS = \"PackAndShipAddress\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINGMETHOD = \"PackAndShipShippingMethod\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINPACKAGE= \"PackAndShipShippingPackage\";\r\n    public static final String TABLENAME_STOCKOWNER= \"StockOwner\";\r\n    public static final String TABLENAME_AUTHORIZEDSTOCKOWNER= \"AutorizedStockOwner\";\r\n    public static final String TABLENAME_LINEPROPERTY= \"LineProperty\";\r\n    public static final String TABLENAME_LINEPROPERTYVALUE= \"LinePropertyValue\";\r\n    public static final String TABLENAME_ARTICLEPROPERTY = \"ArticleProperty\";\r\n    public static final String TABLENAME_ARTICLEPROPERTYVALUE = \"ArticlePropertyValue\";\r\n\r\n\r\n    //endregion Tables\r\n\r\n    //region localtables\r\n    public static final String TABLENAME_ENVIRONMENTS = \"Environments\";\r\n    //endregion localtables\r\n\r\n\r\n    //region A\r\n    public static final String ACTIONTYPECODE_NAMESTR = \"ActionTypeCode\";\r\n    public static final String ACTUALSHIPPINGAGENTCODE_NAMESTR = \"ActualShippingAgentCode\";\r\n    public static final String ACTUEALSHIPPINGAGENTSERVICECODE_NAMESTR = \"ActualShippingAgentServiceCode\";\r\n    public static final String ASSIGNEDUSERID_NAMESTR = \"AssignedUserId\";\r\n    public static final String AUTHORISATION_NAMESTR = \"Autorisatie\";\r\n    public static final String ADDRESCODE_NAMESTR = \"Adrescode\";\r\n    public static final String ADDRESSCODE_NAMESTR = \"AddressCode\";\r\n    public static final String ADDRESSNAME_NAMESTR = \"AddressName\";\r\n    public static final String ADDRESSTYPE_NAMESTR = \"AddressType\";\r\n    public static final String ADDRESSNAMEREMARK_NAMESTR = \"AddressNameRemark\";\r\n    public static final String ADDRES_NAMESTR = \"Adres\";\r\n    public static final String ADDRESS_NAMESTR = \"Address\";\r\n    public static final String ADDRESSREMARK_NAMESTR = \"AddressRemark\";\r\n    public static final String ADDRESSADDITION_NAMESTR = \"Adrestoevoeging\";\r\n    public static final String ADDRESSNUMBER_NAMESTR = \"Huisnummer\";\r\n    public static final String ADDRESSNUMBERADDITION_NAMESTR = \"Huisnummertoevoeging\";\r\n    public static final String AUTHORISATIONBASE_NAMESTR = \"Autorisatie_basis\";\r\n    public static final String AREA_NAMESTR = \"Area\";\r\n    //endregion A\r\n\r\n    //region B\r\n    public static final String BARCODE_NAMESTR = \"Barcode\";\r\n    public static final String BARCODELAYOUT_NAMESTR = \"Barcodelayout\";\r\n    public static final String BARCODETYPE_NAMESTR = \"BarCodeType\";\r\n\r\n    public static final String BINCODE_NAMESTR = \"BinCode\";\r\n    public static final String BINCODEHANDLED_NAMESTR = \"BinCodeHandled\";\r\n    public static final String BINCODENL_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String BINMANDATORY_NAMESTR = \"BinMandatory\";\r\n    public static final String BINTYPE_NAMESTR = \"BinType\";\r\n    public static final String BRANCH_NAMESTR = \"Vestiging\";\r\n    public static final String BRANCHTYPE_NAMESTR = \"Vestigingtype\";\r\n    public static final String BRANCHNAME_NAMESTR = \"Name\";\r\n    public static final String BILLINGADDRESSCODE_NAMESTR = \"BillingAddressCode\";\r\n    //endregion B\r\n\r\n    //region C\r\n    public static final String COMPOSITEBARCODE_NAMESTR = \"CompositeBarcode\";\r\n    public static final String COMMENTLINENO_NAMESTR = \"CommentLineNo\";\r\n    public static final String CURRENTLOCATION_NAMESTR = \"CurrentLocation\";\r\n    public static final String COMMENT_NAMESTR = \"Comment\";\r\n    public static final String COMMENTCODE_NAMESTR = \"CommentCode\";\r\n    public static final String COMMENTTEXT_NAMESTR = \"CommentText\";\r\n    public static final String COMPONENT10_NAMESTR = \"Component10\";\r\n    public static final String CURRENTUSERID_NAMESTR = \"CurrentUserId\";\r\n    public static final String CITY_NAMESTR = \"City\";\r\n    public static final String CITYNL_NAMESTR = \"Plaats\";\r\n    public static final String COUNTRY_NAMESTR = \"Country\";\r\n    public static final String COUNTRYNL_NAMESTR = \"Land\";\r\n    public static final String CONTAINER_NAMESTR = \"Container\";\r\n    public static final String CONTACTNAME_NAMESTR = \"ContactName\";\r\n    public static final String CONTACTPERSON_NAMESTR = \"Contactpersoon\";\r\n    public static final String CONTAINERTYPE_DUTCH_NAMESTR = \"Containersoort\";\r\n    //endregion C\r\n\r\n    //region D\r\n    public static final String DATATIMESTAMP_NAMESTR = \"DataTimestamp\";\r\n    public static final String DESCRIPTION_DUTCH_NAMESTR = \"Omschrijving\";\r\n    public static final String DESCRIPTION_NAMESTR = \"Description\";\r\n    public static final String DESCRIPTION2_NAMESTR = \"Description2\";\r\n    public static final String DESTINATION_NAMESTR = \"Destination\";\r\n    public static final String DESTINATIONNO_NAMESTR = \"DestinationNo\";\r\n    public static final String DOCUMENT_NAMESTR = \"Document\";\r\n    public static final String DOCUMENTTYPE_NAMESTR = \"DocumentType\";\r\n    public static final String DOCUMENT2_NAMESTR = \"Document2\";\r\n    public static final String DOCUMENTTYPE2_NAMESTR = \"DocumentType2\";\r\n    public static final String DEFAULTWEIGHTINGRAMS_NAMESTR = \"DefaultWeightInG\";\r\n    public static final String DEFAULTVALUE_NAMESTR = \"DefaultValue\";\r\n    public static final String DELIVERYADDRESSTYPE_NAMESTR = \"DeliveryAddressType\";\r\n    public static final String DELIVERYADDRESSCODE_NAMESTR = \"DeliveryAddressCode\";\r\n    //endregion D\r\n\r\n\r\n    //region E\r\n    public static final String EXTERNALREFERENCE_NAMESTR = \"ExternalReference\";\r\n    public static final String ENUMERATIONVALUES_NAMESTR = \"EnumerationValues\";\r\n\r\n    public static final String ENVIRONMENT_DEFAULT = \"IsDefault\";\r\n    public static final String ENVIRONMENT_NAME = \"Name\";\r\n    public static final String ENVIRONMENT_DESCRIPTION = \"Description\";\r\n    public static final String ENVIRONMENT_WEBSERVICEURL = \"Webserviceurl\";\r\n\r\n    public static final String EXTRAFIELD1_NAMESTR = \"ExtraField1\";\r\n    public static final String EXTRAFIELD2_NAMESTR = \"ExtraField2\";\r\n    public static final String EXTRAFIELD3_NAMESTR = \"ExtraField3\";\r\n    public static final String EXTRAFIELD4_NAMESTR = \"ExtraField4\";\r\n    public static final String EXTRAFIELD5_NAMESTR = \"ExtraField5\";\r\n    public static final String EXTRAFIELD6_NAMESTR = \"ExtraField6\";\r\n    public static final String EXTRAFIELD7_NAMESTR = \"ExtraField7\";\r\n    public static final String EXTRAFIELD8_NAMESTR = \"ExtraField8\";\r\n    public static final String EMAIL_NAMESTR = \"Email\";\r\n    public static final String EMBALLAGE_NAMESTR = \"Emballage\";\r\n    //endregion E\r\n\r\n    //region F\r\n    public static final String FIELD_NAMESTR = \"Field\";\r\n    public static final String FIELDIDENTIFIER_NAMESTR = \"Field_identifier\";\r\n    public static final String FIELDTYPE_NAMESTR = \"Field_type\";\r\n    public static final String FILTERFIELD_NAMESTR = \"Filter_veld\";\r\n    public static final String FILTERVALUE_NAMESTR = \"Filter_waarde\";\r\n    //endregion F\r\n\r\n    //Region G\r\n    public static final String GENERATED_NAMESTR = \"Generated\";\r\n    //End Region G\r\n\r\n    //region H\r\n    public static final String HANDLEDTIMESTAMP_NAMESTR = \"HandledTimestamp\";\r\n    public static final String HANDLEDTIMESTAMPTAKENOTEXPORTED_NAMESTR = \"HandledTimestamp_take_not_exported\";\r\n    public static final String HOUSENUMBER_NAMESTR = \"HouseNumber\";\r\n    public static final String HOUSENUMBERCOMPLEMENTED_NAMESTR = \"HouseNumberComplemented\";\r\n    public static final String HOUSENUMBEREXTENSION_NAMESTR = \"HouseNumberExtension\";\r\n    public static final String HOUSENUMBEREXTENSIONCOMPLEMENTED_NAMESTR = \"HouseNumberExtensionComplemented\";\r\n    //endregion H\r\n\r\n\r\n    //Region I\r\n    public static final String IDENTIFIER_NAMESTR = \"Identifier\";\r\n    public static final String INFOKEY_NAMESTR = \"InfoKey\";\r\n    public static final String INFOVALUE_NAMESTR = \"InfoValue\";\r\n    public static final String IMAGE_NAMESTR = \"Image\";\r\n    public static final String INTERFACERESULTMETHOD_NAMESTR = \"Interface_result_method\";\r\n    public static final String ISPARTOFMULTILINEORDER_NAMESTR = \"IsPartOfMultiLineOrder\";\r\n    public static final String ISUNIQUEBARCODE_NAMESTR = \"IsUniqueBarcode\";\r\n    public static final String ISUNIQUE_NAMESTR = \"IsUnique\";\r\n    public static final String ITEMINFOCODE_NAMESTR = \"ItemInfoCode\";\r\n    public static final String ITEMNO_NAMESTR = \"ItemNo\";\r\n    public static final String ITEMTYPE_NAMESTR = \"Itemsoort\";\r\n\r\n    public static final String IMAGEBASE64_NAMESTR = \"Image_base64\";\r\n    public static final String INV_AUTOCLOSE_BIN_NAMESTR = \"Inv_auto_close_bin\";\r\n    public static final String INV_PRECOUNT_NAMESTR = \"Inv_precount\";\r\n    public static final String INV_AMOUNT_MANUAL_NAMESTR = \"Inv_Amount_manual\";\r\n    public static final String INV_BARCODECHECK_NAMESTR = \"Inv_barcode_check\";\r\n    public static final String INV_ADD_EXTRA_BIN_NAMESTR = \"Inv_add_extra_bin\";\r\n\r\n    public static final String INVENTORYWITHPICTURE_NAMESTR = \"Inv_with_picture\";\r\n    public static final String INVENTORYWITHPICTURE_AUTO_OPEN_NAMESTR = \"Inv_with_picture_auto_open\";\r\n    public static final String INVENTORYWITHPICTURE_PREFETCH_NAMESTR = \"Inv_with_picture_prefetch\";\r\n\r\n    public static final String ISINPUT_NAMESTR = \"IsInput\";\r\n    public static final String ISREQUIRED_NAMESTR = \"Isrequired\";\r\n    public static final String ISPROCESSINGORPARKED_NAMESTR = \"IsProcessingOrParked\";\r\n    public static final String INPUTWORKFLOWS_NAMESTR = \"InputWorkflows\";\r\n\r\n\r\n    //endregion I\r\n\r\n    //region L\r\n    public static final String LANGUAGEDUTCH_NAMESTR = \"Taal\";\r\n    public static final String LABELCODE_NAMESTR = \"Labelcode\";\r\n    public static final String LAYOUT_NAMESTR = \"Layout\";\r\n    public static final String LICENSE_NAMESTR = \"License\";\r\n    public static final String LICENSE_NL_NAMESTR = \"Licentie\";\r\n    public static final String LINE_NAMESTR = \"Line\";\r\n    public static final String LINES_NAMESTR = \"Lines\";\r\n    public static final String LINENO_NAMESTR = \"LineNo\";\r\n    public static final String LINENOTAKE_NAMESTR = \"LineNoTake\";\r\n    public static final String LOCALSTATUS_NAMESTR = \"LocalStatus\";\r\n    public static final String LOCAL_QUANTITYTAKEN_NAMESTR = \"LocalQuantityTaken\";\r\n    public static final String LOCAL_QUANTITYPLACED_NAMESTR = \"LocalQuantityPlaced\";\r\n    //endregion L\r\n\r\n    //region M\r\n    public static final String MOVEDEFAULTBIN_NAMESTR = \"Move_default_bin\";\r\n    public static final String PICKDEFAULTSTORAGEBIN = \"Pick_default_storage_bin\";\r\n\r\n\r\n\r\n    public static final String MOVEAMOUNTMANUAL_NAMESTR = \"Move_Amount_manual\";\r\n    public static final String MOVEBARCODECHECK_NAMESTR = \"Move_Barcode_check\";\r\n    public static final String MOVEVALIDATESTOCK_NAMESTR = \"Move_validate_stock\";\r\n    public static final String MOVEVALIDATESTOCKENFORCE_NAMESTR = \"Move_validate_stock_enforce\";\r\n    public static final String MOVE_MT_TAKEAMOUNTMANUAL_NAMESTR = \"Move_MT_take_amount_manual\";\r\n    public static final String MOVE_MT_TAKEAUTOITEM_NAMESTR = \"Move_MT_take_auto_item\";\r\n    public static final String MOVE_MT_TAKEAUTOITEMCONTAINERONCE_NAMESTR = \"Move_MT_take_auto_item_container_once\";\r\n    public static final String MOVE_MT_TAKEALLOWEND_NAMESTR = \"Move_MT_take_allow_end\";\r\n    public static final String MOVE_MT_TAKEIGNOREUNDERTAKE_NAMESTR = \"Move_MT_take_ignore_undertake\";\r\n    public static final String MOVE_MT_TAKEAUTOACCEPTSINGLEPIECE_NAMESTR = \"Move_MT_take_auto_accept_single_piece\";\r\n    public static final String MOVE_MT_PLACEAMOUNTMANUAL_NAMESTR = \"Move_MT_place_amount_manual\";\r\n    public static final String MOVE_MT_PLACEAUTOITEM_NAMESTR = \"Move_MT_place_auto_item\";\r\n    public static final String MOVE_AUTOACCEPTATREQUESTED_NAMESTR = \"Move_auto_accept_at_requested\";\r\n    public static final String MOVE_NOEXTRABINS_NAMESTR = \"Move_no_extra_bins\";\r\n    public static final String MOVE_NOEXTRAITEMS_NAMESTR = \"Move_no_extra_items\";\r\n    public static final String MOVE_NOEXTRAPIECES_NAMESTR = \"Move_no_extra_pieces\";\r\n    public static final String MOVEWITHPICTURE_NAMESTR = \"Move_with_picture\";\r\n    public static final String MOVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Move_with_picture_auto_open\";\r\n    public static final String MOVEWITHPICTURE_PREFETCH_NAMESTR = \"Move_with_picture_prefetch\";\r\n    //endregion M\r\n\r\n    //region N\r\n    public static final String NAMEDUTCH_NAMESTR = \"Naam\";\r\n    public static final String NAMEADDITION_NAMESTR = \"Naamtoevoeging\";\r\n    public static final String NAMESHORT_NAMESTR = \"Naam_kort\";\r\n\r\n\r\n    public static final String NUMBEROFBINS_NAMESTR = \"Aantal_bins\";\r\n    //endregion N\r\n\r\n    //region O\r\n    public static final String ORDERDUTCH_NAMESTR = \"Volgorde\";\r\n    public static final String OMSCHRIJVING_NAMESTR = \"Omschrijving\";\r\n    public static final String ORDERNUMBER_NAMESTR = \"Opdrachtnummer\";\r\n    public static final String ORDERTYPE_NAMESTR = \"Opdrachttype\";\r\n    public static final String ORIGINDUTCH_NAMESTR = \"Herkomstcode\";\r\n    public static final String ORIGINKEYDUTCH_NAMESTR = \"Herkomstsleutel\";\r\n    //endregion O\r\n\r\n    //region P\r\n\r\n    public static final String PACKAGECONTAINER_NAMESTR = \"PackageContainer\";\r\n    public static final String PACKAGECONTAINERTYPE_NAMESTR = \"PackageContainersoort\";\r\n    public static final String PACKAGEITEMCOUNT_NAMESTR = \"PackageItemCount\";\r\n    public static final String PACKAGEWEIGHTING_NAMESTR = \"PackageWeightInG\";\r\n    public static final String PACKAGETYPE_NAMESTR = \"PackageType\";\r\n    public static final String PACKAGESEQUENCENUMBER_NAMESTR = \"PackageSequenceNumber\";\r\n    public static final String PACKINGTABLE_NAMESTR = \"Packingtable\";\r\n    public static final String PHONE_NAMESTR = \"PhoneNumber\";\r\n    public static final String PHONENL_NAMESTR = \"Telefoon\";\r\n    public static final String PICKSALESASKWORKPLACE_NAMESTR = \"Pick_Sales_ask_workplace\";\r\n    public static final String PICKTRANSFERASKWORKPLACE_NAMESTR = \"Pick_Transfer_ask_workplace\";\r\n    public static final String PICKAUTONEXT_NAMESTR = \"Pick_Auto_next\";\r\n    public static final String PICKBARCODECHECK_NAMESTR = \"Pick_Barcode_check\";\r\n    public static final String PICKPICKPVVKKOEACHPIECE_NAMESTR = \"Pick_Pick_PV_VKO_each_piece\";\r\n    public static final String PICKPICKTOCONTAINER_NAMESTR = \"Pick_Pick_to_container\";\r\n    public static final String PICKPICKTOCONTAINERTYPE_NAMESTR = \"Pick_Pick_to_container_type\";\r\n    public static final String PICKPRINTADDRESSLABEL_NAMESTR = \"Pick_Print_adreslabel\";\r\n    public static final String PICKPRINTCONTENTLABEL_NAMESTR = \"Pick_Print_contentlabel\";\r\n    public static final String PICKWITHPICTURE_NAMESTR = \"Pick_with_picture\";\r\n    public static final String PICKWITHPICTURE_AUTO_OPEN_NAMESTR = \"Pick_with_picture_auto_open\";\r\n    public static final String PICKWITHPICTURE_PREFETCH_NAMESTR = \"Pick_with_picture_prefetch\";\r\n    public static final String PICKACTIVITYBINREQUIRED_NAMESTR = \"Pick_Activity_bin_required\";\r\n    public static final String PICKQCCHECKCOUNT_NAMESTR = \"Pick_Qc_check_count\";\r\n\r\n    public static final String POSITIONSTART_NAMESTR = \"Position_start\";\r\n    public static final String POSITIONEND_NAMESTR = \"Position_end\";\r\n\r\n    public  static final String PRIORITY_NAMESTR = \"Priority\";\r\n\r\n    public static final String PRICE_NAMESTR = \"Price\";\r\n    public static final String PRINTDOCUMENTS_NAMESTR = \"PrintDocuments\";\r\n    public static final String PROCESSINGSEQUENCE_NAMESTR = \"ProcessingSequence\";\r\n    public static final String PROPERTY_NAMESTR = \"Property\";\r\n    public static final String PROPERTYCODE_NAMESTR = \"Propertycode\";\r\n    public static final String PROPERTYDUTCH_NAMESTR = \"Propertie\";\r\n    public static final String PROPERTYSDUTCH_NAMESTR = \"Properties\";\r\n    public static final String PROPERTYGROUP_NAMESTR = \"Propertiegroep\";\r\n    public static final String ADDRESSES_NAMESTR = \"Addresses\";\r\n    public static final String SHIPPINGMETHODS_NAMESTR = \"ShippingMethods\";\r\n    public static final String COMPOSITEBARCODESPLITTED_NAMESTR = \"Composite_barcode\";\r\n    public static final String COMPOSITEBARCODETYPE_NAMESTR = \"Compositebarcode_type\";\r\n    public static final String FIELDSEPERATOR_NAMESTR = \"Field_separator\";\r\n    public static final String LAYOUTREGEX_NAMESTR = \"Layout_regex\";\r\n    public static final String LAYOUTTYPE_NAMESTR = \"Layout_type\";\r\n\r\n\r\n    public static final String PICKORDERLINEBARCODE_LINENO = \"LineNo\";\r\n    public static final String PICKORDERLINEBARCODE_BARCODE = \"Barcode\";\r\n    public static final String PICKORDERLINEBARCODE_QUANTITY = \"Quantity\";\r\n    public static final String PICKORDERLINEBARCODE_ISMANUAL = \"IsManual\";\r\n    //endregion P\r\n\r\n    //region Q\r\n    public static final String QUANTITY_NAMESTR = \"Quantity\";\r\n\r\n    public static final String QUANTITYAVAILABLE_NAMESTR = \"Voorraad_beschikbaar\";\r\n    public static final String QUANTITYHANDLED_NAMESTR = \"QuantityHandled\";\r\n    public static final String QUANTITYHANDLEDALLSCANNERS_NAMESTR = \"QuantityHandledAllScanners\";\r\n    public static final String QUANTITYHANDLEDSUM_NAMESTR = \"QuantityHandledSum\";\r\n    public static final String QUANTITYPERUNITOFMEASURE_NAMESTR = \"QtyPerUnitOfMeasure\";\r\n    public static final String QUANTITYREJECTED_NAMESTR = \"QuantityRejected\";\r\n    public static final String QUANTITYCHECKED_NAMESTR = \"QuantityChecked\";\r\n    public static final String QUANTITYTOTAL_NAMESTR = \"QuantityTotal\";\r\n    public static final String QUANTITYTAKEN_NAMESTR = \"QuantityTaken\";\r\n    public static final String QUANTITYHANDLEDTAKE_NAMESTR = \"QuantityHandled_take\";\r\n    public static final String QUANTITYTAKE_NAMESTR = \"Quantity_take\";\r\n    public static final String QUANTITYTAKENOTEXPORTED_NAMESTR = \"QuantityHandled_take_not_exported\";\r\n    public static final String QUANTITYTAKEEXPORTED_NAMESTR = \"QuantityHandled_take_exported\";\r\n    //endregion Q\r\n\r\n    //region R\r\n    public static final String RECEIVEDEFAULTBIN_NAMESTR = \"Receive_default_bin\";\r\n    public static final String REGION_NAMESTR = \"Regio\";\r\n    public static final String REJECTPICK_NAMESTR = \"RejectPick\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGINTAKE_NAMESTR = \"Receive_intake_eo_packaging_intake\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGSHIPPED_NAMESTR = \"Receive_intake_eo_packaging_shipped\";\r\n\r\n    public static final String RECEIVEWITHPICTURE_NAMESTR = \"Receive_with_picture\";\r\n    public static final String RECEIVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Receive_with_picture_auto_open\";\r\n    public static final String RECEIVEWITHPICTURE_PREFETCH_NAMESTR = \"Receive_with_picture_prefetch\";\r\n    public static final String REQUESTENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDSTARTDATETIME_NAMESTR = \"RequestedStartDateTime\";\r\n    public static final String REMEMBERVALUE_NAMESTR = \"RememberValue\";\r\n    public static final String RETURNDEFAULTBIN_NAMESTR = \"Retour_default_bin\";\r\n\r\n    public static final String RECEIVEDDATETIME_NAMESTR = \"ReceivedDateTime\";\r\n    public static final String RECEIVEEXPORTPART_NAMESTR = \"Receive_export_part\";\r\n    public static final String RECEIVE_AMOUNT_MANUAL_NAMESTR = \"Receive_Amount_manual\";\r\n    public static final String RECEIVEAMOUNTMANUAL_EO_NAMESTR = \"Receive_Amount_manual_eo\";\r\n    public static final String RECEIVEBARCODECHECK_NAMESTR = \"Receive_Barcode_check\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATREQUESTED_NAMESTR = \"Receive_store_auto_accept_at_requested\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATNEWITEM_NAMESTR = \"Receive_store_auto_accept_at_new_item\";\r\n    public static final String RECEIVESTOREAUTOACCEPTVALIDATIONMESSAGE_NAMESTR = \"Receive_store_auto_accept_validation_message\";\r\n    public static final String RECEIVENOEXTRABINS_NAMESTR = \"Receive_no_extra_bins\";\r\n    public static final String RECEIVENOEXTRAITEMS_NAMESTR = \"Receive_no_extra_items\";\r\n    public static final String RECEIVENOEXTRAPIECES_NAMESTR = \"Receive_no_extra_pieces\";\r\n    public static final String RECEIVEMATAUTOSPLITINCOMPLETELINE_NAMESTR = \"Receive_mat_auto_split_incomplete_line\";\r\n    public static final String REQUIREDWORKFLOWS_NAMESTR = \"RequiredWorkflows\";\r\n    public static final String RETOURREDEN_NAMESTR = \"Retourreden\";\r\n    public static final String RETOURAMAOUNTMANUAL_NAMESTR = \"Retour_Amount_manual\";\r\n    public static final String RETOURBARCODECHECK_NAMESTR = \"Retour_Barcode_check\";\r\n    public static final String RETOURMULTIDOCUMENT_NAMESTR = \"Retour_multi_document\";\r\n    public static final String RETOURORDERBINNOCHECK_NAMESTR = \"Retour_Order_bin_no_check\";\r\n\r\n\r\n    public static final String REASON_NAMESTR = \"Reason\";\r\n    public static final String REASONNL_NAMESTR = \"Reden\";\r\n    public static final String RETURN_NAMESTR = \"Return\";\r\n    public static final String RETURNEXTERNAL_NAMESTR = \"ReturnExternal\";\r\n\r\n    public static final String RETOURWITHPICTURE_NAMESTR = \"Retour_with_picture\";\r\n    public static final String RETURNADDRESSCODE_NAMESTR = \"ReturnAddressCode\";\r\n    public static final String RETURNSENDERADDRESSCODE_NAMESTR = \"ReturnSenderAddressCode\";\r\n    public static final String RETURNSHIPPINGADDRESSCODE_NAMESTR = \"ReturnShippingAddressCode\";\r\n    //endregion R\r\n\r\n    //region S\r\n    public static final String SALESORDER_NAMESTR = \"Salesorder\";\r\n    public static final String SCANNER_NAMESTR = \"Scanner\";\r\n    public static final String SENDERADDRESSCODE_NAMESTR = \"SenderAddressCode\";\r\n\r\n    public static final String SEQUENCENOHANDLED_NAMESTR = \"SequenceNoHandled\";\r\n    public static final String SETTINGCODE_NAMESTR = \"SettingCode\";\r\n    public static final String SETTINGVALUE_NAMESTR = \"SettingValue\";\r\n    public static final String SETTING_NAMESTR = \"Instelling\";\r\n    public static final String SINGLEARTICLEORDERS_NAMESTR = \"SingleArticleOrders\";\r\n    public static final String STATUS_NAMESTR = \"Status\";\r\n    public static final String STATUSSHIPPING_NAMESTR = \"StatusShipping\";\r\n    public static final String STATUSPACKING_NAMESTR = \"StatusPacking\";\r\n    public static final String STATUSPRINTATSTART_NAMESTR = \"StatusPrintAtStart\";\r\n    public static final String STOCKOWNER_NAMESTR = \"StockOwner\";\r\n    public static final String SORTORDER_NAMESTR = \"Volgorde\";\r\n    public static final String SORTING_NAMESTR = \"Sortering\";\r\n    public static final String SOURCEDOCUMENT_NAMESTR = \"SourceDocument\";\r\n    public static final String SOURCENO_NAMESTR = \"SourceNo\";\r\n    public static final String SORTINGSEQUENCENO_NAMESTR = \"SortingSequenceNo\";\r\n    public static final String SORTINGSEQUENCENOPLACE_NAMESTR = \"SortingSequenceNo_place\";\r\n    public static final String STORAGEBINCODE_NAMESTR = \"StorageBinCode\";\r\n    public static final String STOREBINCODE_NAMESTR = \"StoreBinCode\";\r\n    public static final String STORESOURCEORDER_NAMESTR = \"StoreSourceOpdracht\";\r\n    public static final String STREETNL_NAMESTR = \"Straat\";\r\n    public static final String STREET_NAMESTR = \"Street\";\r\n    public static final String STREETCOMPLEMENTERD_NAMESTR = \"StreetComplemented\";\r\n    public static final String SEQUENCE_NAMESTR = \"Order\";\r\n    public static final String SHIPPINGAGENT_NAMESTR = \"Expediteur\";\r\n    public static final String SHIPPINGLABELS_NAMESTR = \"ShippingLabels\";\r\n    public static final String SERVICE_NAMESTR = \"Service\";\r\n    public static final String SHIPPINGUNIT_NAMESTR = \"Verzendeenheid\";\r\n    public static final String SHIPPINGMETHOD_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGMETHODCODE_NAMESTR = \"ShippingMethodCode\";\r\n    public static final String SHIPPINGMETHODVALUE_NAMESTR = \"ShippingMethodValue\";\r\n    public static final String SHIPPINGUNITQUANTITYUSED_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGAGENTCODE_NAMESTR = \"ShippingAgentCode\";\r\n    public static final String SHIPPINGAGENTSERVICECODE_NAMESTR = \"ShippingAgentServiceCode\";\r\n    public static final String SHIPPINGADDRESSCODE_NAMESTR = \"ShippingAddressCode\";\r\n    public static final String SHIPPINGADDRESSTYPE_NAMESTR = \"ShippingAddressType\";\r\n\r\n    public static final String SHOWONTERMINAL_NAMESTR = \"ShowOnTerminal\";\r\n    public static final String SOURCETYPE_NAMESTR = \"SourceType\";\r\n    public static final String SORTINGSEQUENCENOTAKE_NAMESTR = \"SortingSequenceNo_take\";\r\n    public static final String STRIPTHIS_NAMESTR = \"Strip_this\";\r\n    //endregion S\r\n\r\n    //region T\r\n    public static final String TAKENTIMESTAMP_NAMESTR = \"TakenTimestamp\";\r\n    public static final String TEMPLATE_NAMESTR = \"Template\";\r\n    public static final String TEXTDUTCH_NAMESTR = \"Tekst\";\r\n    public static final String TRANSLATIONDUTCH_NAMESTR = \"Vertaling\";\r\n    //endregion T\r\n\r\n\r\n    //region U\r\n    public static final String USEFORSTORAGE_NAMESTR = \"UseForStorage\";\r\n    public static final String USEFORRETURNSALES_NAMESTR = \"UseForReturnSales\";\r\n    public static final String UNIQUNESS_NAMESTR = \"Uniqueness\";\r\n    public static final String UNITOFMEASURE_NAMESTR = \"UnitOfMeasure\";\r\n    public static final String USERNAME_NAMESTR = \"Gebruikersnaam\";\r\n    //endregion U\r\n\r\n    //region V\r\n    public static final String VALUE_NAMESTR = \"Value\";\r\n    public static final String VALUENL_NAMESTR = \"Waarde\";\r\n    public static final String VALUEHANDLED_NAMESTR = \"ValueHandled\";\r\n    public static final String VARIANTCODE_NAMESTR = \"VariantCode\";\r\n    public static final String VENDORITEMNO_NAMESTR = \"VendorItemNo\";\r\n    public static final String VENDORITEMDESCRIPTION_NAMESTR = \"VendorItemDescription\";\r\n    public static final String VALUETYPE_NAMESTR = \"ValueType\";\r\n    public static final String VERZENDLABEL_STATUS_NAMESTR = \"Verzendlabel_status\";\r\n\r\n\r\n    //endregion V\r\n\r\n    //region W\r\n    public static final String WAREHOUSELOCATION_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String WEBSERVICETIMEOUTERPINS_NAMESTR = \"Webservice_timeout_erp_in_s\";\r\n    public static final String WORKPLACE_NAMESTR = \"Workplace\";\r\n    public static final String WORKPLACE_DUTCH_NAMESTR = \"Werkplek\";\r\n    //endregion W\r\n\r\n    //region Z\r\n    public static final String ZIPCODENL_NAMESTR = \"Postcode\";\r\n    public static final String ZIPCODE_NAMESTR = \"Zipcode\";\r\n    public static final String ZONE_NAMESTR = \"Zone\";\r\n\r\n\r\n\r\n    //endregion Z\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/General/cDatabase.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/General/cDatabase.java	(date 1620634084249)
@@ -26,6 +26,7 @@
     public static final String TABLENAME_ARTICLE = "Article" ;
     public static final String TABLENAME_ARTICLEBARCODE = "ArticleBarcode" ;
     public static final String TABLENAME_ARTICLESTOCK = "ArticleStock";
+    public static final String TABLENAME_ARTICLEPROPERTYSTOCK = "ArticlePropertyStock";
     public static final String TABLENAME_COMMENT = "Comment";
     public static final String TABLENAME_AUTHORISATIONS = "Authorisations";
     public static final String TABLENAME_SALESORDERPACKINGTABLE = "SalesOrderPackingTable";
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ScanBinFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.os.Bundle;\r\nimport android.text.InputFilter;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport nl.icsvertex.scansuite.Activities.General.MenuActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class ScanBinFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n    private TextView textViewScanBinHeader;\r\n    private TextView textViewScanBinText;\r\n    private EditText editTextScanBin;\r\n    private Button scanBinButton;\r\n    private Button cancelButton;\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public ScanBinFragment() {\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_scan_bin, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment  = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = WindowManager.LayoutParams.WRAP_CONTENT;\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        this.textViewScanBinHeader = requireView().findViewById(R.id.textViewScanBinHeader );\r\n        this.textViewScanBinText = requireView().findViewById(R.id.textViewScanBinText);\r\n        this.editTextScanBin = getView().findViewById(R.id.editTextScanBin);\r\n        this.scanBinButton = getView().findViewById(R.id.scanBinButton);\r\n        this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.textViewScanBinHeader.setText(R.string.scan_bin_header_default);\r\n\r\n        InputFilter[] filterArray = new InputFilter[1];\r\n        filterArray[0] = new InputFilter.LengthFilter(20);\r\n        this.editTextScanBin.setFilters(filterArray);\r\n        cUserInterface.pShowKeyboard(editTextScanBin);\r\n        this.textViewScanBinText.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetScanBinListener();\r\n        this.mSetCancelListener();\r\n        this.mSetEditorActionListener();\r\n    }\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                dismiss();\r\n                }\r\n        });\r\n    }\r\n    private void mSetScanBinListener() {\r\n        this.scanBinButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                if (editTextScanBin.getText().toString().trim().isEmpty()) {\r\n                    cUserInterface.pDoNope(editTextScanBin, true, true);\r\n                    return;\r\n                }\r\n\r\n                if (cAppExtension.activity instanceof MenuActivity) {\r\n                    MenuActivity menuActivity = (MenuActivity)cAppExtension.activity;\r\n                    menuActivity.pHandleHandleBINScanned(editTextScanBin.getText().toString());\r\n                    dismiss();\r\n                }\r\n\r\n                if (cAppExtension.activity instanceof IntakeOrderIntakeActivity) {\r\n                    IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n                    intakeOrderIntakeActivity.pHandleHandleBINScanned(cBarcodeScan.pFakeScan(editTextScanBin.getText().toString()));\r\n                    dismiss();\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n    private void mSetEditorActionListener() {\r\n        this.editTextScanBin.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\r\n                if (i == EditorInfo.IME_ACTION_DONE || i == EditorInfo.IME_ACTION_GO ) {\r\n                    scanBinButton.callOnClick();\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Has prefix, so check if this is a BIN\r\n        if (cRegex.pHasPrefix(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n\r\n            boolean foundBin = false;\r\n\r\n            if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.BIN)) {\r\n                foundBin = true;\r\n            }\r\n\r\n            if (foundBin) {\r\n                //has prefix, is bin\r\n                this.editTextScanBin.setText(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));\r\n                this.scanBinButton.callOnClick();\r\n            }\r\n            else {\r\n                //has prefix, isn't bin\r\n                cUserInterface.pDoNope(this.editTextScanBin, true, true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        //no prefix, fine\r\n        this.editTextScanBin.setText(pvBarcodeScan.getBarcodeOriginalStr());\r\n        this.scanBinButton.callOnClick();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ScanBinFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ScanBinFragment.java	(date 1620309443046)
@@ -138,6 +138,7 @@
             @Override
             public void onClick(View view) {
 
+
                 if (editTextScanBin.getText().toString().trim().isEmpty()) {
                     cUserInterface.pDoNope(editTextScanBin, true, true);
                     return;
Index: app/src/main/java/SSU_WHS/Basics/ArticleStock/cArticleStock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.ArticleStock;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.Date;\r\n\r\nimport ICS.Utils.cText;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLine;\r\n\r\npublic class cArticleStock implements Comparable {\r\n\r\n    //Region Public Properties\r\n\r\n    private String locationStr;\r\n    public String getLocationStr() {\r\n        return this.locationStr;\r\n    }\r\n\r\n    public String bincodeStr;\r\n    public String getBincodeStr() {\r\n        return this.bincodeStr;\r\n    }\r\n\r\n    public String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return this.itemNoStr;\r\n    }\r\n\r\n    public String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return this.variantCodeStr;\r\n    }\r\n\r\n    public Double quantityDbl;\r\n    public Double getQuantityDbl() {\r\n        return this.quantityDbl;\r\n    }\r\n\r\n    private Date dataTimeStampDat;\r\n    public Date getDataTimeStampDat() {\r\n        return this.dataTimeStampDat;\r\n    }\r\n\r\n    public  static  cArticleStock currentArticleStock;\r\n\r\n    private cArticleStockEntity articleStockEntity;\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cArticleStock(JSONObject pvJsonObject, cArticle pvArticle) {\r\n        this.articleStockEntity = new cArticleStockEntity(pvJsonObject, pvArticle);\r\n        this.itemNoStr = this.articleStockEntity.getItemnoStr();\r\n        this.variantCodeStr = this.articleStockEntity.getVariantCodeStr();\r\n        this.locationStr = cUser.currentUser.currentBranch.getBranchStr();\r\n        this.bincodeStr =  this.articleStockEntity.getBinCodeStr();\r\n        this.quantityDbl =  this.articleStockEntity.getQuantityDbl();\r\n        this.dataTimeStampDat = cText.pStringToDateStr(this.articleStockEntity.getDataTimeStamp(),\"YYYY-MM-dd\");\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    @Override\r\n    public int compareTo(@NonNull Object o) {\r\n\r\n        int compareint =  ((cArticleStock)o).getQuantityDbl().intValue();\r\n        return compareint -this.getQuantityDbl().intValue();\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/ArticleStock/cArticleStock.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Basics/ArticleStock/cArticleStock.java	(date 1620637124282)
@@ -8,6 +8,7 @@
 
 import ICS.Utils.cText;
 import SSU_WHS.Basics.Article.cArticle;
+import SSU_WHS.Basics.ArticlePropertyStock.cArticlePropertyStock;
 import SSU_WHS.Basics.Users.cUser;
 import SSU_WHS.Move.MoveorderLines.cMoveorderLine;
 
@@ -63,6 +64,16 @@
         this.dataTimeStampDat = cText.pStringToDateStr(this.articleStockEntity.getDataTimeStamp(),"YYYY-MM-dd");
     }
 
+    public cArticleStock(cArticlePropertyStock pvArticlePropertyStock) {
+
+        this.itemNoStr = pvArticlePropertyStock.getItemNoStr();
+        this.variantCodeStr = pvArticlePropertyStock.getVariantCodeStr();
+        this.locationStr = cUser.currentUser.currentBranch.getBranchStr();
+        this.bincodeStr =  pvArticlePropertyStock.getBincodeStr();
+        this.quantityDbl =  pvArticlePropertyStock.getQuantityDbl();
+        this.dataTimeStampDat =pvArticlePropertyStock.getDataTimeStampDat();
+    }
+
     //End Region Constructor
 
     //Region Public Methods
Index: app/src/main/java/SSU_WHS/General/cPublicDefinitions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.General;\r\n\r\n\r\npublic class cPublicDefinitions {\r\n\r\n    public static String ADDDOCUMENT_TAG = \"ADDDOCUMENT_TAG\";\r\n    public static String ADDREASON_TAG = \"ADDREASON_TAG\";\r\n    public static String SETTINGS_PASSWORD = \"ics\";\r\n    public static String UPDATE_BASE_URL = \"http://ssupdate.icsvertex.nl\";\r\n    public static String UPDATE_PACKAGE_NAME = \"scansuite.apk\";\r\n    public static String INTERFACE_VERSION = \"15002\";\r\n    public static String MOVE_MAINTYPE = \"MOVE_MAINTYPE\";\r\n    public static String NUMBERINTENT_NUMBER = \"NUMBERINTENT_NUMBER\";\r\n    public static String NUMBERINTENT_EXTRANUMBER = \"NUMBERINTENT_EXTRANUMBER\";\r\n    public static String NUMBERINTENT_CURRENTQUANTITY = \"NUMBERINTENT_CURRENTQUANTITY\";\r\n    public static String NUMBERINTENT_MAXQUANTITY = \"NUMBERINTENT_MAXQUANTITY\";\r\n    public static String KEY_COMMENTHEADER = \"KEY_COMMENTHEADER\";\r\n    public static String SETBIN_TAG = \"SETBIN_TAG\";\r\n    public static String ADDBIN_TAG = \"ADDBIN_TAG\";\r\n    public static String SETSERIAL_TAG = \"SETSERIAL_TAG\";\r\n    public static String ADDARTICLE_TAG = \"ADDARTICLE_TAG\";\r\n    public static int CHANGELANGUAGE_REQUESTCODE = 45;\r\n    public static int CHANGEDATETIME_REQUESTCODE = 46;\r\n    public static int CHANGEWIFI_REQUESTCODE = 47;\r\n    public static String DATEPATTERNSHOW = \"dd-MM-yyyy\";\r\n    public static String DATEPATTERNWITHTIMESHOW = \"dd-MM HH:mm\";\r\n    public static String DATEPATTERNWEBSERVICE = \"yyyy-MM-dd'T'hh:mm:ss'Z'\";\r\n    public static String SHAREDPREFERENCE_FILE = \"SCANSUITE_PREFERENCES\";\r\n    public static String BARCODEFRAGMENT_LIST_TAG = \"BARCODEFRAGMENT_LIST_TAG\";\r\n    public static String BRANCHFRAGMENT_LIST_TAG = \"BRANCHFRAGMENT_LIST_TAG\";\r\n    public static String PACKAGINGFRAGMENT_LIST_TAG = \"PACKAGINGFRAGMENT_LIST_TAG\";\r\n    public static String SHIPPINGFRAGMENT_LIST_TAG = \"SHIPPINGFRAGMENT_LIST_TAG\";\r\n    public static String GETTING_DATA_TAG = \"GETTING_DATA_TAG\";\r\n    public static String HUGEERROR_TAG = \"HUGEERROR_TAG\";\r\n    public static String HUGEERROR_ERRORMESSAGE = \"HUGEERROR_ERRORMESSAGE\";\r\n    public static String HUGEERROR_EXTRASTRING = \"HUGEERROR_EXTRASTRING\";\r\n    public static String ORDERDONE_TAG = \"ORDERDONE_TAG\";\r\n    public static String COMMENTFRAGMENT_TAG = \"COMMENTFRAGMENT_TAG\";\r\n    public static String ITEMPROPERTYVALUEINPUTFRAGMENT_TAG = \"ITEMPROPERTYVALUEINPUT_TAG\";\r\n    public static String ITEMPROPERTYVALUENOINPUTFRAGMENT_TAG = \"ITEMPROPERTYVALUENOINPUT_TAG\";\r\n    public static String WORKFLOWFRAGMENT_TAG = \"WORKFLOWFRAGMENT_TAG\";\r\n    public static String BINITEMSFRAGMENT_TAG = \"BINITEMSFRAGMENT_TAG\";\r\n    public static String ARTICLESTOCKFRAGMENT_TAG = \"ARTICLESTOCKFRAGMENT_TAG\";\r\n    public static String WORKPLACEFRAGMENT_TAG = \"WORKPLACEFRAGMENT_TAG\";\r\n    public static String ARTICLEDETAILFRAGMENT_TAG = \"ARTICLEDETAILFRAGMENT_TAG\";\r\n    public static String WEBSERVICEERROR_TAG = \"WEBSERVICEERROR_TAG\";\r\n    public static String WEBSERVICEERROR_LIST_TAG = \"WEBSERVICEERROR_LIST_TAG\";\r\n    public static String CURRENTLOCATION_TAG = \"ORDERDONE_TAG\";\r\n    public static String PASSWORDFRAGMENT_TAG = \"PASSWORDFRAGMENT_TAG\";\r\n    public static String PASSWORDFRAGMENT_HEADER = \"PASSWORDFRAGMENT_HEADER\";\r\n    public static String PASSWORDFRAGMENT_TEXT = \"PASSWORDFRAGMENT_TEXT\";\r\n    public static String PASSWORDFRAGMENT_HINT = \"PASSWORDFRAGMENT_HINT\";\r\n    public static String PASSWORDFRAGMENT_ISNUMERIC = \"PASSWORDFRAGMENT_ISNUMERIC\";\r\n    public static String ENVIRONMENTFRAGMENT_TAG = \"ENVIRONMENTFRAGMENT_TAG\";\r\n    public static String ARTICLEFULL_TAG = \"ARTICLEFULL_TAG\";\r\n    public static  String BRANCHPICKERFRAGMENT_TAG = \"BRANCHPICKERFRAGMENT_TAG\";\r\n    public static final String VIEW_NAME_HEADER_IMAGE = \"detail:header:imageStr\";\r\n    public static final String VIEW_NAME_HEADER_TEXT = \"detail:header:text\";\r\n    public static String VIEW_CHOSEN_ORDER = \"detail:header:text\";\r\n    public static String SENDING_TAG = \"SENDING_TAG\";\r\n    public static String ACCEPTREJECTFRAGMENT_TAG = \"ACCEPTREJECTFRAGMENT_TAG\";\r\n    public static String ACCEPTPACKAGINGFRAGMENT_TAG = \"ACCEPTPACKAGINGFRAGMENT_TAG\";\r\n    public static String BARCODEPICKERFRAGMENT_TAG = \"BARCODEPICKERFRAGMENT_TAG\";\r\n    public static String VIEW_CHOSEN_BIN = \"detail:header:text\";\r\n    public static  String VIEW_CHOSEN_BIN_IMAGE = \"detail:header:imageStr\";\r\n    public static final String BARCODEFRAGMENT_TAG = \"BARCODERAGMENT_TAG\";\r\n    public static String ADDENVIRONMENTMANUALLYFRAGMENT_TAG = \"ADDENVIRONMENTMANUALLYFRAGMENT_TAG\";\r\n    public static final String SETTINGSFRAGMENT_TAG = \"SETTINGSFRAGMENT_TAG\";\r\n    public static final String NUMBERFRAGMENT_TAG = \"NUMBERFRAGMENT_TAG\";\r\n    public static final String NUMBERPICKERFRAGMENT_TAG = \"NUMBERPICKERFRAGMENT_TAG\";\r\n    public  static final String VIEW_CHOSEN_DOCUMENT_IMAGE = \"VIEW_CHOSEN_DOCUMENT_IMAGE\";\r\n    public  static final String VIEW_CHOSEN_DOCUMENT = \"VIEW_CHOSEN_DOCUMENT\";\r\n    public static final int ACTIVITY_WIFI_SETTINGS = 1;\r\n    public static final String ITEMPROPERTYINPUTTEXTFRAGMENT_TAG = \"ITEMPROPERTYINPUTTEXTFRAGMENT_TAG\";\r\n    public static final String ITEMPROPERTYINPUTDATEFRAGMENT_TAG = \"ITEMPROPERTYINPUTDATEFRAGMENT_TAG\";\r\n\r\n    public static String PROGLOVE_CONNECT_ACTION = \"com.proglove.api.CONNECT\";\r\n\r\n\r\n    public enum Workflows {\r\n        BC,\r\n        BM,\r\n        BP,\r\n        EOM,\r\n        EOOM,\r\n        EOOS,\r\n        EOR,\r\n        EOS,\r\n        ER,\r\n        IVM,\r\n        IVS,\r\n        MAM,\r\n        MAS,\r\n        MAT,\r\n        MI,\r\n        MO,\r\n        MT,\r\n        MV,\r\n        MVI,\r\n        OMM,\r\n        OMOM,\r\n        OMOS,\r\n        OMR,\r\n        OMS,\r\n        PA,\r\n        PF,\r\n        PV,\r\n        RVR,\r\n        RVS,\r\n        SPV,\r\n        PS1,\r\n        PSM,\r\n        UNKNOWN\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/General/cPublicDefinitions.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/General/cPublicDefinitions.java	(date 1620640672728)
@@ -73,6 +73,7 @@
     public static final int ACTIVITY_WIFI_SETTINGS = 1;
     public static final String ITEMPROPERTYINPUTTEXTFRAGMENT_TAG = "ITEMPROPERTYINPUTTEXTFRAGMENT_TAG";
     public static final String ITEMPROPERTYINPUTDATEFRAGMENT_TAG = "ITEMPROPERTYINPUTDATEFRAGMENT_TAG";
+    public static final String ITEMPROPERTYSTOCKFRAGMENT_TAG = "ITEMPROPERTYSTOCKFRAGMENT_TAG";
 
     public static String PROGLOVE_CONNECT_ACTION = "com.proglove.api.CONNECT";
 
Index: app/src/main/java/SSU_WHS/Basics/ArticlePropertyValue/cArticlePropertyValue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.ArticlePropertyValue;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleProperty.cArticleProperty;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\n\r\npublic class cArticlePropertyValue {\r\n\r\n    //Public Properties\r\n    public String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return itemNoStr;\r\n    }\r\n\r\n    public String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return variantCodeStr;\r\n    }\r\n\r\n\r\n    private String propertyCodeStr;\r\n    public String getPropertyCodeStr() {return propertyCodeStr;}\r\n\r\n    public cItemProperty getItemProperty() {\r\n\r\n        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {\r\n            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {\r\n                return  itemProperty;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    private String valueStr;\r\n    public String getValueStr() {return valueStr;}\r\n\r\n    private int sortingSequenceNoInt;\r\n    public  int getSortingSequenceNoInt(){return sortingSequenceNoInt;}\r\n\r\n\r\n    public cArticlePropertyValue(JSONObject pvJsonObject , cArticle pvArticle) {\r\n        cArticlePropertyValueEntity articlePropertyValueEntity = new cArticlePropertyValueEntity(pvJsonObject);\r\n        this.itemNoStr = pvArticle.getItemNoStr();\r\n        this.variantCodeStr = pvArticle.getVariantCodeStr();\r\n        this.propertyCodeStr = articlePropertyValueEntity.getPropertyCodeStr();\r\n        this.valueStr = articlePropertyValueEntity.getValueStr();\r\n        this.sortingSequenceNoInt = articlePropertyValueEntity.getSortingSequenceNoInt();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/ArticlePropertyValue/cArticlePropertyValue.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Basics/ArticlePropertyValue/cArticlePropertyValue.java	(date 1620816967315)
@@ -28,6 +28,20 @@
     private String propertyCodeStr;
     public String getPropertyCodeStr() {return propertyCodeStr;}
 
+    public cArticleProperty getArticleProperty(){
+        if (this.getPropertyCodeStr().isEmpty() || cArticle.currentArticle.propertyObl == null || cArticle.currentArticle.propertyObl.size() == 0) {
+            return  null;
+        }
+
+        for (cArticleProperty articleProperty :  cArticle.currentArticle.propertyObl) {
+            if (articleProperty.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
+                return  articleProperty;
+            }
+        }
+
+        return  null;
+    }
+
     public cItemProperty getItemProperty() {
 
         if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {
@@ -44,12 +58,14 @@
 
     }
 
-    private String valueStr;
+    public String valueStr;
     public String getValueStr() {return valueStr;}
 
     private int sortingSequenceNoInt;
     public  int getSortingSequenceNoInt(){return sortingSequenceNoInt;}
 
+    public static cArticlePropertyValue currentArticlePropertyValue;
+
 
     public cArticlePropertyValue(JSONObject pvJsonObject , cArticle pvArticle) {
         cArticlePropertyValueEntity articlePropertyValueEntity = new cArticlePropertyValueEntity(pvJsonObject);
@@ -60,4 +76,12 @@
         this.sortingSequenceNoInt = articlePropertyValueEntity.getSortingSequenceNoInt();
     }
 
+    public cArticlePropertyValue(cArticleProperty pvArticleProperty) {
+        this.itemNoStr = pvArticleProperty.getItemNoStr();
+        this.variantCodeStr = pvArticleProperty.getVariantCodeStr();
+        this.propertyCodeStr = pvArticleProperty.getPropertyCodeStr();
+        this.valueStr =  "";
+        this.sortingSequenceNoInt = pvArticleProperty.getSortingSequenceNoInt();
+    }
+
 }
Index: app/src/main/java/SSU_WHS/Webservice/cWebserviceDefinitions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Webservice;\r\n\r\npublic class cWebserviceDefinitions {\r\n    //region Methods\r\n    public static String WEBMETHOD_SERVICEAVAILABLE = \"p_WebserviceBeschikbaarJsonStr\";\r\n    public static String WEBMETHOD_SCANNERLOGON = \"p_ScannerLogonJsonStr\";\r\n    public static String WEBMETHOD_GETSETTINGS = \"p_InstellingenGetJsonStr\";\r\n    public static String WEBMETHOD_GET14SETTINGS = \"p_Instellingen14GetJsonStr\";\r\n    public static String WEBMETHOD_GETBARCODELAYOUTS = \"p_BarcodelayoutGetJsonStr\";\r\n    public static String WEBMETHOD_GETPACKAGING = \"p_EmballageGetJsonStr\";\r\n    public static String WEBMETHOD_GETAUTHORISATIONSFORUSERINLOCATION = \"p_GebruikerVestigingAutorisatieGetJsonStr\";\r\n    //Used to be different for Android\r\n\r\n    public static String WEBMETHOD_GETLICENSE = \"p_LicentieGetJsonStr\";\r\n    public static String WEBMETHOD_RELEASELICENSE = \"p_LicentieReleaseJsonStr\";\r\n\r\n    public static String WEBMETHOD_GETUSERS = \"p_GebruikersGetJsonStr\";\r\n    public static String WEBMETHOD_GETSCANNERS = \"p_ScannersGetJsonStr\";\r\n    public static String WEBMETHOD_GETWORKPLACES = \"p_MagazijnWerkplekkenGetJsonStr\";\r\n    public static String WEBMETHOD_GETLABELTEMPLATES = \"p_LabelTemplateGetJsonStr\";\r\n    public static String WEBMETHOD_GETTRANSLATIONS = \"p_VertalingGetJsonStr\";\r\n    public static String WEBMETHOD_GETIDENTIFIERWITHDESTINATION = \"p_IdentifierWithDestinationGetJsonStr\";\r\n    public static String WEBMETHOD_GETBINARTICLES = \"p_MagazijnlocatieArtikelenGetJsonStr\";\r\n    public static String WEBMETHOD_GETBRANCHES = \"p_VestigingGetJsonStr\";\r\n    public static String WEBMETHOD_GETBRANCHESFORUSER = \"p_GebruikerVestigingenGetJsonStr\";\r\n    public static String WEBMETHOD_GETSTOCKOWNERFORUSER = \"p_GebruikerVestigingenStockOwnersGetJsonStr\";\r\n    public static String WEBMETHOD_GETPROCESSINGORPARKEDORDERS = \"p_PickordersInBehandlingOfInWachtJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERS = \"p_PickordersGetJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERLINES = \"p_PickorderRegelsGetJsonStr\";\r\n    public static String WEBMETHOD_GETQCPICKORDERLINES = \"p_WarehouseopdrachtLinesQcCheckGetJsonStr\";\r\n\r\n\r\n    public static String WEBMETHOD_WAREHOUSEORDERLOCK = \"p_WarehouseopdrachtLockJsonStr\";\r\n    public static String WEBMETHOD_WAREHOUSEORDERUNLOCK = \"p_WarehouseopdrachtUnlockJsonStr\";\r\n    public static String WEBMETHOD_WAREHOUSEORDERLOCKRELEASE = \"p_WarehouseopdrachtLockReleaseJsonStr\";\r\n    public static String WEBMETHOD_GETWAREHOUSELOCATIONS = \"p_MagazijnlocatieGetSubsetJsonStr\";\r\n    public static String WEBMETHOD_GETWAREHOUSEORDERCOMPOSITEBARCODES = \"p_WarehouseopdrachtCompositeBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERBARCODES = \"p_PickorderBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERLINEBARCODES = \"p_PickorderRegelBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETARTICLEIMAGE = \"p_ArtikelImageGetJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERLINE_HANDLED = \"p_PickorderRegelTakeHandledJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERLINECHECKED= \"p_WarehouseopdrachtLineQcCheckCheckedJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERPRINTDOCUMENTS= \"p_PickorderPrintDocumentsJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERLINECORRECT= \"p_PickorderRegelCorrectQcJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERCOMMENTS = \"p_PickorderCommentsGetJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERSTEPHANDLED = \"p_PickorderStapHandledJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERLINERESET = \"p_PickorderRegelResetPickenJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERLINERESETGENERATED = \"p_PickorderRegelResetGeneratedJsonStr\";\r\n    public static String WEBMETHOD_UPDATECURRENTORDERLOCATION = \"p_PickOrderUpdateCurrentOrderLocationJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERSSEQUELSTEP = \"p_PickordersVervolgstapGetJsonStr\";\r\n    public static String WEBMETHOD_LINE_PROPERTIES_HANDLED = \"p_WarehouseopdrachtLinePropertiesHandledJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERLINEGENERATEDTAKEHANDLED = \"p_PickorderTakeItemJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERITEMVARIANTCREATE = \"p_PickorderItemVariantCreateJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERHANDLEDGENERATED = \"p_PickorderOrderHandledGeneratedJsonStr\";\r\n\r\n\r\n    public static String WEBMETHOD_GETLOCATIONARTICLEVIAOWNERBARCODE = \"p_VestigingArtikelGetViaOwnerBarcodeJsonStr\";\r\n    public static String WEBMETHOD_GETARTICLEVIAOWNERBARCODE = \"p_ArtikelGetViaOwnerBarcodeJsonStr\";\r\n    public static String WEBMETHOD_GETARTICLEBARCODES = \"p_VestigingArtikelBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETARTICLEBYFORCE = \"p_VestigingArtikelGetForcedJsonStr\";\r\n    public static String WEBMETHOD_GETUNIQUEBARCODES = \"p_VestigingArtikelBarcodesUpdateUniqueGetJsonStr\";\r\n    public static String WEBMETHOD_GETARTICLEPROPERTIES = \"p_VestigingArtikelPropertiesGetJsonStr\";\r\n    public static String WEBMETHOD_GETARTICLEPROPERTYVALUES = \"p_VestigingArtikelPropertyValuesGetJsonStr\";\r\n\r\n\r\n    public static String WEBMETHOD_GETARTICLESTOCK = \"p_ArtikelVoorraadGetJsonStr\";\r\n    public static String WEBMETHOD_SORTORDERLINE_HANDLED = \"p_PickorderRegelPlaceSortedJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERADDRESSES = \"p_PickorderAdresGetJsonStr\";\r\n    public static String WEBMETHOD_GETSHIPPINGAGENTS = \"p_ExpediteursGetJsonStr\";\r\n    public static String WEBMETHOD_GETSHIPPINGAGENTSERVICES = \"p_ExpediteurServicesGetJsonStr\";\r\n    public static String WEBMETHOD_GETSHIPPINGAGENTSERVICESHPPINGUNITS = \"p_ExpediteurServiceVerzendeenhedenGetJsonStr\";\r\n    public static String WEBMETHOD_GETSHIPPINGAGENTSERVICESHIPMETHODS = \"p_ExpediteurServiceVerzendmethodsGetJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERSHIPMETHODS = \"p_PickorderShippingmethodGetJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERLINESPACKANDSHIP = \"p_PickorderRegelsPackAndShipGetJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERLINESFINISHSINGLEPIECE = \"p_PickorderRegelsFinishPackSinglePieceGetJsonStr\";\r\n    public static String WEBMETHOD_GETPICKORDERLINESSTORAGE = \"p_PickorderRegelsStorageGetJsonStr\";\r\n\r\n\r\n    public static String WEBMETHOD_CREATEMERGEDPICKORDER = \"p_PickorderCreateMergedJsonStr\";\r\n    public static String WEBMETHOD_ADDORDERTOMERGEDPICKORDER = \"p_PickorderAddToMergedJsonStr\";\r\n    public static String WEBMETHOD_REMOVEORDERFROMMERGEDPICKORDER = \"p_PickorderRemoveFromMergedJsonStr\";\r\n    public static String WEBMETHOD_REMOVEMERGEDPICKORDER = \"p_PickorderVerwijderenJsonStr\";\r\n    public static String WEBMETHOD_WAREHOUSEOPDRACHTSETTINGSGET = \"p_WarehouseopdrachtSettingsGetJsonStr\";\r\n\r\n    public static String WEBMETHOD_GETPICKORDERSHIPPACKAGES = \"p_PickorderShippingPackageGetJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERSOURCEDOCUMENTSHIPPED = \"p_PickorderSourceDocumentShippedJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERSOURCEDOCUMENTSTORED = \"p_PickorderEenSourceDocumentOpgeslagenJsonStr\";\r\n\r\n\r\n    public static String WEBMETHOD_PICKORDERUPDATEWORKPLACE = \"p_PickorderUpdateWorkplaceJsonStr\";\r\n    public static String WEBMETHOD_GETSORTLOCATIONADVICE = \"p_WarehouseopdrachtSortLocationAdviceGetJsonStr\";\r\n    public static String WEBMETHOD_GETARTICLEIMAGESMULTIPLE = \"p_ArtikelenImageGetJsonStr\";\r\n    public static String WEBMETHOD_USERLOGIN = \"p_GebruikerLoginJsonStr\";\r\n    public static String WEBMETHOD_GETITEMPROPERTY = \"p_ItemPropertyGetJsonStr\";\r\n    public static String WEBMETHOD_GETPROPERTYGROUPS = \"p_PropertiegroepenGetJsonStr\";\r\n    public static String WEBMETHOD_GETPROPERTYLINEDATA = \"p_WarehouseopdrachtPropertiegroepLineDataGetJsonStr\";\r\n\r\n    public static String WEBMETHOD_GETCOMPOSITEBARCODES= \"p_CompositeBarcodesGetJsonStr\";\r\n\r\n\r\n\r\n    public static String WEBMETHOD_INVENTORYCREATE = \"p_InventoryOrderCreateJsonStr \";\r\n    public static String WEBMETHOD_GETINVENTORYORDERS = \"p_InventoryOrdersGetJsonStr\";\r\n    public static String WEBMETHOD_GETINVENTORYORDERLINES = \"p_InventoryOrderRegelsGetJsonStr\";\r\n    public static String WEBMETHOD_GETINVENTORYORDERBINS = \"p_InventoryOrderBinsGetJsonStr\";\r\n    public static String WEBMETHOD_GETINVENTORYORDERPOSSIBLEBINS = \"p_InventoryOrderPossibleBinsGetJsonStr\";\r\n    public static String WEBMETHOD_GETINVENTORYORDERCOMMENTS = \"p_InventoryOrderCommentsGetJsonStr\";\r\n    public static String WEBMETHOD_GETINVENTORYORDERBARCODES = \"p_InventoryOrderBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_ADD_BIN = \"p_InventoryOrderAddExtraBinJsonStr\";\r\n    public static String WEBMETHOD_GETINVENTORYORDERLINEBARCODES = \"p_InventoryOrderRegelBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_INVENTORYBARCODECREATE = \"p_InventoryBarcodeCreateJsonStr\";\r\n    public static String WEBMETHOD_INVENTORYLINECREATE = \"p_InventoryRegelCreateJsonStr\";\r\n    public static String WEBMETHOD_INVENTORYLINESAVE = \"p_InventoryRegelTellingOpslaanJsonStr\";\r\n    public static String WEBMETHOD_INVENTORYLINERESET = \"p_InventoryRegelResetJsonStr\";\r\n    public static String WEBMETHOD_INVENTORYBINCLOSE = \"p_InventoryOrderBinCloseJsonStr\";\r\n    public static String WEBMETHOD_INVENTORYHANDLED = \"p_InventoryOrderHandledJsonStr\";\r\n    public static String WEBMETHOD_INVENTORYBINRESET = \"p_InventoryBinResetJsonStr\";\r\n    public static String WEBMETHOD_INVENTORYBINOPEN = \"p_InventoryOrderBinOpenJsonStr\";\r\n    public static String WEBMETHOD_GETINTAKEORDERS = \"p_ReceiveOrdersGetJsonStr\";\r\n    public static String WEBMETHOD_GETINTAKEORDERMATLINES = \"p_ReceiveMATRegelsGetJsonStr\";\r\n    public static String WEBMETHOD_GETINTAKEORDERMATLINEBARCODES = \"p_ReceiveMATRegelBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETINTAKEARCODES = \"p_ReceiveOrderBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETTAKEINTAKEARCODES = \"p_ReceiveOrderRegelTakeBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_INTAKELINEMATRESET = \"p_ReceiveMATRegelResetJsonStr\";\r\n    public static String WEBMETHOD_GETINTAKEORDERLINES = \"p_ReceiveOrderScannerRegelsInTakeGetJsonStr\";\r\n    public static String WEBMETHOD_GETINTAKEORDERITEMS = \"p_ReceiveOrderItemInTakeGetJsonStr\";\r\n    public static String WEBMETHOD_RECEIVEITEMVARIANTCREATE = \"p_ReceiveInTakeWarehouseopdrachtItemVariantCreateJsonStr\";\r\n    public static String WEBMETHOD_RECEIVESTOREITEMVARIANTCREATE = \"p_ReceiveStoreWarehouseopdrachtItemVariantCreateJsonStr\";\r\n    public static String WEBMETHOD_RECEIVEBARCODECREATE =  \"p_ReceiveBarcodeCreateJsonStr\";\r\n    public static String WEBMETHOD_RECEIVEINTAKEITEM =  \"p_ReceiveInTakeItemJsonStr\";\r\n    public static String WEBMETHOD_RECEIVELINRESET = \"p_ReceiveInTakeRegelResetJsonStr\";\r\n    public static String WEBMETHOD_CUSTOMAUTHORISATION = \"p_CustomAutorisatieGetJsonStr\";\r\n\r\n    public static String WEBMETHOD_INTAKELINEMATHANDLED = \"p_ReceiveMATLineHandledJsonStr\";\r\n    public static String WEBMETHOD_INTAKELINEMATHANDLEDPART = \"p_ReceiveRegelHandledPartPlaceMATJsonStr\";\r\n    public static String WEBMETHOD_INTAKEHANLED= \"p_ReceiveMATOrderHandledJsonStr\";\r\n    public static String WEBMETHOD_INTAKEITEMHANLED= \"p_ReceiveMATItemHandledJsonStr\";\r\n    public static String WEBMETHOD_INTAKESTOREITEMHANLED= \"p_ReceiveStoreItemJsonStr\";\r\n    public static String WEBMETHOD_RECEIVECREATE = \"p_ReceiveOrderCreateJsonStr\";\r\n    public static String WEBMETHOD_RECEIVEINVALIDATE = \"p_ReceiveVervallenJsonStr\";\r\n    public static String WEBMETHOD_RECEIVEHANDLED = \"p_ReceiveInTakeOrderHandledJsonStr\";\r\n    public static String WEBMETHOD_PACKAGINGHANDLED = \"p_WarehouseopdrachtEmballageUpdateJsonStr\";\r\n    public static String WEBMETHOD_PACKAGINGGET = \"p_WarehouseopdrachtEmballageGetJsonStr\";\r\n    public static String WEBMETHOD_STOCKOWNERGET = \"p_StockOwnerGetJsonStr\";\r\n\r\n\r\n    public static String WEBMETHOD_GETRECEIVEBINS = \"p_MagazijnlocatieReceiveGetJsonStr\";\r\n    public static String WEBMETHOD_GETSHIPBINS = \"p_MagazijnlocatieShipGetJsonStr\";\r\n\r\n    public static String WEBMETHOD_RETURNORDERSGET = \"p_RetourOrdersGetJsonStr\";\r\n    public static String WEBMETHOD_RETURNLINESGET = \"p_RetourOrderItemInTakeGetJsonStr\";\r\n    public static String WEBMETHOD_RETURNLINERESET = \"p_RetourInTakeRegelResetJsonStr\";\r\n    public static String WEBMETHOD_RETURNBARCODEGET = \"p_RetourOrderBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_RETURNORDERUPDATE = \"p_RetourOrderUpdateJsonStr\";\r\n    public static String WEBMETHOD_RETURNBARCODECREATE = \"p_RetourBarcodeCreateJsonStr\";\r\n    public static String WEBMETHOD_RETURNLINESAVE = \"p_RetourInTakeItemJsonStr\";\r\n    public static String WEBMETHOD_RETURNORDERHANDLED = \"p_RetourInTakeOrderHandledJsonStr\";\r\n    public static String WEBMETHOD_RETURNORDERCREATE = \"p_RetourOrderCreateJsonStr\";\r\n    public static String WEBMETHOD_RETURNLINESCANNEDGET = \"p_RetourOrderScannedRegelsInTakeGetJsonStr\";\r\n    public static String WEBMETHOD_RETURNORDERDISPOSED = \"p_RetourVervallenJsonStr\";\r\n    public static String WEBMETHOD_RETURNLINESCANNEDBARCODESGET = \"p_RetourOrderRegelTakeBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_RETURNORDERCOMMENTSGET = \"p_RetourOrderCommentsGetJsonStr\";\r\n    public static String WEBMETHOD_RETURNCREATEITEMVARIANT = \"p_RetourInTakeWarehouseopdrachtItemVariantCreateJsonStr\";\r\n    public static String WEBMETHOD_GETWAREHOUSEREASONS = \"p_MagazijnRedenenGetJsonStr\";\r\n\r\n    public static String WEBMETHOD_MOVEBARCODECREATE = \"p_MoveBarcodeCreateJsonStr\";\r\n    public static String WEBMETHOD_MOVEHANDLED = \"p_MoveOrderHandledJsonStr\";\r\n    public static String WEBMETHOD_MOVEORDERCREATE = \"p_MoveOrderCreateJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERCREATE = \"p_PickorderCreateJsonStr\";\r\n    public static String WEBMETHOD_PICKORDERBARCODECREATE = \"p_PickorderBarcodeCreateJsonStr\";\r\n    public static String WEBMETHOD_PRINTBINLABEL = \"p_MagazijnlocatieLabelPrintJsonStr\";\r\n    public static String WEBMETHOD_PRINTLINEITEMLABEL = \"p_LineArtikelLabelPrintJsonStr\";\r\n    public static String WEBMETHOD_PRINTITEMLABEL = \"p_ArtikelLabelPrintJsonStr\";\r\n\r\n    public static String WEBMETHOD_GETMOVEORDERLINES = \"p_MoveRegelsGetJsonStr\";\r\n    public static String WEBMETHOD_GETMOVEORDERBARCODES = \"p_MoveOrderBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETMOVEORDERLINEBARCODES = \"p_MoveRegelBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETMOVEORDERCOMMENTS = \"p_MoveOrderCommentsGetJsonStr\";\r\n    public static String WEBMETHOD_GETPACKANDSHIPORDERCOMMENTS = \"p_PackAndShipOrderCommentsGetJsonStr\";\r\n    public static String WEBMETHOD_GETMOVEORDERS = \"p_MoveOrdersGetJsonStr\";\r\n    public static String WEBMETHOD_MOVELINERESET = \"p_MoveRegelResetJsonStr\";\r\n    public static String WEBMETHOD_CREATEMOVEORDERBARCODES = \"p_MoveBarcodeCreateJsonStr\";\r\n    public static String WEBMETHOD_MOVEORDERUPDATECURRENTLOCATIION = \"p_MoveOrderUpdateCurrentOrderLocationJsonStr\";\r\n    public static String WEBMETHOD_GETBRANCHBINS = \"p_MagazijnlocatieGetJsonStr\";\r\n    public static String WEBMETHOD_MOVEORDERLINE_HANDLEDTAKEMT = \"p_MoveRegelHandledTakeMTJsonStr\";\r\n    public static String WEBMETHOD_MOVEORDERLINE_HANDLEDPLACEMT = \"p_MoveRegelHandledPlaceMTJsonStr\";\r\n    public static String WEBMETHOD_MOVEITEM_HANDLED = \"p_MoveItemHandledJsonStr\";\r\n    public static String WEBMETHOD_MOVEPICKHANDLED = \"p_MovePickHandledJsonStr\";\r\n    public static String WEBMETHOD_GETPACKANDSHIPORDERS = \"p_PackAndShipOrdersGetJsonStr\";\r\n    public static String WEBMETHOD_PACKANDSHIPORDERCREATE = \"p_PackAndShipOrderCreateJsonStr\";\r\n    public static String WEBMETHOD_GETPACKANDSHIPORDERLINES = \"p_PackAndShipRegelsGetJsonStr\";\r\n    public static String WEBMETHOD_GETPACKANDSHIPBARCODES = \"p_PackAndShipOrderBarcodesGetJsonStr\";\r\n    public static String WEBMETHOD_GETPACKANDSHIPSHIPMENTS = \"p_PackAndShipShipmentsGetJsonStr\";\r\n    public static String WEBMETHOD_GETPACKANDSHIPADDRESSES = \"p_PackAndShipOrderAdresGetJsonStr\";\r\n    public static String WEBMETHOD_GETPACKANDSHIPSHIPPINGMETHODS = \"p_PackAndShipOrderShippingmethodGetJsonStr\";\r\n    public static String WEBMETHOD_GETPACKANDSHIPSHIPPINPACKAGES = \"p_PackAndShipOrderShippingPackageGetJsonStr\";\r\n    public static String WEBMETHOD_GETSOURCEDOCUMENTSHIPPINGDATA = \"p_SourceDocShippingDataGetJsonStr\";\r\n    public static String WEBMETHOD_CREATEPACKANDSHIPSHIPMENT = \"p_PackAndShipOrderCreateShipmentJsonStr\";\r\n    public static String WEBMETHOD_PACKANDSHIPSHIPMENTSHIPPED= \"p_PackAndShipShipmentShippedJsonStr\";\r\n    public static String WEBMETHOD_PACKANDSHIPSHIPMENTHANDLED = \"p_PackAndShipShipmentHandledJsonStr\";\r\n    public static String WEBMETHOD_PACKANDSHIPHANDLED = \"p_PackAndShipOrderHandledJsonStr\";\r\n    public static String WEBMETHOD_PACKANDSHIPDELETE = \"p_PackAndShipVervallenJsonStr\";\r\n    public static String WEBMETHOD_RECEIVEDELETE = \"p_ReceiveVervallenJsonStr\";\r\n\r\n    public static String WEBMETHOD_PACKANDSHIPUPDATE = \"p_PackAndShipOrderUpdateJsonStr\";\r\n    public static String WEBMETHOD_PACKANDSHIPSHIPMENTADDDOCUMENT = \"p_PackAndShipShipmentDocumentAddJsonStr\";\r\n\r\n    public static String WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET = \"p_WarehouseopdrachtLineItemPropertiesGetJsonStr\";\r\n    public static String WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET = \"p_WarehouseopdrachtLineItemPropertyValuesGetJsonStr\";\r\n\r\n\r\n\r\n       //endregion Methods\r\n\r\n    //region Properties\r\n    public static String WEBPROPERTY_USER = \"pv_GebruikerStr\";\r\n    public static String WEBPROPERTY_USERNAME = \"pv_UsernameStr\";\r\n    public static String WEBPROPERTY_USERNAMEDUNGLISH = \"pv_GebruikersnameStr\";\r\n    public static String WEBPROPERTY_USERNAMEDUTCH = \"pv_GebruikersnaamStr\";\r\n    public static String WEBPROPERTY_IDENTIFIER = \"pv_IdentifierStr\";\r\n    public static String WEBPROPERTY_LOCATION_NL = \"pv_VestigingStr\";\r\n    public static String WEBPROPERTY_LICENSE = \"pv_LicentieStr\";\r\n    public static String WEBPROPERTY_INPROGRESS = \"pv_InBehandelingBln\";\r\n    public static String WEBPROPERTY_SEARCHTEXT = \"pv_ZoekTekstStr\";\r\n    public static String WEBPROPERTY_MAINTYPE = \"pv_MainTypeStr\";\r\n    public static String WEBPROPERTY_ORDERNUMBER = \"pv_OpdrachtnummerStr\";\r\n    public static String WEBPROPERTY_ORDERNUMBERMERGED = \"pv_OpdrachtnummerMergedStr\";\r\n    public static String WEBPROPERTY_ORDERNUMBERTOADD = \"pv_OpdrachtnummerToAddStr\";\r\n    public static String WEBPROPERTY_ORDERNUMBERTOREMOVE = \"pv_OpdrachtnummerToRemoveStr\";\r\n    public static String WEBPROPERTY_SOURCEDOCUMENT = \"pv_SourceDocumentStr\";\r\n    public static String WEBPROPERTY_SOURCENO = \"pv_SourceNoStr\";\r\n    public static String WEBPROPERTY_INCLUDEIMAGE = \"pv_IncludeImageBln\";\r\n    public static String WEBPROPERTY_SETTINGTYPE = \"pv_SettingTypeEnu\";\r\n\r\n    public static String WEBPROPERTY_ACTIONTYPECODE = \"pv_ActiontypecodeStr\";\r\n    public static String WEBPROPERTY_SCANNER = \"pv_ScannerStr\";\r\n    public static String WEBPROPERTY_BATCHBINCODE = \"pv_BatchBinCodeStr\";\r\n    public static String WEBPROPERTY_SCANNERID = \"pv_ScannerIdStr\";\r\n    public static String WEBPROPERTY_DEVICEBRAND = \"pv_DeviceBrandStr\";\r\n    public static String WEBPROPERTY_DEVICETYPE = \"pv_DeviceTypeStr\";\r\n    public static String WEBPROPERTY_SCANNERVERSION = \"pv_ScannerVersionStr\";\r\n    public static String WEBPROPERTY_SCANNERCONFIGURATION = \"pv_ScannerConfigurationStr\";\r\n    public static String WEBPROPERTY_LANGUAGEASCULTURE = \"pv_LanguageAsCultureStr\";\r\n    public static String WEBPROPERTY_ORDERTYPE = \"pv_OpdrachtsoortStr\";\r\n    public static String WEBPROPERTY_WORKFLOWSTEPSTR = \"pv_WorkflowStapStr\";\r\n    public static String WEBPROPERTY_WORKFLOWSTEPINT = \"pv_WorkflowStapInt\";\r\n    public static String WEBPROPERTY_SHIPBINSTR = \"pv_ShipBinCodeStr\";\r\n    public static String WEBPROPERTY_WORKFLOWSTEPCODESTR = \"pv_WorkflowStapcodeStr\";\r\n    public static String WEBPROPERTY_IGNOREBUSY = \"pv_IgnoreBezigBln\";\r\n    public static String WEBPROPERTY_BINSUBSET = \"pv_BinSubsetObl\";\r\n    public static String WEBPROPERTY_OWNER = \"pv_OwnerStr\";\r\n    public static String WEBPROPERTY_ITEMNO = \"pv_ItemNoStr\";\r\n    public static String WEBPROPERTY_ITEMPROPERTYSEQUENCENO = \"pv_ItemPropertySequenceNoLng\";\r\n    public static String WEBPROPERTY_DESTINATIONNO = \"pv_DestinationNoStr\";\r\n    public static String WEBPROPERTY_VARIANTCODE = \"pv_VariantCodeStr\";\r\n    public static String WEBPROPERTY_VARIANTCODETINY = \"pv_VariantcodeStr\";\r\n    public static String WEBPROPERTY_REFRESH = \"Pv_RefreshBln\";\r\n    public static String WEBPROPERTY_LINENO= \"pv_LineNoLng\";\r\n    public static String WEBPROPERTY_LINENOTAKE = \"pv_LineNoTakeLng\";\r\n    public static String WEBPROPERTY_LINENOPLACE = \"pv_LineNoPlaceLng\";\r\n    public static String WEBPROPERTY_HANDLEDTIMESTAMP = \"pv_HandledTimestampDat\";\r\n    public static String WEBPROPERTY_PICKFROMCONTAINER = \"pv_PickenUitContainerStr\";\r\n    public static String WEBPROPERTY_BARCODESLIST = \"pv_BarcodesObl\";\r\n    public static String WEBPROPERTY_PACKAGINGLIST = \"pv_EmballageObl\";\r\n    public static String WEBPROPERTY_CONTAINERSLIST = \"pv_ContainersObl\";\r\n    public static String WEBPROPERTY_PROCESSINGSEQUENCE = \"pv_ProcessingSequenceStr\";\r\n    public static String WEBPROPERTY_WORKPLACE = \"pv_WorkplaceStr\";\r\n    public static String WEBPROPERTY_WORKSPACE = \"pv_WorkspaceStr\";\r\n    public static String WEBPROPERTY_CULTURE = \"pv_CultureStr\";\r\n    public static String WEBPROPERTY_ORDERLOCATION = \"pv_OrderLocationStr\";\r\n    public static String WEBPROPERTY_CURRENTLOCATION = \"pv_OrderCurrentLocationStr\";\r\n    public static String WEBPROPERTY_PICKSTEP = \"pv_PickStapInt\";\r\n    public static String WEBPROPERTY_NUMBER = \"pv_AantalDbl\";\r\n    public static String WEBPROPERTY_PROPERTIESHANDLED = \"pv_PropertiesHandledObl\";\r\n    public static String WEBPROPERTY_PROPERTIEGROUP = \"pv_PropertiegroepStr\";\r\n    public static String WEBPROPERTY_LOCATION = \"pv_LocationStr\";\r\n    public static String WEBPROPERTY_SHIPPINGAGENT = \"pv_ShippingAgentStr\";\r\n    public static String WEBPROPERTY_SHIPPINGSERVICE = \"pv_ShippingServiceStr\";\r\n    public static String WEBPROPERTY_SHIPPINGOPTIONS = \"pv_ShippingOptionObl\";\r\n    public static String WEBPROPERTY_SHIPPINGPACKAGES = \"pv_ShippingPackageObl\";\r\n    public static String WEBPROPERTY_ITEMSLIST = \"pv_ItemsObl\";\r\n    public static String WEBPROPERTY_PASSWORD = \"pv_PasswordStr\";\r\n    public static String WEBPROPERTY_BINCODE = \"pv_BinCodeStr\";\r\n    public static String WEBPROPERTY_BINCODENL = \"pv_MagazijnlocatieStr\";\r\n    public static String WEBPROPERTY_PRINTBINCODENL = \"pv_LocatieStr\";\r\n    public static String WEBPROPERTY_BINCODETINY = \"pv_BincodeStr\";\r\n    public static String WEBPROPERTY_BINCODEHANDLED = \"pv_BincodeHandledStr\";\r\n    public static String WEBPROPERTY_STOCKOWNER = \"pv_StockOwnerStr\";\r\n    public static String WEBPROPERTY_STORAGEBINCODE = \"pv_StorageBinCodeStr\";\r\n    public static String WEBPROPERTY_WORKFLOW = \"pv_WorkflowStr\";\r\n    public static String WEBPROPERTY_SHIPMENT = \"pv_ShipmentStr\";\r\n    public static String WEBPROPERTY_DOCUMENT = \"pv_DocumentStr\";\r\n    public static String WEBPROPERTY_DOCUMENT2= \"pv_Document2Str\";\r\n    public static String WEBPROPERTY_EXTERNALREFERENCE = \"pv_ExternalReferenceStr\";\r\n    public static String WEBPROPERTY_ORDERCONTAINER = \"pv_OrderContainerStr\";\r\n    public static String WEBPROPERTY_INVENTORYBARCODECHECK = \"pv_InventoryBarcodeCheckBln\";\r\n    public static String WEBPROPERTY_ADMINISTRATION = \"pv_AdministrationStr\";\r\n    public static String WEBPROPERTY_BARCODETYPE = \"pv_BarCodeTypeInt\";\r\n    public static String WEBPROPERTY_ISUNIQUEBARCODE = \"pv_IsUniqueBarcodeBln\";\r\n    public static String WEBPROPERTY_QUANTITYPERUNITOFMEASURE = \"pv_QtyPerUnitOfMeasureDbl\";\r\n    public static String WEBPROPERTY_UNITOFMEASURE = \"pv_UnitOfMeasureStr\";\r\n    public static String WEBPROPERTY_ITEMTYPE = \"pv_ItemsoortStr\";\r\n    public static String WEBPROPERTY_ORIGINNO = \"pv_OriginNoStr\";\r\n    public static String WEBPROPERTY_RECEIVEBIN = \"pv_ReceiveBinStr\";\r\n    public static String WEBPROPERTY_RECEIVEBARCODECHECK = \"pv_ReceiveBarcodeCheckBln\";\r\n    public static String WEBPROPERTY_CONTAINER = \"pv_ContainerStr\";\r\n    public static String WEBPROPERTY_PROPERTIESHANDLEDLIST = \"pv_PropertiesHandledObl\";\r\n    public static String WEBPROPERTY_ACTIONTYPECODE_CAMELCASE = \"pv_ActionTypeCodeStr\";\r\n    public static String WEBPROPERTY_CURRENTLOCATION_SHORT = \"pv_CurrentLocationStr\";\r\n    public static String WEBPROPERTY_PICKBARCODECHECK = \"pv_PickBarcodeCheckBln\";\r\n    public static String WEBPROPERTY_MOVEBARCODECHECK = \"pv_MoveBarcodeCheckBln\";\r\n    public static String WEBPROPERTY_MIBATCHTRAKEBIN = \"pv_MiBatchTakeBinStr\";\r\n\r\n    public static String WEBPROPERTY_RETURNBIN = \"pv_RetourBinStr\";\r\n    public static String WEBPROPERTY_RETURNBARCODECHECK = \"pv_RetourBarcodeCheckBln\";\r\n    public static String WEBPROPERTY_RETURNMULTIPLEDOCUMENTS = \"pv_RetourMultipleDocumentsBln\";\r\n    public static String WEBPROPERTY_RETURNREASONNL = \"pv_RetourredenStr\";\r\n    public static String WEBPROPERTY_RETURNREASONBIGNL = \"pv_RetourRedenStr\";\r\n    public static String WEBPROPERTY_RECEIVEDDAT = \"pv_ReceivedDat\";\r\n    public static String WEBPROPERTY_REASON = \"pv_ReasonStr\";\r\n\r\n    public static String WEBPROPERTY_BINLABELTEMPLATE = \"pv_BinLabelTemplateStr\";\r\n    public static String WEBPROPERTY_ITEMLABELTEMPLATE = \"pv_ItemLabelTemplateStr\";\r\n    public static String WEBPROPERTY_PRINTQUANTITY = \"pv_PrintQuantityLng\";\r\n\r\n    //endregion Properties\r\n\r\n    //region temporary Properties\r\n    public static String WEBPROPERTY_BARCODE = \"pv_BarcodeStr\";\r\n    public static String WEBPROPERTY_BARCODEORIGINAL = \"pv_BarcodeOrigineelStr\";\r\n    public static String WEBPROPERTY_BARCODELIST = \"pv_BarcodesObl\";\r\n    public static String WEBPROPERTY_QUANTITYHANDLED = \"pv_QuantityHandledDbl\";\r\n    public static String WEBPROPERTY_QUANTITYCHECKED = \"pv_QuantityCheckedDbl\";\r\n    //endregion temporary Properties\r\n\r\n    //region complex types\r\n    public static String WEBPROPERTY_INTERFACESHIPPINGPACKAGE = \"c_InterfaceShippingPackageIesp\";\r\n    public static String WEBPROPERTY_INTERFACESHIPPINGPACKAGE_PACKAGE = \"g_PackageTypeStr\";\r\n    public static String WEBPROPERTY_INTERFACESHIPPINGPACKAGE_SEQUENCENUMBER = \"g_SequenceNumberInt\";\r\n    public static String WEBPROPERTY_INTERFACESHIPPINGPACKAGE_WEIGHTING = \"g_WeightinGLng\";\r\n    public static String WEBPROPERTY_INTERFACESHIPPINGPACKAGE_ITEMCOUNT = \"g_ItemcountDbl\";\r\n    public static String WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINERTYPE = \"g_ContainersoortStr\";\r\n    public static String WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINER = \"g_ContainerStr\";\r\n\r\n    public static String WEBPROPERTY_INTERFACESPROPERTY_PROPERTYCODE = \"g_PropertyCodeStr\";\r\n    public static String WEBPROPERTY_INTERFACESPROPERTY_SEQUENCENOHANDLED = \"g_SequenceNoHandledLng\";\r\n    public static String WEBPROPERTY_INTERFACESPROPERTY_VALUEHANDLED = \"g_ValueHandledStr\";\r\n\r\n    public static String WEBPROPERTY_BARCODEHANDLED_COMPLEX = \"c_BarcodeHandledUwbh\";\r\n    public static String WEBPROPERTY_PACKAGINGHANDLED_COMPLEX = \"c_EmballageHandledUweh\";\r\n    public static String WEBPROPERTY_PROPERTYHANDLED_COMPLEX = \"c_PropertyHandledUwph\";\r\n    public static String WEBPROPERTY_BARCODE_COMPLEX = \"g_BarcodeStr\";\r\n    public static String WEBPROPERTY_QUANTITYHANDLED_COMPLEX = \"g_QuantityHandledDbl\";\r\n\r\n    public static String WEBPROPERTY_ARTICLEINPUT_COMPLEX = \"c_ArtikelInputUari\";\r\n    public static String WEBPROPERTY_ITEMNO_COMPLEX = \"g_ItemNoStr\";\r\n    public static String WEBPROPERTY_VARIANTCODE_COMPLEX = \"g_VariantCodeStr\";\r\n\r\n    public static String WEBPROPERTY_PACKAGING_COMPLEX = \"g_EmballageStr\";\r\n    public static String WEBPROPERTY_QUANTITY_IN_TAKE_COMPLEX = \"g_QuantityInTakeDbl\";\r\n    public static String WEBPROPERTY_QUANTITY_SHIPPED_COMPLEX = \"g_QuantityShippedDbl\";\r\n\r\n    //endregion complex types\r\n\r\n    //region cWebservice defaults\r\n    public static String SUCCESBLN_NAMESTR = \"vSuccessBln\";\r\n    public static String RESULTBLN_NAMESTR = \"vResultBln\";\r\n    public static String RESULTLNG_NAMESTR = \"vResultLng\";\r\n    public static String RESULTOBL_NAMESTR = \"vResultsObl\";\r\n    public static String RESULTDTT_NAMESTR = \"vResultDtt\";\r\n    //endregion cWebservice defaults\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Webservice/cWebserviceDefinitions.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Webservice/cWebserviceDefinitions.java	(date 1620717782091)
@@ -61,7 +61,7 @@
     public static String WEBMETHOD_GETUNIQUEBARCODES = "p_VestigingArtikelBarcodesUpdateUniqueGetJsonStr";
     public static String WEBMETHOD_GETARTICLEPROPERTIES = "p_VestigingArtikelPropertiesGetJsonStr";
     public static String WEBMETHOD_GETARTICLEPROPERTYVALUES = "p_VestigingArtikelPropertyValuesGetJsonStr";
-
+    public static String WEBMETHOD_GETARTICLESTOCKWITHPROPERTY = "p_ItemPropertyStockGetForcedJsonStr";
 
     public static String WEBMETHOD_GETARTICLESTOCK = "p_ArtikelVoorraadGetJsonStr";
     public static String WEBMETHOD_SORTORDERLINE_HANDLED = "p_PickorderRegelPlaceSortedJsonStr";
@@ -343,6 +343,8 @@
     public static String WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINER = "g_ContainerStr";
 
     public static String WEBPROPERTY_INTERFACESPROPERTY_PROPERTYCODE = "g_PropertyCodeStr";
+    public static String WEBPROPERTY_REQUEST_PROPERTYCODE = "pv_PropertyCodeStr";
+    public static String WEBPROPERTY_INTERFACESPROPERTY_PROPERTYVALUE = "pv_PropertyValueStr";
     public static String WEBPROPERTY_INTERFACESPROPERTY_SEQUENCENOHANDLED = "g_SequenceNoHandledLng";
     public static String WEBPROPERTY_INTERFACESPROPERTY_VALUEHANDLED = "g_ValueHandledStr";
 
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/PrintItemLabelFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.InputType;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.WriterException;\r\nimport com.google.zxing.common.BitMatrix;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplate;\r\nimport SSU_WHS.Basics.PrintItemLabel.cPrintItemLabel;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLine;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLine;\r\nimport SSU_WHS.Move.Moveorders.cMoveorder;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;\r\nimport SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;\r\nimport SSU_WHS.Return.ReturnOrder.cReturnorder;\r\nimport SSU_WHS.Return.ReturnorderBarcode.cReturnorderBarcode;\r\nimport SSU_WHS.Return.ReturnorderLine.cReturnorderLine;\r\nimport nl.icsvertex.scansuite.Activities.General.MenuActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class PrintItemLabelFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Private Properties\r\n\r\n    private ConstraintLayout lineBinPrint;\r\n    private TextView textViewTitle;\r\n//    private ImageView barcodeImage;\r\n    private Spinner barcodeSpinner;\r\n    private Spinner workplaceSpinner;\r\n    private Spinner layoutSpinner;\r\n\r\n    private AppCompatImageButton imageButtonNoInputPropertys;\r\n    private TextView articleDescriptionCompactText;\r\n    private TextView articleDescription2CompactText;\r\n    private TextView articleItemCompactText;\r\n    private TextView articleBarcodeCompactText;\r\n    private ProgressBar progressBar;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n\r\n    private  int counterMinusHelperInt;\r\n    private  int counterPlusHelperInt;\r\n    private Handler minusHandler;\r\n    private  Handler plusHandler;\r\n\r\n    private Button printButton;\r\n    private Button cancelButton;\r\n    private Long amountLng;\r\n    private String orderTypeStr;\r\n    private String orderNumberStr;\r\n    private Long lineNoLng;\r\n    private String barcodeStr;\r\n    private Boolean unknownLineBln;\r\n    private Boolean unknownArticleBln;\r\n    private String stockOwnerStr;\r\n    private ArrayList<String> barcodeObl;\r\n\r\n    //End Region private Properties\r\n\r\n    //Region Constructor\r\n    public PrintItemLabelFragment() {\r\n    }\r\n    //End Region Constructor\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_print_item_label, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = WindowManager.LayoutParams.WRAP_CONTENT;\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n    }\r\n\r\n    public void onBackPressed(){\r\n        cAppExtension.dialogFragment.dismiss();\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n\r\n        this.mFindViews();\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetToolbar();\r\n\r\n        this.mSetListeners();\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.textViewTitle = getView().findViewById(R.id.textViewTitle);\r\n\r\n        this.imageButtonNoInputPropertys = getView().findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.articleDescriptionCompactText = getView().findViewById(R.id.articleDescriptionCompactText);\r\n        this.articleDescription2CompactText = getView().findViewById(R.id.articleDescription2CompactText);\r\n        this.articleItemCompactText = getView().findViewById(R.id.articleItemCompactText);\r\n        this.articleBarcodeCompactText = getView().findViewById(R.id.articleBarcodeCompactText);\r\n        this.lineBinPrint = getView().findViewById(R.id.lineBinPrint);\r\n        this.workplaceSpinner = getView().findViewById(R.id.workspaceSpinner);\r\n        this.barcodeSpinner = getView().findViewById(R.id.barcodeSpinner);\r\n        this.layoutSpinner = getView().findViewById(R.id.layoutSpinner);\r\n        this.printButton = getView().findViewById(R.id.printButton);\r\n        this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n        this.quantityText = getView().findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = getView().findViewById(R.id.quantityRequiredText);\r\n//        this.barcodeImage = getView().findViewById(R.id.barcodeImageView);\r\n        this.imageButtonMinus = getView().findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = getView().findViewById(R.id.imageButtonPlus);\r\n        this.progressBar = getView().findViewById(R.id.progressBar);\r\n    }\r\n\r\n\r\n    public void mSetToolbar() {\r\n        this.textViewTitle.setText(this.barcodeStr);\r\n        this.textViewTitle.setSelected(true);\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.unknownLineBln = false;\r\n        this.unknownArticleBln = false;\r\n\r\n        if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n            if (cPickorderBarcode.currentPickorderBarcode !=null){\r\n                this.barcodeStr = cPickorderBarcode.currentPickorderBarcode.getBarcodeStr();\r\n            }else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cPickorder.currentPickOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"PICKEN\";\r\n            this.stockOwnerStr = cPickorder.currentPickOrder.getStockownerStr();\r\n            if (cPickorderLine.currentPickOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cPickorderLine.currentPickOrderLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n            if (cPickorderBarcode.currentPickorderBarcode !=null){\r\n                this.barcodeStr = cPickorderBarcode.currentPickorderBarcode.getBarcodeStr();\r\n            }else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cPickorder.currentPickOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"PICKEN\";\r\n            this.stockOwnerStr = cPickorder.currentPickOrder.getStockownerStr();\r\n            if (cPickorderLine.currentPickOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cPickorderLine.currentPickOrderLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof PickorderLinesActivity && cPickorderLine.currentPickOrderLine != null) {\r\n            if (cPickorderLine.currentPickOrderLine.barcodesObl != null && cPickorderLine.currentPickOrderLine.barcodesObl.size() > 0){\r\n                this.barcodeStr = cPickorderLine.currentPickOrderLine.barcodesObl.get(0).getBarcodeStr();\r\n                if (cPickorderLine.currentPickOrderLine.barcodesObl.size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cPickorderBarcode barcode :  cPickorderLine.currentPickOrderLine.barcodesObl){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n\r\n            }else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cPickorder.currentPickOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"PICKEN\";\r\n            this.stockOwnerStr = cPickorder.currentPickOrder.getStockownerStr();\r\n            this.lineNoLng = cText.pIntegerToLongLng(cPickorderLine.currentPickOrderLine.getLineNoInt());\r\n        }\r\n        if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity && cPickorderLine.currentPickOrderLine != null) {\r\n            if (cPickorderLine.currentPickOrderLine.barcodesObl != null && cPickorderLine.currentPickOrderLine.barcodesObl.size() > 0){\r\n                this.barcodeStr = cPickorderLine.currentPickOrderLine.barcodesObl.get(0).getBarcodeStr();\r\n                if (cPickorderLine.currentPickOrderLine.barcodesObl.size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cPickorderBarcode barcode :  cPickorderLine.currentPickOrderLine.barcodesObl){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n            }else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cPickorder.currentPickOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"PICKEN\";\r\n            this.stockOwnerStr = cPickorder.currentPickOrder.getStockownerStr();\r\n            this.lineNoLng = cText.pIntegerToLongLng(cPickorderLine.currentPickOrderLine.getLineNoInt());\r\n        }\r\n        if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n            if (cInventoryorderBarcode.currentInventoryOrderBarcode != null) {\r\n                this.barcodeStr = cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr();\r\n            }\r\n            else {\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cInventoryorder.currentInventoryOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"INVENTARISATIE\";\r\n            this.stockOwnerStr = cInventoryorder.currentInventoryOrder.getStockownerStr();\r\n            if (cInventoryorderLine.currentInventoryOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt());\r\n                    this.unknownArticleBln = true;\r\n                    cArticle.currentArticle = new cArticle(cInventoryorderLine.currentInventoryOrderLine.getItemNoStr(), cInventoryorderLine.currentInventoryOrderLine.getVariantCodeStr());\r\n                    this.articleDescriptionCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n                    this.articleDescription2CompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());}\r\n        }\r\n        if (cAppExtension.activity instanceof InventoryorderBinActivity && cInventoryorderLine.currentInventoryOrderLine !=  null) {\r\n            if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() > 0 ) {\r\n                this.barcodeStr = cInventoryorderLine.currentInventoryOrderLine.barcodesObl().get(0).getBarcodeStr();\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cInventoryorderBarcode barcode :  cInventoryorderLine.currentInventoryOrderLine.barcodesObl()){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cInventoryorder.currentInventoryOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"INVENTARISATIE\";\r\n            this.stockOwnerStr = cInventoryorder.currentInventoryOrder.getStockownerStr();\r\n            this.lineNoLng = cText.pIntegerToLongLng(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt());\r\n            this.unknownArticleBln = true;\r\n            cArticle.currentArticle = new cArticle(cInventoryorderLine.currentInventoryOrderLine.getItemNoStr(), cInventoryorderLine.currentInventoryOrderLine.getVariantCodeStr());\r\n            this.articleDescriptionCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n            this.articleDescription2CompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinePlaceActivity) {\r\n            if ( cMoveorder.currentMoveOrder.currentMoveorderBarcode != null) {\r\n                this.barcodeStr =  cMoveorder.currentMoveOrder.currentMoveorderBarcode.getBarcodeStr();\r\n            }\r\n            else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            if (cMoveorderLine.currentMoveOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity) {\r\n            if ( cMoveorder.currentMoveOrder.currentMoveorderBarcode != null) {\r\n                this.barcodeStr =  cMoveorder.currentMoveOrder.currentMoveorderBarcode.getBarcodeStr();\r\n            }\r\n            else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            if (cMoveorderLine.currentMoveOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLineTakeActivity) {\r\n            if ( cMoveorder.currentMoveOrder.currentMoveorderBarcode != null) {\r\n                this.barcodeStr =  cMoveorder.currentMoveOrder.currentMoveorderBarcode.getBarcodeStr();\r\n            }\r\n            else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            if (cMoveorderLine.currentMoveOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n            if ( cMoveorder.currentMoveOrder.currentMoveorderBarcode != null) {\r\n                this.barcodeStr =  cMoveorder.currentMoveOrder.currentMoveorderBarcode.getBarcodeStr();\r\n            }\r\n            else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            if (cMoveorderLine.currentMoveOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n            if ( cMoveorder.currentMoveOrder.currentMoveorderBarcode != null) {\r\n                this.barcodeStr =  cMoveorder.currentMoveOrder.currentMoveorderBarcode.getBarcodeStr();\r\n            }\r\n            else{\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            if (cMoveorderLine.currentMoveOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinesActivity && cMoveorderLine.currentMoveOrderLine != null) {\r\n            if ( cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().size()> 0) {\r\n                this.barcodeStr =  cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().get(0).getBarcodeStr();\r\n                if (cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cMoveorderBarcode barcode :  cMoveorderLine.currentMoveOrderLine.orderBarcodesObl()){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());\r\n            this.unknownArticleBln = true;\r\n            cArticle.currentArticle = new cArticle(cMoveorderLine.currentMoveOrderLine.getItemNoStr(),cMoveorderLine.currentMoveOrderLine.getVariantCodeStr());\r\n            this.articleDescriptionCompactText.setText(cMoveorderLine.currentMoveOrderLine.getDescriptionStr());\r\n            this.articleDescription2CompactText.setText(cMoveorderLine.currentMoveOrderLine.getDescription2Str());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity && cMoveorderLine.currentMoveOrderLine != null) {\r\n            if ( cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().size()> 0) {\r\n                this.barcodeStr =  cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().get(0).getBarcodeStr();\r\n                if (cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cMoveorderBarcode barcode :  cMoveorderLine.currentMoveOrderLine.orderBarcodesObl()){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());\r\n            this.unknownArticleBln = true;\r\n            cArticle.currentArticle = new cArticle(cMoveorderLine.currentMoveOrderLine.getItemNoStr(),cMoveorderLine.currentMoveOrderLine.getVariantCodeStr());\r\n            this.articleDescriptionCompactText.setText(cMoveorderLine.currentMoveOrderLine.getDescriptionStr());\r\n            this.articleDescription2CompactText.setText(cMoveorderLine.currentMoveOrderLine.getDescription2Str());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinesTakeMTActivity && cMoveorderLine.currentMoveOrderLine != null) {\r\n            if ( cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().size()> 0) {\r\n                this.barcodeStr =  cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().get(0).getBarcodeStr();\r\n                if (cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cMoveorderBarcode barcode :  cMoveorderLine.currentMoveOrderLine.orderBarcodesObl()){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());\r\n            this.unknownArticleBln = true;\r\n            cArticle.currentArticle = new cArticle(cMoveorderLine.currentMoveOrderLine.getItemNoStr(),cMoveorderLine.currentMoveOrderLine.getVariantCodeStr());\r\n            this.articleDescriptionCompactText.setText(cMoveorderLine.currentMoveOrderLine.getDescriptionStr());\r\n            this.articleDescription2CompactText.setText(cMoveorderLine.currentMoveOrderLine.getDescription2Str());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity && cMoveorderLine.currentMoveOrderLine != null) {\r\n            if ( cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().size()> 0) {\r\n                this.barcodeStr =  cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().get(0).getBarcodeStr();\r\n                if (cMoveorderLine.currentMoveOrderLine.orderBarcodesObl().size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cMoveorderBarcode barcode :  cMoveorderLine.currentMoveOrderLine.orderBarcodesObl()){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cMoveorder.currentMoveOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"VERPLAATS\";\r\n            this.stockOwnerStr = cMoveorder.currentMoveOrder.getStockownerStr();\r\n            this.lineNoLng = cText.pIntegerToLongLng(cMoveorderLine.currentMoveOrderLine.getLineNoInt());\r\n            this.unknownArticleBln = true;\r\n            cArticle.currentArticle = new cArticle(cMoveorderLine.currentMoveOrderLine.getItemNoStr(),cMoveorderLine.currentMoveOrderLine.getVariantCodeStr());\r\n            this.articleDescriptionCompactText.setText(cMoveorderLine.currentMoveOrderLine.getDescriptionStr());\r\n            this.articleDescription2CompactText.setText(cMoveorderLine.currentMoveOrderLine.getDescription2Str());\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n            if (cIntakeorderBarcode.currentIntakeOrderBarcode != null) {\r\n                this.barcodeStr = cIntakeorderBarcode.currentIntakeOrderBarcode.getBarcodeStr();\r\n                this.unknownArticleBln = true;\r\n                cArticle.currentArticle = new cArticle(cIntakeorderBarcode.currentIntakeOrderBarcode.getItemNoStr(), cIntakeorderBarcode.currentIntakeOrderBarcode.getVariantCodeStr());\r\n                this.articleDescriptionCompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescriptionStr());\r\n                this.articleDescription2CompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescription2Str());\r\n            }\r\n            else {\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cIntakeorder.currentIntakeOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"ONTVANGST\";\r\n            this.stockOwnerStr = cIntakeorder.currentIntakeOrder.getStockownerStr();\r\n            if (cIntakeorderMATLine.currentIntakeorderMATLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cIntakeorderMATLine.currentIntakeorderMATLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n            if (cIntakeorderBarcode.currentIntakeOrderBarcode != null) {\r\n                this.barcodeStr = cIntakeorderBarcode.currentIntakeOrderBarcode.getBarcodeStr();\r\n                this.unknownArticleBln = true;\r\n                cArticle.currentArticle = new cArticle(cIntakeorderBarcode.currentIntakeOrderBarcode.getItemNoStr(), cIntakeorderBarcode.currentIntakeOrderBarcode.getVariantCodeStr());\r\n                this.articleDescriptionCompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescriptionStr());\r\n                this.articleDescription2CompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescription2Str());\r\n            }\r\n            else {\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cIntakeorder.currentIntakeOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"ONTVANGST\";\r\n            this.stockOwnerStr = cIntakeorder.currentIntakeOrder.getStockownerStr();\r\n            if (cIntakeorderMATLine.currentIntakeorderMATLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cIntakeorderMATLine.currentIntakeorderMATLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n            if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().size()> 0) {\r\n                this.barcodeStr = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().get(0).getBarcodeStr();\r\n                this.unknownArticleBln = true;\r\n                cArticle.currentArticle = new cArticle(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getItemNoStr(),cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getVariantCodeStr());\r\n                this.articleDescriptionCompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescriptionStr());\r\n                this.articleDescription2CompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescription2Str());\r\n\r\n                if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cIntakeorderBarcode barcode :  cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl()){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cIntakeorder.currentIntakeOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"ONTVANGST\";\r\n            this.stockOwnerStr = cIntakeorder.currentIntakeOrder.getStockownerStr();\r\n            if (cIntakeorderMATLine.currentIntakeorderMATLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cIntakeorderMATLine.currentIntakeorderMATLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n            if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().size()> 0) {\r\n                this.barcodeStr = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().get(0).getBarcodeStr();\r\n                this.unknownArticleBln = true;\r\n                cArticle.currentArticle = new cArticle(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getItemNoStr(),cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getVariantCodeStr());\r\n                this.articleDescriptionCompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescriptionStr());\r\n                this.articleDescription2CompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescription2Str());\r\n                if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cIntakeorderBarcode barcode :  cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl()){\r\n                        this.barcodeObl.add(barcode.getBarcodeAndQuantityStr());\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cIntakeorder.currentIntakeOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"ONTVANGST\";\r\n            this.stockOwnerStr = cIntakeorder.currentIntakeOrder.getStockownerStr();\r\n            if (cIntakeorderMATLine.currentIntakeorderMATLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cIntakeorderMATLine.currentIntakeorderMATLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n            if (cIntakeorderBarcode.currentIntakeOrderBarcode != null) {\r\n                this.barcodeStr = cIntakeorderBarcode.currentIntakeOrderBarcode.getBarcodeStr();\r\n                this.unknownArticleBln = true;\r\n                cArticle.currentArticle = new cArticle(cIntakeorderBarcode.currentIntakeOrderBarcode.getItemNoStr(), cIntakeorderBarcode.currentIntakeOrderBarcode.getVariantCodeStr());\r\n                this.articleDescriptionCompactText.setText(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getDescriptionStr());\r\n                this.articleDescription2CompactText.setText(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getDescription2Str());\r\n            }\r\n            else {\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cIntakeorder.currentIntakeOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"ONTVANGST\";\r\n            this.stockOwnerStr = cIntakeorder.currentIntakeOrder.getStockownerStr();\r\n            if (cReceiveorderLine.currentReceiveorderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cReceiveorderLine.currentReceiveorderLine.getLineNoInt());}\r\n        }\r\n        if (cAppExtension.activity instanceof ReturnArticleDetailActivity){\r\n            if (cReturnorderBarcode.currentReturnOrderBarcode != null) {\r\n                this.barcodeStr = cReturnorderBarcode.currentReturnOrderBarcode.getBarcodeStr();\r\n            } else {\r\n                if(cArticle.currentArticle != null && cArticle.currentArticle.barcodesObl.size() > 0){\r\n                    this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                    if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                        this.barcodeObl = new ArrayList<>();\r\n                        for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                            this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.orderNumberStr = cReturnorder.currentReturnOrder.getOrderNumberStr();\r\n            this.orderTypeStr = \"RETOUR\";\r\n            this.stockOwnerStr = cReturnorder.currentReturnOrder.getStockownerStr();\r\n            if (cReturnorderLine.currentReturnOrderLine == null){\r\n                this.unknownLineBln = true;\r\n            }\r\n            else {this.lineNoLng = cText.pIntegerToLongLng(cReturnorderLine.currentReturnOrderLine.getLineNoInt());\r\n                if (this.lineNoLng == 0L) {this.unknownLineBln = true;}\r\n            }\r\n        }\r\n        if (cAppExtension.activity instanceof MenuActivity){\r\n            if (cArticle.currentArticle.barcodesObl.size() > 0){\r\n                this.barcodeStr = cArticle.currentArticle.barcodesObl.get(0).getBarcodeStr();\r\n                if (cArticle.currentArticle.barcodesObl.size() > 1){\r\n                    this.barcodeObl = new ArrayList<>();\r\n                    for (cArticleBarcode barcode :  cArticle.currentArticle.barcodesObl){\r\n                        this.barcodeObl.add(barcode.getBarcodeStr() + \"( \" + barcode.quantityPerUnitOfMeasureDbl + \" )\");\r\n                    }\r\n                }\r\n            }\r\n            this.unknownLineBln = true;\r\n            this.stockOwnerStr = \"\";\r\n        }\r\n\r\n        if (this.barcodeStr == null){\r\n            cAppExtension.dialogFragment.dismiss();\r\n            return;\r\n        }\r\n        if (this.unknownLineBln && cArticle.currentArticle == null) {\r\n            cAppExtension.dialogFragment.dismiss();\r\n            return;\r\n        }\r\n        this.mSetBarcode(this.barcodeStr);\r\n        this.progressBar.setVisibility(View.INVISIBLE);\r\n        this.mShowBarcodeSpinner();\r\n        this.mShowWorkPlaceSpinner();\r\n        this.mShowLabelTemplateSpinner();\r\n        this.amountLng = 1L;\r\n        this.mShowQuantityInfo();\r\n        this.mSetArticleInfo();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetPrintListener();\r\n        this.mSetCancelListener();\r\n        if (this.barcodeObl != null){this.mSetBarcodeSpinnerListener();}\r\n        this.mSetWorkplaceSpinnerListener();\r\n        this.mSetLayoutSpinnerListener();\r\n        this.mSetMinusListener();\r\n        this.mSetPlusListener();\r\n        this.mSetNumberListener();\r\n    }\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n                cAppExtension.dialogFragment.dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetPrintListener() {\r\n        this.printButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n                if (cWorkplace.currentWorkplace == null | cLabelTemplate.currentLabelTemplate == null){\r\n                    return;\r\n                }\r\n                progressBar.setVisibility(View.VISIBLE);\r\n                Runnable runnable = new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        mPrintItemLabel();\r\n                    }\r\n                };\r\n                Thread printLabel = new Thread(runnable);\r\n                printLabel.start();\r\n                //\r\n            }\r\n        });\r\n    }\r\n\r\n    private void  mSetArticleInfo(){\r\n        if (!this.unknownArticleBln) {\r\n            this.articleDescriptionCompactText.setText(cArticle.currentArticle.getDescriptionStr());\r\n            this.articleDescription2CompactText.setText(cArticle.currentArticle.getDescription2Str());\r\n        }\r\n        this.articleItemCompactText.setText(cArticle.currentArticle.getItemNoAndVariantCodeStr());\r\n        this.articleBarcodeCompactText.setText(this.barcodeStr);\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n    private void mPrintItemLabel(){\r\n\r\n\r\n        cPrintItemLabel printItemLabel;\r\n\r\n\r\n        if (this.unknownLineBln) {\r\n            printItemLabel = new cPrintItemLabel(this.stockOwnerStr, this.barcodeStr, this.amountLng);\r\n            if(  printItemLabel.pPrintItemLabelViaWebserviceBln()){\r\n\r\n                cAppExtension.dialogFragment.dismiss();\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            printItemLabel = new cPrintItemLabel(this.orderTypeStr, this.orderNumberStr, this.lineNoLng, this.barcodeStr, this.amountLng);\r\n            if(  printItemLabel.pPrintLineItemLabelViaWebserviceBln()){\r\n\r\n                cAppExtension.dialogFragment.dismiss();\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.progressBar.setVisibility(View.INVISIBLE);\r\n        cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.error_print_failed),null);\r\n    }\r\n\r\n    private void mShowLabelTemplateSpinner() {\r\n\r\n        if (cLabelTemplate.itemTemplateObl == null ||  cLabelTemplate.itemTemplateObl.size() <= 0) {\r\n            this.layoutSpinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.layoutSpinner.setVisibility(View.VISIBLE);\r\n        this.mFillTemplateSpinner();\r\n    }\r\n\r\n\r\n    private void mFillTemplateSpinner() {\r\n\r\n        if (cLabelTemplate.itemTemplateObl == null ||  cLabelTemplate.itemTemplateObl.size() <= 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> labelTemplateObl = new ArrayList<>();\r\n        for (cLabelTemplate labelTemplate :cLabelTemplate.itemTemplateObl ) {\r\n            labelTemplateObl.add(labelTemplate.getTemplateStr());\r\n        }\r\n\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                labelTemplateObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.layoutSpinner.setAdapter(adapter);\r\n    }\r\n\r\n    private void mSetLayoutSpinnerListener() {\r\n        this.layoutSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                cLabelTemplate.currentLabelTemplate = cLabelTemplate.pGetLabelTemplateByName(cLabelTemplate.itemTemplateObl ,layoutSpinner.getSelectedItem().toString());\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowWorkPlaceSpinner() {\r\n\r\n        if (cWorkplace.allWorkplacesObl  == null || cWorkplace.allWorkplacesObl.size() == 0) {\r\n            this.workplaceSpinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.workplaceSpinner.setVisibility(View.VISIBLE);\r\n        this.mFillWorkplaceSpinner();\r\n    }\r\n\r\n\r\n    private void mFillWorkplaceSpinner() {\r\n\r\n        if (cWorkplace.allWorkplacesObl == null ||  cWorkplace.allWorkplacesObl.size() <= 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> workPlaceObl = new ArrayList<>();\r\n\r\n        if (cUser.currentUser.currentBranch.workplacesObl().size() >= 1) {\r\n            for (cWorkplace workplace :cUser.currentUser.currentBranch.workplacesObl() ) {\r\n                workPlaceObl.add(workplace.getWorkplaceStr());\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (cWorkplace workplace :cWorkplace.allWorkplacesObl ) {\r\n                workPlaceObl.add(workplace.getWorkplaceStr());\r\n            }\r\n        }\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                workPlaceObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.workplaceSpinner.setAdapter(adapter);\r\n        if (cWorkplace.currentWorkplace != null)\r\n        { this.workplaceSpinner.setSelection(adapter.getPosition(cWorkplace.currentWorkplace.getWorkplaceStr()));}\r\n    }\r\n\r\n    private void mSetWorkplaceSpinnerListener() {\r\n        this.workplaceSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                cWorkplace.currentWorkplace = cWorkplace.pGetWorkplaceByName(workplaceSpinner.getSelectedItem().toString());\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowBarcodeSpinner() {\r\n\r\n        if (this.barcodeObl  == null) {\r\n            this.barcodeSpinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.barcodeSpinner.setVisibility(View.VISIBLE);\r\n        this.mFillBarcodeSpinner();\r\n    }\r\n\r\n    private void mFillBarcodeSpinner() {\r\n\r\n        if (this.barcodeObl  == null) {\r\n            return;\r\n        }\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                this.barcodeObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.barcodeSpinner.setAdapter(adapter);\r\n        if (this.barcodeStr != null)\r\n        { this.barcodeSpinner.setSelection(adapter.getPosition(this.barcodeStr));}\r\n    }\r\n\r\n    private void mSetBarcodeSpinnerListener() {\r\n        this.barcodeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                mSetBarcode(barcodeSpinner.getSelectedItem().toString().substring(0, barcodeSpinner.getSelectedItem().toString().indexOf(\"(\")));\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n        });\r\n    }\r\n\r\n    //Region Private Methods\r\n\r\n    private void mTryToChangeQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, Integer pvAmountInt) {\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            this.amountLng += pvAmountInt;\r\n            this.quantityText.setText(cText.pLongToStringStr(this.amountLng));\r\n            return;\r\n        }\r\n\r\n        //negative\r\n        //Check if value already is zero\r\n        if (this.amountLng <= 1 ) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n        //Determine the new amount\r\n        this.amountLng -= pvAmountInt;\r\n        //Change quantityDbl in activity\r\n        this.quantityText.setText(cText.pLongToStringStr(this.amountLng));\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo() {\r\n\r\n        this.quantityText.setImeOptions(EditorInfo.IME_ACTION_DONE);\r\n        this.quantityText.setSelectAllOnFocus(true);\r\n        this.quantityText.requestFocus();\r\n        this.quantityText.setSingleLine();\r\n        this.quantityText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_TEXT_VARIATION_NORMAL);\r\n        this.quantityText.setCursorVisible(false);\r\n\r\n        this.quantityText.setText(cText.pLongToStringStr(this.amountLng));\r\n        this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n    //Region Number Broadcaster\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putLong(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, this.amountLng);\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,9999);\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    counterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mTryToChangeQuantity(true, false, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    counterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mTryToChangeQuantity(false, false, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (counterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (counterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (counterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (counterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (counterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (counterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (counterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (counterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.counterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.counterPlusHelperInt += 1;\r\n    }\r\n\r\n    private void mHandleQuantityChosen(Integer pvQuantityInt) {\r\n        this.mTryToChangeQuantity(pvQuantityInt != 0, true,pvQuantityInt);\r\n    }\r\n\r\n    private void mSetBarcode(String pvBarcodeStr){\r\n        this.barcodeStr = pvBarcodeStr;\r\n        this.textViewTitle.setText(this.barcodeStr);\r\n\r\n//        MultiFormatWriter multiFormatWriter = new MultiFormatWriter();\r\n//        try {\r\n//            BitMatrix bitMatrix = multiFormatWriter.encode( this.barcodeStr , BarcodeFormat.CODE_128, 250, 72);\r\n//            Bitmap bitmap = Bitmap.createBitmap(250, 72, Bitmap.Config.RGB_565);\r\n//            for(int i = 0; i< 250; i++){\r\n//                for(int j =  0; j< 72; j++){\r\n//                    bitmap.setPixel(i,j,bitMatrix.get(i,j)? Color.BLACK:Color.WHITE);\r\n//                }\r\n//            }\r\n//            this.barcodeImage.setImageBitmap(bitmap);\r\n//\r\n//        } catch (WriterException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/PrintItemLabelFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/PrintItemLabelFragment.java	(date 1620745064107)
@@ -111,6 +111,8 @@
     private TextView articleDescription2CompactText;
     private TextView articleItemCompactText;
     private TextView articleBarcodeCompactText;
+    private TextView textViewWorkspaceFail;
+    private TextView textViewLayoutFail;
     private ProgressBar progressBar;
 
     private TextView quantityText;
@@ -219,6 +221,8 @@
         this.imageButtonMinus = getView().findViewById(R.id.imageButtonMinus);
         this.imageButtonPlus = getView().findViewById(R.id.imageButtonPlus);
         this.progressBar = getView().findViewById(R.id.progressBar);
+        this.textViewWorkspaceFail = getView().findViewById(R.id.textViewWorkspaceFail);
+        this.textViewLayoutFail = getView().findViewById(R.id.textViewLayoutFail);
     }
 
 
@@ -828,7 +832,8 @@
     private void mShowLabelTemplateSpinner() {
 
         if (cLabelTemplate.itemTemplateObl == null ||  cLabelTemplate.itemTemplateObl.size() <= 0) {
-            this.layoutSpinner.setVisibility(View.GONE);
+            this.printButton.setVisibility(View.GONE);
+            this.textViewLayoutFail.setText(cAppExtension.activity.getString(R.string.message_templates_not_available));
             return;
         }
 
@@ -874,7 +879,8 @@
     private void mShowWorkPlaceSpinner() {
 
         if (cWorkplace.allWorkplacesObl  == null || cWorkplace.allWorkplacesObl.size() == 0) {
-            this.workplaceSpinner.setVisibility(View.GONE);
+            this.printButton.setVisibility(View.GONE);
+            this.textViewWorkspaceFail.setText(cAppExtension.activity.getString(R.string.message_workplaces_not_available));
             return;
         }
 
Index: app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.LineItemProperty.LinePropertyValue;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cLinePropertyValue implements Comparable{\r\n\r\n    //Public Properties\r\n    public int lineNoInt;\r\n\r\n    public int getLineNoInt() {return lineNoInt;}\r\n\r\n    private String propertyCodeStr;\r\n    public String getPropertyCodeStr() {return propertyCodeStr;}\r\n\r\n    public cLineProperty getLineProperty(){\r\n\r\n        if (this.getPropertyCodeStr().isEmpty() || cLineProperty.allLinePropertysObl == null || cLineProperty.allLinePropertysObl.size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cLineProperty lineProperty :cLineProperty.allLinePropertysObl ) {\r\n            if (lineProperty.getLineNoInt().equals(this.getLineNoInt()) && lineProperty.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {\r\n                return lineProperty;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    public cItemProperty getItemProperty() {\r\n\r\n        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {\r\n            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {\r\n                return  itemProperty;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    private String valueStr;\r\n    public String getValueStr() {return valueStr;}\r\n\r\n    private int sortingSequenceNoInt;\r\n    public  int getSortingSequenceNoInt(){return sortingSequenceNoInt;}\r\n\r\n    public double quantityDbl;\r\n    public double getQuantityDbl() {return quantityDbl;}\r\n\r\n    private cLinePropertyValueEntity linePropertyValueEntity;\r\n\r\n    public static cLinePropertyValue currentLinePropertyValue;\r\n    public static ArrayList<cLinePropertyValue> allLinePropertysValuesObl;\r\n\r\n    private cLinePropertyValueViewModel getLinePropertyValueViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cLinePropertyValueViewModel.class);\r\n    }\r\n\r\n    public cLinePropertyValue(JSONObject pvJsonObject) {\r\n        this.linePropertyValueEntity = new cLinePropertyValueEntity(pvJsonObject);\r\n        this.lineNoInt = this.linePropertyValueEntity.getLineNoInt();\r\n        this.propertyCodeStr = this.linePropertyValueEntity.getPropertyCodeStr();\r\n        this.valueStr = this.linePropertyValueEntity.getValueStr();\r\n        this.sortingSequenceNoInt = this.linePropertyValueEntity.getSortingSequenceNoInt();\r\n        this.quantityDbl = 0;\r\n    }\r\n\r\n    public cLinePropertyValue(cLineProperty lineProperty) {\r\n        this.linePropertyValueEntity = null;\r\n\r\n        this.lineNoInt = lineProperty.getLineNoInt();\r\n        this.propertyCodeStr = lineProperty.getPropertyCodeStr();\r\n        this.valueStr = cAppExtension.activity.getString(R.string.novalueyet);\r\n        this.sortingSequenceNoInt = 0;\r\n        this.quantityDbl = 0;\r\n    }\r\n\r\n    public cLinePropertyValue(int pvLineNoInt, String pvPropertyCodeStr, String pvValueStr) {\r\n        this.linePropertyValueEntity = null;\r\n        this.lineNoInt = pvLineNoInt;\r\n        this.propertyCodeStr = pvPropertyCodeStr;\r\n        this.valueStr = pvValueStr;\r\n        this.sortingSequenceNoInt = 0;\r\n        this.quantityDbl = 1;\r\n    }\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getLinePropertyValueViewModel().insert(this.linePropertyValueEntity);\r\n\r\n        if (cLinePropertyValue.allLinePropertysValuesObl == null) {\r\n            cLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();\r\n        }\r\n        for (cLinePropertyValue linePropertyValue : cLinePropertyValue.allLinePropertysValuesObl){\r\n            if (linePropertyValue.getLineNoInt() == this.getLineNoInt() && linePropertyValue.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr()) && linePropertyValue.getValueStr().equalsIgnoreCase(this.getValueStr())){\r\n                return true;\r\n            }\r\n        }\r\n        cLinePropertyValue.allLinePropertysValuesObl.add(this);\r\n        return true;\r\n    }\r\n\r\n    public boolean pDeleteFromDatabaseBln() {\r\n        if (cLinePropertyValue.allLinePropertysValuesObl != null) {\r\n            cLinePropertyValue.allLinePropertysValuesObl.remove(this);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static boolean pTruncateTableBln() {\r\n\r\n        cLinePropertyValueViewModel linePropertyValueViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cLinePropertyValueViewModel.class);\r\n        linePropertyValueViewModel.deleteAll();\r\n        cLinePropertyValue.allLinePropertysValuesObl = null;\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Object o) {\r\n        int compareint = cText.pDoubleToInt(((cLinePropertyValue)o).getQuantityDbl());\r\n        return compareint- cText.pDoubleToInt(this.getQuantityDbl());\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValue.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/LineItemProperty/LinePropertyValue/cLinePropertyValue.java	(date 1620825139426)
@@ -19,7 +19,7 @@
 
     public int getLineNoInt() {return lineNoInt;}
 
-    private String propertyCodeStr;
+    private final String propertyCodeStr;
     public String getPropertyCodeStr() {return propertyCodeStr;}
 
     public cLineProperty getLineProperty(){
@@ -54,19 +54,23 @@
 
     }
 
-    private String valueStr;
+    private final String valueStr;
     public String getValueStr() {return valueStr;}
 
-    private int sortingSequenceNoInt;
+    private final int sortingSequenceNoInt;
     public  int getSortingSequenceNoInt(){return sortingSequenceNoInt;}
 
     public double quantityDbl;
     public double getQuantityDbl() {return quantityDbl;}
 
-    private cLinePropertyValueEntity linePropertyValueEntity;
+    public double quantityAvailableDbl;
+    public double getQuantityAvailableDbl(){return quantityAvailableDbl;}
+
+    private final cLinePropertyValueEntity linePropertyValueEntity;
 
     public static cLinePropertyValue currentLinePropertyValue;
     public static ArrayList<cLinePropertyValue> allLinePropertysValuesObl;
+    public static Double quantityPerUnitOfMeasureDbl;
 
     private cLinePropertyValueViewModel getLinePropertyValueViewModel() {
         return new ViewModelProvider(cAppExtension.fragmentActivity).get(cLinePropertyValueViewModel.class);
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/PrintBinLabelFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.InputType;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.WriterException;\r\nimport com.google.zxing.common.BitMatrix;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplate;\r\nimport SSU_WHS.Basics.PrintBinLabel.cPrintBinLabel;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLine;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLine;\r\nimport SSU_WHS.Move.Moveorders.cMoveorder;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;\r\nimport SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;\r\nimport nl.icsvertex.scansuite.Activities.General.MenuActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class PrintBinLabelFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Private Properties\r\n\r\n    private ConstraintLayout lineBinPrint;\r\n    private TextView textViewTitle;\r\n    private ImageView barcodeImage;\r\n    private Spinner workplaceSpinner;\r\n    private Spinner layoutSpinner;\r\n    private Spinner binSpinner;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n\r\n    private  int counterMinusHelperInt;\r\n    private  int counterPlusHelperInt;\r\n    private Handler minusHandler;\r\n    private  Handler plusHandler;\r\n    private ProgressBar progressBar;\r\n\r\n    private Button printButton;\r\n    private  Button cancelButton;\r\n    private Long amountLng;\r\n    private String binCodeStr;\r\n    private Boolean binSpinnerBln;\r\n\r\n    //End Region private Properties\r\n\r\n    //Region Constructor\r\n    public PrintBinLabelFragment() {\r\n    }\r\n    //End Region Constructor\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_line_bin_print, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = WindowManager.LayoutParams.WRAP_CONTENT;\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n    }\r\n\r\n    public void onBackPressed(){\r\n        cAppExtension.dialogFragment.dismiss();\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n            return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n\r\n        this.mFindViews();\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetToolbar();\r\n\r\n        this.mSetListeners();\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.textViewTitle = getView().findViewById(R.id.textViewTitle);\r\n        this.binSpinner = getView().findViewById(R.id.binSpinner);\r\n        this.lineBinPrint = getView().findViewById(R.id.lineBinPrint);\r\n        this.workplaceSpinner = getView().findViewById(R.id.workspaceSpinner);\r\n        this.layoutSpinner = getView().findViewById(R.id.layoutSpinner);\r\n        this.printButton = getView().findViewById(R.id.printButton);\r\n        this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n        this.quantityText = getView().findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = getView().findViewById(R.id.quantityRequiredText);\r\n        this.barcodeImage = getView().findViewById(R.id.barcodeImageView);\r\n        this.imageButtonMinus = getView().findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = getView().findViewById(R.id.imageButtonPlus);\r\n        this.progressBar = getView().findViewById(R.id.progressBar);\r\n    }\r\n\r\n\r\n    public void mSetToolbar() {\r\n        this.textViewTitle.setSelected(true);\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.binSpinnerBln = false;\r\n        this.binSpinner.setVisibility(View.INVISIBLE);\r\n        if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n            this.mSetBarcode(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n            this.mSetBarcode(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n            this.mSetBarcode(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n            this.mSetBarcode(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n            this.mSetBarcode(cInventoryorderLine.currentInventoryOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof InventoryorderBinActivity) {\r\n            this.mSetBarcode(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinePlaceActivity) {\r\n            this.mSetBarcode(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity) {\r\n            this.mSetBarcode(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLineTakeActivity) {\r\n            this.mSetBarcode(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n            this.mSetBarcode(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n            this.mSetBarcode(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n            this.mSetBarcode(cMoveorderLine.currentMoveOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n            this.mSetBarcode(cMoveorderLine.currentMoveOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n            this.mSetBarcode(cMoveorderLine.currentMoveOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity) {\r\n            this.mSetBarcode(cMoveorderLine.currentMoveOrderLine.getBinCodeStr());\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n            this.mShowBinSpinner();\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n            this.mShowBinSpinner();\r\n        }\r\n        if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n            this.mShowBinSpinner();\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n            this.mShowBinSpinner();\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n            this.mShowBinSpinner();\r\n        }\r\n        if (cAppExtension.activity instanceof MenuActivity){\r\n            this.mSetBarcode(cBranchBin.currentBranchBin.getBinCodeStr());\r\n        }\r\n        this.mShowWorkPlaceSpinner();\r\n        this.mShowLabelTemplateSpinner();\r\n        this.amountLng = 1L;\r\n        this.mShowQuantityInfo();\r\n        this.progressBar.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetPrintListener();\r\n        this.mSetCancelListener();\r\n        this.mSetWorkplaceSpinnerListener();\r\n        this.mSetLayoutSpinnerListener();\r\n        if (this.binSpinnerBln){this.mSetBinSpinnerListener();}\r\n        this.mSetMinusListener();\r\n        this.mSetPlusListener();\r\n        this.mSetNumberListener();\r\n    }\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n         cAppExtension.dialogFragment.dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetPrintListener() {\r\n        this.printButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n                if (cWorkplace.currentWorkplace == null | cLabelTemplate.currentLabelTemplate == null){\r\n                    return;\r\n                }\r\n                progressBar.setVisibility(View.VISIBLE);\r\n                Runnable runnable = new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        mPrintBinLabel();\r\n                    }\r\n                };\r\n                Thread printLabel = new Thread(runnable);\r\n                printLabel.start();\r\n                //\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mPrintBinLabel(){\r\n        cPrintBinLabel printBinLabel;\r\n        printBinLabel = new cPrintBinLabel(this.binCodeStr,  this.amountLng);\r\n       if(printBinLabel.pPrintBinLabelViaWebserviceBln()){\r\n           cAppExtension.dialogFragment.dismiss();\r\n           return;\r\n       }\r\n        this.progressBar.setVisibility(View.INVISIBLE);\r\n        cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.error_print_failed),null);\r\n    }\r\n\r\n    private void mShowLabelTemplateSpinner() {\r\n\r\n        if (cLabelTemplate.binTemplateObl == null ||  cLabelTemplate.binTemplateObl.size() <= 0) {\r\n            this.layoutSpinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.layoutSpinner.setVisibility(View.VISIBLE);\r\n        this.mFillTemplateSpinner();\r\n    }\r\n\r\n\r\n    private void mFillTemplateSpinner() {\r\n\r\n        if (cLabelTemplate.binTemplateObl == null ||  cLabelTemplate.binTemplateObl.size() <= 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> labelTemplateObl = new ArrayList<>();\r\n        for (cLabelTemplate labelTemplate :cLabelTemplate.binTemplateObl ) {\r\n            labelTemplateObl.add(labelTemplate.getTemplateStr());\r\n        }\r\n\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                labelTemplateObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.layoutSpinner.setAdapter(adapter);\r\n    }\r\n\r\n    private void mSetLayoutSpinnerListener() {\r\n        this.layoutSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                cLabelTemplate.currentLabelTemplate = cLabelTemplate.pGetLabelTemplateByName(cLabelTemplate.binTemplateObl ,layoutSpinner.getSelectedItem().toString());\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowBinSpinner() {\r\n\r\n        this.binSpinner.setVisibility(View.VISIBLE);\r\n        this.mFillBinSpinner();\r\n        this.binSpinnerBln = true;\r\n    }\r\n\r\n\r\n    private void mFillBinSpinner() {\r\n        List<String> binObl = new ArrayList<>();\r\n\r\n        if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine !=null){\r\n            for (cIntakeorderMATLine intakeorderMATLine : cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.MATLinesObl){\r\n                if (!binObl.contains(intakeorderMATLine.binCodeHandledStr)){\r\n                    binObl.add(intakeorderMATLine.binCodeHandledStr);\r\n                }\r\n            }\r\n        } else {\r\n            for (cReceiveorderLine receiveorderLine : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.receiveLinesObl){\r\n                if (!binObl.contains(receiveorderLine.getBinCodeStr())) {\r\n                    binObl.add(receiveorderLine.getBinCodeStr());\r\n                }\r\n            }\r\n        }\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                binObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.binSpinner.setAdapter(adapter);\r\n    }\r\n\r\n    private void mSetBinSpinnerListener() {\r\n        this.binSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                 mSetBarcode(binSpinner.getSelectedItem().toString());\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetBarcode(String pvBinStr){\r\n        this.binCodeStr = pvBinStr;\r\n        this.textViewTitle.setText(this.binCodeStr);\r\n\r\n        cBarcodeLayout barcodeLayout;\r\n        barcodeLayout = cBarcodeLayout.pGetBarcodeLayoutByEnumerate(cBarcodeLayout.barcodeLayoutEnu.BIN);\r\n\r\n        String binCodeStr;\r\n        binCodeStr = cRegex.pGetWholePrefixFromLayout(barcodeLayout.getLayoutValueStr()) + this.binCodeStr;\r\n\r\n        MultiFormatWriter multiFormatWriter = new MultiFormatWriter();\r\n        try {\r\n            BitMatrix bitMatrix = multiFormatWriter.encode(binCodeStr , BarcodeFormat.CODE_128, 250, 72);\r\n            Bitmap bitmap = Bitmap.createBitmap(250, 72, Bitmap.Config.RGB_565);\r\n            for(int i = 0; i< 250; i++){\r\n                for(int j =  0; j< 72; j++){\r\n                    bitmap.setPixel(i,j,bitMatrix.get(i,j)? Color.BLACK:Color.WHITE);\r\n                }\r\n            }\r\n            this.barcodeImage.setImageBitmap(bitmap);\r\n\r\n        } catch (WriterException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    private void mShowWorkPlaceSpinner() {\r\n\r\n        if (cWorkplace.allWorkplacesObl  == null || cWorkplace.allWorkplacesObl.size() == 0) {\r\n            this.workplaceSpinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.workplaceSpinner.setVisibility(View.VISIBLE);\r\n        this.mFillWorkplaceSpinner();\r\n    }\r\n\r\n\r\n    private void mFillWorkplaceSpinner() {\r\n\r\n        if (cWorkplace.allWorkplacesObl == null ||  cWorkplace.allWorkplacesObl.size() <= 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> workPlaceObl = new ArrayList<>();\r\n\r\n        if (cUser.currentUser.currentBranch.workplacesObl().size() >= 1) {\r\n            for (cWorkplace workplace :cUser.currentUser.currentBranch.workplacesObl() ) {\r\n                workPlaceObl.add(workplace.getWorkplaceStr());\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (cWorkplace workplace :cWorkplace.allWorkplacesObl ) {\r\n                workPlaceObl.add(workplace.getWorkplaceStr());\r\n            }\r\n        }\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                workPlaceObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.workplaceSpinner.setAdapter(adapter);\r\n        if (cWorkplace.currentWorkplace != null)\r\n        { this.workplaceSpinner.setSelection(adapter.getPosition(cWorkplace.currentWorkplace.getWorkplaceStr()));}\r\n    }\r\n\r\n    private void mSetWorkplaceSpinnerListener() {\r\n        this.workplaceSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                cWorkplace.currentWorkplace = cWorkplace.pGetWorkplaceByName(workplaceSpinner.getSelectedItem().toString());\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n        });\r\n    }\r\n\r\n    //Region Private Methods\r\n\r\n    private void mTryToChangeQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, Integer pvAmountInt) {\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            this.amountLng += pvAmountInt;\r\n            this.quantityText.setText(cText.pLongToStringStr(this.amountLng));\r\n            return;\r\n        }\r\n\r\n        //negative\r\n        //Check if value already is zero\r\n        if (this.amountLng <= 1 ) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n        //Determine the new amount\r\n        this.amountLng -= pvAmountInt;\r\n               //Change quantityDbl in activity\r\n        this.quantityText.setText(cText.pLongToStringStr(this.amountLng));\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo() {\r\n\r\n        this.quantityText.setImeOptions(EditorInfo.IME_ACTION_DONE);\r\n        this.quantityText.setSelectAllOnFocus(true);\r\n        this.quantityText.requestFocus();\r\n        this.quantityText.setSingleLine();\r\n        this.quantityText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_TEXT_VARIATION_NORMAL);\r\n        this.quantityText.setCursorVisible(false);\r\n\r\n        this.quantityText.setText(cText.pLongToStringStr(this.amountLng));\r\n        this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n    //Region Number Broadcaster\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putLong(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, this.amountLng);\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,9999);\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    counterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mTryToChangeQuantity(true, false, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    counterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mTryToChangeQuantity(false, false, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (counterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (counterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (counterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (counterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (counterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (counterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (counterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (counterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.counterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.counterPlusHelperInt += 1;\r\n    }\r\n\r\n    private void mHandleQuantityChosen(Integer pvQuantityInt) {\r\n        this.mTryToChangeQuantity(pvQuantityInt != 0, true,pvQuantityInt);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/PrintBinLabelFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/PrintBinLabelFragment.java	(date 1620745063846)
@@ -97,6 +97,8 @@
 
     private TextView quantityText;
     private TextView quantityRequiredText;
+    private TextView textViewWorkspaceFail;
+    private TextView textViewLayoutFail;
     private AppCompatImageButton imageButtonMinus;
     private AppCompatImageButton imageButtonPlus;
 
@@ -190,6 +192,8 @@
         this.imageButtonMinus = getView().findViewById(R.id.imageButtonMinus);
         this.imageButtonPlus = getView().findViewById(R.id.imageButtonPlus);
         this.progressBar = getView().findViewById(R.id.progressBar);
+        this.textViewWorkspaceFail = getView().findViewById(R.id.textViewWorkspaceFail);
+        this.textViewLayoutFail = getView().findViewById(R.id.textViewLayoutFail);
     }
 
 
@@ -327,7 +331,8 @@
     private void mShowLabelTemplateSpinner() {
 
         if (cLabelTemplate.binTemplateObl == null ||  cLabelTemplate.binTemplateObl.size() <= 0) {
-            this.layoutSpinner.setVisibility(View.GONE);
+            this.printButton.setVisibility(View.GONE);
+            this.textViewLayoutFail.setText(cAppExtension.activity.getString(R.string.message_templates_not_available));
             return;
         }
 
@@ -447,7 +452,8 @@
     private void mShowWorkPlaceSpinner() {
 
         if (cWorkplace.allWorkplacesObl  == null || cWorkplace.allWorkplacesObl.size() == 0) {
-            this.workplaceSpinner.setVisibility(View.GONE);
+            this.textViewWorkspaceFail.setText(cAppExtension.activity.getString(R.string.message_workplaces_not_available));
+            this.printButton.setVisibility(View.GONE);
             return;
         }
 
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLineItemPropertyInputActvity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Pick;\r\n\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcode;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTable;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectPropertyFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DynamicItemPropertyFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyNoInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.PagerAdapters.ItemPropertyPagerAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class PickorderLineItemPropertyInputActvity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n   //Region Private Properties\r\n   private  ImageView toolbarImage;\r\n   private  TextView toolbarTitle;\r\n\r\n   private AppCompatImageButton imageButtonNoInputPropertys;\r\n   private TextView articleDescriptionCompactText;\r\n   private TextView articleDescription2CompactText;\r\n   private TextView articleItemCompactText;\r\n   private TextView articleBarcodeCompactText;\r\n   private TextView quantityCompactText;\r\n\r\n    private List<String> titleObl;\r\n    private AppCompatImageButton imageButtonDone;\r\n\r\n    private TabLayout itemPropertyTabLayout;\r\n    private ViewPager itemPropertyViewpager;\r\n    public  int numberOfTabsInt;\r\n    public boolean amountHandledBln;\r\n    private boolean deletedFromRecyclerBln;\r\n    private int tabIndexInt;\r\n\r\n    private  List<cLinePropertyValue> localItemPropertyValueObl (){\r\n\r\n        List<cLinePropertyValue> resultObl = new ArrayList<>();\r\n        List<cLineProperty> hulpObl = new ArrayList<>();\r\n\r\n        if (cPickorderLine.currentPickOrderLine.linePropertyValuesObl() != null && cPickorderLine.currentPickOrderLine.linePropertyValuesObl() .size() > 0 ) {\r\n            resultObl.addAll(cPickorderLine.currentPickOrderLine.linePropertyValuesObl());\r\n            for(cLinePropertyValue linePropertyValue : resultObl){\r\n                if (!hulpObl.contains(linePropertyValue.getLineProperty())){\r\n                    hulpObl.add(linePropertyValue.getLineProperty());\r\n                }\r\n            }\r\n        }\r\n\r\n        for (cLineProperty inputLineProperty : cPickorderLine.currentPickOrderLine.linePropertyInputObl()) {\r\n            if (hulpObl.contains(inputLineProperty)){\r\n                continue;\r\n            }\r\n            resultObl.add(new cLinePropertyValue(inputLineProperty));\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    private LinkedHashMap<String, ArrayList<cLinePropertyValue>> localItemPropertySortObl(){\r\n        LinkedHashMap<String, ArrayList<cLinePropertyValue>> linkedHashMap = new LinkedHashMap<>();\r\n       // ArrayList<cPickorderLinePropertyValue> pickorderLinePropertyValues = new ArrayList<>();\r\n\r\n        for (cLinePropertyValue linePropertyValue : localItemPropertyValueObl()) {\r\n                //Create the hasmap dynammically and fill it\r\n            ArrayList<cLinePropertyValue> loopList = linkedHashMap.get(linePropertyValue.getPropertyCodeStr());\r\n            if (loopList == null) {\r\n                ArrayList<cLinePropertyValue> propertyValues = new ArrayList<>();\r\n                propertyValues.add(linePropertyValue);\r\n                linkedHashMap.put(linePropertyValue.getPropertyCodeStr(), propertyValues);\r\n            }\r\n            else{\r\n                loopList.add(linePropertyValue);\r\n            }\r\n\r\n        }\r\n        return linkedHashMap;\r\n    }\r\n\r\n    public double getQuantityHandledDbl(){\r\n\r\n        double quantityDbl = 0;\r\n\r\n        if (this.titleObl == null || this.localItemPropertySortObl().size() == 0) {\r\n            return quantityDbl;\r\n        }\r\n\r\n        ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(this.titleObl.get(0));\r\n\r\n        for (cLinePropertyValue pickorderLinePropertyValue : loopList ) {\r\n            quantityDbl += pickorderLinePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n        return  quantityDbl;\r\n\r\n    }\r\n\r\n    public  double getQuantityAvailable() {\r\n     return    cPickorderLine.currentPickOrderLine.getQuantityDbl() - this.getQuantityHandledDbl();\r\n    }\r\n\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public  PickorderLineItemPropertyInputActvity() {\r\n\r\n    }\r\n\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_pickorderlineitemproperty_input);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n\r\n        //Set listeners here, so click listeners only work after activity is shown\r\n        this.mSetListeners();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cConnection.pRegisterWifiChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            cConnection.pUnregisterWifiChangedReceiver();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            if (getQuantityAvailable() > 0 ) {\r\n                mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n                return true;\r\n            }\r\n            if (!mCheckAllPropertysHandledBln()){\r\n                return true;\r\n            }\r\n            this.mGoBackToLinesActivity();\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (getQuantityAvailable() > 0 ) {\r\n            mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n            return;\r\n        }\r\n        if (!mCheckAllPropertysHandledBln()){\r\n            return;\r\n        }\r\n        mGoBackToLinesActivity();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultFragment methods\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_itemproperty_input));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n            this.toolbarImage = findViewById(R.id.toolbarImage);\r\n            this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n\r\n            this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n            this.articleDescriptionCompactText = findViewById(R.id.articleDescriptionCompactText);\r\n            this.articleDescription2CompactText = findViewById(R.id.articleDescription2CompactText);\r\n            this.articleItemCompactText = findViewById(R.id.articleItemCompactText);\r\n            this.articleBarcodeCompactText = findViewById(R.id.articleBarcodeCompactText);\r\n            this.quantityCompactText = findViewById(R.id.quantityCompactText);\r\n            this.itemPropertyTabLayout = findViewById(R.id.itemPropertyTabLayout);\r\n            this.itemPropertyViewpager = findViewById(R.id.itemPropertyViewpager);\r\n            this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n\r\n        this.toolbarImage.setImageResource(R.drawable.ic_info);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n       // this.mSetItemPropertyValueRecycler();\r\n        this.mSetArticleInfo();\r\n        this.mSetQuantityText();\r\n        this.mShowHideOKButton();\r\n        this.mBuildAndFillTabs();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHeaderListener();\r\n        this.mSetNoInputPropertyListener();\r\n        this.mSetCloseListener();\r\n        this.mSetTabLayoutListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n        if ( cPickorderCompositeBarcode.currentCompositePickorderBarcode != null) {\r\n            this.mHandleCompositeData();\r\n        }\r\n    }\r\n\r\n    //End Regioni ICSDefaultFragment methods\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        if (cPickorderLine.currentPickOrderLine.linePropertyInputObl().size() == 1) {\r\n            cLineProperty.currentLineProperty = cPickorderLine.currentPickOrderLine.linePropertyInputObl().get(0);\r\n\r\n        } else{\r\n            cLineProperty.currentLineProperty = cPickorderLine.currentPickOrderLine.getLineProperty(Objects.requireNonNull(Objects.requireNonNull(this.itemPropertyTabLayout.getTabAt(this.itemPropertyTabLayout.getSelectedTabPosition())).getText()).toString());\r\n        }\r\n\r\n        this.pHandeManualAction(pvBarcodeScan);\r\n    }\r\n\r\n    public  void pCancelPick() {\r\n        //Check if we need to remove the SalesorderPackingTableLines\r\n        if (cPickorderLine.currentPickOrderLine.pGetLinesForProcessingSequenceObl().size() <= 1)  {\r\n            cSalesOrderPackingTable.pDeleteFromDatabaseBln(cPickorderLine.currentPickOrderLine.getProcessingSequenceStr());\r\n        }\r\n        cPickorderLine.currentPickOrderLine.pUpdateProcessingSequenceBln(\"\");\r\n        cPickorderLine.currentPickOrderLine.pCancelIndatabase();\r\n        cPickorderLine.currentPickOrderLine = null;\r\n        this.mGoBackToLinesActivity();\r\n    }\r\n\r\n    public  void pHandeManualAction(cBarcodeScan pvBarcodeScan){\r\n        if (cLineProperty.currentLineProperty.getItemProperty()== null ) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_unknown),\"\",true, true);\r\n            return;\r\n        }\r\n\r\n\r\n        //Check if we scanned (another) composite barcode and handle it\r\n        List<cPickorderCompositeBarcode> compositeBarcodesMatchedObl =   cPickorderLine.currentPickOrderLine.pFindCompositeBarcodeForLine(pvBarcodeScan);\r\n        if  (compositeBarcodesMatchedObl.size() > 0) {\r\n            if (!cPickorderLine.currentPickOrderLine.pFindBarcodeViaCompositeBarcodeInLineBarcodes(compositeBarcodesMatchedObl, pvBarcodeScan.getBarcodeOriginalStr())) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),\"\",true, true);\r\n            }\r\n            else{\r\n                this.mHandleCompositeData();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);\r\n            return;\r\n        }\r\n\r\n        if (!this.amountHandledBln){\r\n            if (this.getQuantityHandledDbl() == cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n                cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_extra_pieces_not_allowed),R.raw.badsound, true);\r\n                return;\r\n            }\r\n        }\r\n        //Check unique values if needed\r\n        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\",true, true);\r\n            return;\r\n        }\r\n\r\n        cLineProperty.currentLineProperty.pValueAdded(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        if (this.amountHandledBln && !cLinePropertyValue.currentLinePropertyValue.getItemProperty().getUniqueBln()){\r\n            cLinePropertyValue.currentLinePropertyValue.quantityDbl = cPickorderLine.currentPickOrderLine.getQuantityDbl();\r\n        }\r\n\r\n        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, pvBarcodeScan.getBarcodeOriginalStr() + \" \"  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);\r\n        this.pTryToChangePickedQuantity();\r\n        this.pRefreshActivity();\r\n\r\n    }\r\n\r\n    public void pHandled() {\r\n        PickorderPickActivity.handledViaPropertysBln = true;\r\n        if (getQuantityAvailable() > 0 && !this.amountHandledBln) {\r\n            mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n            return;\r\n        }\r\n        if (!mCheckAllPropertysHandledBln()){\r\n            return;\r\n        }\r\n        this.mGetNextPickLineForCurrentBin();\r\n    }\r\n\r\n    public void pRefreshActivity(){\r\n       // this.mSetItemPropertyValueRecycler();\r\n        this.mSetQuantityText();\r\n        this.mShowHideOKButton();\r\n        this.mBuildAndFillTabs();\r\n        this.mSelectTabAndItem();\r\n    }\r\n\r\n    private void mSelectTabAndItem(){\r\n        if(cLinePropertyValue.currentLinePropertyValue ==null){\r\n            if(this.deletedFromRecyclerBln){\r\n                this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.tabIndexInt));\r\n            }\r\n            this.deletedFromRecyclerBln = false;\r\n            return;\r\n        }\r\n        this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.titleObl.indexOf(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())));\r\n    }\r\n\r\n    public void pDeleteValueFromRecyler() {\r\n        this.deletedFromRecyclerBln = true;\r\n        this.tabIndexInt = this.itemPropertyTabLayout.getSelectedTabPosition();\r\n        cLinePropertyValue.allLinePropertysValuesObl.remove(cLinePropertyValue.currentLinePropertyValue);\r\n        cLinePropertyValue.currentLinePropertyValue = null;\r\n    }\r\n\r\n    public void pShowNumericInputFragment() {\r\n        mShowNumberPickerFragment();\r\n    }\r\n\r\n    public void pShowTextInputFragment() {\r\n        mShowTextInputFragment();\r\n    }\r\n\r\n    public void pResetTab(boolean pvResetBln){\r\n        if (pvResetBln) {\r\n            this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(0));\r\n       //     this.itemPropertyViewpager.setCurrentItem(0);\r\n        }\r\n    }\r\n    public void pShowDatePickerDialog() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        DatePickerFragment datePickerFragment = new DatePickerFragment(cPickorderLine.currentPickOrderLine.presetValueObl);\r\n        datePickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTDATEFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mSetCloseListener() {\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                if (getQuantityAvailable() > 0 ) {\r\n                    mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n                    return;\r\n                }\r\n                amountHandledBln = true;\r\n                if (!mCheckAllPropertysHandledBln()){\r\n                   return;\r\n                }\r\n                pHandled();\r\n            }\r\n        });\r\n    }\r\n\r\n    private boolean mCheckAllPropertysHandledBln(){\r\n\r\n        if (!this.amountHandledBln){\r\n            return false;\r\n        }\r\n\r\n        for (cLineProperty inputPickorderLineProperty : cPickorderLine.currentPickOrderLine.linePropertyInputObl()){\r\n            if (!inputPickorderLineProperty.getIsRequiredBln()){\r\n                continue;\r\n            }\r\n            double quantityDbl = 0.0;\r\n            ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(inputPickorderLineProperty.getPropertyCodeStr());\r\n            for (cLinePropertyValue linePropertyValue : loopList ) {\r\n                quantityDbl += linePropertyValue.getQuantityDbl();\r\n            }\r\n            if (quantityDbl != this.getQuantityHandledDbl()){\r\n                this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.titleObl.indexOf(inputPickorderLineProperty.getPropertyCodeStr())));\r\n                cUserInterface.pDoNope(itemPropertyTabLayout, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, cAppExtension.activity.getString(R.string.message_fill_all_properties),R.raw.headsupsound,false);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void mSetTabLayoutListener(){\r\n        this.itemPropertyTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                if (tab.getPosition() > 0){\r\n                    if (getQuantityAvailable() > 0) {\r\n                        mShowUnderPickPropertyDialog(cAppExtension.activity.getString(R.string.message_cancel), cAppExtension.activity.getString(R.string.message_accept));\r\n                    } else { amountHandledBln = true; }\r\n                }\r\n                itemPropertyViewpager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetHeaderListener() {\r\n\r\n        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mScrollToBottom();\r\n            }\r\n        });\r\n\r\n        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View view) {\r\n                mScrollToTop();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mScrollToTop() {\r\n    }\r\n\r\n    private void mScrollToBottom() {\r\n    }\r\n\r\n    private void mSetArticleInfo(){\r\n        this.articleDescriptionCompactText.setText(cPickorderLine.currentPickOrderLine.getDescriptionStr());\r\n        this.articleDescription2CompactText.setText(cPickorderLine.currentPickOrderLine.getDescription2Str());\r\n        this.articleItemCompactText.setText(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n        this.articleBarcodeCompactText.setText(cPickorderBarcode.currentPickorderBarcode.getBarcodeAndQuantityStr());\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.hasPropertysBln() || cPickorderLine.currentPickOrderLine.linePropertyNoInputObl() == null || cPickorderLine.currentPickOrderLine.linePropertyNoInputObl().size() == 0) {\r\n            this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n        }\r\n        else {\r\n            this.imageButtonNoInputPropertys.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private  void mSetQuantityText() {\r\n        String quantityStr =   (int)this.getQuantityHandledDbl() + \"/\" +  cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityDbl());\r\n        this.quantityCompactText.setText(quantityStr);\r\n    }\r\n\r\n    private  void mShowHideOKButton() {\r\n\r\n        if (this.getQuantityHandledDbl() == 0) {\r\n            this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n\r\n    }\r\n\r\n    private  void mShowUnderPickDialog(String pvRejectStr,String pvAcceptStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_underpick_header),\r\n                cAppExtension.activity.getString(R.string.message_underpick_text,\r\n                        cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityDbl()),\r\n                        cText.pDoubleToStringStr(this.getQuantityHandledDbl())),\r\n                pvRejectStr,\r\n                pvAcceptStr ,\r\n                false);\r\n        acceptRejectFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mShowUnderPickPropertyDialog(String pvRejectStr,String pvAcceptStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectPropertyFragment acceptRejectPropertyFragment = new AcceptRejectPropertyFragment(cAppExtension.activity.getString(R.string.message_underpick_header),\r\n                cAppExtension.activity.getString(R.string.message_underpick_property_text,\r\n                        cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityDbl()),\r\n                        cText.pDoubleToStringStr(this.getQuantityHandledDbl())),\r\n                pvRejectStr,\r\n                pvAcceptStr );\r\n        acceptRejectPropertyFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectPropertyFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    public   void pTryToChangePickedQuantity() {\r\n\r\n        if (this.amountHandledBln){\r\n            return;\r\n        }\r\n        double newQuantityDbl;\r\n\r\n        newQuantityDbl = this.getQuantityHandledDbl();\r\n\r\n        if (newQuantityDbl <= 0) {\r\n            newQuantityDbl = 0;\r\n        }\r\n\r\n        //Set the new quantityDbl and show in Activity\r\n        cPickorderLine.currentPickOrderLine.quantityHandledDbl = newQuantityDbl;\r\n\r\n        //Add or update line barcodeStr\r\n        cPickorderLine.currentPickOrderLine.pAddOrUpdateLineBarcode(newQuantityDbl);\r\n\r\n        //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n        cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n\r\n    }\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, (int) cLinePropertyValue.currentLinePropertyValue.getQuantityDbl());\r\n\r\n        double availableDbl  = cPickorderLine.currentPickOrderLine.getQuantityDbl();\r\n        ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr());\r\n\r\n        for (cLinePropertyValue linePropertyValue : loopList ) {\r\n            availableDbl -= linePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, availableDbl);\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mShowTextInputFragment() {\r\n        if (cLinePropertyValue.currentLinePropertyValue == null){\r\n            return;\r\n        }\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment(cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase());\r\n        itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n    private  void mGoBackToLinesActivity() {\r\n\r\n        //Reset current branch\r\n        if (cPickorder.currentPickOrder.destionationBranch() == null) {\r\n            cPickorder.currentPickOrder.scannedBranch =  null;\r\n        }\r\n        cPickorderLine.currentPickOrderLine = null;\r\n\r\n        Intent intent = new Intent(cAppExtension.context, PickorderLinesActivity.class);\r\n        PickorderLinesActivity.startedViaOrderSelectBln = false;\r\n\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n    }\r\n\r\n\r\n    private void mSetNoInputPropertyListener() {\r\n        this.imageButtonNoInputPropertys.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowItemPropertyNoInputFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mShowItemPropertyNoInputFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        ItemPropertyNoInputFragment itemPropertyNoInputFragment = new ItemPropertyNoInputFragment();\r\n        itemPropertyNoInputFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.ITEMPROPERTYVALUENOINPUTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private void mHandleCompositeData(){\r\n\r\n        if (cPickorderCompositeBarcode.currentCompositePickorderBarcode == null || cPickorderCompositeBarcode.currentCompositePickorderBarcode.KeysAndValuesObl == null || cPickorderCompositeBarcode.currentCompositePickorderBarcode.KeysAndValuesObl.size() == 0 ) {\r\n            return;\r\n        }\r\n\r\n        for (cLineProperty lineProperty : cPickorderLine.currentPickOrderLine.linePropertyInputObl() ) {\r\n            String barcodeStr = cPickorderCompositeBarcode.currentCompositePickorderBarcode.KeysAndValuesObl.get(lineProperty.getPropertyCodeStr());\r\n\r\n            if (barcodeStr != null && !barcodeStr.isEmpty()) {\r\n                this.pHandleScan(cBarcodeScan.pFakeScan(barcodeStr));\r\n            }\r\n        }\r\n\r\n        cPickorderCompositeBarcode.currentCompositePickorderBarcode = null;\r\n\r\n\r\n    }\r\n\r\n    private  void mGetNextPickLineForCurrentBin() {\r\n\r\n        cResult hulpResult;\r\n\r\n        if (!cPickorder.currentPickOrder.isPickAutoNextBln()) {\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        //check if there is a next line for this BIN\r\n        cPickorderLine nextLine = cPickorder.currentPickOrder.pGetNextLineToHandleForBin(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n\r\n        //There is no next line, so close this activity\r\n        if (nextLine == null) {\r\n            //Clear current barcodeStr and reset defaults\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        //Set the current line, and update it to busy\r\n\r\n        cPickorderLine.currentPickOrderLine = nextLine;\r\n\r\n        hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n        if (!hulpResult.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpResult.messagesStr(),\"\",true,true);\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        this.mInitnewLineForBin();\r\n    }\r\n\r\n    private void mInitnewLineForBin() {\r\n\r\n        //Play a sound\r\n        cUserInterface.pPlaySound(R.raw.message, null);\r\n        cPickorderBarcode.currentPickorderBarcode = null;\r\n\r\n        Intent intent = new Intent(cAppExtension.context, PickorderPickActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n\r\n    }\r\n\r\n    private void mBuildAndFillTabs() {\r\n        ArrayList<Fragment> fragments = new ArrayList<>();\r\n\r\n        this.titleObl = new ArrayList<>();\r\n        for (Map.Entry<String, ArrayList<cLinePropertyValue>> itemPropertyEntry :  this.localItemPropertySortObl().entrySet()) {\r\n\r\n\r\n            this.itemPropertyTabLayout.addTab(this.itemPropertyTabLayout.newTab());\r\n\r\n            DynamicItemPropertyFragment dynamicItemPropertyFragment = new DynamicItemPropertyFragment(itemPropertyEntry.getValue());\r\n            fragments.add(dynamicItemPropertyFragment);\r\n\r\n            this.titleObl.add(itemPropertyEntry.getKey());\r\n        }\r\n\r\n        ItemPropertyPagerAdapter itemPropertyPagerAdapter = new ItemPropertyPagerAdapter(fragments, this.titleObl);\r\n        this.itemPropertyViewpager.setAdapter(itemPropertyPagerAdapter);\r\n        this.itemPropertyTabLayout.setupWithViewPager(itemPropertyViewpager);\r\n    }\r\n\r\n\r\n    //End Region Private Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLineItemPropertyInputActvity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLineItemPropertyInputActvity.java	(date 1620992709840)
@@ -1,15 +1,9 @@
 package nl.icsvertex.scansuite.Activities.Pick;
 
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
 import android.content.Intent;
-import android.content.IntentFilter;
 import android.os.Bundle;
 import android.view.MenuItem;
 import android.view.View;
-import android.view.animation.Animation;
-import android.view.animation.AnimationUtils;
 import android.widget.ImageView;
 import android.widget.TextView;
 
@@ -18,7 +12,6 @@
 import androidx.appcompat.widget.AppCompatImageButton;
 import androidx.appcompat.widget.Toolbar;
 import androidx.fragment.app.Fragment;
-import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 import androidx.viewpager.widget.ViewPager;
 
 import com.google.android.material.tabs.TabLayout;
@@ -42,7 +35,6 @@
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;
 import SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcode;
-import SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcode;
 import SSU_WHS.Picken.PickorderLines.cPickorderLine;
 import SSU_WHS.Picken.Pickorders.cPickorder;
 import SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTable;
@@ -347,6 +339,28 @@
     }
 
     public  void pHandeManualAction(cBarcodeScan pvBarcodeScan){
+
+        if (cPickorderLine.currentPickOrderLine.presetValueObl != null){
+            boolean foundBln = false;
+            ArrayList<String> propertyObl = new ArrayList<>();
+            for (cLinePropertyValue propertyValue : cPickorderLine.currentPickOrderLine.presetValueObl){
+                if(propertyValue.getPropertyCodeStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){
+                    propertyObl.add(propertyValue.getValueStr());}
+            }
+            if (propertyObl.size() > 0){
+                for (String string: propertyObl){
+                    if (string.equalsIgnoreCase(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()))){
+                        foundBln = true;
+                        break;
+                    }
+                }
+                if(!foundBln){
+                    cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_not_allowed),"",true, true);
+                    return;
+                }
+            }
+        }
+
         if (cLineProperty.currentLineProperty.getItemProperty()== null ) {
             cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_unknown),"",true, true);
             return;
@@ -365,7 +379,7 @@
             return;
         }
 
-        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {
+        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()))) {
             cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);
             return;
         }
@@ -377,19 +391,19 @@
             }
         }
         //Check unique values if needed
-        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());
+        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
         if (!hulpRst.resultBln) {
             cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),"",true, true);
             return;
         }
 
-        cLineProperty.currentLineProperty.pValueAdded(pvBarcodeScan.getBarcodeOriginalStr());
+        cLineProperty.currentLineProperty.pValueAdded(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
 
         if (this.amountHandledBln && !cLinePropertyValue.currentLinePropertyValue.getItemProperty().getUniqueBln()){
             cLinePropertyValue.currentLinePropertyValue.quantityDbl = cPickorderLine.currentPickOrderLine.getQuantityDbl();
         }
 
-        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, pvBarcodeScan.getBarcodeOriginalStr() + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
+        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()) + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
         this.pTryToChangePickedQuantity();
         this.pRefreshActivity();
 
@@ -550,6 +564,9 @@
     }
 
     private void mSetArticleInfo(){
+
+        cLinePropertyValue.quantityPerUnitOfMeasureDbl = cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl();
+
         this.articleDescriptionCompactText.setText(cPickorderLine.currentPickOrderLine.getDescriptionStr());
         this.articleDescription2CompactText.setText(cPickorderLine.currentPickOrderLine.getDescription2Str());
         this.articleItemCompactText.setText(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());
@@ -669,7 +686,7 @@
             return;
         }
         cUserInterface.pCheckAndCloseOpenDialogs();
-        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment(cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase());
+        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment(cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase(), cPickorderLine.currentPickOrderLine.presetValueObl);
         itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);
     }
 
Index: app/src/main/res/layout/fragment_line_bin_print.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:background=\"@color/colorWhite\"\r\n    android:id=\"@+id/lineBinPrint\">\r\n    <TextView\r\n        android:id=\"@+id/textViewTitle\"\r\n        style=\"@style/acceptRejectText\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        />\r\n    <Spinner\r\n        android:id=\"@+id/binSpinner\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        android:textSize=\"15sp\"\r\n        android:textAlignment=\"center\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/textViewTitle\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        >\r\n    </Spinner>\r\n    <ImageView\r\n        android:id=\"@+id/barcodeImageView\"\r\n        android:layout_width=\"250dp\"\r\n        android:layout_height=\"72dp\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        android:contentDescription=\"@string/articleimage_thumb_description\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/binSpinner\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n    <Spinner\r\n        android:id=\"@+id/workspaceSpinner\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        android:textSize=\"15sp\"\r\n        android:textAlignment=\"center\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/barcodeImageView\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        >\r\n    </Spinner>\r\n    <Spinner\r\n        android:id=\"@+id/layoutSpinner\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        android:textSize=\"15sp\"\r\n        android:textAlignment=\"center\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/workspaceSpinner\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        >\r\n    </Spinner>\r\n    <include layout=\"@layout/default_quantity_fragment_control\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/layoutSpinner\"\r\n        />\r\n    <Button\r\n        android:id=\"@+id/printButton\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        style=\"@style/Widget.AppCompat.Button.ButtonBar.AlertDialog\"\r\n        android:text=\"@string/print\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/quantityFragmentContainer\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        />\r\n    <Button\r\n        android:id=\"@+id/cancelButton\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        style=\"@style/Widget.AppCompat.Button.ButtonBar.AlertDialog\"\r\n        android:text=\"@string/cancel\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/quantityFragmentContainer\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        />\r\n    <ProgressBar\r\n        android:id=\"@+id/progressBar\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:indeterminate=\"true\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/quantityFragmentContainer\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@id/printButton\"\r\n        android:progressDrawable=\"@drawable/ic_progressbar\"/>\r\n        />\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_line_bin_print.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/res/layout/fragment_line_bin_print.xml	(date 1620742288394)
@@ -34,6 +34,17 @@
         app:layout_constraintTop_toBottomOf="@id/binSpinner"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent" />
+    <TextView
+        android:id="@+id/textViewWorkspaceFail"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/default_margin"
+        android:textSize="@dimen/textsize_big"
+        android:textColor="@color/colorTextDarkest"
+        app:layout_constraintTop_toBottomOf="@id/barcodeImageView"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        />
     <Spinner
         android:id="@+id/workspaceSpinner"
         android:layout_width="0dp"
@@ -46,6 +57,17 @@
         app:layout_constraintEnd_toEndOf="parent"
         >
     </Spinner>
+    <TextView
+        android:id="@+id/textViewLayoutFail"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/default_margin"
+        android:textSize="@dimen/textsize_big"
+        android:textColor="@color/colorTextDarkest"
+        app:layout_constraintTop_toBottomOf="@id/textViewWorkspaceFail"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        />
     <Spinner
         android:id="@+id/layoutSpinner"
         android:layout_width="0dp"
@@ -61,7 +83,7 @@
     <include layout="@layout/default_quantity_fragment_control"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_margin="@dimen/default_margin"
+        android:layout_margin="@dimen/default_double_margin"
         app:layout_constraintTop_toBottomOf="@id/layoutSpinner"
         />
     <Button
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderPickActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Pick;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcode;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTable;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleInfoFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BinItemsFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyNoInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemStockFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class PickorderPickActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Private Properties\r\n\r\n    private static boolean articleScannedLastBln;\r\n    private static boolean destionationScannedBln;\r\n    private static boolean noInputPropertysShownBln;\r\n    public static boolean handledViaPropertysBln;\r\n\r\n    private int pickCounterMinusHelperInt;\r\n    private int pickCounterPlusHelperInt;\r\n\r\n    private Handler minusHandler;\r\n    private Handler plusHandler;\r\n\r\n    private ConstraintLayout pickorderPickContainer;\r\n\r\n    private CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n\r\n    private  Toolbar toolbar;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private  TextView articleDescriptionText;\r\n    private  TextView articleDescription2Text;\r\n    private  TextView articleItemText;\r\n    private  TextView articleBarcodeText;\r\n    private  TextView quantityText;\r\n    private  TextView quantityRequiredText;\r\n    private  ImageView articleThumbImageView;\r\n\r\n    private  ImageView imageButtonNoInputPropertys;\r\n    private  ImageView imageButtonBarcode;\r\n\r\n    private  CardView sourcenoContainer;\r\n    private  TextView sourcenoText;\r\n\r\n    private  AppCompatImageButton imageButtonMinus;\r\n    private  AppCompatImageButton imageButtonPlus;\r\n    private  AppCompatImageButton imageButtonDone;\r\n\r\n    private  TextView textViewAction;\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_pickorder_pick);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n\r\n        //Set listeners here, so click listeners only work after activity is shown\r\n        this.mSetListeners();\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_pick,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n      //  invalidateOptionsMenu();\r\n\r\n        MenuItem item_bin_stock = pvMenu.findItem(R.id.item_bin_stock);\r\n        MenuItem item_article_stock = pvMenu.findItem(R.id.item_article_stock);\r\n        item_bin_stock.setVisible(true);\r\n        item_article_stock.setVisible(true);\r\n\r\n        if (cSetting.GENERIC_PRINT_BINLABEL()){\r\n            MenuItem item_print_bin = pvMenu.findItem(R.id.item_print_bin);\r\n            item_print_bin.setVisible(cPickorder.currentPickOrder.currentBranchBin != null);\r\n        }\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(cPickorderBarcode.currentPickorderBarcode != null);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n\r\n        switch (item.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mShowAcceptFragment();\r\n                return true;\r\n\r\n            case R.id.item_bin_stock:\r\n                selectedFragment = new BinItemsFragment(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n                break;\r\n\r\n            case R.id.item_article_stock:\r\n\r\n                cArticle.currentArticle= cPickorder.currentPickOrder.articleObl.get(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n                selectedFragment = new ItemStockFragment();\r\n                break;\r\n\r\n            case R.id.item_print_bin:\r\n                selectedFragment = new PrintBinLabelFragment();\r\n                break;\r\n\r\n            case R.id.item_print_item:\r\n                cArticle.currentArticle= cPickorder.currentPickOrder.articleObl.get(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        item.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        mShowAcceptFragment();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity Methods\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_pickorderpick));\r\n\r\n        this.mInitScreen();\r\n\r\n        this.mFieldsInitialize();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.pickorderPickContainer = findViewById(R.id.pickorderPickContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n\r\n        this.toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.sourcenoText = findViewById(R.id.sourcenoText);\r\n        this.sourcenoContainer = findViewById(R.id.sourceNoContainer);\r\n\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n\r\n        this.textViewAction = findViewById(R.id.textViewAction);\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n\r\n        this.pickCounterPlusHelperInt = 0;\r\n        this.pickCounterMinusHelperInt = 0;\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            return;\r\n        }\r\n\r\n        this.mEnablePlusMinusAndBarcodeSelectViews();\r\n        this.mShowArticleImage();\r\n        this.mShowOrHideGenericExtraFields();\r\n\r\n        this.mShowArticleInfo();\r\n        this.mShowBarcodeInfo();\r\n        this.mShowQuantityInfo();\r\n        this.mShowSortingInstruction();\r\n        this.mShowNoInputPropertyInfo();\r\n\r\n        this.mCheckLineDone();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n//        if (PickorderPickActivity.handledViaPropertysBln) {\r\n//            this.mHandlePickDoneClick();\r\n//            return;\r\n//        }\r\n\r\n        PickorderPickActivity.destionationScannedBln = cPickorder.currentPickOrder.destionationBranch() != null;\r\n\r\n        //We scanned a BIN, so nu current barcodeStr known\r\n        if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n            //Initialise article scanned boolean\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            this.mShowNoInputPropertys();\r\n            return;\r\n        }\r\n\r\n        // We scanned an ARTICLE in BIN IS ITEM Modus so handle barcide\r\n        if (cSetting.PICK_BIN_IS_ITEM()) {\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            this.pHandleScan(cBarcodeScan.pFakeScan(cPickorderBarcode.currentPickorderBarcode.getBarcodeStr()));\r\n            this.mShowNoInputPropertys();\r\n            return;\r\n        }\r\n\r\n\r\n        //We scannedn an ARTICLE in Single BIN activity\r\n        if (cPickorder.currentPickOrder.pickorderBarcodeScanned != null) {\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            this.pHandleScan(cBarcodeScan.pFakeScan(cPickorder.currentPickOrder.pickorderBarcodeScanned.getBarcodeStr()));\r\n            cPickorder.currentPickOrder.pickorderBarcodeScanned = null;\r\n            this.mShowNoInputPropertys();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n\r\n        this.mSetArticleImageListener();\r\n        this.mSetNoInputPropertyListener();\r\n        this.mSetImageButtonBarcodeListener();\r\n\r\n        if (cSetting.PICK_SELECTEREN_BARCODE()) {\r\n            this.mSetNumberListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n\r\n    }\r\n\r\n    // End Region iICSDefaultActivity Methods\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n\r\n\r\n        if (!cPickorder.currentPickOrder.isPABln()) {\r\n            PickorderPickActivity.destionationScannedBln = true;\r\n        }\r\n\r\n        //If we still need a destination scan, make sure we scan this first\r\n        if (!PickorderPickActivity.destionationScannedBln) {\r\n            cResult hulpRst = this.mCheckDestionationRst(pvBarcodeScan);\r\n            if (! hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\", true, true);\r\n                return;\r\n            }\r\n\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_article));\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.isPVBln()) {\r\n            this.mHandlePVScan(pvBarcodeScan);\r\n            return;\r\n        }\r\n\r\n        //Check if there are composite barcodes for this line that matcht the scan\r\n       List<cPickorderCompositeBarcode> compositeBarcodesMatchedObl =   cPickorderLine.currentPickOrderLine.pFindCompositeBarcodeForLine(pvBarcodeScan);\r\n\r\n        // No Matches\r\n       if  (compositeBarcodesMatchedObl.size() == 0) {\r\n\r\n           //Just look for a normal barcode with the scan\r\n           if (!cPickorderLine.currentPickOrderLine.pFindBarcodeViaBarcodeInLineBarcodes(pvBarcodeScan)) {\r\n               cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n               return;\r\n           }\r\n       }\r\n        else\r\n       {\r\n           if (! cPickorderLine.currentPickOrderLine.pFindBarcodeViaCompositeBarcodeInLineBarcodes(compositeBarcodesMatchedObl,pvBarcodeScan.getBarcodeOriginalStr())) {\r\n               cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n               return;\r\n           }\r\n\r\n       }\r\n\r\n        //If we found the barcodeStr, currentbarcode is alreay filled, so make this selected\r\n        this.mBarcodeSelected(cPickorderBarcode.currentPickorderBarcode);\r\n\r\n    }\r\n\r\n    public  void pAcceptPick(boolean ignoreAccept) {\r\n        if (ignoreAccept) {\r\n            cUserInterface.pPlaySound(R.raw.headsupsound,null);\r\n            cUserInterface.pDoBoing(this.textViewAction);\r\n            return;\r\n        }\r\n        cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n        this.mPickDone();\r\n    }\r\n\r\n    public  void pAcceptRejectDialogDismissed() {\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty() && !cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n            cPickorderLine.currentPickOrderLine.processingSequenceStr = \"\";\r\n            cPickorderLine.currentPickOrderLine.pUpdateProcessingSequenceBln(\"\");\r\n            PickorderPickActivity.articleScannedLastBln = true;\r\n        }\r\n\r\n    }\r\n\r\n    public  void pCancelPick() {\r\n        //Check if we need to remove the SalesorderPackingTableLines\r\n        if (cPickorderLine.currentPickOrderLine.pGetLinesForProcessingSequenceObl().size() <= 1)  {\r\n            cSalesOrderPackingTable.pDeleteFromDatabaseBln(cPickorderLine.currentPickOrderLine.getProcessingSequenceStr());\r\n        }\r\n        cPickorderLine.currentPickOrderLine.pUpdateProcessingSequenceBln(\"\");\r\n        cPickorderLine.currentPickOrderLine.pCancelIndatabase();\r\n        this.mGoBackToLinesActivity();\r\n    }\r\n\r\n    public  void pRegisterBarcodeReceiver(){\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    //Views\r\n\r\n    private void mSetArticleImageListener() {\r\n        this.articleThumbImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowFullArticleFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNoInputPropertyListener() {\r\n        this.imageButtonNoInputPropertys.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                PickorderPickActivity.noInputPropertysShownBln = false;\r\n                mShowNoInputPropertys();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cPickorderLine.currentPickOrderLine.barcodesObl == null || cPickorderLine.currentPickOrderLine.barcodesObl.size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                mEnablePlusMinusAndBarcodeSelectViews();\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cPickorderLine.currentPickOrderLine.barcodesObl.size() == 1) {\r\n                    pHandleScan(cBarcodeScan.pFakeScan(cPickorderLine.currentPickOrderLine.barcodesObl.get(0).getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mShowOrHideGenericExtraFields() {\r\n\r\n        boolean hideArticleInfoContainer = false;\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            hideArticleInfoContainer = true;\r\n        }\r\n        else\r\n        {\r\n            //Get article info via the web service\r\n            cArticle.currentArticle  = new cArticle(cPickorderLine.currentPickOrderLine.getItemNoStr(), cPickorderLine.currentPickOrderLine.getVariantCodeStr());\r\n\r\n            if ( cPickorderLine.currentPickOrderLine.itemProperyDataObl() == null) {\r\n                hideArticleInfoContainer = true;\r\n            }\r\n\r\n        }\r\n\r\n      if (hideArticleInfoContainer) {\r\n            this.mHideArticleInfo();\r\n      }\r\n        else{\r\n            this.articleInfoContainer.setVisibility(View.VISIBLE);\r\n\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.articleInfoContainer, new ArticleInfoFragment(cPickorderLine.currentPickOrderLine.itemProperyDataObl()));\r\n            transaction.commit();\r\n        }\r\n    }\r\n\r\n    private  void mShowArticleInfo() {\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            this.articleDescriptionText.setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            this.articleDescription2Text .setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            this.articleItemText.setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            return;\r\n        }\r\n\r\n        this.articleDescriptionText.setText(cPickorderLine.currentPickOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cPickorderLine.currentPickOrderLine.getDescription2Str());\r\n        this.articleItemText.setText(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n\r\n        if (cPickorderLine.currentPickOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n    }\r\n\r\n    private  void mShowBarcodeInfo() {\r\n\r\n        if (cPickorderLine.currentPickOrderLine.barcodesObl.size() == 1) {\r\n                cPickorderBarcode.currentPickorderBarcode = cPickorderLine.currentPickOrderLine.barcodesObl.get(0);\r\n        }\r\n        else\r\n        {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.mutiple_barcodes_posible));\r\n        }\r\n\r\n        if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n            return;\r\n        }\r\n\r\n        this.articleBarcodeText.setText(cPickorderBarcode.currentPickorderBarcode.getBarcodeAndQuantityStr());\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo(){\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            this.quantityText.setVisibility(View.INVISIBLE);\r\n            this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        double quantityDbl = 0;\r\n\r\n        if (cPickorderLine.currentPickOrderLine.handledBarcodesObl().size() > 0) {\r\n            for (cPickorderLineBarcode pickorderLineBarcode : cPickorderLine.currentPickOrderLine.handledBarcodesObl())\r\n\r\n                quantityDbl += pickorderLineBarcode.getQuantityhandledDbl();\r\n        }\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(quantityDbl));\r\n        this.quantityRequiredText.setText(cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityDbl()));\r\n    }\r\n\r\n    private  void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cPickorder.currentPickOrder.isPickWithPictureBln()) {\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cPickorderLine.currentPickOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cPickorderLine.currentPickOrderLine.articleImage == null || cPickorderLine.currentPickOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cPickorderLine.currentPickOrderLine.articleImage.imageBitmap());\r\n\r\n        //Open the image\r\n        if ((cPickorder.currentPickOrder.isPickWithPictureAutoOpenBln())) {\r\n            this.mShowFullArticleFragment();\r\n        }\r\n    }\r\n\r\n    private  void mShowNoInputPropertyInfo() {\r\n\r\n       if (!cPickorderLine.currentPickOrderLine.hasPropertysBln() || cPickorderLine.currentPickOrderLine.linePropertyNoInputObl() == null || cPickorderLine.currentPickOrderLine.linePropertyNoInputObl().size() == 0) {\r\n           this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n       }\r\n       else {\r\n           this.imageButtonNoInputPropertys.setVisibility(View.VISIBLE);\r\n       }\r\n    }\r\n\r\n    private  void mShowSortingInstruction() {\r\n\r\n        this.sourcenoContainer.setVisibility(View.GONE);\r\n\r\n        //If workflow is not PV, then d we are ready\r\n        if (!cPickorder.currentPickOrder.isPVBln()) {\r\n            return;\r\n        }\r\n\r\n        // We already have a processing sequence, show it and pInsertInDatabase a SalesOrderPackingTable in database\r\n        if (!cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty()) {\r\n            this.sourcenoContainer.setVisibility(View.VISIBLE);\r\n            this.sourcenoText.setText(cPickorderLine.currentPickOrderLine.getProcessingSequenceStr());\r\n            this.mAddSalesOrderPackingTableBln();\r\n            return;\r\n        }\r\n\r\n        // We don't have a processing sequence, so look for it in the database\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl() == null || cPickorder.currentPickOrder.salesOrderPackingTableObl().size() == 0) {\r\n            return;\r\n        }\r\n\r\n        //Record for Current Sales order\r\n        cSalesOrderPackingTable recordForSalesOrder = null;\r\n\r\n        for (cSalesOrderPackingTable loopRecord : cPickorder.currentPickOrder.salesOrderPackingTableObl()) {\r\n\r\n            if (loopRecord.getSalesorderStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr()))\r\n                recordForSalesOrder = loopRecord;\r\n        }\r\n\r\n        //If we found something, show it\r\n        if (recordForSalesOrder != null) {\r\n            //Set scan instruction\r\n            this.sourcenoContainer.setVisibility(View.VISIBLE);\r\n            this.sourcenoText.setText(recordForSalesOrder.getPackingtableStr());\r\n        }\r\n    }\r\n\r\n    private  void mEnablePlusMinusAndBarcodeSelectViews() {\r\n\r\n        if (cSetting.PICK_PER_SCAN()) {\r\n            this.imageButtonMinus.setVisibility(View.INVISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.INVISIBLE);\r\n        } else {\r\n            this.imageButtonMinus.setVisibility(View.VISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        if (!cSetting.PICK_SELECTEREN_BARCODE()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n    }\r\n\r\n    //Scans and manual input\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (cSetting.PICK_PER_SCAN()) {\r\n            return;\r\n        }\r\n\r\n        if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n            cUserInterface.pDoNope(quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(pickorderPickContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cPickorderBarcode.currentPickorderBarcode.getQuantityHandledDbl() > 1) {\r\n            cUserInterface.pDoNope(quantityText, true, true);\r\n            cUserInterface.pShowSnackbarMessage(pickorderPickContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n            return;\r\n        }\r\n\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n        this.mTryToChangePickedQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n\r\n    }\r\n\r\n    private  void mHandlePVScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        boolean isSalesorderOrPickcartboxBln = false;\r\n\r\n        //This barcode matches multiple lay-outs so this can be a BIN or an article\r\n        if (Objects.requireNonNull(cBarcodeLayout.pGetBarcodeLayoutByBarcodeObl(pvBarcodeScan.getBarcodeOriginalStr())).size() > 1)\r\n            if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.SALESORDER) || cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.PICKCARTBOX)) {\r\n                isSalesorderOrPickcartboxBln = true;\r\n            }\r\n\r\n        if (!isSalesorderOrPickcartboxBln) {\r\n            if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n                this.mHandlePVArticleScanned(pvBarcodeScan);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.SALESORDER) || cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.PICKCARTBOX) ) {\r\n            this.mHandleSalesOrderOrPickCartScanned(pvBarcodeScan);\r\n            return;\r\n        }\r\n\r\n        cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_unknown_barcode),\"\",true,true);\r\n\r\n\r\n    }\r\n\r\n    private  void mTryToChangePickedQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        double newQuantityDbl;\r\n        List<cPickorderLineBarcode>  hulpObl;\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n\r\n                //Check if we already have barcodes and clear them\r\n                if (cPickorderLine.currentPickOrderLine.handledBarcodesObl().size() > 0 ) {\r\n\r\n                    hulpObl = new ArrayList<>(cPickorderLine.currentPickOrderLine.handledBarcodesObl());\r\n\r\n                    for (cPickorderLineBarcode pickorderLineBarcode : hulpObl) {\r\n                        pickorderLineBarcode.pDeleteFromDatabaseBln();\r\n                    }\r\n                }\r\n\r\n                PickorderPickActivity.articleScannedLastBln = true;\r\n                newQuantityDbl = pvAmountDbl;\r\n            } else {\r\n                newQuantityDbl = cPickorderLine.currentPickOrderLine.getQuantityHandledDbl() + pvAmountDbl;\r\n            }\r\n\r\n            //Check if we would exceed amount, then show message\r\n            if (newQuantityDbl > cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n                this.mShowOverpickNotAllowed();\r\n\r\n                if (cPickorderLine.currentPickOrderLine.getQuantityDbl() > 0) {\r\n                    PickorderPickActivity.articleScannedLastBln = true;\r\n                    return;\r\n                }\r\n\r\n                PickorderPickActivity.articleScannedLastBln = false;\r\n                return;\r\n            }\r\n\r\n            //Set the new quantityDbl and show in Activity\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = newQuantityDbl;\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityHandledDbl()));\r\n\r\n            //Add or update line barcodeStr\r\n            cPickorderLine.currentPickOrderLine.pAddOrUpdateLineBarcode(pvAmountDbl);\r\n\r\n            //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n            cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n\r\n            //Check if this line is done\r\n            this.mCheckLineDone();\r\n            return;\r\n        }\r\n\r\n        //negative\r\n        if (cPickorderLine.currentPickOrderLine.getQuantityHandledDbl() == 0 ) {\r\n            cUserInterface.pDoNope(quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n\r\n        if (pvAmountFixedBln) {\r\n            newQuantityDbl = pvAmountDbl;\r\n        }else {\r\n            newQuantityDbl= cPickorderLine.currentPickOrderLine.getQuantityHandledDbl() - pvAmountDbl;\r\n        }\r\n\r\n        if (newQuantityDbl <= 0) {\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = 0.0;\r\n        }else {\r\n            //Set the new quantityDbl and show in Activity\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = newQuantityDbl;\r\n        }\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityHandledDbl()));\r\n        this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n\r\n        //Remove or update line barcodeStr\r\n        cPickorderLine.currentPickOrderLine.pRemoveOrUpdateLineBarcode();\r\n\r\n    }\r\n\r\n    private  void mHandleSalesOrderOrPickCartScanned(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Strip barcodeStr from regex\r\n        String barcodeWithoutPrefixStr = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        // Check if article is already scanned\r\n        if (!PickorderPickActivity.articleScannedLastBln) {\r\n            // we've scanned a pickCart or a salesOrder, but we need an article\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_scan_article_first), barcodeWithoutPrefixStr, true, true);\r\n            return;\r\n        }\r\n\r\n        //Check if scanned barcodeStr is a SalesOrder or PickCartBox\r\n        boolean isSalesOrderBln = cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.SALESORDER);\r\n        boolean isPickCartBoxBln = cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.PICKCARTBOX);\r\n\r\n        //If we scanned a salesorder, then check if it matches the SourceNo\r\n        if (isSalesOrderBln) {\r\n            //If scanned value doesn't match then we are done\r\n            if (!barcodeWithoutPrefixStr.equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr())) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_sourceno), barcodeWithoutPrefixStr, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        //If we scanned a pickcartbox, then check if it matches the ProcessingSequence if ProcessingSequence is not empty\r\n        if (isPickCartBoxBln && !cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty()) {\r\n            //If scanned value doesn't match then we are done\r\n            if (!barcodeWithoutPrefixStr.equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getProcessingSequenceStr())) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_pickcartbox), barcodeWithoutPrefixStr, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // There are  previous salesorder/pickcaerbox scans, so check if input is correct\r\n        if (!this.mCheckPackingTableAndSourceNoBln(barcodeWithoutPrefixStr)) {\r\n            return;\r\n        }\r\n\r\n        //Set the Processing Sequence\r\n        cPickorderLine.currentPickOrderLine.processingSequenceStr = barcodeWithoutPrefixStr;\r\n\r\n        //try to add SalesOrderPackingtable to database\r\n        if (!this.mAddSalesOrderPackingTableBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_inserting_salesorderpackingtable), barcodeWithoutPrefixStr, true, true);\r\n            cPickorderLine.currentPickOrderLine.processingSequenceStr = \"\";\r\n            return;\r\n        }\r\n\r\n        //try to update ProcessingSequence in database\r\n        if (!cPickorderLine.currentPickOrderLine.pUpdateProcessingSequenceBln(barcodeWithoutPrefixStr)) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_updating_processing_sequence), barcodeWithoutPrefixStr, true, true);\r\n            return;\r\n        }\r\n\r\n        //Set the ProcessingSequence\r\n        cPickorderLine.currentPickOrderLine.processingSequenceStr = barcodeWithoutPrefixStr;\r\n//        this.sourcenoText.setText(cPickorderLine.currentPickOrderLine.processingSequenceStr);\r\n\r\n        // If this is VKO after each piece, then show new instructions\r\n        if (cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n            this.imageButtonDone.setVisibility(View.VISIBLE);\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_article));\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n        }\r\n\r\n        //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n        cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n        PickorderPickActivity.articleScannedLastBln = false;\r\n\r\n        //Check if quantityDbl is sufficient\r\n        if (cPickorderLine.currentPickOrderLine.quantityHandledDbl < cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n            this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n            if (!cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n                this.mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n            }\r\n            return;\r\n        }\r\n\r\n\r\n        //Check if line is done\r\n        this.mCheckLineDone();\r\n\r\n    }\r\n\r\n    private  void mHandlePVArticleScanned(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //We didn't scan an article yet, so handle it as a \"normal\" scan\r\n        //We can scan article multiple times\r\n        if (!PickorderPickActivity.articleScannedLastBln || !cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln() ) {\r\n\r\n            if (!cPickorderLine.currentPickOrderLine.pFindBarcodeViaBarcodeInLineBarcodes(pvBarcodeScan)) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n                return;\r\n            }\r\n\r\n            //Succesfull article scanned\r\n            PickorderPickActivity.articleScannedLastBln = true;\r\n\r\n            //If we found the barcodeStr, currentbarcode is alreay filled, so make this selected\r\n            this.mBarcodeSelected(cPickorderBarcode.currentPickorderBarcode);\r\n            return;\r\n        }\r\n\r\n        //You have to scan a pickcart or salesorder after the last article scan\r\n        cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_scan_pickcart_or_salesorder), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n    }\r\n\r\n    private  void mBarcodeSelected(cPickorderBarcode pvBarcode) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        cPickorderBarcode.currentPickorderBarcode = pvBarcode;\r\n\r\n        if (cPickorderLine.currentPickOrderLine.linePropertyInputObl() != null && cPickorderLine.currentPickOrderLine.linePropertyInputObl().size() > 0 ) {\r\n            mShowItemPropertyInputActivity();\r\n            return;\r\n        }\r\n\r\n        this.mShowArticleInfo();\r\n        this.mShowBarcodeInfo();\r\n        this.mTryToChangePickedQuantity(true, false, cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n    }\r\n\r\n    // Lines, Barcodes, Packing Tables and destionation\r\n\r\n    private  cResult mCheckDestionationRst(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cResult resultRst = new cResult();\r\n\r\n        if (PickorderPickActivity.destionationScannedBln) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.destionationBranch() != null) {\r\n            PickorderPickActivity.destionationScannedBln = true;\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        if (pvBarcodeScan.getBarcodeOriginalStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getDestinationNoStr())) {\r\n            PickorderPickActivity.destionationScannedBln = true;\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        //Check if we have scanned a BIN and check if there are not handled linesInt for this BIN\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.LOCATION)) {\r\n            PickorderPickActivity.destionationScannedBln = false;\r\n            resultRst.resultBln = false;\r\n            resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_scan_is_not_location));\r\n            return  resultRst;\r\n        }\r\n\r\n        //Strip regex\r\n        String barcodewithoutPrefix = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        //Check if destination is correct\r\n        if (!barcodewithoutPrefix.equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getDestinationNoStr())) {\r\n            PickorderPickActivity.destionationScannedBln = false;\r\n            resultRst.resultBln = false;\r\n            resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_location_incorrect));\r\n            return  resultRst;\r\n        }\r\n\r\n        PickorderPickActivity.destionationScannedBln = true;\r\n        resultRst.resultBln = true;\r\n        return  resultRst;\r\n\r\n    }\r\n\r\n    private  void mCheckLineDone() {\r\n\r\n        //Start with defaults\r\n        boolean incompleteBln = false;\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n        this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_article));\r\n\r\n        //Set instruction\r\n        if (cPickorder.currentPickOrder.isPABln() && !PickorderPickActivity.destionationScannedBln) {\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_destination));\r\n        }\r\n\r\n        //Check if quantityDbl is sufficient\r\n        if (cPickorderLine.currentPickOrderLine.quantityHandledDbl < cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n            this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n            incompleteBln = true;\r\n        }\r\n\r\n        //PV\r\n        if (cPickorder.currentPickOrder.isPVBln()) {\r\n            //We have to scan a pickcart/salesorder after each article scan\r\n            if (cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n\r\n                //Not complete and article last scanned so we have to scan a pickcart/salesorder, set the instruction\r\n                if (PickorderPickActivity.articleScannedLastBln && incompleteBln) {\r\n                    this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n                    this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_pickcart_or_salesorder));\r\n                    return;\r\n                }\r\n            }\r\n\r\n            //We can scan all articles first and then pickcart/salesorder, so set this as the instruction\r\n            if (incompleteBln && cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty()) {\r\n                this.textViewAction.setText(cAppExtension.context.getString(R.string.scan_article_or_salesorder_or_pickcartbox));\r\n                return;\r\n            }\r\n\r\n            // We reached the quantityDbl, but still have to scan the pickcart/salesorder, so set the instruction\r\n            if (cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty()) {\r\n                this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n                this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_pickcart_or_salesorder));\r\n                this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n                return;\r\n            }\r\n\r\n            //We picked less then required, and we have a processing sequence so we are done anyway\r\n            if (incompleteBln && !cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty() && !cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln() ) {\r\n                incompleteBln = false;\r\n            }\r\n\r\n        }\r\n\r\n        //If we are incomplete, we are done here\r\n        if (incompleteBln)  {\r\n            return;\r\n        }\r\n\r\n        if (!cSetting.PICK_AUTO_ACCEPT()) {\r\n            this.imageButtonDone.setVisibility(View.VISIBLE);\r\n            this.imageButtonDone.setImageResource(R.drawable.ic_doublecheck_black_24dp);\r\n            return;\r\n        }\r\n\r\n        PickorderPickActivity.articleScannedLastBln = false;\r\n        this.mPickDone();\r\n    }\r\n\r\n    private  void mGetNextPickLineForCurrentBin() {\r\n\r\n        cResult hulpResult;\r\n\r\n        if (!cPickorder.currentPickOrder.isPickAutoNextBln()) {\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            PickorderPickActivity.noInputPropertysShownBln = false;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        //check if there is a next line for this BIN\r\n        cPickorderLine nextLine = cPickorder.currentPickOrder.pGetNextLineToHandleForBin(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n\r\n        //There is no next line, so close this activity\r\n        if (nextLine == null) {\r\n            //Clear current barcodeStr and reset defaults\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            PickorderPickActivity.noInputPropertysShownBln = false;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        //Set the current line, and update it to busy\r\n\r\n        cPickorderLine.currentPickOrderLine = nextLine;\r\n\r\n        hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n        if (!hulpResult.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpResult.messagesStr(),\"\",true,true);\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        this.mInitnewLineForBin();\r\n    }\r\n\r\n    private void mInitnewLineForBin() {\r\n\r\n        //Play a sound\r\n        cUserInterface.pPlaySound(R.raw.message, null);\r\n\r\n        //Clear current barcodeStr and reset defaults\r\n        PickorderPickActivity.noInputPropertysShownBln = false;\r\n        cPickorderBarcode.currentPickorderBarcode = null;\r\n        PickorderPickActivity.articleScannedLastBln = false;\r\n\r\n        if (cPickorder.currentPickOrder.destionationBranch() == null) {\r\n            PickorderPickActivity.destionationScannedBln = false;\r\n        }\r\n\r\n       this.mShowNoInputPropertys();\r\n\r\n        //Show animation and initialize fields\r\n        Animation animation = AnimationUtils.loadAnimation(cAppExtension.context.getApplicationContext(), R.anim.shrink_and_fade);\r\n        this.pickorderPickContainer.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n                mFieldsInitialize();\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private  void mSendPickorderLine() {\r\n\r\n        //If internet is not connected\r\n        if (!cConnection.isInternetConnectedBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), null);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n            return;\r\n        }\r\n\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.pHandledBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), null);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n        }\r\n\r\n    }\r\n\r\n    private  boolean mAddSalesOrderPackingTableBln() {\r\n\r\n        cSalesOrderPackingTable salesOrderPackingTable = new cSalesOrderPackingTable(cPickorderLine.currentPickOrderLine.getSourceNoStr(), cPickorderLine.currentPickOrderLine.getProcessingSequenceStr());\r\n\r\n        //If there are no known salesOrderPackingTables then initiaite so we can add later\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl() == null || cPickorder.currentPickOrder.salesOrderPackingTableObl().size() == 0) {\r\n            cSalesOrderPackingTable.allSalesOrderPackingTabelsObl = new ArrayList<>();\r\n        }\r\n\r\n        //if salesOrderPackingTable already exists, then we are done\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl().contains(salesOrderPackingTable)) {\r\n            return true;\r\n        }\r\n\r\n        // Does not exist, so pInsertInDatabase in database\r\n        salesOrderPackingTable.pInsertInDatabaseBln();\r\n        return true;\r\n\r\n    }\r\n\r\n    private void mHandlePickDoneClick() {\r\n\r\n        //If workflow is then call specific void\r\n        if (cPickorder.currentPickOrder.isPVBln()) {\r\n            this.mHandlePVDone();\r\n            return;\r\n        }\r\n\r\n        if (!PickorderPickActivity.handledViaPropertysBln) {\r\n            //Check if we picked less then asked, if so then show dialog\r\n            if (!cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl()) ) {\r\n                this.mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n                return;\r\n            }\r\n        }\r\n\r\n        //All is done\r\n        this.mPickDone();\r\n\r\n    }\r\n\r\n    private void mHandlePVDone() {\r\n\r\n        if (PickorderPickActivity.articleScannedLastBln) {\r\n            this.textViewAction.setText(R.string.message_scan_pickcart_or_salesorder);\r\n            cUserInterface.pShowToastMessage(getString(R.string.message_scan_pickcart_or_salesorder), R.raw.badsound);\r\n            return;\r\n        }\r\n\r\n        //If we picked less then asked, show dialog\r\n        if (!cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl())) {\r\n            this.mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n            return;\r\n        }\r\n\r\n        this.mPickDone();\r\n    }\r\n\r\n    private  void mPickDone() {\r\n\r\n        PickorderPickActivity.handledViaPropertysBln = false;\r\n\r\n        this.mSendPickorderLine();\r\n        this.mGetNextPickLineForCurrentBin();\r\n\r\n    }\r\n\r\n    private  boolean mCheckPackingTableAndSourceNoBln(String pvBarcodeStr) {\r\n\r\n\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl() == null || cPickorder.currentPickOrder.salesOrderPackingTableObl().size() == 0) {\r\n            return true;\r\n        }\r\n\r\n        //Record for Current Sales order\r\n        cSalesOrderPackingTable recordForSalesOrder = null;\r\n\r\n        //Record for Scanned Barcode\r\n        cSalesOrderPackingTable recordForBarcode = null;\r\n\r\n        for (cSalesOrderPackingTable loopRecord : cPickorder.currentPickOrder.salesOrderPackingTableObl()) {\r\n\r\n            if (loopRecord.getSalesorderStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr()))\r\n                recordForSalesOrder = loopRecord;\r\n\r\n            if (loopRecord.getPackingtableStr().equalsIgnoreCase(pvBarcodeStr)) {\r\n                recordForBarcode = loopRecord;\r\n            }\r\n        }\r\n\r\n        //Could not find both, so everything is fine\r\n        if (recordForBarcode == null && recordForSalesOrder == null) {\r\n            return true;\r\n        }\r\n\r\n\r\n        //We found a record for this barcodeStr\r\n        if (recordForBarcode != null) {\r\n\r\n            if (!recordForBarcode.getSalesorderStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr())) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_pickcartbox_already_assigned), \"\", true, true);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //We found a record for this salesorder\r\n        if (recordForSalesOrder != null) {\r\n\r\n            if (!recordForSalesOrder.getPackingtableStr().equalsIgnoreCase(pvBarcodeStr)) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_pickcartbox), recordForSalesOrder.getPackingtableStr(), true, true);\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    //Listeners\r\n    private void mSetDoneListener() {\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mHandlePickDoneClick();\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    pickCounterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n                PickorderPickActivity.articleScannedLastBln = true;\r\n                pHandleScan(cBarcodeScan.pFakeScan(cPickorderBarcode.currentPickorderBarcode.getBarcodeStr()));\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    pickCounterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n                mTryToChangePickedQuantity(false, false, cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n        quantityRequiredText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n    }\r\n\r\n    //Dialogs and Activitys\r\n\r\n    private  void mShowFullArticleFragment() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        ArticleFullViewFragment articleFullViewFragment = new ArticleFullViewFragment();\r\n        articleFullViewFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ARTICLEFULL_TAG);\r\n    }\r\n\r\n    private  void mShowUnderPickDialog(String pvRejectStr,String pvAcceptStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_underpick_header),\r\n                cAppExtension.activity.getString(R.string.message_underpick_text,\r\n                        cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityDbl()),\r\n                        cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityHandledDbl())),\r\n                pvRejectStr,\r\n                pvAcceptStr ,\r\n                false);\r\n        acceptRejectFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowAcceptFragment(){\r\n        boolean ignoreAccept = false;\r\n        if (cPickorder.currentPickOrder.isPVBln()) {\r\n            ignoreAccept = true;\r\n        }\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_orderbusy_header),\r\n                cAppExtension.activity.getString(R.string.message_orderbusy_text),\r\n                cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line),ignoreAccept);\r\n        acceptRejectFragment.setCancelable(true);\r\n\r\n        runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mGoBackToLinesActivity() {\r\n\r\n        //Reset current branch\r\n        if (cPickorder.currentPickOrder.destionationBranch() == null) {\r\n            cPickorder.currentPickOrder.scannedBranch =  null;\r\n        }\r\n\r\n        Intent intent = new Intent(cAppExtension.context, PickorderLinesActivity.class);\r\n        PickorderLinesActivity.startedViaOrderSelectBln = false;\r\n        PickorderPickActivity.noInputPropertysShownBln = false;\r\n\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, cPickorderLine.currentPickOrderLine.getQuantityDbl().intValue());\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    private  void mShowOverpickNotAllowed(){\r\n        cUserInterface.pShowSnackbarMessage(textViewAction , cAppExtension.context.getString(R.string.number_cannot_be_higher), null, false);\r\n        cUserInterface.pDoNope(quantityText, true, true);\r\n        cUserInterface.pDoNope(quantityRequiredText, false, false);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(pickorderPickContainer);\r\n        constraintSetSpace.connect(articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(pickorderPickContainer);\r\n    }\r\n\r\n    private  void mShowNoInputPropertys(){\r\n\r\n        if (PickorderPickActivity.noInputPropertysShownBln || !cPickorderLine.currentPickOrderLine.hasPropertysBln()|| cPickorderLine.currentPickOrderLine.linePropertyNoInputObl().size() == 0) {\r\n            return;\r\n        }\r\n\r\n        this.mShowItemPropertyNoInputFragment();\r\n\r\n    }\r\n\r\n    private  void mShowItemPropertyNoInputFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        ItemPropertyNoInputFragment itemPropertyNoInputFragment = new ItemPropertyNoInputFragment();\r\n        itemPropertyNoInputFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.ITEMPROPERTYVALUENOINPUTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n\r\n        PickorderPickActivity.noInputPropertysShownBln = true;\r\n    }\r\n\r\n    private  void mShowItemPropertyInputActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        Intent intent = new Intent(cAppExtension.context, PickorderLineItemPropertyInputActvity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (pickCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (pickCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (pickCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (pickCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (pickCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (pickCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (pickCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (pickCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.pickCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.pickCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    //End Region Number Broadcaster\r\n\r\n    //End Regin Private Methods\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderPickActivity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderPickActivity.java	(date 1621407247006)
@@ -48,6 +48,8 @@
 import SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;
 import SSU_WHS.Basics.Settings.cSetting;
 import SSU_WHS.General.cPublicDefinitions;
+import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;
 import SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcode;
 import SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcode;
@@ -1556,7 +1558,13 @@
 
         cUserInterface.pCheckAndCloseOpenDialogs();
 
-        ItemPropertyNoInputFragment itemPropertyNoInputFragment = new ItemPropertyNoInputFragment();
+        List<cLinePropertyValue> linePropertyValues = new ArrayList<>();
+
+        for (cLineProperty lineProperty : cPickorderLine.currentPickOrderLine.linePropertyNoInputObl()) {
+            linePropertyValues.addAll(lineProperty.propertyValueObl());
+        }
+
+        ItemPropertyNoInputFragment itemPropertyNoInputFragment = new ItemPropertyNoInputFragment(linePropertyValues);
         itemPropertyNoInputFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.ITEMPROPERTYVALUENOINPUTFRAGMENT_TAG);
         cUserInterface.pPlaySound(R.raw.message, 0);
 
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/NumberpickerFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.Button;\r\nimport android.widget.ImageButton;\r\nimport android.widget.NumberPicker;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class NumberpickerFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    private  NumberPicker quantityNumberPicker;\r\n    private  int currentQuantity;\r\n    private  Double maxQuantityDbl;\r\n    private  int maxQuantityInt;\r\n\r\n    private  ImageButton imageButtonPlus;\r\n    private  ImageButton imageButtonMinus;\r\n\r\n    private  Button buttonPlus5;\r\n    private  Button buttonPlus10;\r\n    private  Button buttonMax;\r\n    private  Button buttonMinus5;\r\n    private  Button buttonMinus10;\r\n    private  Button buttonMin;\r\n\r\n    private  Button doneButton;\r\n    private  Button cancelButton;\r\n\r\n    public NumberpickerFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_numberpicker, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        Bundle args = getArguments();\r\n\r\n        if (args != null) {\r\n            this.currentQuantity = args.getInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, 0);\r\n            this.maxQuantityDbl = args.getDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, 0);\r\n        }\r\n\r\n        this.maxQuantityInt = (int) Math.round(this.maxQuantityDbl);\r\n        if (this.maxQuantityInt > this.maxQuantityDbl) {\r\n            this.maxQuantityInt -= -1;\r\n        }\r\n\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        if (getView() != null) {\r\n            this.quantityNumberPicker = getView().findViewById(R.id.quantityNumberPicker);\r\n            this.imageButtonPlus = getView().findViewById(R.id.imageButtonPlus);\r\n            this.imageButtonMinus = getView().findViewById(R.id.imageButtonMinus);\r\n\r\n            this.buttonPlus5 = getView().findViewById(R.id.buttonPlus5);\r\n            this.buttonPlus10 = getView().findViewById(R.id.buttonPlus10);\r\n            this.buttonMax = getView().findViewById(R.id.buttonMax);\r\n            this.buttonMinus5 = getView().findViewById(R.id.buttonMinus5);\r\n            this.buttonMinus10 = getView().findViewById(R.id.buttonMinus10);\r\n            this.buttonMin = getView().findViewById(R.id.buttonMin);\r\n\r\n            this.doneButton = getView().findViewById(R.id.doneButton);\r\n            this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n        }\r\n\r\n\r\n    }\r\n\r\n     @Override\r\n    public void mFieldsInitialize() {\r\n         this.quantityNumberPicker.setMaxValue(this.maxQuantityInt);\r\n         this.quantityNumberPicker.setValue(this.currentQuantity);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetNumberListeners();\r\n        this.mSetNumpadListeners();\r\n        this.mSetDoneListener();\r\n        this.mSetCancelListener();\r\n    }\r\n\r\n    private void mSetDoneListener() {\r\n        this.doneButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                    PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();\r\n\r\n                    pickorderLineItemPropertyInputActvity.pTryToChangePickedQuantity();\r\n                    pickorderLineItemPropertyInputActvity.pRefreshActivity();\r\n                    dismiss();\r\n                    return;\r\n                }\r\n                if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n                    ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();\r\n\r\n                    receiveorderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                    receiveorderLinePropertyInputActivity.pRefreshActivity();\r\n                    dismiss();\r\n                    return;\r\n                }\r\n                if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n                    IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();\r\n\r\n                    intakeOrderLinePropertyInputActivity.pTryToChangeQuantity();\r\n                    intakeOrderLinePropertyInputActivity.pRefreshActivity();\r\n                    dismiss();\r\n                    return;\r\n                }\r\n                if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n                    InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;\r\n                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();\r\n\r\n                    inventoryLinePropertyInputActivity.pTryToChangeQuantity();\r\n                    inventoryLinePropertyInputActivity.pRefreshActivity();\r\n                    dismiss();\r\n                    return;\r\n                }\r\n                quantityNumberPicker.clearFocus();\r\n                Intent intent = new Intent(cPublicDefinitions.NUMBERINTENT_NUMBER);\r\n                intent.putExtra(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER, quantityNumberPicker.getValue());\r\n                LocalBroadcastManager.getInstance(cAppExtension.context).sendBroadcast(intent);\r\n                dismiss();\r\n            }\r\n        });\r\n\r\n    }\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListeners() {\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (quantityNumberPicker.getValue() == quantityNumberPicker.getMaxValue()) {\r\n                    cUserInterface.pDoNope(quantityNumberPicker, true, true);\r\n                }\r\n                else {\r\n                    changeValueByOne(quantityNumberPicker, true);\r\n                }\r\n            }\r\n        });\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (quantityNumberPicker.getValue() < 1) {\r\n                    cUserInterface.pDoNope(quantityNumberPicker, true, true);\r\n                }\r\n                else {\r\n                    changeValueByOne(quantityNumberPicker, false);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumpadListeners() {\r\n        this.buttonPlus5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberPickerChange(5,true);\r\n            }\r\n        });\r\n\r\n        this.buttonPlus10.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberPickerChange(10,true);\r\n            }\r\n        });\r\n\r\n        this.buttonMax.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                quantityNumberPicker.setValue(quantityNumberPicker.getMaxValue());\r\n            }\r\n        });\r\n\r\n        this.buttonMinus5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberPickerChange(5,false);\r\n            }\r\n        });\r\n\r\n        this.buttonMinus10.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberPickerChange(10,false);\r\n            }\r\n        });\r\n\r\n        this.buttonMin.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                quantityNumberPicker.setValue(quantityNumberPicker.getMinValue());\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mNumberPickerChange(int changeValue, boolean isMore) {\r\n        int currentValue = this.quantityNumberPicker.getValue();\r\n        int maxValue = this.quantityNumberPicker.getMaxValue();\r\n        int minValue = this.quantityNumberPicker.getMinValue();\r\n        int newValue;\r\n\r\n        if (isMore) {\r\n            //plus\r\n            newValue = currentValue + changeValue;\r\n            this.quantityNumberPicker.setValue(Math.min(newValue, maxValue));\r\n        }\r\n        else {\r\n            //minus\r\n            if (changeValue > currentValue) {\r\n                this.quantityNumberPicker.setValue(minValue);\r\n            }\r\n            else {\r\n                newValue = currentValue - changeValue;\r\n                this.quantityNumberPicker.setValue(newValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void changeValueByOne(final NumberPicker higherPicker, final boolean increment) {\r\n\r\n        Method method;\r\n        try {\r\n            // reflection call for\r\n            method = higherPicker.getClass().getDeclaredMethod(\"changeValueByOne\", boolean.class);\r\n            method.setAccessible(true);\r\n            method.invoke(higherPicker, increment);\r\n\r\n        } catch (final NoSuchMethodException | IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/NumberpickerFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/NumberpickerFragment.java	(date 1620815592304)
@@ -28,6 +28,7 @@
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
+import nl.icsvertex.scansuite.Activities.Move.MoveLineItemPropertyActivity;
 import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
 import nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;
 import nl.icsvertex.scansuite.R;
@@ -129,6 +130,8 @@
         this.doneButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
+                quantityNumberPicker.clearFocus();
+
                 if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {
                     PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;
                     cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();
@@ -165,7 +168,16 @@
                     dismiss();
                     return;
                 }
-                quantityNumberPicker.clearFocus();
+                if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+                    MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity)cAppExtension.activity;
+                    cLinePropertyValue.currentLinePropertyValue.quantityDbl = quantityNumberPicker.getValue();
+
+                    moveLineItemPropertyActivity.pTryToChangeQuantity(true, true, cLinePropertyValue.currentLinePropertyValue.quantityDbl);
+                    moveLineItemPropertyActivity.pRefreshActivity();
+                    dismiss();
+                    return;
+                }
+
                 Intent intent = new Intent(cPublicDefinitions.NUMBERINTENT_NUMBER);
                 intent.putExtra(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER, quantityNumberPicker.getValue());
                 LocalBroadcastManager.getInstance(cAppExtension.context).sendBroadcast(intent);
Index: app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Move.Moveorders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLineEntity;\r\nimport SSU_WHS.Move.MoveorderLines.iMoveorderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrder;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrderRepository;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cMoveorderRepository {\r\n    //Region Public Properties\r\n    private iMoveorderDao moveorderDao;\r\n    private iMoveorderLineDao moveorderLineDao;\r\n\r\n    private static class MoveCreateParams {\r\n        String documentStr;\r\n        String binCodeStr;\r\n        boolean checkBarcodesBln;\r\n\r\n        MoveCreateParams(String pvDocumentStr,  String pvBinCodeStr, boolean pvCheckBarcodesBln ) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.binCodeStr = pvBinCodeStr;\r\n            this.checkBarcodesBln = pvCheckBarcodesBln;\r\n        }\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    cMoveorderRepository(Application pvApplication) {\r\n        //Region Private Properties\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.moveorderDao = db.moveorderDao();\r\n        this.moveorderLineDao = db.moveorderLineDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public void insert (cMoveorderEntity moveorderEntity) {\r\n        new mInsertAsyncTask(moveorderDao).execute(moveorderEntity);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(moveorderDao).execute();\r\n    }\r\n\r\n    public cWebresult pCreateMoveOrderMVViaWebserviceWrs(String pvDocumentStr, String pvBinCodeStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n\r\n        MoveCreateParams moveCreateParams;\r\n        moveCreateParams = new MoveCreateParams(pvDocumentStr, pvBinCodeStr, pvCheckBarcodesBln);\r\n\r\n\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mCreateMoveOrderMVViaWebserviceAsyncTask().execute(moveCreateParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pCreateMoveOrderMIViaWebserviceWrs(String pvDocumentStr, String pvBinCodeStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        MoveCreateParams moveCreateParams;\r\n        moveCreateParams = new MoveCreateParams(pvDocumentStr, pvBinCodeStr, pvCheckBarcodesBln);\r\n\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mCreateMoveOrderMIViaWebserviceAsyncTask().execute(moveCreateParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetMoveordersFromWebserviceWrs(String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetMoveordersFromWebserviceAsyncTask().execute(pvSearchTextStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mMoveorderERPItemAddViaWebserviceAsyncTask().execute(pvArticleBarcode).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pHandledViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mMoveorderHandledViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return webResultWrs;\r\n    }\r\n    \r\n    public List<cMoveorderEntity> pGetMovesFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cMoveorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder(\"SELECT * FROM \" + cDatabase.TABLENAME_MOVEORDER);\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n             SQLStatementStr.append(\" ORDER BY Priority, Opdrachtnummer ASC\");\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new cMoveorderRepository.mGetMovesFromDatabaseWithFilterAsyncTask(moveorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLineBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetBINSFromWebserviceWrs(List<String> pvBINSObl) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBINSViaWebserviceAsyncTask().execute(pvBINSObl).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pCloseTakeMTViamWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mCloseTakeMTViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Endregion Public Methods\r\n\r\n    private static class mMoveorderERPItemAddViaWebserviceAsyncTask extends AsyncTask<cArticleBarcode, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cArticleBarcode... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cArticle.currentArticle.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n                l_PropertyInfo5Pin.setValue(cArticle.currentArticle.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(params[0].getBarcodeTypeInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(params[0].getUniqueBarcodeBln());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].getQuantityPerUnitOfMeasureDbl());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(params[0].getUnitOfMeasureStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mMoveorderHandledViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_BATCHBINCODE;\r\n                l_PropertyInfo5Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo6Pin.setValue(cWarehouseorder.StepCodeEnu.Move_Place.toString().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo7Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEHANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAsyncTask extends AsyncTask<cMoveorderEntity, Void, Void> {\r\n        private iMoveorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iMoveorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cMoveorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private iMoveorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iMoveorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mCreateMoveOrderMVViaWebserviceAsyncTask extends AsyncTask<MoveCreateParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(MoveCreateParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.MV.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_CONTAINER;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_CURRENTLOCATION_SHORT;\r\n                l_PropertyInfo7Pin.setValue(params[0].binCodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_MOVEBARCODECHECK;\r\n                l_PropertyInfo9Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_MIBATCHTRAKEBIN;\r\n                l_PropertyInfo10Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo11Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEORDERCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreateMoveOrderMIViaWebserviceAsyncTask extends AsyncTask<MoveCreateParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(MoveCreateParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.MI.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_CONTAINER;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_CURRENTLOCATION_SHORT;\r\n                l_PropertyInfo7Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_MOVEBARCODECHECK;\r\n                l_PropertyInfo9Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_MIBATCHTRAKEBIN;\r\n                l_PropertyInfo10Pin.setValue(params[0].binCodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo11Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEORDERCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetMoveordersFromWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo3Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            String mainTypeStr = \"\";\r\n\r\n            switch (MoveorderSelectActivity.currentMainTypeEnu) {\r\n                case Unknown:\r\n                    mainTypeStr = \"\";\r\n                    break;\r\n\r\n                case TAKE:\r\n                    mainTypeStr = \"MO\";\r\n                    break;\r\n\r\n                case PLACE:\r\n                    mainTypeStr = \"MI\";\r\n                    break;\r\n\r\n                case TAKEANDPLACE:\r\n                    mainTypeStr = \"MV\";\r\n                    break;\r\n\r\n            }\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo4Pin.setValue(mainTypeStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetMovesFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cMoveorderEntity>> {\r\n        private iMoveorderDao mAsyncTaskDao;\r\n\r\n        mGetMovesFromDatabaseWithFilterAsyncTask(iMoveorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cMoveorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredMoveOrders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetLineBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERLINEBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetBINSViaWebserviceAsyncTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(List<String>... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                SoapObject binSubSet = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BINSUBSET);\r\n\r\n                for (String loopStr : params[0]) {\r\n                    binSubSet.addProperty(\"string\", loopStr);\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINSUBSET;\r\n                l_PropertyInfo2Pin.setValue(binSubSet);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSELOCATIONS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mCloseTakeMTViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(cWarehouseorder.MoveStatusEnu.Move_Take_Busy);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEPICKHANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorderRepository.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorderRepository.java	(date 1620381154355)
@@ -23,14 +23,10 @@
 import SSU_WHS.General.Warehouseorder.cWarehouseorder;
 import SSU_WHS.General.acScanSuiteDatabase;
 import SSU_WHS.General.cDatabase;
-import SSU_WHS.Move.MoveorderLines.cMoveorderLineEntity;
 import SSU_WHS.Move.MoveorderLines.iMoveorderLineDao;
-import SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrder;
-import SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrderRepository;
 import SSU_WHS.Webservice.cWebresult;
 import SSU_WHS.Webservice.cWebservice;
 import SSU_WHS.Webservice.cWebserviceDefinitions;
-import nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;
 
 import static ICS.Utils.cText.pAddSingleQuotesStr;
@@ -343,6 +339,40 @@
         return webResultWrs;
     }
 
+    public cWebresult pGetLinePropertysViaWebserviceWrs() {
+
+        List<String> resultObl = new ArrayList<>();
+        cWebresult webResultWrs = new cWebresult();
+
+        try {
+            webResultWrs = new mGetPropertysViaWebserviceAsyncTask().execute().get();
+        } catch (ExecutionException | InterruptedException e) {
+            webResultWrs.setResultBln(false);
+            webResultWrs.setSuccessBln(false);
+            resultObl.add(e.getLocalizedMessage());
+            webResultWrs.setResultObl(resultObl);
+            e.printStackTrace();
+        }
+        return webResultWrs;
+    }
+
+    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {
+
+        List<String> resultObl = new ArrayList<>();
+        cWebresult webResultWrs = new cWebresult();
+
+        try {
+            webResultWrs = new mGetPropertyValuesViaWebserviceAsyncTask().execute().get();
+        } catch (ExecutionException | InterruptedException e) {
+            webResultWrs.setResultBln(false);
+            webResultWrs.setSuccessBln(false);
+            resultObl.add(e.getLocalizedMessage());
+            webResultWrs.setResultObl(resultObl);
+            e.printStackTrace();
+        }
+        return webResultWrs;
+    }
+
     //Endregion Public Methods
 
     private static class mMoveorderERPItemAddViaWebserviceAsyncTask extends AsyncTask<cArticleBarcode, Void, cWebresult> {
@@ -903,6 +933,68 @@
 
                 webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEPICKHANDLED, l_PropertyInfoObl);
 
+            } catch (JSONException e) {
+                webresult.setSuccessBln(false);
+                webresult.setResultBln(false);
+            }
+            return webresult;
+        }
+    }
+
+    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
+        @Override
+        protected cWebresult doInBackground(String... params) {
+            cWebresult webresult = new cWebresult();
+            try {
+                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
+
+                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
+                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
+                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.VERPLAATS.toString());
+                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
+
+                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
+                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
+                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
+                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
+
+                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
+                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
+                l_PropertyInfo3Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());
+                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
+
+                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);
+            } catch (JSONException e) {
+                webresult.setSuccessBln(false);
+                webresult.setResultBln(false);
+            }
+            return webresult;
+        }
+    }
+
+    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
+        @Override
+        protected cWebresult doInBackground(String... params) {
+            cWebresult webresult = new cWebresult();
+            try {
+                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
+
+                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
+                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
+                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.VERPLAATS.toString());
+                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
+
+                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
+                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
+                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
+                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
+
+                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
+                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
+                l_PropertyInfo3Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());
+                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
+
+                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);
             } catch (JSONException e) {
                 webresult.setSuccessBln(false);
                 webresult.setResultBln(false);
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemPropertyNoInputFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValueNoInputAdapter;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport nl.icsvertex.scansuite.PagerAdapters.ArticleInfoPagerAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class ItemPropertyNoInputFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n   //Region Private Properties\r\n   private  ImageView toolbarImage;\r\n   private  TextView toolbarTitle;\r\n\r\n    private AppCompatImageButton imageButtonNoInputPropertys;\r\n    private TextView articleDescriptionCompactText;\r\n    private TextView articleDescription2CompactText;\r\n    private TextView articleItemCompactText;\r\n    private TextView articleBarcodeCompactText;\r\n\r\n   // private  RecyclerView itemPropertyRecyclerview;\r\n    private  Button buttonOK;\r\n\r\n    private TabLayout itemPropertyTabLayout;\r\n    private ViewPager itemPropertyViewpager;\r\n    public  int numberOfTabsInt;\r\n\r\n    private  List<cLinePropertyValue> localItemPropertyValueObl;\r\n\r\n\r\n    private cLinePropertyValueNoInputAdapter linePropertyAdapter;\r\n    private cLinePropertyValueNoInputAdapter getLinePropertyAdapter(){\r\n        if (this.linePropertyAdapter == null) {\r\n            this.linePropertyAdapter = new cLinePropertyValueNoInputAdapter();\r\n        }\r\n\r\n        return linePropertyAdapter;\r\n    }\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public ItemPropertyNoInputFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n//    public ItemPropertyNoInputFragment(List<cPickorderLinePropertyValue> pvDataObl) {\r\n//        this.localItemPropertyValueObl = pvDataObl;\r\n//    }\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(LayoutInflater pvInflater, ViewGroup pvContainer, Bundle pvSavedInstanceState) {\r\n        return pvInflater.inflate(R.layout.fragment_itemproperty_no_input, pvContainer);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = getResources().getDisplayMetrics().heightPixels - getResources().getDimensionPixelSize(R.dimen.default_double_margin);\r\n\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultFragment methods\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n        this.mSetToolbar();\r\n     //   this.mSetItemPropertyValueRecycler();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        if (getView() != null) {\r\n            this.toolbarImage = getView().findViewById(R.id.toolbarImage);\r\n            this.toolbarTitle = getView().findViewById(R.id.toolbarTitle);\r\n\r\n            this.imageButtonNoInputPropertys = getView().findViewById(R.id.imageButtonNoInputPropertys);\r\n            this.articleDescriptionCompactText = getView().findViewById(R.id.articleDescriptionCompactText);\r\n            this.articleDescription2CompactText = getView().findViewById(R.id.articleDescription2CompactText);\r\n            this.articleItemCompactText = getView().findViewById(R.id.articleItemCompactText);\r\n            this.articleBarcodeCompactText = getView().findViewById(R.id.articleBarcodeCompactText);\r\n\r\n            //this.itemPropertyRecyclerview = getView().findViewById(R.id.itemPropertyRecyclerview);\r\n            this.itemPropertyTabLayout = getView().findViewById(R.id.itemPropertyTabLayout);\r\n            this.itemPropertyViewpager = getView().findViewById(R.id.itemPropertyViewpager);\r\n            this.buttonOK = getView().findViewById(R.id.buttonOK);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.mSetArticleInfo();\r\n        this.mBuildAndFillTabs();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n     //   this.mSetHeaderListener();\r\n        this.mSetCloseListener();\r\n    }\r\n\r\n    //End Regioni ICSDefaultFragment methods\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Public Methods\r\n\r\n\r\n    //End Region Public Methods\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private void mSetToolbar() {\r\n\r\n        this.toolbarTitle.setText(cAppExtension.activity.getString(R.string.screentitle_itemproperty_no_input));\r\n        this.toolbarTitle.setEllipsize(TextUtils.TruncateAt.MARQUEE);\r\n        this.toolbarTitle.setSingleLine(true);\r\n        this.toolbarTitle.setMarqueeRepeatLimit(5);\r\n        this.toolbarTitle.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                toolbarTitle.setSelected(true);\r\n            }\r\n        },1500);\r\n\r\n        this.toolbarImage.setImageResource(R.drawable.ic_info);\r\n\r\n    }\r\n    private void mSetCloseListener() {\r\n        this.buttonOK.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                cAppExtension.dialogFragment.dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n//    private void mSetHeaderListener() {\r\n//        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View view) {\r\n//                mScrollToBottom();\r\n//            }\r\n//        });\r\n//\r\n//        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {\r\n//            @Override\r\n//            public boolean onLongClick(View view) {\r\n//                mScrollToTop();\r\n//                return true;\r\n//            }\r\n//        });\r\n//    }\r\n\r\n//    private void mScrollToTop() {\r\n//        this.itemPropertyRecyclerview.smoothScrollToPosition(0);\r\n//    }\r\n//\r\n//    private void mScrollToBottom() {\r\n//        if (this.getPickorderLinePropertyAdapter()!= null) {\r\n//            if (this.getPickorderLinePropertyAdapter().getItemCount() > 0) {\r\n//                this.itemPropertyRecyclerview.smoothScrollToPosition(this.getPickorderLinePropertyAdapter().getItemCount() -1 );\r\n//            }\r\n//        }\r\n//    }\r\n//\r\n//    private void mSetItemPropertyValueRecycler() {\r\n//        this.itemPropertyRecyclerview.setHasFixedSize(false);\r\n//        this.itemPropertyRecyclerview.setAdapter(this.getPickorderLinePropertyAdapter());\r\n//        this.itemPropertyRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n//        this.getPickorderLinePropertyAdapter().pFillData(this.localItemPropertyValueObl);\r\n//    }\r\n    private void  mSetArticleInfo(){\r\n\r\n        this.articleDescriptionCompactText.setText(cPickorderLine.currentPickOrderLine.getDescriptionStr());\r\n        this.articleDescription2CompactText.setText(cPickorderLine.currentPickOrderLine.getDescription2Str());\r\n        this.articleItemCompactText.setText(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n        this.articleBarcodeCompactText.setVisibility(View.GONE);\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n\r\n    private void mBuildAndFillTabs() {\r\n        ArrayList<Fragment> fragments = new ArrayList<>();\r\n\r\n//        this.itemPropertyTabLayout = getView().findViewById(R.id.itemPropertyTabLayout);\r\n//        for (cPickorderLineProperty pickorderLineProperty : cPickorderLine.currentPickOrderLine.pickorderLinePropertyNoInputObl()) {\r\n//\r\n//            DynamicItemPropertyFragment dynamicItemPropertyFragment = new DynamicItemPropertyFragment(pickorderLineProperty.getPropertyCodeStr(), pickorderLineProperty.propertyValueObl());\r\n//            fragments.add(dynamicItemPropertyFragment);\r\n//\r\n//        }\r\n\r\n        ArticleInfoPagerAdapter articleInfoPagerAdapter = new ArticleInfoPagerAdapter(this.getChildFragmentManager(),  fragments);\r\n        this.itemPropertyViewpager.setAdapter(articleInfoPagerAdapter);\r\n        this.itemPropertyTabLayout.setupWithViewPager(itemPropertyViewpager);\r\n    }\r\n    //End Region Private Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemPropertyNoInputFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemPropertyNoInputFragment.java	(date 1621408704117)
@@ -15,6 +15,8 @@
 import androidx.appcompat.widget.AppCompatImageButton;
 import androidx.fragment.app.DialogFragment;
 import androidx.fragment.app.Fragment;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
 import androidx.viewpager.widget.ViewPager;
 
 import com.google.android.material.tabs.TabLayout;
@@ -29,6 +31,7 @@
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValueNoInputAdapter;
 import SSU_WHS.Picken.PickorderLines.cPickorderLine;
+import nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;
 import nl.icsvertex.scansuite.PagerAdapters.ArticleInfoPagerAdapter;
 import nl.icsvertex.scansuite.R;
 
@@ -44,16 +47,11 @@
     private TextView articleItemCompactText;
     private TextView articleBarcodeCompactText;
 
-   // private  RecyclerView itemPropertyRecyclerview;
+    private RecyclerView itemPropertyRecyclerview;
     private  Button buttonOK;
 
-    private TabLayout itemPropertyTabLayout;
-    private ViewPager itemPropertyViewpager;
-    public  int numberOfTabsInt;
-
     private  List<cLinePropertyValue> localItemPropertyValueObl;
 
-
     private cLinePropertyValueNoInputAdapter linePropertyAdapter;
     private cLinePropertyValueNoInputAdapter getLinePropertyAdapter(){
         if (this.linePropertyAdapter == null) {
@@ -71,10 +69,10 @@
         // Required empty public constructor
     }
 
-//    public ItemPropertyNoInputFragment(List<cPickorderLinePropertyValue> pvDataObl) {
-//        this.localItemPropertyValueObl = pvDataObl;
-//    }
-    //End Region Constructor
+    public ItemPropertyNoInputFragment(List<cLinePropertyValue> pvDataObl) {
+        this.localItemPropertyValueObl = pvDataObl;
+    }
+   // End Region Constructor
 
     //Region Default Methods
 
@@ -110,7 +108,7 @@
         this.mFieldsInitialize();
         this.mSetListeners();
         this.mSetToolbar();
-     //   this.mSetItemPropertyValueRecycler();
+       this.mSetItemPropertyValueRecycler();
     }
 
     @Override
@@ -125,9 +123,7 @@
             this.articleItemCompactText = getView().findViewById(R.id.articleItemCompactText);
             this.articleBarcodeCompactText = getView().findViewById(R.id.articleBarcodeCompactText);
 
-            //this.itemPropertyRecyclerview = getView().findViewById(R.id.itemPropertyRecyclerview);
-            this.itemPropertyTabLayout = getView().findViewById(R.id.itemPropertyTabLayout);
-            this.itemPropertyViewpager = getView().findViewById(R.id.itemPropertyViewpager);
+            this.itemPropertyRecyclerview = getView().findViewById(R.id.itemPropertyRecyclerview);
             this.buttonOK = getView().findViewById(R.id.buttonOK);
         }
     }
@@ -136,12 +132,11 @@
     @Override
     public void mFieldsInitialize() {
         this.mSetArticleInfo();
-        this.mBuildAndFillTabs();
     }
 
     @Override
     public void mSetListeners() {
-     //   this.mSetHeaderListener();
+        this.mSetHeaderListener();
         this.mSetCloseListener();
     }
 
@@ -181,64 +176,51 @@
         });
     }
 
-//    private void mSetHeaderListener() {
-//        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View view) {
-//                mScrollToBottom();
-//            }
-//        });
-//
-//        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {
-//            @Override
-//            public boolean onLongClick(View view) {
-//                mScrollToTop();
-//                return true;
-//            }
-//        });
-//    }
+    private void mSetHeaderListener() {
+        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                mScrollToBottom();
+            }
+        });
+
+        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View view) {
+                mScrollToTop();
+                return true;
+            }
+        });
+    }
 
-//    private void mScrollToTop() {
-//        this.itemPropertyRecyclerview.smoothScrollToPosition(0);
-//    }
-//
-//    private void mScrollToBottom() {
-//        if (this.getPickorderLinePropertyAdapter()!= null) {
-//            if (this.getPickorderLinePropertyAdapter().getItemCount() > 0) {
-//                this.itemPropertyRecyclerview.smoothScrollToPosition(this.getPickorderLinePropertyAdapter().getItemCount() -1 );
-//            }
-//        }
-//    }
-//
-//    private void mSetItemPropertyValueRecycler() {
-//        this.itemPropertyRecyclerview.setHasFixedSize(false);
-//        this.itemPropertyRecyclerview.setAdapter(this.getPickorderLinePropertyAdapter());
-//        this.itemPropertyRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));
-//        this.getPickorderLinePropertyAdapter().pFillData(this.localItemPropertyValueObl);
-//    }
+    private void mScrollToTop() {
+        this.itemPropertyRecyclerview.smoothScrollToPosition(0);
+    }
+
+    private void mScrollToBottom() {
+        if (this.getLinePropertyAdapter()!= null) {
+            if (this.getLinePropertyAdapter().getItemCount() > 0) {
+                this.itemPropertyRecyclerview.smoothScrollToPosition(this.getLinePropertyAdapter().getItemCount() -1 );
+            }
+        }
+    }
+
+    private void mSetItemPropertyValueRecycler() {
+        this.itemPropertyRecyclerview.setHasFixedSize(false);
+        this.itemPropertyRecyclerview.setAdapter(this.getLinePropertyAdapter());
+        this.itemPropertyRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));
+        this.getLinePropertyAdapter().pFillData(this.localItemPropertyValueObl);
+    }
     private void  mSetArticleInfo(){
 
-        this.articleDescriptionCompactText.setText(cPickorderLine.currentPickOrderLine.getDescriptionStr());
-        this.articleDescription2CompactText.setText(cPickorderLine.currentPickOrderLine.getDescription2Str());
-        this.articleItemCompactText.setText(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());
+        if (cAppExtension.activity instanceof PickorderPickActivity){
+            this.articleDescriptionCompactText.setText(cPickorderLine.currentPickOrderLine.getDescriptionStr());
+            this.articleDescription2CompactText.setText(cPickorderLine.currentPickOrderLine.getDescription2Str());
+            this.articleItemCompactText.setText(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());
+        }
+
         this.articleBarcodeCompactText.setVisibility(View.GONE);
         this.imageButtonNoInputPropertys.setVisibility(View.GONE);
     }
-
-    private void mBuildAndFillTabs() {
-        ArrayList<Fragment> fragments = new ArrayList<>();
-
-//        this.itemPropertyTabLayout = getView().findViewById(R.id.itemPropertyTabLayout);
-//        for (cPickorderLineProperty pickorderLineProperty : cPickorderLine.currentPickOrderLine.pickorderLinePropertyNoInputObl()) {
-//
-//            DynamicItemPropertyFragment dynamicItemPropertyFragment = new DynamicItemPropertyFragment(pickorderLineProperty.getPropertyCodeStr(), pickorderLineProperty.propertyValueObl());
-//            fragments.add(dynamicItemPropertyFragment);
-//
-//        }
-
-        ArticleInfoPagerAdapter articleInfoPagerAdapter = new ArticleInfoPagerAdapter(this.getChildFragmentManager(),  fragments);
-        this.itemPropertyViewpager.setAdapter(articleInfoPagerAdapter);
-        this.itemPropertyTabLayout.setupWithViewPager(itemPropertyViewpager);
-    }
     //End Region Private Methods
 }
Index: app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Move.Moveorders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.SortedMap;\r\nimport java.util.TreeMap;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.Move.MoveItemVariant.cMoveItemVariant;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcode;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLine;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLineViewModel;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class cMoveorder {\r\n\r\n    private String orderNumberStr;\r\n    public String getOrderNumberStr() {\r\n        return orderNumberStr;\r\n    }\r\n\r\n    private String orderTypeStr;\r\n    public String getOrderTypeStr() {\r\n        return orderTypeStr;\r\n    }\r\n\r\n    private String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {\r\n        return assignedUserIdStr;\r\n    }\r\n\r\n    public String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {\r\n        return currentUserIdStr;\r\n    }\r\n\r\n    public int statusInt;\r\n    public int getStatusInt() {\r\n        return statusInt;\r\n    }\r\n\r\n    public String binCodeStr;\r\n    public String getBinCodeStr() {\r\n        return binCodeStr;\r\n    }\r\n\r\n    public  String stockownerStr;\r\n    public  String getStockownerStr(){return stockownerStr;}\r\n\r\n    private String documentStr;\r\n    public String getDocumentStr() {\r\n        return documentStr;\r\n    }\r\n\r\n    private String externalReferenceStr;\r\n    public String getExternalReferenceStr() {\r\n        return externalReferenceStr;\r\n    }\r\n\r\n    private int sourceDocumentInt;\r\n    private int getSourceDocumentInt() {\r\n        return sourceDocumentInt;\r\n    }\r\n\r\n    private boolean moveWithPictureBln;\r\n    public boolean isMoveWithPictureBln() {\r\n        return moveWithPictureBln;\r\n    }\r\n\r\n    private boolean moveWithPictureAutoOpenBln;\r\n    public boolean isMoveWithPictureAutoOpenBln() {\r\n        return moveWithPictureAutoOpenBln;\r\n    }\r\n\r\n    private boolean moveAmountManualBln;\r\n    public boolean getMoveAmountManualBln() {return this.moveAmountManualBln;}\r\n\r\n    private boolean moveBarcodeCheckBln;\r\n    public boolean isMoveBarcodeCheckBln() {return this.moveBarcodeCheckBln;}\r\n\r\n    private boolean moveValidateStockBln;\r\n    public boolean isMoveValidateStockBln() {return this.moveValidateStockBln;}\r\n\r\n    public boolean getProcessingOrParkedBln() {\r\n\r\n        if (this.getStatusInt() == cWarehouseorder.MoveStatusEnu.Move_Take_Wait) {\r\n            return  true;\r\n        }\r\n\r\n        return this.getStatusInt() == cWarehouseorder.MoveStatusEnu.Move_Place_Wait;\r\n\r\n    }\r\n\r\n    public boolean isGeneratedBln() {\r\n       return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n   }\r\n\r\n\r\n\r\n    public  boolean showTodoBln = true;\r\n\r\n    private cMoveorderEntity moveorderEntity;\r\n\r\n    public List<cComment> commentsObl() {\r\n        return cComment.allCommentsObl;\r\n    }\r\n    public List<cMoveorderBarcode> barcodesObl () {return  cMoveorderBarcode.allMoveorderBarcodesObl;}\r\n    public List<cMoveorderLine> linesObl () {return  cMoveorderLine.allLinesObl;}\r\n\r\n    public List<cMoveorderLine> takeLinesObl;\r\n    public List<cMoveorderLine> sortedTakeLinesObl() {\r\n\r\n        List<cMoveorderLine> sortedTakeLinesObl = new ArrayList<>();\r\n\r\n        if (this.takeLinesObl == null || this.takeLinesObl.size() == 0) {\r\n            return  sortedTakeLinesObl;\r\n        }\r\n\r\n        sortedTakeLinesObl.addAll(this.takeLinesObl);\r\n\r\n        Collections.sort(sortedTakeLinesObl);\r\n\r\n        return  sortedTakeLinesObl;\r\n\r\n    }\r\n\r\n    public List<cMoveorderLine> placeLinesObl;\r\n    public List<cMoveorderLine> sortedPlaceLinesObl() {\r\n\r\n        List<cMoveorderLine> sortedTakeLinesObl = new ArrayList<>();\r\n\r\n        if (this.placeLinesObl == null || this.placeLinesObl.size() == 0) {\r\n            return  sortedTakeLinesObl;\r\n        }\r\n\r\n        sortedTakeLinesObl.addAll(this.placeLinesObl);\r\n\r\n        Collections.sort(sortedTakeLinesObl);\r\n\r\n        return  sortedTakeLinesObl;\r\n\r\n    }\r\n\r\n    public  List<cMoveorderLine> placeLinesTodoObl (){\r\n\r\n        List<cMoveorderLine> resultObl = new ArrayList<>();\r\n\r\n        if (this.placeLinesObl == null || this.placeLinesObl.size() == 0) {\r\n            return resultObl;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine :this.placeLinesObl)\r\n        {\r\n\r\n            if (cMoveorder.currentMoveOrder.getOrderTypeStr().equalsIgnoreCase(\"MV\")) {\r\n                if (moveorderLine.getQuantityHandledDbl() < moveorderLine.getQuantityDbl())\r\n                {\r\n                    resultObl.add(moveorderLine);\r\n                }\r\n            }\r\n\r\n            if (cMoveorder.currentMoveOrder.getOrderTypeStr().equalsIgnoreCase(\"MT\")) {\r\n                if (moveorderLine.getQuantityHandledDbl() < moveorderLine.getQuantityTakenDbl())\r\n                {\r\n                    resultObl.add(moveorderLine);\r\n                }\r\n            }\r\n\r\n        }\r\n        return resultObl;\r\n\r\n    }\r\n\r\n    public  List<cMoveorderLine> takeLinesTodoObl (String pvBinCodeStr){\r\n\r\n        List<cMoveorderLine> resultObl = new ArrayList<>();\r\n\r\n        if (this.takeLinesObl == null || this.takeLinesObl.size() == 0) {\r\n            return resultObl;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine :this.takeLinesObl)\r\n        {\r\n            if (!moveorderLine.isHandledBln())\r\n            {\r\n                if (pvBinCodeStr.isEmpty()) {\r\n                    resultObl.add(moveorderLine);\r\n                }\r\n                else\r\n                {\r\n                    if (moveorderLine.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr)) {\r\n                        resultObl.add((moveorderLine));\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        return resultObl;\r\n\r\n    }\r\n\r\n    public  List<cMoveorderLine> takeLinesToHandleObl (){\r\n\r\n        List<cMoveorderLine> resultObl = new ArrayList<>();\r\n\r\n        if (this.takeLinesObl == null || this.takeLinesObl.size() == 0) {\r\n            return resultObl;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine :this.takeLinesObl)\r\n        {\r\n            if (!moveorderLine.isHandledBln())\r\n            {\r\n                    resultObl.add(moveorderLine);\r\n            }\r\n        }\r\n        return resultObl;\r\n\r\n    }\r\n\r\n    public  List<cMoveorderLine> placeLinesTodoObl (String pvBinCodeStr){\r\n\r\n        List<cMoveorderLine> resultObl = new ArrayList<>();\r\n\r\n        if (this.placeLinesObl == null || this.placeLinesObl.size() == 0) {\r\n            return resultObl;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine :this.placeLinesObl)\r\n        {\r\n            if (!moveorderLine.isHandledBln())\r\n            {\r\n                if (pvBinCodeStr.isEmpty()) {\r\n                    resultObl.add(moveorderLine);\r\n                }\r\n                else\r\n                {\r\n                    if (moveorderLine.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr)) {\r\n                        resultObl.add((moveorderLine));\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        return resultObl;\r\n\r\n    }\r\n\r\n    public  List<cMoveorderLine> placeLineForBinReversedObl(String pvBinCodeStr){\r\n\r\n        List<cMoveorderLine> resultObl = new ArrayList<>();\r\n\r\n        if (this.placeLinesObl == null || this.placeLinesObl.size() == 0) {\r\n            return resultObl;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine :this.placeLinesObl)\r\n        {\r\n            if (moveorderLine.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr)) {\r\n                resultObl.add((moveorderLine));\r\n            }\r\n        }\r\n\r\n        Collections.reverse(resultObl);\r\n\r\n        return resultObl;\r\n\r\n    }\r\n\r\n    public boolean isPlaceDoneBln(){\r\n\r\n        for (cMoveItemVariant moveItemVariant : cMoveItemVariant.allMoveItemVariantObl.values()) {\r\n            if (moveItemVariant.getQuantityTodoPlaceDbl() > 0 ) {\r\n                return  false;\r\n            }\r\n        }\r\n\r\n        return  true;\r\n\r\n    }\r\n\r\n    public SortedMap<String, cArticle> articleObl;\r\n    public List<cBranchBin> binsObl;\r\n\r\n    public static List<cMoveorder> allMoveordersObl;\r\n    public static cMoveorder currentMoveOrder;\r\n\r\n    public cArticle currentArticle;\r\n    public cMoveorderBarcode currentMoveorderBarcode;\r\n    public cMoveorderBarcode moveorderBarcodeToHandle;\r\n    public cBranchBin currentBranchBin;\r\n    public  cMoveItemVariant currentMoveItemVariant;\r\n\r\n    private cMoveorderViewModel getMoveorderViewModel () {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderViewModel.class);\r\n    }\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel () {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    private cMoveorderLineViewModel getMoveorderLineViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderLineViewModel.class);\r\n    }\r\n\r\n    public enum lineModusEnu {\r\n        TAKE,\r\n        PLACE\r\n    }\r\n\r\n    public lineModusEnu currenLineModusEnu = lineModusEnu.TAKE;\r\n\r\n    //Region Public Properties\r\n\r\n    //Region Constructor\r\n\r\n    public cMoveorder(JSONObject pvJsonObject) {\r\n\r\n        this.moveorderEntity = new cMoveorderEntity(pvJsonObject);\r\n        this.orderNumberStr = this.moveorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.moveorderEntity.getOrderTypeStr();\r\n        this.assignedUserIdStr = this.moveorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.moveorderEntity.getCurrentUserIdStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.moveorderEntity.getStatusStr());\r\n        this.binCodeStr = this.moveorderEntity.getBincodeStr();\r\n        this.stockownerStr = this.moveorderEntity.getStockownerStr();\r\n        this.externalReferenceStr = this.moveorderEntity.getExternalReferenceStr();\r\n        this.documentStr = this.moveorderEntity.getDocumentStr();\r\n\r\n        this.moveAmountManualBln = cText.pStringToBooleanBln(this.moveorderEntity.getMoveAmountManualStr(), false);\r\n        this.moveBarcodeCheckBln = cText.pStringToBooleanBln(this.moveorderEntity.getMoveBarcodeCheckStr(), false);\r\n        this.moveValidateStockBln = cText.pStringToBooleanBln(this.moveorderEntity.getMoveValidateStockStr(), false);\r\n        this.sourceDocumentInt = cText.pStringToIntegerInt(this.moveorderEntity.getSourceDocumentStr()) ;\r\n\r\n        this.moveWithPictureBln = cText.pStringToBooleanBln(this.moveorderEntity.getMoveWithPictureStr(),false);\r\n        this.moveWithPictureAutoOpenBln = cText.pStringToBooleanBln(this.moveorderEntity.getMoveWithPictureAutoOpenStr(),false);\r\n\r\n    }\r\n\r\n\r\n    public cMoveorder(cMoveorderEntity pvMoveorderEntity) {\r\n\r\n        this.moveorderEntity = pvMoveorderEntity;\r\n\r\n        this.orderNumberStr = this.moveorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.moveorderEntity.getOrderTypeStr();\r\n        this.assignedUserIdStr = this.moveorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.moveorderEntity.getCurrentUserIdStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.moveorderEntity.getStatusStr());\r\n        this.binCodeStr = this.moveorderEntity.getBincodeStr();\r\n        this.stockownerStr = this.moveorderEntity.getStockownerStr();\r\n        this.externalReferenceStr = this.moveorderEntity.getExternalReferenceStr();\r\n        this.documentStr = this.moveorderEntity.getDocumentStr();\r\n\r\n        this.moveAmountManualBln = cText.pStringToBooleanBln(this.moveorderEntity.getMoveAmountManualStr(), false);\r\n        this.moveBarcodeCheckBln = cText.pStringToBooleanBln(this.moveorderEntity.getMoveBarcodeCheckStr(), false);\r\n        this.moveValidateStockBln = cText.pStringToBooleanBln(this.moveorderEntity.getMoveValidateStockStr(), false);\r\n        this.sourceDocumentInt = cText.pStringToIntegerInt(this.moveorderEntity.getSourceDocumentStr()) ;\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getMoveorderViewModel().insert(this.moveorderEntity);\r\n        if (cMoveorder.allMoveordersObl == null) {\r\n            cMoveorder.allMoveordersObl = new ArrayList<>();\r\n        }\r\n        cMoveorder.allMoveordersObl.add(this);\r\n        return true;\r\n    }\r\n\r\n    public static cResult pCreateMoveOrderMVViaWebserviceRst(String pvDocumentStr, String pvBinCodeStr, boolean pvCheckBarcodesBln) {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cMoveorderViewModel moveorderViewModel =   new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderViewModel.class);\r\n        WebResult = moveorderViewModel.pCreateMoveOrderMVViaWebserviceWrs(pvDocumentStr,pvBinCodeStr,pvCheckBarcodesBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (WebResult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n\r\n            // We got a succesfull response, but we need to do something with this activity\r\n\r\n            Long actionLng = WebResult.getResultLng();\r\n\r\n            if (WebResult.getResultLng() < 10 ) {\r\n                actionLng = WebResult.getResultLng();\r\n            }\r\n\r\n            if (WebResult.getResultLng() > 100) {\r\n                actionLng  = WebResult.getResultLng()/100;\r\n            }\r\n\r\n\r\n\r\n            //Try to convert action long to action enumerate\r\n            result.activityActionEnu= cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n                return  result;\r\n            }\r\n\r\n            if (result.activityActionEnu== cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_has_deleted_by_erp)));\r\n                return  result;\r\n            }\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Next) {\r\n                result.resultBln = true;\r\n                result.pSetResultAction(WebResult.pGetNextActivityObl());\r\n                return  result;\r\n            }\r\n\r\n            //No activty created\r\n            if (WebResult.getResultDtt() == null || WebResult.getResultDtt().size() == 0) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_order_not_created)));\r\n                return  result;\r\n            }\r\n\r\n            //Something went wrong, we received a comment\r\n            if (actionLng == 80) {\r\n                result.resultBln = false;\r\n                cComment comment = new cComment(WebResult.getResultDtt().get(0));\r\n                result.pAddErrorMessage(comment.commentTextStr);\r\n                return  result;\r\n            }\r\n\r\n            cMoveorder moveorder = new cMoveorder(WebResult.getResultDtt().get(0));\r\n            moveorder.pInsertInDatabaseBln();\r\n            cMoveorder.currentMoveOrder = moveorder;\r\n\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVECREATE);\r\n            result.resultBln = false;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static cResult pCreateMoveOrderMIViaWebserviceRst(String pvDocumentStr, String pvBinCodeStr, boolean pvCheckBarcodesBln) {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cMoveorderViewModel moveorderViewModel =   new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderViewModel.class);\r\n        WebResult = moveorderViewModel.pCreateMoveOrderMIViaWebserviceWrs(pvDocumentStr,pvBinCodeStr,pvCheckBarcodesBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (WebResult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n\r\n            // We got a succesfull response, but we need to do something with this activity\r\n\r\n            Long actionLng = WebResult.getResultLng();\r\n\r\n            if (WebResult.getResultLng() < 10 ) {\r\n                actionLng = WebResult.getResultLng();\r\n            }\r\n\r\n            if (WebResult.getResultLng() > 100) {\r\n                actionLng  = WebResult.getResultLng()/100;\r\n            }\r\n\r\n\r\n\r\n            //Try to convert action long to action enumerate\r\n            result.activityActionEnu= cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n                return  result;\r\n            }\r\n\r\n            if (result.activityActionEnu== cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_has_deleted_by_erp)));\r\n                return  result;\r\n            }\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Next) {\r\n                result.resultBln = true;\r\n                result.pSetResultAction(WebResult.pGetNextActivityObl());\r\n                return  result;\r\n            }\r\n\r\n            //No activty created\r\n            if (WebResult.getResultDtt() == null || WebResult.getResultDtt().size() == 0) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_order_not_created)));\r\n                return  result;\r\n            }\r\n\r\n            //Something went wrong, we received a comment\r\n            if (actionLng == 80) {\r\n                result.resultBln = false;\r\n                cComment comment = new cComment(WebResult.getResultDtt().get(0));\r\n                result.pAddErrorMessage(comment.commentTextStr);\r\n                return  result;\r\n            }\r\n\r\n            cMoveorder moveorder = new cMoveorder(WebResult.getResultDtt().get(0));\r\n            moveorder.pInsertInDatabaseBln();\r\n            cMoveorder.currentMoveOrder = moveorder;\r\n\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVECREATE);\r\n            result.resultBln = false;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static boolean pGetMoveOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        cWebresult WebResult;\r\n\r\n        if (pvRefreshBln) {\r\n            cMoveorder.allMoveordersObl = null;\r\n            cMoveorder.mTruncateTable();\r\n        }\r\n        cMoveorderViewModel moveorderViewModel =   new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderViewModel.class);\r\n        WebResult = moveorderViewModel.pGetMoveordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n           if(WebResult.getResultDtt() != null && WebResult.getResultDtt().size() > 0) {\r\n               for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                   cMoveorder moveorder = new cMoveorder(jsonObject);\r\n                   moveorder.pInsertInDatabaseBln();\r\n               }\r\n           }\r\n\r\n            return  true;\r\n\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERS);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst() {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult = null;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        if (cSetting.GENERIC_UNLOCK_BUSY_ORDERS_ALLOWED()) {\r\n            if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n                ignoreBusyBln = true;\r\n            }\r\n        }\r\n\r\n        switch (this.getStatusInt()) {\r\n            case cWarehouseorder.MoveStatusEnu.Move_Take:\r\n            case cWarehouseorder.MoveStatusEnu.Move_Take_Busy:\r\n            case cWarehouseorder.MoveStatusEnu.Move_Take_Wait:\r\n                Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.VERPLAATS.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), cWarehouseorder.StepCodeEnu.Move_Take.toString(), cWarehouseorder.MoveStatusEnu.Move_Take, ignoreBusyBln);\r\n                this.statusInt = cWarehouseorder.MoveStatusEnu.Move_Take_Busy;\r\n                break;\r\n\r\n            case cWarehouseorder.MoveStatusEnu.Move_Place:\r\n            case cWarehouseorder.MoveStatusEnu.Move_Place_Busy:\r\n            case cWarehouseorder.MoveStatusEnu.Move_Place_Wait:\r\n                Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.VERPLAATS.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), cWarehouseorder.StepCodeEnu.Move_Place.toString(), cWarehouseorder.MoveStatusEnu.Move_Place, ignoreBusyBln);\r\n                this.statusInt = cWarehouseorder.MoveStatusEnu.Move_Place_Busy;\r\n                break;\r\n        }\r\n\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n            Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null) {\r\n            Webresult.getResultObl().size();\r\n            if (!Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getUsernameStr())) {\r\n                result.resultBln = false;\r\n                result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            cMoveorder.currentMoveOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln() {\r\n\r\n        cWebresult Webresult = null;\r\n\r\n        switch (this.getStatusInt()) {\r\n            case cWarehouseorder.MoveStatusEnu.Move_Take_Busy:\r\n                Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.VERPLAATS.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), cWarehouseorder.StepCodeEnu.Move_Take.toString(), cWarehouseorder.MoveStatusEnu.Move_Take);\r\n                break;\r\n\r\n            case cWarehouseorder.MoveStatusEnu.Move_Place_Busy:\r\n                Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.VERPLAATS.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), cWarehouseorder.StepCodeEnu.Move_Place.toString(), cWarehouseorder.MoveStatusEnu.Move_Place);\r\n                break;\r\n\r\n\r\n        }\r\n        return Objects.requireNonNull(Webresult).getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n    public cResult pGetOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all linesInt for current order, if webservice error then stop\r\n        if (!cMoveorder.currentMoveOrder.pGetLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_movelines_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all barcodes, if webservice error then stop\r\n        if (!cMoveorder.currentMoveOrder.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all barcodes, if webservice error then stop\r\n        if (!cMoveorder.currentMoveOrder.pGetLineBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all BINS, if webservice error then stop\r\n        if (!cMoveorder.currentMoveOrder.pGetBINSViaWebserviceBln()) {\r\n            if (cMoveorder.currentMoveOrder.linesObl().size() > 0) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_bins_failed));\r\n                return result;\r\n            }\r\n        }\r\n\r\n        if (cMoveorder.currentMoveOrder.getOrderTypeStr().equalsIgnoreCase(\"MI\")) {\r\n            if (!cMoveorder.currentMoveOrder.pMatchBarcodesAndLinesBln()) {\r\n                result.resultBln = false;\r\n                result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_matching_lines_and_barcodes_failed));\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // Get all comments\r\n        if (!cMoveorder.currentMoveOrder.pGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    public cResult pGetOrderDetailsMTRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all linesInt for current order, if webservice error then stop\r\n        if (!cMoveorder.currentMoveOrder.pGetLinesMTViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_movelines_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all barcodes, if webservice error then stop\r\n        if (!cMoveorder.currentMoveOrder.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all barcodes, if webservice error then stop\r\n        if (!cMoveorder.currentMoveOrder.pGetLineBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all BINS, if webservice error then stop\r\n        if (!cMoveorder.currentMoveOrder.pGetBINSViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!cMoveorder.currentMoveOrder.pGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    public cResult pCloseTakeMTRst(){\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult = this.getMoveorderViewModel().pCloseTakeMTViaWebserviceWrs();\r\n        if (!WebResult.getResultBln() || !WebResult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(WebResult.getResultObl().toString());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    public boolean pDeleteDetailsBln() {\r\n        cMoveorderLine.pTruncateTableBln();\r\n        cMoveorderBarcode.pTruncateTableBln();\r\n        cComment.pTruncateTableBln();\r\n        return true;\r\n    }\r\n\r\n    public boolean pGetLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        cMoveorderLine moveorderLineToAdd;\r\n\r\n        if (pvRefreshBln) {\r\n            cMoveorderLine.allLinesObl = null;\r\n            this.takeLinesObl = null;\r\n            this.placeLinesObl = null;\r\n            cMoveorderLine.pTruncateTableBln();\r\n            cMoveItemVariant.allMoveItemVariantObl = null;\r\n        }\r\n        cWebresult WebResult = this.getMoveorderViewModel().pGetLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cMoveorderLine.allLinesObl == null) {\r\n                cMoveorderLine.allLinesObl = new ArrayList<>();\r\n                this.takeLinesObl = new ArrayList<>();\r\n                this.placeLinesObl = new ArrayList<>();\r\n                cMoveItemVariant.allMoveItemVariantObl = new LinkedHashMap<>();\r\n            }\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cMoveorderLine moveorderLine = new cMoveorderLine(jsonObject);\r\n                moveorderLine.pInsertInDatabaseBln();\r\n\r\n                // Try to get ItemVariant from SortedList\r\n                cMoveItemVariant moveItemVariant = cMoveItemVariant.allMoveItemVariantObl.get(moveorderLine.getKeyStr());\r\n\r\n                // Create ItemVariant if it doens't exist\r\n                if (moveItemVariant == null) {\r\n                    moveItemVariant = new cMoveItemVariant(moveorderLine.getItemNoStr(), moveorderLine.getVariantCodeStr());\r\n                    moveItemVariant.quantityPlacedDbl = 0;\r\n                    moveItemVariant.quantityTakenDbl = 0;\r\n\r\n                    cMoveItemVariant.allMoveItemVariantObl.put(moveItemVariant.getKeyStr(), moveItemVariant);\r\n                }\r\n\r\n                if (moveItemVariant.linesObl == null) {\r\n                    moveItemVariant.linesObl = new ArrayList<>();\r\n                }\r\n\r\n                // Add barcode to ItemVariant\r\n                moveItemVariant.linesObl.add(moveorderLine);\r\n\r\n\r\n                if (moveorderLine.getActionTypeCodeStr().equalsIgnoreCase(cWarehouseorder.ActionTypeEnu.TAKE.toString())) {\r\n                    cMoveorder.currentMoveOrder.takeLinesObl.add(moveorderLine);\r\n                    moveItemVariant.quantityTakenDbl += moveorderLine.getQuantityHandledDbl();\r\n\r\n                    if (moveorderLine.getQuantityHandledDbl() > 0) {\r\n                        if (moveItemVariant.getHandledTimeStampStr() == null || cText.pStringToDateStr(moveorderLine.getHandledTimeStampStr(), \"YYYY-MM-dd\").after(cText.pStringToDateStr(moveItemVariant.getHandledTimeStampStr(), \"YYYY-MM-dd\"))) {\r\n                            moveItemVariant.handledTimeStampStr = moveorderLine.getHandledTimeStampStr();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (moveorderLine.getActionTypeCodeStr().equalsIgnoreCase(cWarehouseorder.ActionTypeEnu.PLACE.toString())) {\r\n                    cMoveorder.currentMoveOrder.placeLinesObl.add(moveorderLine);\r\n                    moveItemVariant.quantityPlacedDbl += moveorderLine.getQuantityHandledDbl();\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n            //Loop through all item variants to check if we need to create extra place lines\r\n            for (cMoveItemVariant loopMoveItemVariant :cMoveItemVariant.allMoveItemVariantObl.values()) {\r\n\r\n\r\n                //If we took enough, skip this variant\r\n                if (loopMoveItemVariant.getQuantityPlacedDbl() >= loopMoveItemVariant.getQuantityTakenDbl()) {\r\n                    continue;\r\n                }\r\n\r\n                //We placed less then we took, so create place line for quantity still to place\r\n                moveorderLineToAdd  = loopMoveItemVariant.linePlaceTodoLine();\r\n                moveorderLineToAdd.quantityDbl = loopMoveItemVariant.getQuantityTodoPlaceDbl();\r\n                moveorderLineToAdd.quantityHandledDbl = 0;\r\n                moveorderLineToAdd.pInsertInDatabaseBln();\r\n                this.placeLinesObl.add(moveorderLineToAdd);\r\n\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERLINES);\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public boolean pGetLinesMTViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cMoveorderLine.allLinesObl = null;\r\n            this.takeLinesObl = null;\r\n            this.placeLinesObl = null;\r\n            cMoveorderLine.pTruncateTableBln();\r\n            cMoveItemVariant.allMoveItemVariantObl = null;\r\n        }\r\n        cWebresult WebResult = this.getMoveorderViewModel().pGetLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cMoveorderLine.allLinesObl == null) {\r\n                cMoveorderLine.allLinesObl = new ArrayList<>();\r\n                this.takeLinesObl = new ArrayList<>();\r\n                this.placeLinesObl = new ArrayList<>();\r\n                cMoveItemVariant.allMoveItemVariantObl = new LinkedHashMap<>();\r\n            }\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cMoveorderLine moveorderLine = new cMoveorderLine(jsonObject);\r\n\r\n                if (cMoveorder.currentMoveOrder.getOrderTypeStr().equalsIgnoreCase(\"MT\")) {\r\n                    if (moveorderLine.getActionTypeCodeStr().equalsIgnoreCase(cWarehouseorder.ActionTypeEnu.PLACE.toString()) && moveorderLine.getQuantityTakenDbl() == 0) {\r\n                    continue;\r\n                    }\r\n                }\r\n\r\n\r\n                moveorderLine.pInsertInDatabaseBln();\r\n\r\n                // Try to get ItemVariant from SortedList\r\n                cMoveItemVariant moveItemVariant = cMoveItemVariant.allMoveItemVariantObl.get(moveorderLine.getKeyStr());\r\n\r\n                // Create ItemVariant if it doens't exist\r\n                if (moveItemVariant == null) {\r\n                    moveItemVariant = new cMoveItemVariant(moveorderLine.getItemNoStr(), moveorderLine.getVariantCodeStr());\r\n                    moveItemVariant.quantityPlacedDbl = 0;\r\n                    moveItemVariant.quantityTakenDbl = 0;\r\n\r\n                    cMoveItemVariant.allMoveItemVariantObl.put(moveItemVariant.getKeyStr(), moveItemVariant);\r\n                }\r\n\r\n                if (moveItemVariant.linesObl == null) {\r\n                    moveItemVariant.linesObl = new ArrayList<>();\r\n                }\r\n\r\n                // Add barcode to ItemVariant\r\n                moveItemVariant.linesObl.add(moveorderLine);\r\n\r\n\r\n                if (moveorderLine.getActionTypeCodeStr().equalsIgnoreCase(cWarehouseorder.ActionTypeEnu.TAKE.toString())) {\r\n                    cMoveorder.currentMoveOrder.takeLinesObl.add(moveorderLine);\r\n                    moveItemVariant.quantityTakenDbl += moveorderLine.getQuantityHandledDbl();\r\n\r\n                    if (moveorderLine.getQuantityHandledDbl() > 0) {\r\n                        if (moveItemVariant.getHandledTimeStampStr() == null || cText.pStringToDateStr(moveorderLine.getHandledTimeStampStr(), \"YYYY-MM-dd\").after(cText.pStringToDateStr(moveItemVariant.getHandledTimeStampStr(), \"YYYY-MM-dd\"))) {\r\n                            moveItemVariant.handledTimeStampStr = moveorderLine.getHandledTimeStampStr();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (moveorderLine.getActionTypeCodeStr().equalsIgnoreCase(cWarehouseorder.ActionTypeEnu.PLACE.toString())) {\r\n                    cMoveorder.currentMoveOrder.placeLinesObl.add(moveorderLine);\r\n                    moveItemVariant.quantityPlacedDbl += moveorderLine.getQuantityHandledDbl();\r\n\r\n                }\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERLINES);\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public boolean pGetLineBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n\r\n        if (pvRefreshBln) {\r\n            cMoveorderLineBarcode.allMoveorderLineBarcodesObl = null;\r\n        }\r\n\r\n        cWebresult WebResult = this.getMoveorderViewModel().pGetLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cMoveorderLineBarcode.allMoveorderLineBarcodesObl == null) {\r\n                cMoveorderLineBarcode.allMoveorderLineBarcodesObl= new ArrayList<>();\r\n            }\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cMoveorderLineBarcode moveorderLineBarcode = new cMoveorderLineBarcode(jsonObject);\r\n                moveorderLineBarcode.pInsertInDatabaseBln();\r\n            }\r\n            \r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERLINEBARCODES);\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public boolean pMatchBarcodesAndLinesBln() {\r\n\r\n        if (cMoveorderBarcode.allMoveorderBarcodesObl == null || cMoveorderBarcode.allMoveorderBarcodesObl .size() == 0 ||\r\n                cMoveorderLineBarcode.allMoveorderLineBarcodesObl == null || cMoveorderLineBarcode.allMoveorderLineBarcodesObl.size() == 0 ||\r\n                cMoveorderLine.allLinesObl == null ||  cMoveorderLine.allLinesObl.size() == 0 )  {\r\n            return true;\r\n        }\r\n\r\n        for (cMoveorderLineBarcode moveorderLineBarcode : cMoveorderLineBarcode.allMoveorderLineBarcodesObl) {\r\n\r\n            cMoveorderBarcode moveorderBarcode =   cMoveorderBarcode.pGetMoveOrderBarcodeByBarcode(moveorderLineBarcode.getBarcodeStr());\r\n            if (moveorderBarcode == null) {\r\n                continue;\r\n            }\r\n\r\n            cMoveorderLine moveorderLine =   cMoveorderLine.pGetLineByLineNo(moveorderLineBarcode.getLineNoInt());\r\n            if (moveorderLine == null) {\r\n                continue;\r\n            }\r\n\r\n            if (moveorderLine.barcodesObl == null) {\r\n                moveorderLine.barcodesObl = new ArrayList<>();\r\n            }\r\n\r\n            moveorderLine.barcodesObl.add(moveorderBarcode);\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pGetBINSViaWebserviceBln() {\r\n\r\n        List<String> binsObl = new ArrayList<>();\r\n\r\n        for (cMoveorderLine moveorderLine : this.linesObl()) {\r\n            if (!binsObl.contains(moveorderLine.getBinCodeStr()) && !moveorderLine.getBinCodeStr().isEmpty()) {\r\n                binsObl.add(moveorderLine.getBinCodeStr());\r\n            }\r\n        }\r\n\r\n        cWebresult WebResult = this.getMoveorderViewModel().pGetBINSFromWebserviceWrs(binsObl);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (WebResult.getResultDtt().size() != binsObl.size()) {\r\n                return  false;\r\n            }\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                if (cUser.currentUser.currentBranch.binsObl == null) {\r\n                    cUser.currentUser.currentBranch.binsObl = new ArrayList<>();\r\n                }\r\n\r\n                if (this.binsObl == null) {\r\n                    this.binsObl = new ArrayList<>();\r\n                }\r\n\r\n                cUser.currentUser.currentBranch.binsObl.add(branchBin);\r\n                this.binsObl.add(branchBin);\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERLINEBARCODES);\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public boolean pGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n         cWebresult webresult = this.getMoveorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            for ( JSONObject jsonObject : webresult.getResultDtt()) {\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cMoveorderBarcode.allMoveorderBarcodesObl = null;\r\n            cMoveorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult =  this.getMoveorderViewModel().pGetBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            if (cMoveorderBarcode.allMoveorderBarcodesObl == null) {\r\n                cMoveorderBarcode.allMoveorderBarcodesObl = new ArrayList<>();\r\n            }\r\n\r\n            if (cMoveorder.currentMoveOrder.articleObl == null) {\r\n                cMoveorder.currentMoveOrder.articleObl = new TreeMap<>();\r\n            }\r\n\r\n            for (  JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cMoveorderBarcode moveorderBarcode = new cMoveorderBarcode(jsonObject);\r\n                moveorderBarcode.pInsertInDatabaseBln();\r\n\r\n                if (!cMoveorder.currentMoveOrder.articleObl.containsKey(moveorderBarcode.getItemNoAndVariantCodeStr())) {\r\n                    cArticle article = new cArticle(jsonObject);\r\n                    article.descriptionStr = moveorderBarcode.getBarcodeStr();\r\n                    cMoveorder.currentMoveOrder.articleObl.put(moveorderBarcode.getItemNoAndVariantCodeStr(),article);\r\n                }\r\n\r\n            }\r\n\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETMOVEORDERBARCODES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public static List<cMoveorder> pGetMovesWithFilterFromDatabasObl() {\r\n\r\n        List<cMoveorder> resultObl = new ArrayList<>();\r\n        List<cMoveorderEntity> hulpResultObl;\r\n\r\n        cMoveorderViewModel  moveorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderViewModel.class);\r\n\r\n        hulpResultObl = moveorderViewModel.pGetMovesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cMoveorderEntity moveorderEntity : hulpResultObl ) {\r\n            cMoveorder moveorder = new cMoveorder(moveorderEntity);\r\n            resultObl.add(moveorder);\r\n        }\r\n\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (cMoveorder.currentMoveOrder.commentsObl() == null || cMoveorder.currentMoveOrder.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return  cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    public cMoveorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cMoveorderBarcode moveorderBarcode : this.barcodesObl()) {\r\n\r\n            if (moveorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr()) || moveorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr())) {\r\n                return  moveorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    public cMoveorderLine pGetTakeLineForCurrentArticleAndBin(cMoveorderBarcode pvMoveorderBarcode ) {\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0 || cMoveorder.currentMoveOrder.currentBranchBin  == null) {\r\n            return  null;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine : this.linesObl()) {\r\n\r\n            if (!moveorderLine.getActionTypeCodeStr().equalsIgnoreCase(cWarehouseorder.ActionTypeEnu.TAKE.toString())) {\r\n                continue;\r\n            }\r\n\r\n\r\n            //Check if item matches scanned item\r\n            if (moveorderLine.getItemNoStr().equalsIgnoreCase(pvMoveorderBarcode.getItemNoStr()) &&\r\n                 moveorderLine.getVariantCodeStr().equalsIgnoreCase(pvMoveorderBarcode.getVariantCodeStr())) {\r\n\r\n                if (moveorderLine.getBinCodeStr().equalsIgnoreCase(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr())) {\r\n                    return  moveorderLine;\r\n                }\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cMoveorderLine pGetPlaceLineForCurrentArticleAndBin(cMoveorderBarcode pvMoveorderBarcode ) {\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0 || cMoveorder.currentMoveOrder.currentBranchBin  == null) {\r\n            return  null;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine : this.linesObl()) {\r\n\r\n            if (!moveorderLine.getActionTypeCodeStr().equalsIgnoreCase(cWarehouseorder.ActionTypeEnu.PLACE.toString())) {\r\n                continue;\r\n            }\r\n\r\n\r\n            //Check if item matches scanned item\r\n            if (moveorderLine.getItemNoStr().equalsIgnoreCase(pvMoveorderBarcode.getItemNoStr()) &&\r\n                    moveorderLine.getVariantCodeStr().equalsIgnoreCase(pvMoveorderBarcode.getVariantCodeStr())) {\r\n\r\n                if (moveorderLine.getBinCodeStr().equalsIgnoreCase(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr())) {\r\n                    return  moveorderLine;\r\n                }\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public List<cMoveorderLine> pGetTakeLinesForCurrentBin() {\r\n\r\n        List<cMoveorderLine> resulObl = new ArrayList<>();\r\n\r\n        if (this.takeLinesObl == null || this.takeLinesObl.size() == 0 || cMoveorder.currentMoveOrder.currentBranchBin  == null) {\r\n            return  resulObl;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine : this.takeLinesObl) {\r\n            if (moveorderLine.getBinCodeStr().equalsIgnoreCase(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr())) {\r\n                resulObl.add(moveorderLine);\r\n            }\r\n        }\r\n\r\n        return  resulObl;\r\n    }\r\n\r\n    public List<cMoveorderLine> pGetPlaceLinesForCurrentBin() {\r\n\r\n        List<cMoveorderLine> resulObl = new ArrayList<>();\r\n\r\n        if (this.placeLinesObl == null || this.placeLinesObl.size() == 0 || cMoveorder.currentMoveOrder.currentBranchBin  == null) {\r\n            return  resulObl;\r\n        }\r\n\r\n        for (cMoveorderLine moveorderLine : this.placeLinesObl) {\r\n            if (moveorderLine.getBinCodeStr().equalsIgnoreCase(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr())) {\r\n                resulObl.add(moveorderLine);\r\n            }\r\n        }\r\n\r\n        return  resulObl;\r\n    }\r\n\r\n    public cBranchBin pGetBin(String pvBincodeStr) {\r\n\r\n\r\n\r\n        if (this.binsObl == null || this.binsObl.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        for (cBranchBin branchBin : this.binsObl) {\r\n            if (branchBin.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                return  branchBin;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public boolean pAddUnkownBarcodeAndItemVariantBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cWebresult WebResult;\r\n\r\n        //Then add barcode\r\n        WebResult =  this.getMoveorderLineViewModel().pAddUnknownBarcodeViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cMoveorderBarcode moveorderBarcode = new cMoveorderBarcode(WebResult.getResultDtt().get(0));\r\n\r\n                if (cMoveorderBarcode.allMoveorderBarcodesObl == null) {\r\n                    cMoveorderBarcode.allMoveorderBarcodesObl= new ArrayList<>();\r\n                }\r\n\r\n                if (cMoveorder.currentMoveOrder.articleObl == null) {\r\n                    cMoveorder.currentMoveOrder.articleObl = new TreeMap<>();\r\n                }\r\n\r\n                cMoveorderBarcode.allMoveorderBarcodesObl.add(moveorderBarcode);\r\n                cMoveorder.currentMoveOrder.currentMoveorderBarcode = moveorderBarcode;\r\n\r\n               cMoveorder.currentMoveOrder.currentArticle= new cArticle(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getItemNoStr(),cMoveorder.currentMoveOrder.currentMoveorderBarcode.getVariantCodeStr());\r\n               cMoveorder.currentMoveOrder.currentArticle.barcodesObl = new ArrayList<>();\r\n               cMoveorder.currentMoveOrder.currentArticle.barcodesObl.add(new cArticleBarcode(cMoveorder.currentMoveOrder.currentMoveorderBarcode));\r\n               cMoveorder.currentMoveOrder.articleObl.put(cMoveorder.currentMoveOrder.currentArticle.getItemNoAndVariantCodeStr(),cMoveorder.currentMoveOrder.currentArticle);\r\n\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_MOVEBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Get article info via the web service\r\n        cMoveorder.currentMoveOrder.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if ( cMoveorder.currentMoveOrder.currentArticle== null) {\r\n            return false;\r\n        }\r\n\r\n        cArticle.currentArticle = cMoveorder.currentMoveOrder.currentArticle;\r\n\r\n        //Add article to article object list\r\n        cMoveorder.currentMoveOrder.articleObl.put(cMoveorder.currentMoveOrder.currentArticle.getItemNoAndVariantCodeStr(), cMoveorder.currentMoveOrder.currentArticle);\r\n\r\n\r\n        //Get barcodes for this article\r\n        if (! cMoveorder.currentMoveOrder.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        boolean isUniqueBarcodeBln = false;\r\n\r\n        if (cArticle.currentArticle.barcodesObl != null && cArticle.currentArticle.barcodesObl.get(0).getUniqueBarcodeBln()) {\r\n            isUniqueBarcodeBln = true;\r\n        }\r\n\r\n        if (cMoveorderBarcode.allMoveorderBarcodesObl == null) {\r\n            cMoveorderBarcode.allMoveorderBarcodesObl= new ArrayList<>();\r\n        }\r\n\r\n        for (cArticleBarcode articleBarcode :  cMoveorder.currentMoveOrder.currentArticle.barcodesObl) {\r\n            if (articleBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n               articleBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n\r\n                //Then add barcode\r\n                cWebresult WebResult =  this.getMoveorderLineViewModel().pAddERPBarcodeViaWebserviceWrs(pvBarcodeScan, isUniqueBarcodeBln);\r\n                if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n                    cMoveorderBarcode moveorderBarcode = new cMoveorderBarcode(WebResult.getResultDtt().get(0));\r\n                    cMoveorderBarcode.allMoveorderBarcodesObl.add(moveorderBarcode);\r\n                    cMoveorder.currentMoveOrder.currentMoveorderBarcode= moveorderBarcode;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pMoveTakeItemHandledBln(List<cMoveorderBarcode> pvScannedBarcodesObl) {\r\n        cWebresult WebResult;\r\n\r\n\r\n        List<cMoveorderBarcode> sortedBarcodeObl = this.mSortedBarcodeListObl(pvScannedBarcodesObl);\r\n\r\n        WebResult =  this.getMoveorderLineViewModel().pMoveItemTakeHandledViaWebserviceWrs(sortedBarcodeObl);\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cMoveorderLine moveorderLine = new cMoveorderLine(jsonObject);\r\n                moveorderLine.pInsertInDatabaseBln();\r\n                cMoveorder.currentMoveOrder.takeLinesObl.add(moveorderLine);\r\n\r\n                cMoveItemVariant moveItemVariant = cMoveItemVariant.allMoveItemVariantObl.get(moveorderLine.getKeyStr());\r\n                if (moveItemVariant == null) {\r\n                    moveItemVariant  = new cMoveItemVariant(moveorderLine.getItemNoStr(),moveorderLine.getVariantCodeStr());\r\n                    moveItemVariant.quantityPlacedDbl = 0;\r\n                    moveItemVariant.quantityTakenDbl = 0;\r\n                    moveItemVariant.linesObl = new ArrayList<>();\r\n                    cMoveItemVariant.allMoveItemVariantObl.put(moveorderLine.getKeyStr(),moveItemVariant);\r\n                }\r\n\r\n                //Add line to variant\r\n                moveItemVariant.linesObl.add(moveorderLine);\r\n\r\n                for (cMoveorderLine loopMoveorderLine : cMoveorder.currentMoveOrder.placeLinesObl) {\r\n                    if (loopMoveorderLine.getItemNoStr().equalsIgnoreCase(moveorderLine.getItemNoStr()) && loopMoveorderLine.getVariantCodeStr().equalsIgnoreCase(moveorderLine.getVariantCodeStr())) {\r\n                        loopMoveorderLine.quantityTakenDbl += moveorderLine.quantityHandledDbl;\r\n                        loopMoveorderLine.handledTimeStampStr = moveorderLine.handledTimeStampStr;\r\n                    }\r\n                }\r\n\r\n                moveItemVariant.quantityTakenDbl += moveorderLine.quantityHandledDbl;\r\n\r\n                cMoveorderLine moveorderLineToAdd = new cMoveorderLine(moveorderLine.getItemNoStr(),moveorderLine.getVariantCodeStr());\r\n                moveorderLineToAdd.actionTypeCodeStr = cWarehouseorder.ActionTypeEnu.PLACE.toString();\r\n                moveorderLineToAdd.descriptionStr = moveorderLine.getDescriptionStr();\r\n                moveorderLineToAdd.description2Str = moveorderLine.getDescription2Str();\r\n                moveorderLineToAdd.quantityDbl = moveorderLine.getQuantityHandledDbl();\r\n                cMoveorder.currentMoveOrder.placeLinesObl.add(moveorderLineToAdd);\r\n\r\n                //Refresh line barcodes\r\n                cMoveorder.currentMoveOrder.pGetLineBarcodesViaWebserviceBln(true);\r\n                return true;\r\n            }\r\n\r\n\r\n\r\n            return  true;\r\n        }\r\n        else {\r\n\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_PICKORDERLINE_HANDLED);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pMoveTakeMTItemHandledBln(List<cMoveorderBarcode> pvScannedBarcodesObl) {\r\n        cWebresult WebResult;\r\n\r\n\r\n        List<cMoveorderBarcode> sortedBarcodeObl = this.mSortedBarcodeListObl(pvScannedBarcodesObl);\r\n\r\n        WebResult =  this.getMoveorderLineViewModel().pMoveItemTakeMTHandledViaWebserviceWrs(sortedBarcodeObl);\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            return  true;\r\n        }\r\n        else {\r\n\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_PICKORDERLINE_HANDLED);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pMovePlaceMTItemHandledBln(List<cMoveorderBarcode> pvScannedBarcodesObl) {\r\n        cWebresult WebResult;\r\n\r\n\r\n        List<cMoveorderBarcode> sortedBarcodeObl = this.mSortedBarcodeListObl(pvScannedBarcodesObl);\r\n\r\n        WebResult =  this.getMoveorderLineViewModel().pMoveItemPlaceMTHandledViaWebserviceWrs(sortedBarcodeObl);\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cMoveorderLine moveorderLine = new cMoveorderLine(jsonObject);\r\n                //Edit quantity for this ItemVariant\r\n                Objects.requireNonNull(moveorderLine.moveItemVariant()).quantityPlacedDbl +=  moveorderLine.getQuantityHandledDbl();\r\n            }\r\n\r\n\r\n            return  true;\r\n        }\r\n        else {\r\n\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_PICKORDERLINE_HANDLED);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pMovePlaceMIItemHandledBln(List<cMoveorderBarcode> pvScannedBarcodesObl) {\r\n        cWebresult WebResult;\r\n\r\n\r\n        List<cMoveorderBarcode> sortedBarcodeObl = this.mSortedBarcodeListObl(pvScannedBarcodesObl);\r\n\r\n        WebResult =  this.getMoveorderLineViewModel().pMoveItemPlaceMIHandledViaWebserviceWrs(sortedBarcodeObl);\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            return  true;\r\n        }\r\n        else {\r\n\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_PICKORDERLINE_HANDLED);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pMovePlaceItemHandledBln(List<cMoveorderBarcode> pvScannedBarcodesObl) {\r\n        cWebresult WebResult;\r\n\r\n        List<cMoveorderBarcode> sortedBarcodeObl = this.mSortedBarcodeListObl(pvScannedBarcodesObl);\r\n\r\n        WebResult =  this.getMoveorderLineViewModel().pMoveItemPlaceHandledViaWebserviceWrs(sortedBarcodeObl);\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cMoveorderLine moveorderLine = new cMoveorderLine(jsonObject);\r\n                moveorderLine.pInsertInDatabaseBln();\r\n\r\n                if (cMoveorder.currentMoveOrder.getOrderTypeStr().equalsIgnoreCase(cWarehouseorder.WorkflowEnu.MI.toString())) {\r\n                    if (moveorderLine.barcodesObl == null) {\r\n                        moveorderLine.barcodesObl = new ArrayList<>();\r\n                    }\r\n\r\n                    moveorderLine.barcodesObl.addAll(pvScannedBarcodesObl);\r\n                }\r\n\r\n                if (pvScannedBarcodesObl.get(0).getIsUniqueBarcodeBln()) {\r\n                    cMoveItemVariant moveItemVariant = new cMoveItemVariant(moveorderLine.getItemNoStr(), moveorderLine.getVariantCodeStr());\r\n                    moveItemVariant.quantityPlacedDbl = 0;\r\n                    moveItemVariant.quantityTakenDbl = 0;\r\n                    moveItemVariant.linesObl = new ArrayList<>();\r\n                    cMoveItemVariant.allMoveItemVariantObl.put(moveorderLine.getKeyStr(),moveItemVariant);\r\n                }\r\n\r\n                //Edit quantity for this ItemVariant\r\n                Objects.requireNonNull(moveorderLine.moveItemVariant()).quantityPlacedDbl +=  moveorderLine.getQuantityHandledDbl();\r\n\r\n                //Add line to variant\r\n                moveorderLine.moveItemVariant().linesObl.add(moveorderLine);\r\n\r\n                //Init new list for lines that need to be removed\r\n                List<cMoveorderLine> linesToBeRemovedObl = new ArrayList<>();\r\n\r\n                //Edit all place lines for this variant\r\n                for (cMoveorderLine loopMoveorderPlaceLine : this.placeLinesObl) {\r\n                    if (loopMoveorderPlaceLine.getItemNoStr().equalsIgnoreCase(moveorderLine.getItemNoStr()) && loopMoveorderPlaceLine.getVariantCodeStr().equalsIgnoreCase(moveorderLine.getVariantCodeStr())) {\r\n\r\n                        //This line should be replaced\r\n                        if (loopMoveorderPlaceLine.getQuantityTakenDbl() == moveorderLine.getQuantityHandledDbl() && loopMoveorderPlaceLine.getQuantityPlacedDbl() == 0) {\r\n                            linesToBeRemovedObl.add(loopMoveorderPlaceLine);\r\n                            continue;\r\n                        }\r\n\r\n                        loopMoveorderPlaceLine.quantityPlacedDbl += moveorderLine.getQuantityHandledDbl();\r\n                    }\r\n                }\r\n\r\n                //Remove lines from placelines Obl if needed\r\n                for (cMoveorderLine moveorderLineToBeRemoved : linesToBeRemovedObl ) {\r\n                    this.placeLinesObl.remove(moveorderLineToBeRemoved);\r\n                    moveorderLine.moveItemVariant().linesObl.remove(moveorderLineToBeRemoved);\r\n                    cMoveorder.currentMoveOrder.linesObl().remove(moveorderLineToBeRemoved);\r\n                }\r\n\r\n\r\n                //Add the new line\r\n                cMoveorder.currentMoveOrder.placeLinesObl.add(moveorderLine);\r\n                return true;\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_PICKORDERLINE_HANDLED);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public cResult pHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult webresult;\r\n\r\n        webresult =  this.getMoveorderViewModel().pHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cMoveorder.currentMoveOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n\r\n    }\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private static void mTruncateTable() {\r\n        cMoveorderViewModel    moveorderViewModel =   new ViewModelProvider(cAppExtension.fragmentActivity).get(cMoveorderViewModel.class);\r\n        moveorderViewModel.deleteAll();\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n\r\n        if (pvResultDtt != null && pvResultDtt.size() > 0 ) {\r\n            JSONObject jsonObject = pvResultDtt.get(0);\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n\r\n    }\r\n\r\n    private List<cMoveorderBarcode> mSortedBarcodeListObl(List<cMoveorderBarcode> pvUnsortedBarcodeObl) {\r\n\r\n        List<cMoveorderBarcode> resultObl = new ArrayList<>();\r\n        boolean barcodeFoundBln = false;\r\n\r\n        for (cMoveorderBarcode moveorderBarcode : pvUnsortedBarcodeObl) {\r\n\r\n            for (cMoveorderBarcode resultBarcode : resultObl) {\r\n                if (resultBarcode.getBarcodeStr().equalsIgnoreCase(moveorderBarcode.getBarcodeStr())) {\r\n                    resultBarcode.quantityHandledDbl +=  moveorderBarcode.quantityPerUnitOfMeasure;\r\n                    barcodeFoundBln = true;\r\n                }\r\n            }\r\n\r\n\r\n            if (barcodeFoundBln) {\r\n                barcodeFoundBln = false;\r\n            }\r\n\r\n            else {\r\n                //new barcode, so add\r\n                moveorderBarcode.quantityHandledDbl = moveorderBarcode.quantityPerUnitOfMeasure;\r\n                resultObl.add(moveorderBarcode);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        return resultObl;\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorder.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorder.java	(date 1620737943771)
@@ -27,11 +27,14 @@
 import SSU_WHS.General.Comments.cComment;
 import SSU_WHS.General.Warehouseorder.cWarehouseorder;
 import SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;
+import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Move.MoveItemVariant.cMoveItemVariant;
 import SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;
 import SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcode;
 import SSU_WHS.Move.MoveorderLines.cMoveorderLine;
 import SSU_WHS.Move.MoveorderLines.cMoveorderLineViewModel;
+import SSU_WHS.Picken.PickorderLines.cPickorderLine;
 import SSU_WHS.Webservice.cWebresult;
 import SSU_WHS.Webservice.cWebserviceDefinitions;
 import nl.icsvertex.scansuite.R;
@@ -131,6 +134,8 @@
     }
     public List<cMoveorderBarcode> barcodesObl () {return  cMoveorderBarcode.allMoveorderBarcodesObl;}
     public List<cMoveorderLine> linesObl () {return  cMoveorderLine.allLinesObl;}
+    public List<cLineProperty> linePropertysObl() { return  cLineProperty.allLinePropertysObl; }
+    public List<cLinePropertyValue> linePropertyValueObl() { return  cLinePropertyValue.allLinePropertysValuesObl; }
 
     public List<cMoveorderLine> takeLinesObl;
     public List<cMoveorderLine> sortedTakeLinesObl() {
@@ -761,6 +766,20 @@
             return result;
         }
 
+        // Get all propertys, if webservice error then stop
+        if (!this.mGetLinePropertysViaWebserviceBln( )) {
+            result.resultBln = false;
+            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));
+            return result;
+        }
+
+        // Get all property values, if webservice error then stop
+        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {
+            result.resultBln = false;
+            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));
+            return result;
+        }
+
         return  result;
     }
 
@@ -1447,6 +1466,8 @@
 
                 //Refresh line barcodes
                 cMoveorder.currentMoveOrder.pGetLineBarcodesViaWebserviceBln(true);
+                cMoveorder.currentMoveOrder.mGetLinePropertysViaWebserviceBln();
+                cMoveorder.currentMoveOrder.mGetLinePropertyValuesViaWebserviceBln();
                 return true;
             }
 
@@ -1711,6 +1732,58 @@
 
         return resultObl;
     }
+    private boolean mGetLinePropertysViaWebserviceBln() {
+
+        cLineProperty.allLinePropertysObl = null;
+        cLineProperty.pTruncateTableBln();
+
+        cLinePropertyValue.allLinePropertysValuesObl = null;
+        cLinePropertyValue.pTruncateTableBln();
+
+        cWebresult WebResult;
+        WebResult =  this.getMoveorderViewModel().pGetLinePropertysViaWebserviceWrs();
+        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
+
+            for (JSONObject jsonObject : WebResult.getResultDtt()) {
+                cLineProperty pickorderLineProperty = new cLineProperty(jsonObject);
+                pickorderLineProperty.pInsertInDatabaseBln();
+            }
+
+            return  true;
+        }
+        else {
+            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET);
+            return  false;
+        }
+    }
+
+    private boolean mGetLinePropertyValuesViaWebserviceBln() {
+
+        cWebresult WebResult;
+        WebResult =  this.getMoveorderViewModel().pGetLinePropertyValuesViaWebserviceWrs();
+        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
+
+            for (JSONObject jsonObject : WebResult.getResultDtt()) {
+                cLinePropertyValue linePropertyValue = new cLinePropertyValue(jsonObject);
+                linePropertyValue.pInsertInDatabaseBln();
+                if (linePropertyValue.getValueStr() !=null){
+                    for (cMoveorderLine moveorderLine : this.linesObl()){
+                        if (moveorderLine.getLineNoInt() == linePropertyValue.getLineNoInt()){
+                            if (moveorderLine.presetValueObl == null) {
+                                moveorderLine.presetValueObl = new ArrayList<>();
+                            }
+                            moveorderLine.presetValueObl.add(linePropertyValue);
+                        }
+                    }
+                }
+            }
+            return  true;
+        }
+        else {
+            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET);
+            return  false;
+        }
+    }
 
     //End Region Private Methods
 
Index: app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorderViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Move.Moveorders;\r\n\r\nimport android.app.Application;\r\nimport androidx.lifecycle.AndroidViewModel;\r\nimport java.util.List;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Webservice.cWebresult;\r\n\r\npublic class cMoveorderViewModel extends AndroidViewModel {\r\n    //Region Public Properties\r\n    private final cMoveorderRepository Repository;\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cMoveorderViewModel(Application pvApplication) {\r\n        super(pvApplication);\r\n        this.Repository = new cMoveorderRepository(pvApplication);\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n    public void insert(cMoveorderEntity pvMoveorderEntity) {this.Repository.insert(pvMoveorderEntity);}\r\n    public void deleteAll() {this.Repository.deleteAll();}\r\n\r\n    public cWebresult pCreateMoveOrderMVViaWebserviceWrs(String pvDocumentStr, String pvBinCodeStr, boolean pvCheckBarcodesBln) {return this.Repository.pCreateMoveOrderMVViaWebserviceWrs(pvDocumentStr,pvBinCodeStr,pvCheckBarcodesBln);}\r\n\r\n    public cWebresult pCreateMoveOrderMIViaWebserviceWrs(String pvDocumentStr, String pvBinCodeStr, boolean pvCheckBarcodesBln) {return this.Repository.pCreateMoveOrderMIViaWebserviceWrs(pvDocumentStr,pvBinCodeStr,pvCheckBarcodesBln);}\r\n\r\n    public cWebresult pGetMoveordersFromWebserviceWrs(String pvSearchTextStr) {return this.Repository.pGetMoveordersFromWebserviceWrs(pvSearchTextStr);}\r\n\r\n    public List<cMoveorderEntity> pGetMovesWithFilterFromDatabaseObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {return this.Repository.pGetMovesFromDatabaseWithFilterObl(pvCurrentUserStr, pvUseFiltersBln);}\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs() {return this.Repository.pGetLinesFromWebserviceWrs(); }\r\n\r\n    public cWebresult pCloseTakeMTViaWebserviceWrs() {return this.Repository.pCloseTakeMTViamWebserviceWrs(); }\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {return this.Repository.pGetBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {return this.Repository.pGetLineBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetBINSFromWebserviceWrs(List<String> pvBinsObl ) {return this.Repository.pGetBINSFromWebserviceWrs(pvBinsObl);}\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {return this.Repository.pAddERPItemViaWebserviceWrs(pvArticleBarcode);}\r\n\r\n    public cWebresult pGetCommentsFromWebserviceWrs() {return this.Repository.pGetCommentsFromWebservice(); }\r\n\r\n    public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorderViewModel.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Move/Moveorders/cMoveorderViewModel.java	(date 1620381154253)
@@ -46,6 +46,8 @@
 
     public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}
 
+    public cWebresult pGetLinePropertysViaWebserviceWrs() {return this.Repository.pGetLinePropertysViaWebserviceWrs(); }
 
+    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {return this.Repository.pGetLinePropertyValuesViaWebserviceWrs(); }
 
 }
Index: app/src/main/java/SSU_WHS/Basics/Article/cArticleViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.Article;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.lifecycle.AndroidViewModel;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport SSU_WHS.Webservice.cWebresult;\r\n\r\npublic class cArticleViewModel extends AndroidViewModel {\r\n\r\n\r\n    private cArticleRepository Repository;\r\n\r\n    public cArticleViewModel(Application application) {\r\n        super(application);\r\n        Repository = new cArticleRepository();\r\n    }\r\n\r\n    public cWebresult pGetArticleByBarcodeViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {return this.Repository.pGetArticleViaBarcodeWrs(pvBarcodeScan);}\r\n    public cWebresult pGetBarcodesViaWebserviceWrs(cArticle pvArticle) {return this.Repository.pGetBarcodesWrs(pvArticle);}\r\n    public cWebresult pGetArticleByItemNoVariantWrs(String pvItemNoStr, String pvVariantcodeStr) {return this.Repository.pGetArticleByItemNoVariantWrs(pvItemNoStr, pvVariantcodeStr);}\r\n    public cWebresult pGetUniqueBarcodeViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {return this.Repository.pGetUniqueBarcodesWrs(pvBarcodeScan);}\r\n    public cWebresult pGetStockViaWebserviceWrs(cArticle pvArticle) {return this.Repository.pGetStockWrs(pvArticle);}\r\n    public cWebresult pGetItemPropertyWrs(cArticle pvArticle) {return this.Repository.pGetItemPropertyWrs(pvArticle);}\r\n    public cWebresult pGetItemPropertyValueWrs(cArticle pvArticle) {return this.Repository.pGetItemPropertyValueWrs(pvArticle);}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/Article/cArticleViewModel.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Basics/Article/cArticleViewModel.java	(date 1620634084318)
@@ -5,6 +5,8 @@
 import androidx.lifecycle.AndroidViewModel;
 
 import ICS.Utils.Scanning.cBarcodeScan;
+import SSU_WHS.Basics.ArticlePropertyValue.cArticlePropertyValue;
+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Webservice.cWebresult;
 
 public class cArticleViewModel extends AndroidViewModel {
@@ -22,6 +24,7 @@
     public cWebresult pGetArticleByItemNoVariantWrs(String pvItemNoStr, String pvVariantcodeStr) {return this.Repository.pGetArticleByItemNoVariantWrs(pvItemNoStr, pvVariantcodeStr);}
     public cWebresult pGetUniqueBarcodeViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {return this.Repository.pGetUniqueBarcodesWrs(pvBarcodeScan);}
     public cWebresult pGetStockViaWebserviceWrs(cArticle pvArticle) {return this.Repository.pGetStockWrs(pvArticle);}
+    public cWebresult pGetPropertyStockWrs(cArticlePropertyValue pvArticlePropertyValue) {return this.Repository.pGetPropertyStockWrs(pvArticlePropertyValue);}
     public cWebresult pGetItemPropertyWrs(cArticle pvArticle) {return this.Repository.pGetItemPropertyWrs(pvArticle);}
     public cWebresult pGetItemPropertyValueWrs(cArticle pvArticle) {return this.Repository.pGetItemPropertyValueWrs(pvArticle);}
 
Index: app/src/main/java/SSU_WHS/Basics/Article/cArticle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.Article;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Basics.ArticleProperty.cArticleProperty;\r\nimport SSU_WHS.Basics.ArticlePropertyValue.cArticlePropertyValue;\r\nimport SSU_WHS.Basics.ArticleStock.cArticleStock;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\n\r\npublic class cArticle {\r\n\r\n    //Region Public Properties\r\n\r\n    public String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return itemNoStr;\r\n    }\r\n\r\n    public String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return variantCodeStr;\r\n    }\r\n\r\n    public  String getItemNoAndVariantCodeStr(){\r\n        return   this.getItemNoStr() + \" \" + this.getVariantCodeStr();\r\n    }\r\n\r\n    public String descriptionStr;\r\n    public String getDescriptionStr() {\r\n        return descriptionStr;\r\n    }\r\n\r\n    public String description2Str;\r\n    public String getDescription2Str() {\r\n        return description2Str;\r\n    }\r\n\r\n    private final String itemInfoCodeStr;\r\n    public String getItemInfoCodeStr() { return itemInfoCodeStr; }\r\n\r\n    public String vendorItemNoStr;\r\n    public String getVendorItemNoStr() { return vendorItemNoStr; }\r\n\r\n    public String vendorItemDescriptionStr;\r\n    public String getItemDescriptionStr() { return vendorItemDescriptionStr; }\r\n\r\n    private final String component10Str;\r\n    public String getComponent10Str() { return component10Str; }\r\n\r\n    private final Double priceDbl;\r\n    public Double getPriceDbl() { return priceDbl; }\r\n\r\n    private final cArticleEntity articleEntity;\r\n    public  List<cArticleBarcode> barcodesObl;\r\n    public  List<cArticleStock> stockObl;\r\n    public  List<cArticleProperty> propertyObl;\r\n    public List<cArticlePropertyValue> propertyValueObl;\r\n\r\n    public cArticleImage articleImage;\r\n    private cArticleViewModel getArticleViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleViewModel.class);\r\n    }\r\n\r\n    public  static cArticle currentArticle;\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cArticle(JSONObject pvJsonObject) {\r\n        this.articleEntity = new cArticleEntity(pvJsonObject);\r\n        this.itemNoStr = this.articleEntity.getItemnoStr();\r\n        this.variantCodeStr =  this.articleEntity.getVariantCodeStr();\r\n\r\n        if (this.articleEntity.getDescriptionStr() == null) {\r\n            this.descriptionStr = \"\";\r\n            this.description2Str = \"\";\r\n            this.itemInfoCodeStr = \"\";\r\n            this.vendorItemNoStr = \"\";\r\n            this.vendorItemDescriptionStr = \"\";\r\n            this.component10Str = \"\";\r\n            this.priceDbl = (double) 0;\r\n            return;\r\n        }\r\n\r\n        this.descriptionStr = this.articleEntity.getDescriptionStr();\r\n        this.description2Str = this.articleEntity.getDescription2Str();\r\n        this.itemInfoCodeStr = this.articleEntity.getItemInfoCodeStr();\r\n        this.vendorItemNoStr = this.articleEntity.getVendorItemNoStr();\r\n        this.vendorItemDescriptionStr = this.articleEntity.getVendorItemDescriptionStr();\r\n        this.component10Str = this.articleEntity.getComponent10Str();\r\n        this.priceDbl = this.articleEntity.getPriceDbl();\r\n    }\r\n\r\n    public cArticle(String pvitemNoStr, String pvVariantCodeStr) {\r\n        this.articleEntity = null;\r\n        this.itemNoStr = pvitemNoStr;\r\n        this.variantCodeStr =  pvVariantCodeStr;\r\n        this.descriptionStr = \"???\";\r\n        this.description2Str = \"???\";\r\n        this.itemInfoCodeStr =  \"???\";\r\n        this.vendorItemNoStr =  \"???\";\r\n        this.vendorItemDescriptionStr =  \"???\";\r\n        this.component10Str = \"???\";\r\n        this.priceDbl = (double) 0;\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public static cArticle pGetArticleByBarcodeViaWebservice(cBarcodeScan pvBarcodescan){\r\n\r\n        cWebresult webresult;\r\n\r\n        cArticleViewModel articleViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleViewModel.class);\r\n        webresult = articleViewModel.pGetArticleByBarcodeViaWebserviceWrs(pvBarcodescan);\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n            for (JSONObject jsonObject :  webresult.getResultDtt()) {\r\n\r\n\r\n                cArticle article = new cArticle(jsonObject);\r\n\r\n                cArticleBarcode articleBarcode = new cArticleBarcode(article.getItemNoStr(),article.getVariantCodeStr(),pvBarcodescan.getBarcodeOriginalStr());\r\n\r\n                if (article.barcodesObl == null) {\r\n                    article.barcodesObl = new ArrayList<>();\r\n                }\r\n\r\n                article.barcodesObl.add(articleBarcode);\r\n\r\n//                article.pGetPropertyViaWebservice();\r\n\r\n\r\n\r\n                return article;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEVIAOWNERBARCODE);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static cArticle pGetArticleByItemNoVariantViaWebservice(String pvItemNoStr, String pvVariantcodeStr){\r\n\r\n        cWebresult webresult;\r\n\r\n        cArticleViewModel articleViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleViewModel.class);\r\n        webresult = articleViewModel.pGetArticleByItemNoVariantWrs(pvItemNoStr, pvVariantcodeStr);\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n            for (JSONObject jsonObject :  webresult.getResultDtt()) {\r\n                cArticle article = new cArticle(jsonObject);\r\n\r\n              if( ! article.pGetBarcodesViaWebserviceBln(null)){\r\n                  return null;\r\n              }\r\n                article.pGetPropertyViaWebservice();\r\n                return article;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEVIAOWNERBARCODE);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(cBarcodeScan pvBarcodeScan) {\r\n        cWebresult webresult;\r\n\r\n        webresult = getArticleViewModel().pGetBarcodesViaWebserviceWrs(this);\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n\r\n            this.barcodesObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : webresult.getResultDtt()) {\r\n                cArticleBarcode articleBarcode = new cArticleBarcode(jsonObject, this);\r\n                this.barcodesObl.add(articleBarcode);\r\n\r\n            }\r\n\r\n            // We didn't receive a barcode, so this barcode should be an unique barcode\r\n            if (this.barcodesObl.size() == 0) {\r\n                webresult = getArticleViewModel().pGetUniqueBarcodeViaWebserviceWrs(pvBarcodeScan);\r\n                if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n                    for (JSONObject jsonObject : webresult.getResultDtt()) {\r\n                        cArticleBarcode articleBarcode = new cArticleBarcode(jsonObject, this);\r\n                        this.barcodesObl.add(articleBarcode);\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEBARCODES);\r\n            return false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public void pGetStockViaWebserviceBln(){\r\n        cWebresult webresult;\r\n\r\n        webresult = getArticleViewModel().pGetStockViaWebserviceWrs(this);\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n\r\n            for (JSONObject jsonObject :  webresult.getResultDtt()) {\r\n                cArticleStock articleStock = new cArticleStock(jsonObject, this);\r\n\r\n\r\n                if (this.stockObl == null) {\r\n                    this.stockObl = new ArrayList<>();\r\n                }\r\n\r\n                this.stockObl.add(articleStock);\r\n\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEBARCODES);\r\n        }\r\n    }\r\n\r\n    public void pGetPropertyViaWebservice(){\r\n        cWebresult webresult;\r\n\r\n        webresult = getArticleViewModel().pGetItemPropertyWrs(this);\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n\r\n            for (JSONObject jsonObject :  webresult.getResultDtt()) {\r\n                cArticleProperty articleProperty = new cArticleProperty(jsonObject, this);\r\n                if (articleProperty.getItemProperty() == null){\r\n                    continue;\r\n                }\r\n\r\n                if (this.propertyObl == null){\r\n                    this.propertyObl = new ArrayList<>();\r\n                }\r\n                this.propertyObl.add(articleProperty);\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEPROPERTIES);\r\n        }\r\n        pGetPropertyValueViaWebservice();\r\n    }\r\n\r\n    public void pGetPropertyValueViaWebservice(){\r\n        cWebresult webresult;\r\n\r\n        webresult = getArticleViewModel().pGetItemPropertyValueWrs(this);\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n\r\n            for (JSONObject jsonObject :  webresult.getResultDtt()) {\r\n                cArticlePropertyValue articlePropertyValue = new cArticlePropertyValue(jsonObject , this);\r\n                if (this.propertyValueObl == null){\r\n                    this.propertyValueObl = new ArrayList<>();\r\n                }\r\n                this.propertyValueObl.add(articlePropertyValue);\r\n\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEBARCODES);\r\n        }\r\n    }\r\n\r\n    public cArticleStock pGetStockForBINViaWebservice(String pvBinCodeStr){\r\n        cWebresult webresult;\r\n\r\n        webresult = getArticleViewModel().pGetStockViaWebserviceWrs(this);\r\n        if (webresult.getResultBln() && webresult.getSuccessBln()) {\r\n\r\n            for (JSONObject jsonObject :  webresult.getResultDtt()) {\r\n                cArticleStock articleStock = new cArticleStock(jsonObject, this);\r\n\r\n\r\n                if (!articleStock.getBincodeStr().equalsIgnoreCase(pvBinCodeStr)) {\r\n                    continue;\r\n                }\r\n\r\n              return  articleStock;\r\n\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEBARCODES);\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    public boolean pGetArticleImageBln(){\r\n\r\n        if (this.articleImage != null) {\r\n            return  true;\r\n        }\r\n\r\n        this.articleImage = cArticleImage.pGetArticleImageByItemNoAndVariantCode(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (this.articleImage != null){\r\n            return  true;\r\n        }\r\n\r\n        cWebresult Webresult;\r\n\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        Webresult = articleImageViewModel.pGetArticleImageFromWebserviceWrs(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (!Webresult.getSuccessBln() || !Webresult.getResultBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (Webresult.getResultDtt().size() == 1) {\r\n            cArticleImage articleImage = new cArticleImage(Webresult.getResultDtt().get(0));\r\n            articleImage.pInsertInDatabaseBln();\r\n            this.articleImage = articleImage;\r\n            return true;\r\n        }\r\n\r\n        return  false;\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/Article/cArticle.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Basics/Article/cArticle.java	(date 1620817852770)
@@ -14,6 +14,7 @@
 import SSU_WHS.Basics.ArticleImages.cArticleImage;
 import SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;
 import SSU_WHS.Basics.ArticleProperty.cArticleProperty;
+import SSU_WHS.Basics.ArticlePropertyStock.cArticlePropertyStock;
 import SSU_WHS.Basics.ArticlePropertyValue.cArticlePropertyValue;
 import SSU_WHS.Basics.ArticleStock.cArticleStock;
 import SSU_WHS.Webservice.cWebresult;
@@ -67,6 +68,7 @@
     public  List<cArticleStock> stockObl;
     public  List<cArticleProperty> propertyObl;
     public List<cArticlePropertyValue> propertyValueObl;
+    public cArticlePropertyValue currentPropertyValue;
 
     public cArticleImage articleImage;
     private cArticleViewModel getArticleViewModel() {
@@ -139,10 +141,7 @@
                 }
 
                 article.barcodesObl.add(articleBarcode);
-
-//                article.pGetPropertyViaWebservice();
-
-
+                article.pGetPropertyViaWebservice();
 
                 return article;
             }
@@ -248,6 +247,7 @@
                     this.propertyObl = new ArrayList<>();
                 }
                 this.propertyObl.add(articleProperty);
+                currentArticle = this;
             }
         }
         else {
@@ -300,6 +300,51 @@
 
         return  null;
 
+    }
+
+    public cArticleStock pGetPropertyStockForBINViaWebservice(ArrayList<cArticlePropertyValue> pvPropertyValueObl, String pvBinCodeStr){
+        cWebresult webresult;
+        double amountDbl = 0.0;
+        ArrayList <cArticlePropertyStock> articlePropertyStockObl = new ArrayList<>();
+
+        for (cArticlePropertyValue articlePropertyValue: pvPropertyValueObl){
+
+            if (articlePropertyValue.getValueStr() == null){
+                continue;
+            }
+            webresult = getArticleViewModel().pGetPropertyStockWrs(articlePropertyValue);
+            if (webresult.getResultBln() && webresult.getSuccessBln()) {
+                for (JSONObject jsonObject :  webresult.getResultDtt()) {
+                    cArticlePropertyStock articlePropertyStock = new cArticlePropertyStock(jsonObject);
+                    if (!articlePropertyStock.getBincodeStr().equalsIgnoreCase(pvBinCodeStr) || !articlePropertyStock.getItemNoStr().equalsIgnoreCase(this.getItemNoStr()) || !articlePropertyStock.getVariantCodeStr().equalsIgnoreCase(this.getVariantCodeStr())) {
+                        continue;
+                    }
+                    articlePropertyStockObl.add(articlePropertyStock);
+                    if (amountDbl == 0.0) {
+                        amountDbl = articlePropertyStock.getQuantityDbl();
+                    }
+                }
+            }  else {
+                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLESTOCKWITHPROPERTY);
+            }
+        }
+
+        if (articlePropertyStockObl.size() == 0){
+            return null;
+        }
+
+        if (articlePropertyStockObl.size() == 1){
+            return new cArticleStock(articlePropertyStockObl.get(0));
+        }
+
+        //Multiple properties so compare the available amount should be the same at the location
+
+        for (cArticlePropertyStock articlePropertyStock: articlePropertyStockObl){
+            if (amountDbl != articlePropertyStock.getQuantityDbl()){
+                return null;
+            }
+        }
+        return new cArticleStock(articlePropertyStockObl.get(0));
     }
 
     public boolean pGetArticleImageBln(){
Index: app/src/main/java/SSU_WHS/Basics/Article/cArticleRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.Article;\r\n\r\nimport android.os.AsyncTask;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\n\r\npublic class cArticleRepository {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n    private static class ArticleParams {\r\n        String itemNoStr;\r\n        String variantcodeStr;\r\n\r\n        ArticleParams(String pvItemNoStr,  String pvVariantcodeStr) {\r\n            this.itemNoStr = pvItemNoStr;\r\n            this.variantcodeStr = pvVariantcodeStr;\r\n        }\r\n    }\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    cArticleRepository() {\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public cWebresult pGetArticleViaBarcodeWrs(cBarcodeScan pvBarcodeScan) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetArticleViaScannedBarcodeFromWebserviceGetAsyncTask().execute(pvBarcodeScan).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetBarcodesWrs(cArticle pvArticle) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBarcodesFromWebserviceGetAsyncTask().execute(pvArticle).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetArticleByItemNoVariantWrs(String pvItemNoStr, String pvVariantcodeStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cArticleRepository.ArticleParams articleParams = new cArticleRepository.ArticleParams(pvItemNoStr, pvVariantcodeStr);\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetArticleByItemNoVariantFromWebserviceGetAsyncTask().execute(articleParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetUniqueBarcodesWrs(cBarcodeScan pvBarcodeScan) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetUniqueBarcodeFromWebserviceGetAsyncTask().execute(pvBarcodeScan).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetStockWrs(cArticle pvArticle) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetStockFromWebserviceGetAsyncTask().execute(pvArticle).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetItemPropertyWrs(cArticle pvArticle) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetItemPropertyFromWebserviceGetAsyncTask().execute(pvArticle).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetItemPropertyValueWrs(cArticle pvArticle) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetItemPropertyValueFromWebserviceGetAsyncTask().execute(pvArticle).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    //End Region Private Methods\r\n\r\n    private static class mGetArticleViaScannedBarcodeFromWebserviceGetAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final cBarcodeScan... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;\r\n            if (cUser.currentUser.currentStockOwner != null) {\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n            } else {\r\n                l_PropertyInfo2Pin.setValue(\"\");\r\n            }\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n            l_PropertyInfo4Pin.setValue(params[0].getBarcodeFormattedStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODEORIGINAL;\r\n            l_PropertyInfo5Pin.setValue(params[0].getBarcodeOriginalStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETLOCATIONARTICLEVIAOWNERBARCODE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetBarcodesFromWebserviceGetAsyncTask extends AsyncTask<cArticle, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final cArticle... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;\r\n            if (cUser.currentUser.currentStockOwner != null) {\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n            } else {\r\n                l_PropertyInfo3Pin.setValue(\"\");\r\n            }\r\n\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n            l_PropertyInfo4Pin.setValue(params[0].getItemNoStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n            l_PropertyInfo5Pin.setValue(params[0].getVariantCodeStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETARTICLEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetArticleByItemNoVariantFromWebserviceGetAsyncTask extends AsyncTask<ArticleParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final ArticleParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;\r\n            if (cUser.currentUser.currentStockOwner != null) {\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n            } else {\r\n                l_PropertyInfo3Pin.setValue(\"\");\r\n            }\r\n\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n            l_PropertyInfo4Pin.setValue(params[0].itemNoStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n            l_PropertyInfo5Pin.setValue(params[0].variantcodeStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETARTICLEBYFORCE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetUniqueBarcodeFromWebserviceGetAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final cBarcodeScan... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getNameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;\r\n            l_PropertyInfo2Pin.setValue(\"\");\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n            l_PropertyInfo4Pin.setValue(cArticle.currentArticle.getItemNoStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n            l_PropertyInfo5Pin.setValue(cArticle.currentArticle.getVariantCodeStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            SoapObject barcodesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODESLIST);\r\n            barcodesHandledList.addProperty(\"string\", params[0].getBarcodeOriginalStr());\r\n\r\n            PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n            l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODELIST;\r\n            l_PropertyInfo6Pin.setValue(barcodesHandledList);\r\n            l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETUNIQUEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetStockFromWebserviceGetAsyncTask extends AsyncTask<cArticle, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final cArticle... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;\r\n            l_PropertyInfo3Pin.setValue(\"\");\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n            l_PropertyInfo4Pin.setValue(params[0].getItemNoStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n            l_PropertyInfo5Pin.setValue(params[0].getVariantCodeStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETARTICLESTOCK, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n    private static class mGetItemPropertyFromWebserviceGetAsyncTask extends AsyncTask<cArticle, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final cArticle... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;\r\n            if (cUser.currentUser.currentStockOwner != null) {\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n            } else {\r\n                l_PropertyInfo2Pin.setValue(\"\");\r\n            }\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n            l_PropertyInfo4Pin.setValue(params[0].getItemNoStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n            l_PropertyInfo5Pin.setValue(params[0].getVariantCodeStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETARTICLEPROPERTIES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n    private static class mGetItemPropertyValueFromWebserviceGetAsyncTask extends AsyncTask<cArticle, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final cArticle... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;\r\n            if (cUser.currentUser.currentStockOwner != null) {\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n            } else {\r\n                l_PropertyInfo2Pin.setValue(\"\");\r\n            }\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n            l_PropertyInfo4Pin.setValue(params[0].getItemNoStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n            l_PropertyInfo5Pin.setValue(params[0].getVariantCodeStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETARTICLEPROPERTYVALUES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/Article/cArticleRepository.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Basics/Article/cArticleRepository.java	(date 1620717782080)
@@ -11,7 +11,9 @@
 import java.util.concurrent.ExecutionException;
 
 import ICS.Utils.Scanning.cBarcodeScan;
+import SSU_WHS.Basics.ArticlePropertyValue.cArticlePropertyValue;
 import SSU_WHS.Basics.Users.cUser;
+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Webservice.cWebresult;
 import SSU_WHS.Webservice.cWebservice;
 import SSU_WHS.Webservice.cWebserviceDefinitions;
@@ -129,6 +131,23 @@
         return webResultWrs;
     }
 
+    public cWebresult pGetPropertyStockWrs(cArticlePropertyValue pvArticlePropertyValue) {
+
+        List<String> resultObl = new ArrayList<>();
+        cWebresult webResultWrs = new cWebresult();
+
+        try {
+            webResultWrs = new mGetItemPropertyStockFromWebserviceGetAsyncTask().execute(pvArticlePropertyValue).get();
+        } catch (ExecutionException | InterruptedException e) {
+            webResultWrs.setResultBln(false);
+            webResultWrs.setSuccessBln(false);
+            resultObl.add(e.getLocalizedMessage());
+            webResultWrs.setResultObl(resultObl);
+            e.printStackTrace();
+        }
+        return webResultWrs;
+    }
+
     public cWebresult pGetItemPropertyWrs(cArticle pvArticle) {
 
         List<String> resultObl = new ArrayList<>();
@@ -388,7 +407,11 @@
 
             PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
             l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;
-            l_PropertyInfo3Pin.setValue("");
+            if (cUser.currentUser.currentStockOwner != null) {
+                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());
+            } else {
+                l_PropertyInfo3Pin.setValue("");
+            }
             l_PropertyInfoObl.add(l_PropertyInfo3Pin);
 
             PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();
@@ -408,6 +431,54 @@
                 WebresultWrs.setSuccessBln(false);
                 e.printStackTrace();
             }
+
+            return WebresultWrs;
+        }
+    }
+
+    private static class mGetItemPropertyStockFromWebserviceGetAsyncTask extends AsyncTask<cArticlePropertyValue, Void, cWebresult> {
+        @Override
+        protected cWebresult doInBackground(final cArticlePropertyValue... params) {
+            cWebresult WebresultWrs = new cWebresult();
+
+            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
+
+            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
+            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;
+            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());
+            l_PropertyInfoObl.add(l_PropertyInfo1Pin);
+
+            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
+            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
+            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
+            l_PropertyInfoObl.add(l_PropertyInfo2Pin);
+
+            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
+            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_OWNER;
+            if (cUser.currentUser.currentStockOwner != null) {
+                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());
+            } else {
+                l_PropertyInfo3Pin.setValue("");
+            }
+            l_PropertyInfoObl.add(l_PropertyInfo3Pin);
+
+            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();
+            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_REQUEST_PROPERTYCODE;
+            l_PropertyInfo4Pin.setValue(params[0].getPropertyCodeStr());
+            l_PropertyInfoObl.add(l_PropertyInfo4Pin);
+
+            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();
+            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_PROPERTYVALUE;
+            l_PropertyInfo5Pin.setValue(params[0].getValueStr());
+            l_PropertyInfoObl.add(l_PropertyInfo5Pin);
+
+            try {
+                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETARTICLESTOCKWITHPROPERTY, l_PropertyInfoObl);
+            } catch (JSONException e) {
+                WebresultWrs.setResultBln(false);
+                WebresultWrs.setSuccessBln(false);
+                e.printStackTrace();
+            }
 
             return WebresultWrs;
         }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"nl.icsvertex.scansuite\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n\r\n    <application\r\n        android:name=\"ICS.cAppExtension\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"false\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        android:largeHeap=\"true\">\r\n        <provider\r\n            android:name=\".cGenericFileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n        <activity\r\n            android:name=\".Activities.General.MainDefaultActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.MenuActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.General.LoginActivity\"\r\n\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".Activities.General.BarcodeInfoActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.LoginActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderPickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLineItemPropertyInputActvity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Pick.CreatePickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderLinesGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderPickGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSortActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n        <activity android:name=\".Activities.Sort.SortorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShipLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.QualityControl.QualityControlLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.QualityControl.PickorderQCActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.CreateInventoryActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryArticleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryLinePropertyInputActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Receive.CreateReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.CreateIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMASLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderLinePropertyInputActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveOrderReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveorderLinePropertyInputActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Returns.ReturnorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.CreateReturnActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnArticleDetailActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Move.MoveorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.CreateMoveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesPlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveMISinglepieceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveorderLinesPlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Packaging.PackagingActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.CreatePackAndShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSingleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipMultiActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <meta-data\r\n            android:name=\"io.fabric.ApiKey\"\r\n            android:value=\"0a3a15057e61fb1e84d5024bd01b5657d9a4c76e\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/AndroidManifest.xml	(date 1620657895925)
@@ -435,6 +435,15 @@
             android:configChanges="keyboardHidden|orientation|screenSize"
             android:screenOrientation="portrait"
 
+            android:windowSoftInputMode="adjustPan">
+            <meta-data
+                android:name="android.support.PARENT_ACTIVITY"
+                android:value="nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity" />
+        </activity>
+        <activity android:name=".Activities.Move.MoveLineItemPropertyActivity"
+            android:configChanges="keyboardHidden|orientation|screenSize"
+            android:screenOrientation="portrait"
+
             android:windowSoftInputMode="adjustPan">
             <meta-data
                 android:name="android.support.PARENT_ACTIVITY"
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemStockFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleStock.cArticleStockAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class ItemStockFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n    private RecyclerView stockRecyclerview;\r\n\r\n    private cArticleStockAdapter articleStockAdapter;\r\n    private cArticleStockAdapter getArticleStockAdapter(){\r\n        if (this.articleStockAdapter == null) {\r\n            this.articleStockAdapter = new cArticleStockAdapter(false);\r\n        }\r\n\r\n        return  articleStockAdapter;\r\n    }\r\n\r\n    private TextView textViewItem;\r\n    private Button buttonOk;\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public ItemStockFragment() {\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(LayoutInflater pvInflater, ViewGroup pvContainer, Bundle pvSavedInstanceState) {\r\n        return pvInflater.inflate(R.layout.fragment_itemstock, pvContainer);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View pvView, @Nullable Bundle pvSavedInstanceState) {\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n    super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cUserInterface.pEnableScanner();\r\n        cAppExtension.dialogFragment = this;\r\n\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = getResources().getDisplayMetrics().heightPixels - getResources().getDimensionPixelSize(R.dimen.default_double_margin);\r\n\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultFragment methods\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        if (getView() != null) {\r\n            this.textViewItem = getView().findViewById(R.id.textViewItem);\r\n            this.stockRecyclerview = getView().findViewById(R.id.stockRecyclerview);\r\n            this.buttonOk = getView().findViewById(R.id.buttonOk);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.textViewItem.setText(cArticle.currentArticle.getItemNoStr() + \" \" + cArticle.currentArticle.getVariantCodeStr());\r\n        this.mGetData();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetCloseListener();\r\n    }\r\n\r\n    //End Region iICSDefaultFragment methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mGetData() {\r\n\r\n\r\n        if (cArticle.currentArticle.stockObl != null && cArticle.currentArticle.stockObl.size() > 0 ) {\r\n            this.mShowNoLinesIcon(true);\r\n            return;\r\n        }\r\n\r\n        cArticle.currentArticle.pGetStockViaWebserviceBln();\r\n\r\n        if (cArticle.currentArticle.stockObl != null && cArticle.currentArticle.stockObl.size() > 0) {\r\n            this.mShowNoLinesIcon(false);\r\n        }\r\n        else {\r\n            this.mShowNoLinesIcon(true);\r\n        }\r\n    }\r\n\r\n    private  void mShowNoLinesIcon(final Boolean pvShowBln){\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                cUserInterface.pHideGettingData();\r\n\r\n                if (pvShowBln) {\r\n\r\n                    stockRecyclerview.setVisibility(View.INVISIBLE);\r\n\r\n                    FragmentTransaction fragmentTransaction = getChildFragmentManager().beginTransaction();\r\n                    NothingHereFragment fragment = new NothingHereFragment();\r\n                    fragmentTransaction.replace(R.id.itemStockContainer, fragment);\r\n                    fragmentTransaction.commit();\r\n                    return;\r\n\r\n\r\n                }\r\n\r\n                stockRecyclerview.setVisibility(View.VISIBLE);\r\n                stockRecyclerview.setHasFixedSize(false);\r\n                stockRecyclerview.setAdapter(getArticleStockAdapter());\r\n                stockRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n\r\n                List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n                for (Fragment fragment : fragments) {\r\n                    if (fragment instanceof NothingHereFragment) {\r\n                        FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                        fragmentTransaction.remove(fragment);\r\n                        fragmentTransaction.commit();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetCloseListener() {\r\n        this.buttonOk.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                dismiss();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemStockFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemStockFragment.java	(date 1620308156311)
@@ -6,6 +6,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
+import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
@@ -48,6 +49,7 @@
 
     private TextView textViewItem;
     private Button buttonOk;
+    private ProgressBar progressBar;
 
     //End Region Private Properties
 
@@ -109,6 +111,8 @@
             this.textViewItem = getView().findViewById(R.id.textViewItem);
             this.stockRecyclerview = getView().findViewById(R.id.stockRecyclerview);
             this.buttonOk = getView().findViewById(R.id.buttonOk);
+            this.progressBar = getView().findViewById(R.id.progressBar);
+            this.progressBar.setVisibility(View.INVISIBLE);
         }
     }
 
@@ -116,7 +120,16 @@
     @Override
     public void mFieldsInitialize() {
         this.textViewItem.setText(cArticle.currentArticle.getItemNoStr() + " " + cArticle.currentArticle.getVariantCodeStr());
-        this.mGetData();
+        this.progressBar.setVisibility(View.VISIBLE);
+        Runnable runnable = new Runnable() {
+            @Override
+            public void run() {
+                mGetData();
+            }
+        };
+        Thread getData = new Thread(runnable);
+        getData.start();
+
     }
 
     @Override
@@ -133,6 +146,7 @@
 
         if (cArticle.currentArticle.stockObl != null && cArticle.currentArticle.stockObl.size() > 0 ) {
             this.mShowNoLinesIcon(true);
+            this.progressBar.setVisibility(View.INVISIBLE);
             return;
         }
 
@@ -144,6 +158,7 @@
         else {
             this.mShowNoLinesIcon(true);
         }
+        this.progressBar.setVisibility(View.INVISIBLE);
     }
 
     private  void mShowNoLinesIcon(final Boolean pvShowBln){
Index: app/src/main/java/SSU_WHS/Move/MoveorderLines/cMoveorderLineRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Move.MoveorderLines;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDateAndTime;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport SSU_WHS.Basics.IdentifierWithDestination.cIdentifierWithDestination;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.Move.Moveorders.cMoveorder;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\n\r\npublic class cMoveorderLineRepository {\r\n\r\n    private static class AddBarcodeParams {\r\n        cBarcodeScan barcodeScan;\r\n        Boolean isUniqueBarcodeBln;\r\n\r\n        AddBarcodeParams(cBarcodeScan pvBarcodeScan, Boolean pvIsUniqueBarcodeBln) {\r\n            this.barcodeScan = pvBarcodeScan;\r\n            this.isUniqueBarcodeBln = pvIsUniqueBarcodeBln;\r\n        }\r\n    }\r\n\r\n\r\n    //Region Public Properties\r\n    private final iMoveorderLineDao moveorderLineDao;\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    cMoveorderLineRepository(Application pvApplication) {\r\n        //Region Private Properties\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.moveorderLineDao = db.moveorderLineDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public void insert(cMoveorderLineEntity moveorderLineEntity) {\r\n        new mInsertAsyncTask(moveorderLineDao).execute(moveorderLineEntity);\r\n    }\r\n\r\n    public void delete(cMoveorderLineEntity moveorderLineEntity) {\r\n        new mDeleteAsyncTask(moveorderLineDao).execute(moveorderLineEntity);\r\n    }\r\n\r\n    public void deleteAll() {\r\n        new mDeleteAllAsyncTask(moveorderLineDao).execute();\r\n    }\r\n\r\n    public cWebresult pMoveItemTakeHandledViaWebserviceWrs(List<cMoveorderBarcode> pvBarcodesObl) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mMoveTakeItemHandledViaWebserviceAsyncTask().execute(pvBarcodesObl).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pMoveItemTakeMTHandledViaWebserviceWrs(List<cMoveorderBarcode> pvBarcodesObl) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mMoveTakeItemMTHandledViaWebserviceAsyncTask().execute(pvBarcodesObl).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pMoveItemPlaceMTHandledViaWebserviceWrs(List<cMoveorderBarcode> pvBarcodesObl) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mMovePlaceItemMTHandledViaWebserviceAsyncTask().execute(pvBarcodesObl).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pMoveItemPlaceMIHandledViaWebserviceWrs(List<cMoveorderBarcode> pvBarcodesObl) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mMovePlaceMIItemHandledViaWebserviceAsyncTask().execute(pvBarcodesObl).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pMoveItemPlaceHandledViaWebserviceWrs(List<cMoveorderBarcode> pvBarcodesObl) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mMovePlaceItemHandledViaWebserviceAsyncTask().execute(pvBarcodesObl).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private static class mInsertAsyncTask extends AsyncTask<cMoveorderLineEntity, Void, Void> {\r\n        private final iMoveorderLineDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iMoveorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @Override\r\n        protected Void doInBackground(final cMoveorderLineEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAsyncTask extends AsyncTask<cMoveorderLineEntity, Void, Void> {\r\n        private final iMoveorderLineDao mAsyncTaskDao;\r\n\r\n        mDeleteAsyncTask(iMoveorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @Override\r\n        protected Void doInBackground(final cMoveorderLineEntity... params) {\r\n            mAsyncTaskDao.delete(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iMoveorderLineDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iMoveorderLineDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public cWebresult pAddUnkownBarcodeViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mMoveorderUnknownBarcodeViaWebserviceAsyncTask().execute(pvBarcodeScan).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddERPBarcodeViaWebserviceWrs(cBarcodeScan pvBarcodeScan , boolean pvIsUniquBarcodeBln) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        AddBarcodeParams addBarcodeParams = new AddBarcodeParams(pvBarcodeScan, pvIsUniquBarcodeBln);\r\n\r\n        try {\r\n            webResultWrs = new mMoveorderERPBarcodeViaWebserviceAsyncTask().execute(addBarcodeParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pResetLineViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mResetLineViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n    private static class mMoveTakeItemHandledViaWebserviceAsyncTask extends AsyncTask<List<cMoveorderBarcode>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(List<cMoveorderBarcode>... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo2Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo5Pin.setValue(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n                l_PropertyInfo6Pin.setValue(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODE;\r\n                l_PropertyInfo7Pin.setValue(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE_CAMELCASE;\r\n                l_PropertyInfo8Pin.setValue(cWarehouseorder.ActionTypeEnu.TAKE.toString().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo9Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                SoapObject barcodesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODESLIST);\r\n\r\n                //Only loop through handled barcodes, if there are any\r\n                if (params != null) {\r\n                    for (cMoveorderBarcode moveorderBarcode: params[0]) {\r\n\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODEHANDLED_COMPLEX);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_BARCODE_COMPLEX, moveorderBarcode.getBarcodeStr());\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_QUANTITYHANDLED_COMPLEX, moveorderBarcode.getQuantityHandledDbl());\r\n                        barcodesHandledList.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODELIST;\r\n                l_PropertyInfo10Pin.setValue(barcodesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;\r\n                l_PropertyInfo11Pin.setValue(propertiesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEITEM_HANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mMovePlaceItemHandledViaWebserviceAsyncTask extends AsyncTask<List<cMoveorderBarcode>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(List<cMoveorderBarcode>... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo2Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo5Pin.setValue(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n                l_PropertyInfo6Pin.setValue(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODE;\r\n                l_PropertyInfo7Pin.setValue(cMoveorder.currentMoveOrder.currentBranchBin.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE_CAMELCASE;\r\n                l_PropertyInfo8Pin.setValue(cWarehouseorder.ActionTypeEnu.PLACE.toString().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo9Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                SoapObject barcodesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODESLIST);\r\n\r\n                //Only loop through handled barcodes, if there are any\r\n                if (params != null) {\r\n                    for (cMoveorderBarcode moveorderBarcode: params[0]) {\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODEHANDLED_COMPLEX);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_BARCODE_COMPLEX, moveorderBarcode.getBarcodeStr());\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_QUANTITYHANDLED_COMPLEX, moveorderBarcode.getQuantityHandledDbl());\r\n                        barcodesHandledList.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODELIST;\r\n                l_PropertyInfo10Pin.setValue(barcodesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;\r\n                l_PropertyInfo11Pin.setValue(propertiesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEITEM_HANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mMovePlaceMIItemHandledViaWebserviceAsyncTask extends AsyncTask<List<cMoveorderBarcode>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(List<cMoveorderBarcode>... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo2Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo5Pin.setValue(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODE;\r\n                l_PropertyInfo6Pin.setValue(cMoveorder.currentMoveOrder.currentMoveorderBarcode.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODE;\r\n                l_PropertyInfo7Pin.setValue(cIdentifierWithDestination.currentIdentifier.getDestinationStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE_CAMELCASE;\r\n                l_PropertyInfo8Pin.setValue(cWarehouseorder.ActionTypeEnu.PLACE.toString().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo9Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                SoapObject barcodesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODESLIST);\r\n\r\n                //Only loop through handled barcodes, if there are any\r\n                if (params != null) {\r\n                    for (cMoveorderBarcode moveorderBarcode: params[0]) {\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODEHANDLED_COMPLEX);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_BARCODE_COMPLEX, moveorderBarcode.getBarcodeStr());\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_QUANTITYHANDLED_COMPLEX, moveorderBarcode.getQuantityHandledDbl());\r\n                        barcodesHandledList.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODELIST;\r\n                l_PropertyInfo10Pin.setValue(barcodesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;\r\n                l_PropertyInfo11Pin.setValue(propertiesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEITEM_HANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mMoveTakeItemMTHandledViaWebserviceAsyncTask extends AsyncTask<List<cMoveorderBarcode>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(List<cMoveorderBarcode>... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo2Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_LINENO;\r\n                l_PropertyInfo5Pin.setValue(cMoveorderLine.currentMoveOrderLine.getLineNoInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo6Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_CONTAINER;\r\n                l_PropertyInfo7Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n\r\n                SoapObject barcodesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODESLIST);\r\n\r\n                //Only loop through handled barcodes, if there are any\r\n                if (params != null) {\r\n                    for (cMoveorderBarcode moveorderBarcode: params[0]) {\r\n\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODEHANDLED_COMPLEX);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_BARCODE_COMPLEX, moveorderBarcode.getBarcodeStr());\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_QUANTITYHANDLED_COMPLEX, moveorderBarcode.getQuantityHandledDbl());\r\n                        barcodesHandledList.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODELIST;\r\n                l_PropertyInfo8Pin.setValue(barcodesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;\r\n                l_PropertyInfo9Pin.setValue(propertiesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEORDERLINE_HANDLEDTAKEMT, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mMovePlaceItemMTHandledViaWebserviceAsyncTask extends AsyncTask<List<cMoveorderBarcode>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(List<cMoveorderBarcode>... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo2Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_LINENO;\r\n                l_PropertyInfo5Pin.setValue(cMoveorderLine.currentMoveOrderLine.getLineNoInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo6Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODEHANDLED;\r\n                l_PropertyInfo7Pin.setValue(cMoveorderLine.currentMoveOrderLine.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n\r\n                SoapObject barcodesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODESLIST);\r\n\r\n                //Only loop through handled barcodes, if there are any\r\n                if (params != null) {\r\n                    for (cMoveorderBarcode moveorderBarcode: params[0]) {\r\n\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_BARCODEHANDLED_COMPLEX);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_BARCODE_COMPLEX, moveorderBarcode.getBarcodeStr());\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_QUANTITYHANDLED_COMPLEX, moveorderBarcode.getQuantityHandledDbl());\r\n                        barcodesHandledList.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODELIST;\r\n                l_PropertyInfo8Pin.setValue(barcodesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;\r\n                l_PropertyInfo9Pin.setValue(propertiesHandledList);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEORDERLINE_HANDLEDPLACEMT, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mMoveorderUnknownBarcodeViaWebserviceAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cBarcodeScan... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(\"UNKNOWN\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeOriginalStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(cBarcodeScan.BarcodeType.EAN13);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(false);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(1);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(\"STUK\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                webresult =  cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mMoveorderERPBarcodeViaWebserviceAsyncTask extends AsyncTask<AddBarcodeParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(AddBarcodeParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cMoveorder.currentMoveOrder.currentArticle.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cMoveorder.currentMoveOrder.currentArticle.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].barcodeScan.getBarcodeOriginalStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(cBarcodeScan.BarcodeType.EAN13);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(params[0].isUniqueBarcodeBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(1);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(\"STUK\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                webresult =  cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVEBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mResetLineViaWebserviceAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cBarcodeScan... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cMoveorder.currentMoveOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_LINENO;\r\n                l_PropertyInfo4Pin.setValue(cMoveorderLine.currentMoveOrderLine.getLineNoInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult =  cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_MOVELINERESET, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Move/MoveorderLines/cMoveorderLineRepository.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Move/MoveorderLines/cMoveorderLineRepository.java	(date 1620653200239)
@@ -18,6 +18,7 @@
 import SSU_WHS.Basics.Users.cUser;
 import SSU_WHS.General.Warehouseorder.cWarehouseorder;
 import SSU_WHS.General.acScanSuiteDatabase;
+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Move.Moveorders.cMoveorder;
 import SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcode;
 import SSU_WHS.Webservice.cWebresult;
@@ -319,6 +320,35 @@
 
                 SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);
 
+                if(cMoveorderLine.currentMoveOrderLine != null) {
+                    //Only loop through handled properties, of there are any
+                    if (cMoveorderLine.currentMoveOrderLine.generatedValueObl != null) {
+
+                        int countForPropertyInt = 0;
+                        int countForValueInt;
+                        String propertyCodeStr = "";
+
+                        for (cLinePropertyValue linePropertyValue : cMoveorderLine.currentMoveOrderLine.generatedValueObl) {
+
+                            countForValueInt = 1;
+
+                            if (!propertyCodeStr.equalsIgnoreCase(linePropertyValue.getPropertyCodeStr())) {
+                                propertyCodeStr = linePropertyValue.getPropertyCodeStr();
+                                countForPropertyInt = 1;
+                            }
+
+                            while (countForValueInt <= linePropertyValue.getQuantityDbl()) {
+                                SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTYHANDLED_COMPLEX);
+                                soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_PROPERTYCODE, linePropertyValue.getPropertyCodeStr());
+                                soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_SEQUENCENOHANDLED, countForPropertyInt);
+                                soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_VALUEHANDLED, linePropertyValue.getValueStr());
+                                propertiesHandledList.addSoapObject(soapObject);
+                                countForValueInt++;
+                                countForPropertyInt++;
+                            }
+                        }
+                    }
+                }
                 PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();
                 l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;
                 l_PropertyInfo11Pin.setValue(propertiesHandledList);
@@ -406,6 +436,35 @@
 
                 SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);
 
+                if(cMoveorderLine.currentMoveOrderLine != null) {
+                    //Only loop through handled properties, of there are any
+                    if (cMoveorderLine.currentMoveOrderLine.linePropertyValuesObl() != null) {
+
+                        int countForPropertyInt = 0;
+                        int countForValueInt;
+                        String propertyCodeStr = "";
+
+                        for (cLinePropertyValue linePropertyValue : cMoveorderLine.currentMoveOrderLine.linePropertyValuesObl()) {
+
+                            countForValueInt = 1;
+
+                            if (!propertyCodeStr.equalsIgnoreCase(linePropertyValue.getPropertyCodeStr())) {
+                                propertyCodeStr = linePropertyValue.getPropertyCodeStr();
+                                countForPropertyInt = 1;
+                            }
+
+                            while (countForValueInt <= linePropertyValue.getQuantityDbl()) {
+                                SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTYHANDLED_COMPLEX);
+                                soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_PROPERTYCODE, linePropertyValue.getPropertyCodeStr());
+                                soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_SEQUENCENOHANDLED, countForPropertyInt);
+                                soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_VALUEHANDLED, linePropertyValue.getValueStr());
+                                propertiesHandledList.addSoapObject(soapObject);
+                                countForValueInt++;
+                                countForPropertyInt++;
+                            }
+                        }
+                    }
+                }
                 PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();
                 l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;
                 l_PropertyInfo11Pin.setValue(propertiesHandledList);
@@ -493,6 +552,35 @@
 
                 SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);
 
+                //Only loop through handled properties, of there are any
+                if (cMoveorderLine.currentMoveOrderLine.linePropertyValuesObl()  != null) {
+
+                    int countForPropertyInt = 0;
+                    int countForValueInt;
+                    String propertyCodeStr = "";
+
+                    for (cLinePropertyValue linePropertyValue: cMoveorderLine.currentMoveOrderLine.linePropertyValuesObl()) {
+
+                        countForValueInt = 1;
+
+                        if (!propertyCodeStr.equalsIgnoreCase(linePropertyValue.getPropertyCodeStr())) {
+                            propertyCodeStr = linePropertyValue.getPropertyCodeStr();
+                            countForPropertyInt = 1;
+                        }
+
+                        while (countForValueInt <= linePropertyValue.getQuantityDbl()) {
+                            SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTYHANDLED_COMPLEX);
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_PROPERTYCODE, linePropertyValue.getPropertyCodeStr());
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_SEQUENCENOHANDLED, countForPropertyInt);
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_VALUEHANDLED, linePropertyValue.getValueStr());
+                            propertiesHandledList.addSoapObject(soapObject);
+                            countForValueInt++;
+                            countForPropertyInt++;
+                        }
+                    }
+                }
+
+
                 PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();
                 l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;
                 l_PropertyInfo11Pin.setValue(propertiesHandledList);
@@ -572,6 +660,35 @@
 
                 SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);
 
+                //Only loop through handled properties, of there are any
+                if (cMoveorderLine.currentMoveOrderLine.linePropertyValuesObl()  != null) {
+
+                    int countForPropertyInt = 0;
+                    int countForValueInt;
+                    String propertyCodeStr = "";
+
+                    for (cLinePropertyValue linePropertyValue: cMoveorderLine.currentMoveOrderLine.linePropertyValuesObl()) {
+
+                        countForValueInt = 1;
+
+                        if (!propertyCodeStr.equalsIgnoreCase(linePropertyValue.getPropertyCodeStr())) {
+                            propertyCodeStr = linePropertyValue.getPropertyCodeStr();
+                            countForPropertyInt = 1;
+                        }
+
+                        while (countForValueInt <= linePropertyValue.getQuantityDbl()) {
+                            SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTYHANDLED_COMPLEX);
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_PROPERTYCODE, linePropertyValue.getPropertyCodeStr());
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_SEQUENCENOHANDLED, countForPropertyInt);
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_VALUEHANDLED, linePropertyValue.getValueStr());
+                            propertiesHandledList.addSoapObject(soapObject);
+                            countForValueInt++;
+                            countForPropertyInt++;
+                        }
+                    }
+                }
+
+
                 PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();
                 l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;
                 l_PropertyInfo9Pin.setValue(propertiesHandledList);
@@ -651,6 +768,35 @@
 
                 SoapObject propertiesHandledList = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST);
 
+                //Only loop through handled properties, of there are any
+                if (cMoveorderLine.currentMoveOrderLine.linePropertyValuesObl()  != null) {
+
+                    int countForPropertyInt = 0;
+                    int countForValueInt;
+                    String propertyCodeStr = "";
+
+                    for (cLinePropertyValue linePropertyValue: cMoveorderLine.currentMoveOrderLine.linePropertyValuesObl()) {
+
+                        countForValueInt = 1;
+
+                        if (!propertyCodeStr.equalsIgnoreCase(linePropertyValue.getPropertyCodeStr())) {
+                            propertyCodeStr = linePropertyValue.getPropertyCodeStr();
+                            countForPropertyInt = 1;
+                        }
+
+                        while (countForValueInt <= linePropertyValue.getQuantityDbl()) {
+                            SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_PROPERTYHANDLED_COMPLEX);
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_PROPERTYCODE, linePropertyValue.getPropertyCodeStr());
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_SEQUENCENOHANDLED, countForPropertyInt);
+                            soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESPROPERTY_VALUEHANDLED, linePropertyValue.getValueStr());
+                            propertiesHandledList.addSoapObject(soapObject);
+                            countForValueInt++;
+                            countForPropertyInt++;
+                        }
+                    }
+                }
+
+
                 PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();
                 l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_PROPERTIESHANDLEDLIST;
                 l_PropertyInfo9Pin.setValue(propertiesHandledList);
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Intake/IntakeOrderLinePropertyInputActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Intake;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLine;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DynamicItemPropertyFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyNoInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.PagerAdapters.ItemPropertyPagerAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class IntakeOrderLinePropertyInputActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Private Properties\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n\r\n    private AppCompatImageButton imageButtonNoInputPropertys;\r\n    private TextView articleDescriptionCompactText;\r\n    private TextView articleDescription2CompactText;\r\n    private TextView articleItemCompactText;\r\n    private TextView articleBarcodeCompactText;\r\n    private TextView quantityCompactText;\r\n    private cIntakeorderBarcode intakeorderBarcode;\r\n\r\n    private List<String> titleObl;\r\n    private AppCompatImageButton imageButtonDone;\r\n\r\n    private  List<cIntakeorderBarcode> scannedBarcodesObl;\r\n\r\n    private TabLayout itemPropertyTabLayout;\r\n    private ViewPager itemPropertyViewpager;\r\n    public  int numberOfTabsInt;\r\n    public boolean amountHandledBln;\r\n    private boolean isGeneratedBln;\r\n    private boolean deletedFromRecyclerBln;\r\n    private int tabIndexInt;\r\n\r\n    private  void mFillSummaryPropertyList (){\r\n\r\n        List<cLinePropertyValue> resultObl = new ArrayList<>();\r\n        List<cLineProperty> hulpObl = new ArrayList<>();\r\n\r\n        if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl == null){\r\n            cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl = new ArrayList<>();\r\n        }else {\r\n            cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl.clear();\r\n        }\r\n        if ( cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.presetValueObl() != null &&  cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.presetValueObl().size() > 0){\r\n            resultObl.addAll(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.presetValueObl());\r\n            for(cLinePropertyValue linePropertyValue : resultObl){\r\n                if (!hulpObl.contains(linePropertyValue.getLineProperty())){\r\n                    hulpObl.add(linePropertyValue.getLineProperty());\r\n                }\r\n            }\r\n        }\r\n\r\n        for (cLineProperty lineProperty : cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyInputObl()) {\r\n            if (hulpObl.contains(lineProperty)){\r\n                continue;\r\n            }\r\n            resultObl.add(new cLinePropertyValue(lineProperty));\r\n        }\r\n\r\n        cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl.addAll(resultObl);\r\n    }\r\n\r\n    private LinkedHashMap<String, ArrayList<cLinePropertyValue>> localItemPropertySortObl(){\r\n        LinkedHashMap<String, ArrayList<cLinePropertyValue>> linkedHashMap = new LinkedHashMap<>();\r\n        // ArrayList<cPickorderLinePropertyValue> pickorderLinePropertyValues = new ArrayList<>();\r\n\r\n        Collections.sort(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl, new Comparator<cLinePropertyValue>() {\r\n\r\n            @Override\r\n            public int compare(cLinePropertyValue o1, cLinePropertyValue o2) {\r\n                return Integer.compare(o1.getLineProperty().getSortingSequenceNoInt(), o2.getLineProperty().getSortingSequenceNoInt());\r\n            }\r\n        });\r\n\r\n        for (cLinePropertyValue linePropertyValue : cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl) {\r\n            //Create the hasmap dynammically and fill it\r\n            ArrayList<cLinePropertyValue> loopList = linkedHashMap.get(linePropertyValue.getPropertyCodeStr());\r\n            if (loopList == null) {\r\n                ArrayList<cLinePropertyValue> propertyValues = new ArrayList<>();\r\n                propertyValues.add(linePropertyValue);\r\n                linkedHashMap.put(linePropertyValue.getPropertyCodeStr(), propertyValues);\r\n            }\r\n            else{\r\n                loopList.add(linePropertyValue);\r\n            }\r\n\r\n        }\r\n        return linkedHashMap;\r\n    }\r\n\r\n    public double getQuantityHandledDbl(){\r\n\r\n        double quantityDbl = 0;\r\n\r\n        if (this.titleObl == null || this.localItemPropertySortObl().size() == 0) {\r\n            return quantityDbl;\r\n        }\r\n\r\n        ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(this.titleObl.get(0));\r\n\r\n        for (cLinePropertyValue linePropertyValue : loopList ) {\r\n            quantityDbl += linePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n        return  quantityDbl;\r\n\r\n    }\r\n\r\n    public  double getQuantityAvailable() {\r\n        return    cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl() - mQuantityHandledDbl();\r\n    }\r\n\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public  IntakeOrderLinePropertyInputActivity() {\r\n\r\n    }\r\n\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_pickorderlineitemproperty_input);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n\r\n        //Set listeners here, so click listeners only work after activity is shown\r\n        this.mSetListeners();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cConnection.pRegisterWifiChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            cConnection.pUnregisterWifiChangedReceiver();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            if (this.intakeorderBarcode.getQuantityHandledDbl() == 0){\r\n                this.mResetCurrents();\r\n                this.mGoBackToLinesActivity();\r\n\r\n                return true;\r\n            }\r\n            if (mCheckAllPropertysHandledBln()){\r\n                this.mShowAcceptFragment();\r\n                return true;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n\r\n        if (this.intakeorderBarcode.getQuantityHandledDbl() == 0){\r\n            this.mResetCurrents();\r\n            this.mGoBackToLinesActivity();\r\n\r\n            return;\r\n        }\r\n        if (mCheckAllPropertysHandledBln()){\r\n            this.mShowAcceptFragment();\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultFragment methods\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_itemproperty_input));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.articleDescriptionCompactText = findViewById(R.id.articleDescriptionCompactText);\r\n        this.articleDescription2CompactText = findViewById(R.id.articleDescription2CompactText);\r\n        this.articleItemCompactText = findViewById(R.id.articleItemCompactText);\r\n        this.articleBarcodeCompactText = findViewById(R.id.articleBarcodeCompactText);\r\n        this.quantityCompactText = findViewById(R.id.quantityCompactText);\r\n        this.itemPropertyTabLayout = findViewById(R.id.itemPropertyTabLayout);\r\n        this.itemPropertyViewpager = findViewById(R.id.itemPropertyViewpager);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n\r\n        this.toolbarImage.setImageResource(R.drawable.ic_info);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.mSetArticleInfo();\r\n        this.mFillSummaryPropertyList();\r\n        this.mBuildAndFillTabs();\r\n        this.mSetQuantityText();\r\n        this.mShowHideOKButton();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHeaderListener();\r\n        this.mSetNoInputPropertyListener();\r\n        this.mSetCloseListener();\r\n        this.mSetTabLayoutListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Regioni ICSDefaultFragment methods\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyInputObl().size() == 1) {\r\n            cLineProperty.currentLineProperty = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyInputObl().get(0);\r\n        } else {\r\n            cLineProperty.currentLineProperty = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getLineProperty(Objects.requireNonNull(Objects.requireNonNull(this.itemPropertyTabLayout.getTabAt(this.itemPropertyTabLayout.getSelectedTabPosition())).getText()).toString());\r\n        }\r\n        this.pHandeManualAction(pvBarcodeScan);\r\n    }\r\n\r\n    public  void pCancelReceive() {\r\n\r\n        this.mResetCurrents();\r\n        this.mGoBackToLinesActivity();\r\n    }\r\n\r\n    public  void pHandeManualAction(cBarcodeScan pvBarcodeScan){\r\n        //Check if kwnown value is selected\r\n        if(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValue(pvBarcodeScan.getBarcodeOriginalStr()) != null){\r\n            cLinePropertyValue.currentLinePropertyValue = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValue(pvBarcodeScan.getBarcodeOriginalStr());\r\n            cLineProperty.currentLineProperty = cLinePropertyValue.currentLinePropertyValue.getLineProperty();\r\n        }\r\n\r\n        if (cLineProperty.currentLineProperty.getItemProperty()== null ) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_unknown),\"\",true, true);\r\n            return;\r\n        }\r\n\r\n\r\n        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);\r\n            return;\r\n        }\r\n\r\n        if (!this.amountHandledBln){\r\n            if (this.getQuantityHandledDbl() == cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityHandledDbl() && cSetting.RECEIVE_NO_EXTRA_ITEMS() && cSetting.RECEIVE_NO_EXTRA_PIECES() && !this.isGeneratedBln) {\r\n                cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_extra_pieces_not_allowed),R.raw.badsound, true);\r\n                return;\r\n            }\r\n        }\r\n        //Check unique values if needed\r\n        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\",true, true);\r\n            return;\r\n        }\r\n\r\n        cLineProperty.currentLineProperty.pIntakeLineValueAdded(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        if (this.amountHandledBln && !cLinePropertyValue.currentLinePropertyValue.getItemProperty().getUniqueBln()){\r\n            //Check if summary line has more than 1 property if so devide equally\r\n\r\n            if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValueObl(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr()).size() > 1 ){\r\n\r\n                int totalInt = (int) Math.round(this.intakeorderBarcode.getQuantityHandledDbl());\r\n                int availableInt = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValueObl(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr()).size();\r\n                int commitInt;\r\n                double amountDbl ;\r\n                for(cLinePropertyValue linePropertyValue : cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValueObl(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){\r\n\r\n                    if (linePropertyValue.getQuantityDbl() > 0 && !linePropertyValue.getValueStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getValueStr())){\r\n                        totalInt -= (int) Math.round(linePropertyValue.getQuantityDbl());\r\n                        availableInt -= 1;\r\n                        continue;\r\n                    }\r\n                    amountDbl = totalInt/ availableInt;\r\n                    commitInt = (int) Math.round(amountDbl);\r\n                    totalInt -= commitInt;\r\n\r\n                    if (availableInt == 1) {\r\n                        commitInt += totalInt;\r\n                    }\r\n                    linePropertyValue.quantityDbl = commitInt;\r\n\r\n                    availableInt -= 1;\r\n                }\r\n            }\r\n            else{\r\n                cLinePropertyValue.currentLinePropertyValue.quantityDbl = this.intakeorderBarcode.getQuantityHandledDbl();\r\n            }\r\n        }\r\n\r\n        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, pvBarcodeScan.getBarcodeOriginalStr() + \" \"  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);\r\n        this.pTryToChangeQuantity();\r\n        this.pRefreshActivity();\r\n\r\n    }\r\n\r\n    public void pHandled() {\r\n\r\n        if (!mCheckAllPropertysHandledBln()){\r\n            return;\r\n        }\r\n        this.mGoBackToIntakeActivity(false);\r\n    }\r\n\r\n    public void pRefreshActivity(){\r\n        this.mSetQuantityText();\r\n        this.mShowHideOKButton();\r\n        this.mBuildAndFillTabs();\r\n        this.mSelectTabAndItem();\r\n    }\r\n\r\n    private void mSelectTabAndItem(){\r\n        if(cLinePropertyValue.currentLinePropertyValue ==null){\r\n            if(this.deletedFromRecyclerBln){\r\n                this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.tabIndexInt));\r\n            }\r\n            this.deletedFromRecyclerBln = false;\r\n            return;\r\n        }\r\n        this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.titleObl.indexOf(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())));\r\n    }\r\n\r\n    public void pDeleteValueFromRecyler() {\r\n        this.deletedFromRecyclerBln = true;\r\n        this.tabIndexInt = this.itemPropertyTabLayout.getSelectedTabPosition();\r\n        cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.handledPropertyValueObl.remove(cLinePropertyValue.currentLinePropertyValue);\r\n        cLinePropertyValue.currentLinePropertyValue = null;\r\n    }\r\n\r\n    public void pShowNumericInputFragment() {\r\n        mShowNumberPickerFragment();\r\n    }\r\n\r\n    public void pShowTextInputFragment() {\r\n        mShowTextInputFragment();\r\n    }\r\n\r\n    public void pResetTab(boolean pvResetBln){\r\n        if (pvResetBln) {\r\n            this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(0));\r\n        }\r\n    }\r\n    public void pShowDatePickerDialog() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        DatePickerFragment datePickerFragment = new DatePickerFragment(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.presetValueObl());\r\n        datePickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTDATEFRAGMENT_TAG);\r\n    }\r\n\r\n    public   void pTryToChangeQuantity() {\r\n\r\n        if (this.amountHandledBln){return;}\r\n\r\n        double newQuantityDbl = 0.0;\r\n\r\n        for(cLinePropertyValue linePropertyValue: cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValueObl(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){\r\n            newQuantityDbl += linePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n\r\n        //Check if we would exceed amount, then show message if needed\r\n        if (newQuantityDbl > cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl()) {\r\n\r\n            if (cIntakeorder.currentIntakeOrder.getReceiveNoExtraPiecesBln() && !cIntakeorder.currentIntakeOrder.isGenerated() && cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl() > 0 ) {\r\n                this.mShowExtraPiecesNotAllowed();\r\n                return ;\r\n            }\r\n\r\n            if (cSetting.RECEIVE_EXTRA_PIECES_PERCENTAGE() > 0 && cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl() > 0  && (cSetting.RECEIVE_EXTRA_PIECES_PERCENTAGE_MANDATORY())) {\r\n\r\n                //Check if the new quantity would exceed the allowed quantity\r\n                if (newQuantityDbl > cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityHandledDbl() && cSetting.RECEIVE_NO_EXTRA_PIECES() && cSetting.RECEIVE_NO_EXTRA_ITEMS()) {\r\n\r\n                    //We would exceed the allowed quantity so show that this is not allowed\r\n                    this.mShowExtraPiecesNotAllowed();\r\n                    return ;\r\n                }\r\n            }\r\n            intakeorderBarcode.quantityHandledDbl = newQuantityDbl;\r\n            return;\r\n        }\r\n\r\n        //Check if value already is zero\r\n        if ( newQuantityDbl <= 0 ) {\r\n            intakeorderBarcode.quantityHandledDbl = 0.0;\r\n            return;\r\n        }\r\n        intakeorderBarcode.quantityHandledDbl = newQuantityDbl;\r\n    }\r\n\r\n    public void pSendScansBln() {\r\n\r\n        IntakeOrderIntakeActivity.handledViaPropertysBln = true;\r\n        cIntakeorderBarcode.currentIntakeOrderBarcode.quantityHandledDbl = this.intakeorderBarcode.getQuantityHandledDbl();\r\n        mShowIntakeActivity();\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mSetCloseListener() {\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                amountHandledBln = true;\r\n                if (!mCheckAllPropertysHandledBln()){\r\n                    return;\r\n                }\r\n                pHandled();\r\n            }\r\n        });\r\n    }\r\n\r\n    private boolean mCheckAllPropertysHandledBln(){\r\n\r\n        for (cLineProperty lineProperty : cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyInputObl()){\r\n            if (!lineProperty.getIsRequiredBln()){\r\n                continue;\r\n            }\r\n            double quantityDbl = 0.0;\r\n            ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(lineProperty.getPropertyCodeStr());\r\n            for (cLinePropertyValue linePropertyValue : loopList ) {\r\n                quantityDbl += linePropertyValue.getQuantityDbl();\r\n            }\r\n            if (quantityDbl != this.getQuantityHandledDbl()){\r\n                this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.titleObl.indexOf(lineProperty.getPropertyCodeStr())));\r\n                cUserInterface.pDoNope(itemPropertyTabLayout, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, cAppExtension.activity.getString(R.string.message_fill_all_properties),R.raw.headsupsound,false);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private double mQuantityHandledDbl(){\r\n        Double newQuantityDbl= 0.0;\r\n\r\n        if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl()!= null){\r\n            for (cIntakeorderBarcode intakeorderBarcode: cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl()){\r\n                newQuantityDbl += intakeorderBarcode.getQuantityHandledDbl();\r\n            }\r\n        }\r\n        newQuantityDbl += intakeorderBarcode.quantityHandledDbl;\r\n\r\n        return newQuantityDbl;\r\n    }\r\n\r\n    private void mSetTabLayoutListener(){\r\n        this.itemPropertyTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                amountHandledBln = tab.getPosition() > 0;\r\n                itemPropertyViewpager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetHeaderListener() {\r\n\r\n        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mScrollToBottom();\r\n            }\r\n        });\r\n\r\n        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View view) {\r\n                mScrollToTop();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mScrollToTop() {\r\n    }\r\n\r\n    private void mScrollToBottom() {\r\n    }\r\n\r\n    private void mSetArticleInfo(){\r\n\r\n        this.mSetBarcode();\r\n        this.isGeneratedBln = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl() == 0.0;\r\n\r\n        this.articleDescriptionCompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescriptionStr());\r\n        this.articleDescription2CompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getDescription2Str());\r\n        this.articleItemCompactText.setText(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getItemNoAndVariantCodeStr());\r\n        this.articleBarcodeCompactText.setText(intakeorderBarcode.getBarcodeAndQuantityStr());\r\n\r\n        if (!cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.hasPropertysBln() || cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyNoInputObl() == null || cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyNoInputObl().size() == 0) {\r\n            this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n        }\r\n        else {\r\n            this.imageButtonNoInputPropertys.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private  void mSetBarcode(){\r\n\r\n        if (cIntakeorderBarcode.currentIntakeOrderBarcode == null) {\r\n                cIntakeorderBarcode.currentIntakeOrderBarcode = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().get(0);\r\n        }\r\n\r\n        intakeorderBarcode = new cIntakeorderBarcode(cIntakeorderBarcode.currentIntakeOrderBarcode);\r\n\r\n        if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityHandledDbl() > 0) {\r\n            Double handledDbl = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityHandledDbl();\r\n            for (cIntakeorderBarcode intakeorderBarcode : cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl()){\r\n                handledDbl -= intakeorderBarcode.getQuantityHandledDbl();\r\n            }\r\n            if (handledDbl > 0){\r\n                cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().get(0).quantityHandledDbl = handledDbl;\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mSetQuantityText() {\r\n        String quantityStr = \"\";\r\n\r\n        if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl() > 0){\r\n            quantityStr =   cText.pDoubleToStringStr(mQuantityHandledDbl()) + \"/\" +  cText.pDoubleToStringStr(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl());\r\n        } else {\r\n            quantityStr =    cText.pIntToStringStr((int)this.getQuantityHandledDbl());\r\n        }\r\n\r\n        this.quantityCompactText.setText(quantityStr);\r\n    }\r\n\r\n    private  void mShowHideOKButton() {\r\n\r\n        if (this.getQuantityHandledDbl() == 0) {\r\n            this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n\r\n    }\r\n\r\n    private  void mShowExtraPiecesNotAllowed(){\r\n        cUserInterface.pShowSnackbarMessage(toolbarImage , cAppExtension.context.getString(R.string.number_cannot_be_higher), null, false);\r\n    }\r\n\r\n\r\n    private void mGoBackToLinesActivity() {\r\n\r\n        Intent intent = null;\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAS\")) {\r\n            intent = new Intent(cAppExtension.context, IntakeorderMASLinesActivity.class);\r\n        }\r\n\r\n        if (cIntakeorder.currentIntakeOrder.getOrderTypeStr().equalsIgnoreCase(\"MAT\")) {\r\n            intent = new Intent(cAppExtension.context, IntakeorderMATLinesActivity.class);\r\n        }\r\n\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mResetCurrents() {\r\n\r\n        IntakeOrderIntakeActivity.handledViaPropertysBln = false;\r\n        cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine = null;\r\n        cIntakeorderMATLine.currentIntakeorderMATLine = null;\r\n        cIntakeorder.currentIntakeOrder.currentBin = null;\r\n        this.scannedBarcodesObl = null;\r\n    }\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, (int) cLinePropertyValue.currentLinePropertyValue.getQuantityDbl());\r\n\r\n        double availableDbl  = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityDbl() - cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityHandledDbl();\r\n        ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr());\r\n\r\n        for (cLinePropertyValue linePropertyValue : loopList ) {\r\n            availableDbl -= linePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, availableDbl);\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mShowTextInputFragment() {\r\n        if ( cLinePropertyValue.currentLinePropertyValue == null){\r\n            return;\r\n        }\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment( cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase());\r\n        itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n    private  void mGoBackToIntakeActivity(Boolean pvCancelBln) {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        if (!pvCancelBln){ new Thread(new Runnable() {\r\n            public void run() {\r\n                pSendScansBln();\r\n            }\r\n        }).start();}\r\n        else{\r\n            mShowIntakeActivity();\r\n        }\r\n    }\r\n\r\n    private void mShowIntakeActivity(){\r\n        Intent intent = new Intent(cAppExtension.context, IntakeOrderIntakeActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n    }\r\n\r\n\r\n    private void mSetNoInputPropertyListener() {\r\n        this.imageButtonNoInputPropertys.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowItemPropertyNoInputFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mShowItemPropertyNoInputFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        ItemPropertyNoInputFragment itemPropertyNoInputFragment = new ItemPropertyNoInputFragment();\r\n        itemPropertyNoInputFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.ITEMPROPERTYVALUENOINPUTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private void mBuildAndFillTabs() {\r\n        ArrayList<Fragment> fragments = new ArrayList<>();\r\n\r\n        this.titleObl = new ArrayList<>();\r\n        for (Map.Entry<String, ArrayList<cLinePropertyValue>> itemPropertyEntry :  this.localItemPropertySortObl().entrySet()) {\r\n\r\n\r\n            this.itemPropertyTabLayout.addTab(this.itemPropertyTabLayout.newTab());\r\n\r\n            DynamicItemPropertyFragment dynamicItemPropertyFragment = new DynamicItemPropertyFragment(itemPropertyEntry.getValue());\r\n            fragments.add(dynamicItemPropertyFragment);\r\n\r\n            this.titleObl.add(itemPropertyEntry.getKey());\r\n        }\r\n\r\n        ItemPropertyPagerAdapter itemPropertyPagerAdapter = new ItemPropertyPagerAdapter(fragments, this.titleObl);\r\n        this.itemPropertyViewpager.setAdapter(itemPropertyPagerAdapter);\r\n        this.itemPropertyTabLayout.setupWithViewPager(itemPropertyViewpager);\r\n    }\r\n\r\n    private void mShowAcceptFragment(){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_orderbusy_header),\r\n                cAppExtension.activity.getString(R.string.message_orderbusy_text),\r\n                cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line), false);\r\n        acceptRejectFragment.setCancelable(true);\r\n\r\n        runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //End Region Private Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Intake/IntakeOrderLinePropertyInputActivity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Intake/IntakeOrderLinePropertyInputActivity.java	(date 1620992709878)
@@ -40,6 +40,7 @@
 import SSU_WHS.Intake.Intakeorders.cIntakeorder;
 import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
+import SSU_WHS.Picken.PickorderLines.cPickorderLine;
 import nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;
 import nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;
@@ -67,8 +68,6 @@
     private List<String> titleObl;
     private AppCompatImageButton imageButtonDone;
 
-    private  List<cIntakeorderBarcode> scannedBarcodesObl;
-
     private TabLayout itemPropertyTabLayout;
     private ViewPager itemPropertyViewpager;
     public  int numberOfTabsInt;
@@ -353,9 +352,31 @@
     }
 
     public  void pHandeManualAction(cBarcodeScan pvBarcodeScan){
+
+      if(  cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.presetValueObl() != null){
+          boolean foundBln = false;
+          ArrayList<String> propertyObl = new ArrayList<>();
+          for (cLinePropertyValue propertyValue : cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.presetValueObl()){
+              if(propertyValue.getPropertyCodeStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){
+                  propertyObl.add(propertyValue.getValueStr());}
+          }
+          if (propertyObl.size() > 0){
+              for (String string: propertyObl){
+                  if (string.equalsIgnoreCase(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()))){
+                      foundBln = true;
+                      break;
+                  }
+              }
+              if(!foundBln){
+                  cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_not_allowed),"",true, true);
+                  return;
+              }
+          }
+      }
+
         //Check if kwnown value is selected
-        if(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValue(pvBarcodeScan.getBarcodeOriginalStr()) != null){
-            cLinePropertyValue.currentLinePropertyValue = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValue(pvBarcodeScan.getBarcodeOriginalStr());
+        if(cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValue(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr())) != null){
+            cLinePropertyValue.currentLinePropertyValue = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.linePropertyValue(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
             cLineProperty.currentLineProperty = cLinePropertyValue.currentLinePropertyValue.getLineProperty();
         }
 
@@ -365,7 +386,7 @@
         }
 
 
-        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {
+        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()))) {
             cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);
             return;
         }
@@ -377,13 +398,13 @@
             }
         }
         //Check unique values if needed
-        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());
+        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
         if (!hulpRst.resultBln) {
             cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),"",true, true);
             return;
         }
 
-        cLineProperty.currentLineProperty.pIntakeLineValueAdded(pvBarcodeScan.getBarcodeOriginalStr());
+        cLineProperty.currentLineProperty.pIntakeLineValueAdded(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
 
         if (this.amountHandledBln && !cLinePropertyValue.currentLinePropertyValue.getItemProperty().getUniqueBln()){
             //Check if summary line has more than 1 property if so devide equally
@@ -418,7 +439,7 @@
             }
         }
 
-        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, pvBarcodeScan.getBarcodeOriginalStr() + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
+        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()) + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
         this.pTryToChangeQuantity();
         this.pRefreshActivity();
 
@@ -645,6 +666,7 @@
                 cIntakeorderBarcode.currentIntakeOrderBarcode = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.barcodesObl().get(0);
         }
 
+        cLinePropertyValue.quantityPerUnitOfMeasureDbl = cIntakeorderBarcode.currentIntakeOrderBarcode.getQuantityPerUnitOfMeasureDbl();
         intakeorderBarcode = new cIntakeorderBarcode(cIntakeorderBarcode.currentIntakeOrderBarcode);
 
         if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.getQuantityHandledDbl() > 0) {
@@ -708,7 +730,7 @@
         cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine = null;
         cIntakeorderMATLine.currentIntakeorderMATLine = null;
         cIntakeorder.currentIntakeOrder.currentBin = null;
-        this.scannedBarcodesObl = null;
+        List<cIntakeorderBarcode> scannedBarcodesObl = null;
     }
 
     private void mShowNumberPickerFragment() {
@@ -736,7 +758,7 @@
             return;
         }
         cUserInterface.pCheckAndCloseOpenDialogs();
-        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment( cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase());
+        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment( cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase(), cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.presetValueObl());
         itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);
     }
 
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/General/MenuActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.General;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.app.ActivityOptionsCompat;\r\nimport androidx.core.util.Pair;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.facebook.shimmer.ShimmerFrameLayout;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.crashlytics.*;\r\n\r\nimport ICS.Environments.cEnvironment;\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.Authorisations.cAuthorisation;\r\nimport SSU_WHS.Basics.Authorisations.cAuthorisationAdapter;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Licenses.cLicense;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveMISinglepieceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BinItemsFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemStockFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SearchArticleFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class MenuActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n    public static boolean refreshBln;\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //Region views\r\n    private  ShimmerFrameLayout shimmerViewContainer;\r\n    private  RecyclerView recyclerViewMenu;\r\n\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n    private  TextView toolbarSubtext2;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n    private Boolean printBln;\r\n\r\n    cAuthorisationAdapter authorisationAdapter;\r\n    cAuthorisationAdapter getAuthorisationAdapter(){\r\n        if (this.authorisationAdapter == null) {\r\n            this.authorisationAdapter = new cAuthorisationAdapter();\r\n        }\r\n\r\n        return  authorisationAdapter;\r\n    }\r\n\r\n    //End region views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        this.setContentView(R.layout.activity_menu);\r\n\r\n        // Standard methods to initialize the Activity\r\n        this.mActivityInitialize();\r\n\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Device\", cDeviceInfo.getSerialnumberStr());\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Enviroment\", cEnvironment.currentEnvironment.getDescriptionStr());\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Branch\", cUser.currentUser.currentBranch.getBranchStr());\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"User\", cUser.currentUser.getNameStr());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        this.mStartShimmering();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        this.mStopShimmering();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mLeaveActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_stockactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n        invalidateOptionsMenu();\r\n\r\n        pvMenu.findItem(R.id.item_bin_stock).setVisible(cSetting.REALTIME_BARCODE_CHECK());\r\n        pvMenu.findItem(R.id.item_article_stock).setVisible(cSetting.REALTIME_BARCODE_CHECK());\r\n        pvMenu.findItem(R.id.item_barcodeinfo).setVisible(true);\r\n        pvMenu.findItem(R.id.item_print_item).setVisible(cSetting.GENERIC_PRINT_ITEMLABEL());\r\n        pvMenu.findItem(R.id.item_print_bin).setVisible(cSetting.GENERIC_PRINT_BINLABEL());\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n        this.printBln = false;\r\n\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mLeaveActivity();\r\n                return true;\r\n\r\n            case R.id.item_bin_stock:\r\n                selectedFragment = new ScanBinFragment();\r\n                this.printBln = false;\r\n                break;\r\n            case R.id.item_print_bin:\r\n                selectedFragment = new ScanBinFragment();\r\n                this.printBln = true;\r\n                break;\r\n\r\n            case R.id.item_article_stock:\r\n                selectedFragment = new ScanArticleFragment();\r\n                this.printBln = false;\r\n                break;\r\n            case R.id.item_print_item:\r\n                selectedFragment = new SearchArticleFragment();\r\n                this.printBln = true;\r\n                break;\r\n\r\n            case R.id.item_barcodeinfo:\r\n                mShowBarcodeInfoActivity();\r\n                return true;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_menu));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n        this.toolbarSubtext2 = findViewById(R.id.toolbarSubtext2);\r\n        this.recyclerViewMenu = findViewById(R.id.recyclerViewMenu);\r\n        this.shimmerViewContainer = findViewById(R.id.shimmerViewContainer);\r\n\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        this.toolbarSubtext.setText(cUser.currentUser.getNameStr());\r\n        this.toolbarSubtext2.setText(cUser.currentUser.currentBranch.getBranchNameStr());\r\n\r\n        if (! cUser.currentUser.pGetAutorisationsBln(MenuActivity.refreshBln)){\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_get_autorisations_failed), cUser.currentUser.getUsernameStr(), true, true );\r\n            this.mStopShimmering();\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.autorisationObl.size() == 0 ) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_no_autorisations_available), cUser.currentUser.getUsernameStr(), true, true );\r\n            this.mStopShimmering();\r\n            return;\r\n        }\r\n\r\n        if (! cUser.currentUser.currentBranch.pGetWorkplacesBln(MenuActivity.refreshBln)) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_get_workplaces_failed), cUser.currentUser.currentBranch.getBranchNameStr(), true, true );\r\n            this.mStopShimmering();\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentBranch.workplacesObl().size() == 0 && cSetting.PICK_SALES_ASK_WORKPLACE()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_no_workplaces_available), cUser.currentUser.currentBranch.getBranchNameStr(), true, true );\r\n            this.mStopShimmering();\r\n            return;\r\n        }\r\n\r\n        this.mSetAuthorisationRecycler();\r\n        this.mStopShimmering();\r\n\r\n        MenuActivity.refreshBln = false;\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n    //Region Public Methods\r\n\r\n    public void pAuthorisationSelected() {\r\n\r\n        ViewGroup container = cAppExtension.activity.findViewById(R.id.container);\r\n\r\n        final Intent intent;\r\n         View clickedImage = null;\r\n         View clickedText = null;\r\n        final ActivityOptionsCompat activityOptions;\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.PICK  ||\r\n            cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.PICK_PF ||\r\n            cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.PICK_PV){\r\n\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Pick;\r\n            if (!  cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n            intent = new Intent(cAppExtension.context, PickorderSelectActivity.class);\r\n            PickorderSelectActivity.startedViaMenuBln = true;\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_PICK);\r\n            clickedText= container.findViewWithTag(cAuthorisation.TAG_TEXT_PICK);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new androidx.core.util.Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new androidx.core.util.Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.SORTING) {\r\n\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Pick;\r\n            if (!  cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n\r\n            intent  = new Intent(cAppExtension.context, SortorderSelectActivity.class);\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_SORT);\r\n            clickedText = container.findViewWithTag(cAuthorisation.TAG_TEXT_SORT);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.SHIPPING) {\r\n\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Pick;\r\n\r\n            if (!  cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n\r\n            intent = new Intent(cAppExtension.context, ShiporderSelectActivity.class);\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_SHIP);\r\n            clickedText = container.findViewWithTag(cAuthorisation.TAG_TEXT_SHIP);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.FINISH_SHIPPING) {\r\n\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Pick;\r\n\r\n            if (!  cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n\r\n            intent = new Intent(cAppExtension.context, FinishShiporderSelectActivity.class);\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_FINISH_SHIP);\r\n            clickedText = container.findViewWithTag(cAuthorisation.TAG_TEXT_FINSIH_SHIP);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.STORAGE) {\r\n\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Pick;\r\n\r\n            if (!  cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n\r\n            intent = new Intent(cAppExtension.context, StoreorderSelectActivity.class);\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_STORE);\r\n            clickedText = container.findViewWithTag(cAuthorisation.TAG_TEXT_STORE);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.INVENTORY) {\r\n\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Inventory;\r\n            if (!  cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n            intent = new Intent(cAppExtension.context, InventoryorderSelectActivity.class);\r\n            InventoryorderSelectActivity.startedViaMenuBln = true;\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_INVENTORY);\r\n            clickedText= container.findViewWithTag(cAuthorisation.TAG_TEXT_INVENTORY);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new androidx.core.util.Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new androidx.core.util.Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.INTAKE||\r\n                cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.INTAKE_EO ||\r\n                cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.INTAKE_MA) {\r\n\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Intake;\r\n            if (!  cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n            switch (cUser.currentUser.currentAuthorisation.getAutorisationEnu()) {\r\n                case INTAKE:\r\n                    IntakeAndReceiveSelectActivity.currentMainTypeEnu = cWarehouseorder.ReceiveAndStoreMainTypeEnu.Unknown;\r\n                    break;\r\n\r\n                case INTAKE_EO:\r\n                    IntakeAndReceiveSelectActivity.currentMainTypeEnu = cWarehouseorder.ReceiveAndStoreMainTypeEnu.External;\r\n                    break;\r\n\r\n                case INTAKE_MA:\r\n                    IntakeAndReceiveSelectActivity.currentMainTypeEnu = cWarehouseorder.ReceiveAndStoreMainTypeEnu.Store;\r\n                    break;\r\n            }\r\n\r\n\r\n            //Initialise the activity\r\n            intent = new Intent(cAppExtension.context, IntakeAndReceiveSelectActivity.class);\r\n            IntakeAndReceiveSelectActivity.startedViaMenuBln = true;\r\n\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_INTAKE);\r\n            clickedText= container.findViewWithTag(cAuthorisation.TAG_TEXT_INTAKE);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new androidx.core.util.Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new androidx.core.util.Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.RETURN) {\r\n\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Return;\r\n            if (! cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n            intent = new Intent(cAppExtension.context, ReturnorderSelectActivity.class);\r\n            ReturnorderSelectActivity.startedViaMenuBln = true;\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_RETURN);\r\n            clickedText= container.findViewWithTag(cAuthorisation.TAG_TEXT_RETURN);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new androidx.core.util.Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new androidx.core.util.Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.MOVE || cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.MOVE_MV || cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.MOVE_MI){\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Move;\r\n            if (! cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n            switch (cUser.currentUser.currentAuthorisation.getAutorisationEnu()) {\r\n                case MOVE:\r\n                    MoveorderSelectActivity.currentMainTypeEnu = cWarehouseorder.MoveMainTypeEnu.Unknown;\r\n                    break;\r\n\r\n                case MOVE_MI:\r\n                case MOVE_MI_SINGLEPIECE:\r\n                    MoveorderSelectActivity.currentMainTypeEnu = cWarehouseorder.MoveMainTypeEnu.PLACE;\r\n                    break;\r\n\r\n                case MOVE_MO:\r\n                    MoveorderSelectActivity.currentMainTypeEnu = cWarehouseorder.MoveMainTypeEnu.TAKE;\r\n                    break;\r\n\r\n                case MOVE_MV:\r\n                    MoveorderSelectActivity.currentMainTypeEnu = cWarehouseorder.MoveMainTypeEnu.TAKEANDPLACE;\r\n                    break;\r\n            }\r\n\r\n            intent = new Intent(cAppExtension.context, MoveorderSelectActivity.class);\r\n            MoveorderSelectActivity.startedViaMenuBln = true;\r\n\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_MOVE);\r\n            clickedText= container.findViewWithTag(cAuthorisation.TAG_TEXT_MOVE);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new androidx.core.util.Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new androidx.core.util.Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.MOVE_MI_SINGLEPIECE){\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Move;\r\n            if (! cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n            intent = new Intent(cAppExtension.context, MoveMISinglepieceActivity.class);\r\n\r\n            clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_MOVE);\r\n            clickedText= container.findViewWithTag(cAuthorisation.TAG_TEXT_MOVE);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new androidx.core.util.Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new androidx.core.util.Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.PACK_AND_SHIP ||  cUser.currentUser.currentAuthorisation.getAutorisationEnu() == cAuthorisation.AutorisationEnu.PACK_AND_SHIP_MERGE){\r\n            cLicense.currentLicenseEnu = cLicense.LicenseEnu.Pack_and_ship;\r\n            if (! cLicense.pGetLicenseViaWebserviceBln()) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_license_error), \"\",true,true);\r\n                return;\r\n            }\r\n\r\n            switch (cUser.currentUser.currentAuthorisation.getAutorisationEnu()) {\r\n                case PACK_AND_SHIP:\r\n                    PackAndShipSelectActivity.currentMainTypeEnu = cWarehouseorder.PackAndShipMainTypeEnu.SINGLE;\r\n                    clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_PACK_AND_SHIP);\r\n                    clickedText= container.findViewWithTag(cAuthorisation.TAG_TEXT_PACK_AND_SHIP);\r\n                    break;\r\n\r\n                case PACK_AND_SHIP_MERGE:\r\n                    PackAndShipSelectActivity.currentMainTypeEnu = cWarehouseorder.PackAndShipMainTypeEnu.MULTI;\r\n                    clickedImage = container.findViewWithTag(cAuthorisation.TAG_IMAGE_PACK_AND_SHIP_MERGE);\r\n                    clickedText= container.findViewWithTag(cAuthorisation.TAG_TEXT_PACK_AND_SHIP_MERGE);\r\n                    break;\r\n\r\n            }\r\n\r\n            PackAndShipSelectActivity.startedViaMenuBln = true;\r\n\r\n            intent = new Intent(cAppExtension.context, PackAndShipSelectActivity.class);\r\n            activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new androidx.core.util.Pair<>(clickedImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE), new androidx.core.util.Pair<>(clickedText, cPublicDefinitions.VIEW_NAME_HEADER_TEXT));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    public  void pHandleHandleBINScanned(String pvBinCodeStr) {\r\n\r\n    String binCodeStr = cRegex.pStripRegexPrefixStr(pvBinCodeStr);\r\n\r\n        cBranchBin branchBin = cUser.currentUser.currentBranch.pGetBinByCode(binCodeStr);\r\n        if (branchBin == null) {\r\n            this.mStepFailed(cAppExtension.activity.getString(R.string.message_bin_not_valid), pvBinCodeStr);\r\n            return;\r\n        }\r\n        cBranchBin.currentBranchBin = branchBin;\r\n        DialogFragment selectedFragment;\r\n\r\n        if (!this.printBln) {\r\n            selectedFragment = new BinItemsFragment(branchBin.getBinCodeStr());\r\n        } else {\r\n            selectedFragment = new PrintBinLabelFragment();\r\n        }\r\n        selectedFragment.setCancelable(true);\r\n        selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n}\r\n\r\n    public  void pHandleHandleArticleScanned(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cArticle.currentArticle=  cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n        if (cArticle.currentArticle == null) {\r\n            this.mStepFailed(cAppExtension.activity.getString(R.string.message_unknown_article), pvBarcodeScan.getBarcodeOriginalStr());\r\n            return;\r\n        }\r\n        DialogFragment selectedFragment;\r\n\r\n        if (!this.printBln){\r\n            selectedFragment = new ItemStockFragment();\r\n        }else {\r\n            selectedFragment = new PrintItemLabelFragment();\r\n        }\r\n        selectedFragment.setCancelable(true);\r\n        selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ARTICLESTOCKFRAGMENT_TAG);\r\n    }\r\n\r\n    public  void pHandleArticleSearch(String pvItemNoStr, String pvVariantcodeStr) {\r\n        cArticle.currentArticle =  cArticle.pGetArticleByItemNoVariantViaWebservice(pvItemNoStr, pvVariantcodeStr);\r\n\r\n      if(cArticle.currentArticle == null) {\r\n          this.mStepFailed(cAppExtension.activity.getString(R.string.message_unknown_article), pvItemNoStr);\r\n          return;\r\n      };\r\n\r\n        DialogFragment selectedFragment;\r\n        selectedFragment = new PrintItemLabelFragment();\r\n        selectedFragment.setCancelable(true);\r\n        selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ARTICLESTOCKFRAGMENT_TAG);\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mSetAuthorisationRecycler() {\r\n\r\n        this.recyclerViewMenu.setHasFixedSize(false);\r\n        this.recyclerViewMenu.setAdapter(this.getAuthorisationAdapter());\r\n        this.recyclerViewMenu.setLayoutManager(new LinearLayoutManager(this));\r\n        this.getAuthorisationAdapter().setAuthorisations();\r\n    }\r\n\r\n    private void mStartShimmering(){\r\n        //Start Shimmer Effect's animation until data is loaded\r\n        this.shimmerViewContainer.startShimmerAnimation();\r\n    }\r\n\r\n    private void mStopShimmering(){\r\n        //Stopping Shimmer Effect's animation after data is loaded\r\n        this.shimmerViewContainer.stopShimmerAnimation();\r\n        this.shimmerViewContainer.setVisibility(View.GONE);\r\n    }\r\n\r\n    private  void mStepFailed(String pvErrorMessageStr, String pvBarcodeStr) {\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, pvBarcodeStr, true, true);\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n    }\r\n\r\n    private void mLeaveActivity(){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, LoginActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n\r\n    }\r\n\r\n    private void mShowBarcodeInfoActivity() {\r\n\r\n\r\n        Intent  intent = new Intent(cAppExtension.context, BarcodeInfoActivity.class);\r\n        ActivityCompat.startActivity(cAppExtension.context,intent, null);\r\n\r\n\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/General/MenuActivity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MenuActivity.java	(date 1620309443027)
@@ -578,6 +578,7 @@
     public  void pHandleHandleBINScanned(String pvBinCodeStr) {
 
     String binCodeStr = cRegex.pStripRegexPrefixStr(pvBinCodeStr);
+        cUserInterface.pHideKeyboard();
 
         cBranchBin branchBin = cUser.currentUser.currentBranch.pGetBinByCode(binCodeStr);
         if (branchBin == null) {
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">ScanSuite</string>\r\n    <!--region debugging and test-->\r\n    <string name=\"do_something\">Do something</string>\r\n    <!--endregion General-->\r\n\r\n    <!--region General-->\r\n    <string name=\"yes\">Yes</string>\r\n    <string name=\"no\">No</string>\r\n    <string name=\"ok\">OK</string>\r\n    <string name=\"cancel\">Cancel</string>\r\n    <string name=\"print\">Print</string>\r\n    <string name=\"search\">Search</string>\r\n    <string name=\"done\">Done</string>\r\n    <string name=\"nothing_here\">There\\'s nothing here yet.</string>\r\n    <string name=\"string_divider\">/</string>\r\n    <string name=\"articleimage_thumb_description\">article image thumbnail</string>\r\n    <string name=\"articleimage_full_description\">article image</string>\r\n    <!--endregion General-->\r\n\r\n    <!--region Numpad-->\r\n    <string name=\"plus_5\">+5</string>\r\n    <string name=\"plus_10\">+10</string>\r\n    <string name=\"plus_max\">max</string>\r\n    <string name=\"minus_5\">-5</string>\r\n    <string name=\"minus_10\">-10</string>\r\n    <string name=\"minus_min\">min</string>\r\n    <!--endregion Numpad-->\r\n\r\n    <!--region Device info-->\r\n    <string name=\"device_manufacturer\">Manufacturer</string>\r\n    <string name=\"device_brand\">Brand</string>\r\n    <string name=\"device_model\">Model</string>\r\n    <string name=\"device_serialnumber\">Serial number</string>\r\n    <string name=\"android_version\">Android version</string>\r\n    <!--endregion Device info-->\r\n\r\n    <!--region Application info-->\r\n    <string name=\"application_version\">Version</string>\r\n    <string name=\"update_file_not_found\">Update file not found</string>\r\n    <string name=\"webservice\">Webservice</string>\r\n    <string name=\"message_downloading\">Downloading&#8230;</string>\r\n    <string name=\"message_webservice_not_live\">Can\\'t reach the webservice</string>\r\n    <string name=\"mysettings\">My settings</string>\r\n    <string name=\"iconattribution_freepik\">Icons made by Freepik from www.flaticon.com</string>\r\n    <string name=\"text_copied_to_clipboard\">Text was copied to the clipboard</string>\r\n    <string name=\"text_not_copied_to_clipboard\">Text was not copied to the clipboard</string>\r\n    <string name=\"application_unknown_install_date\">Unknown install date</string>\r\n    <string name=\"label_application_installed\">Installed on</string>\r\n    <string name=\"label_application_last_update\">Last update</string>\r\n    <string name=\"application_unknown_update_date\">Unknown update date</string>\r\n    <!--endregion Application info-->\r\n\r\n    <!--region Network info-->\r\n    <string name=\"label_ssid\">Network name</string>\r\n    <string name=\"label_ip\">IP number</string>\r\n    <string name=\"label_internet_connected\">Internet?</string>\r\n    <string name=\"internet_connected\">Connected to the internet</string>\r\n    <string name=\"internet_not_connected\">Not connected to the internet</string>\r\n    <!--endregion Network info-->\r\n\r\n    <!--region Workplace-->\r\n    <string name=\"choose_workplace\">Where would you like to print?</string>\r\n    <!--endregion Workplace-->\r\n\r\n    <!--region Screens-->\r\n    <!--region Main screen-->\r\n    <string name=\"screentitle_main\">Welcome</string>\r\n    <string name=\"screentitle_settings\">Settings</string>\r\n    <string name=\"screentitle_support\">Support and info</string>\r\n    <string name=\"screentitle_language\">Language</string>\r\n    <string name=\"screentitle_datetime\">Date and time</string>\r\n    <string name=\"logo_description\">ScanSuite logo</string>\r\n    <string name=\"text_gettingready\">Just a minute, we\\'re getting things ready.</string>\r\n    <string name=\"button_get_started\">Get started</string>\r\n    <string name=\"question_no_internet_open_settings\">Looks like this device is not connected to the internet. Do you want to open the internet settings screen?</string>\r\n    <string name=\"open\">open</string>\r\n    <string name=\"identifier\">Identifier</string>\r\n    <string name=\"info\">Info</string>\r\n    <string name=\"destination\">Destination</string>\r\n    <string name=\"question_no_internet_open_settings_title\">No internet</string>\r\n    <!--endregion Main screen-->\r\n\r\n    <!--region Main Menu-->\r\n    <string name=\"mainmenu_title\">Scansuite menu</string>\r\n    <string name=\"actionsmenu_title\">Actions</string>\r\n    <string name=\"mainmenu_home\">Home</string>\r\n    <string name=\"mainmenu_menu\">Menu</string>\r\n    <string name=\"mainmenu_settings\">Settings</string>\r\n    <string name=\"mainmenu_support\">Support and info</string>\r\n    <string name=\"mainmenu_language\">Language</string>\r\n    <string name=\"mainmenu_datetime\">Date and time</string>\r\n    <string name=\"mainmenu_environments\">Environments</string>\r\n    <string name=\"mainmenu_proglove\">Pair ProGlove</string>\r\n    <string name=\"changelanguage_description\">Change language</string>\r\n    <string name=\"changedatetime_description\">Change date and time</string>\r\n    <string name=\"tab_support_network\">Network</string>\r\n    <string name=\"tab_support_application\">Application</string>\r\n    <string name=\"tab_support_device\">Device</string>\r\n    <string name=\"error_couldnt_get_ip\">Couldn\\'t get the ip number</string>\r\n    <string name=\"error_couldnt_get_ssid\">Couldn\\'t get the network name</string>\r\n    <string name=\"label_connectiontype\">Connection type</string>\r\n    <string name=\"connectiontype_none\">Not connected</string>\r\n    <string name=\"connectiontype_wifi\">WiFi</string>\r\n    <string name=\"connectiontype_ethernet\">Ethernet</string>\r\n    <string name=\"connectiontype_mobiledata\">Mobile data</string>\r\n    <string name=\"connectiontype_unknown\">I don\\'t know</string>\r\n    <!--endregion Main Menu-->\r\n\r\n    <!--region Menu Screen-->\r\n    <string name=\"screentitle_menu\">Menu</string>\r\n    <!--endregion Menu Screen-->\r\n\r\n    <!--region Menu Items-->\r\n    <string name=\"menuitem_external_return\">Picking return supplier</string>\r\n    <string name=\"menuitem_intake\">Reception and Storage</string>\r\n    <string name=\"menuitem_intake_eo\">External reception</string>\r\n    <string name=\"menuitem_intake_ma\">Storage reception</string>\r\n    <string name=\"menuitem_intake_om\">Internal reception</string>\r\n    <string name=\"menuitem_intake_close\">Close reception</string>\r\n    <string name=\"menuitem_inventory\">Inventory</string>\r\n    <string name=\"menuitem_inventoryclose\">Inventory close</string>\r\n    <string name=\"menuitem_move\">Move</string>\r\n    <string name=\"menuitem_move_mi\">Move (only place)</string>\r\n    <string name=\"menuitem_move_mi_singlepiece\">Move (only place singlepiece)</string>\r\n    <string name=\"menuitem_move_mo\">Move (only pick)</string>\r\n    <string name=\"menuitem_move_mv\">Move (pick and place)</string>\r\n    <string name=\"menuitem_moveitem\">Move item</string>\r\n    <string name=\"menuitem_pick\">Pick</string>\r\n    <string name=\"menuitem_pick_pf\">Pick store</string>\r\n    <string name=\"menuitem_pick_pv\">Pick salesorder</string>\r\n    <string name=\"menuitem_return\">Returns</string>\r\n    <string name=\"menuitem_selfpick\">Picking done by client</string>\r\n    <string name=\"menuitem_sort\">Sorting</string>\r\n    <string name=\"menuitem_ship\">Shipping</string>\r\n    <string name=\"menuitem_store\">Store weborders</string>\r\n    <string name=\"menuitem_finish_ship\">Finish Shipping</string>\r\n    <string name=\"menuitem_qc\">Quality Control</string>\r\n    <string name=\"menuitem_pack_and_ship\">Pack and Ship</string>\r\n    <string name=\"menuitem_pack_and_ship_merge\">Pack and Ship Merge</string>\r\n    <!--endregion Menu Items-->\r\n\r\n    <!--region Order types-->\r\n    <string name=\"ordertype_bc\">Batch picking sorting per VKO</string>\r\n    <string name=\"ordertype_bm\">Batch pick manual sorting</string>\r\n    <string name=\"ordertype_bp\">Batch picking</string>\r\n    <string name=\"ordertype_eom\">External reception Multi-user</string>\r\n    <string name=\"ordertype_eoom\">External reception and Storage Multi-user</string>\r\n    <string name=\"ordertype_eoos\">External reception and Storage Single-user</string>\r\n    <string name=\"ordertype_eor\">Registratie external reception</string>\r\n    <string name=\"ordertype_eos\">External reception Single-user</string>\r\n    <string name=\"ordertype_er\">Return supplier</string>\r\n    <string name=\"ordertype_ivm\">Stocktaking Multi-user</string>\r\n    <string name=\"ordertype_ivs\">Stocktaking Single-user</string>\r\n    <string name=\"ordertype_mam\">Storage reception Multi-user</string>\r\n    <string name=\"ordertype_mas\">Storage reception Single-user</string>\r\n    <string name=\"ordertype_mat\">Storage reception through task</string>\r\n    <string name=\"ordertype_mi\">Move place</string>\r\n    <string name=\"ordertype_mo\">Move take</string>\r\n    <string name=\"ordertype_mt\">Move task</string>\r\n    <string name=\"ordertype_mv\">Move</string>\r\n    <string name=\"ordertype_mvi\">Move item</string>\r\n    <string name=\"ordertype_omm\">Internal reception Multi-user</string>\r\n    <string name=\"ordertype_omom\">Internal reception and Storage Multi-user</string>\r\n    <string name=\"ordertype_omos\">Internal reception and Storage Single-user</string>\r\n    <string name=\"ordertype_omr\">Registration internal reception</string>\r\n    <string name=\"ordertype_oms\">Internal reception Single-user</string>\r\n    <string name=\"ordertype_pa\">Picking transfer / item</string>\r\n    <string name=\"ordertype_pf\">Picking transfer / branch</string>\r\n    <string name=\"ordertype_pv\">Pick and sort</string>\r\n    <string name=\"ordertype_rvr\">Registration Return sales</string>\r\n    <string name=\"ordertype_rvs\">Return sales</string>\r\n    <string name=\"ordertype_spv\">Selfpicking</string>\r\n    <string name=\"ordertype_unknown\">Unknown</string>\r\n    <string name=\"ordertype_combined\">Combined</string>\r\n    <string name=\"ordertype_self_generated\">Self Generated</string>\r\n    <string name=\"ordertype_ps1\">Pack and Ship Single Shipment</string>\r\n    <string name=\"ordertype_psm\">Pack and Ship Multi Shipment</string>\r\n    <!--endregion Order types-->\r\n\r\n    <!--region Login screen-->\r\n    <string name=\"screentitle_barcodeinfo\">Barcode info</string>\r\n    <string name=\"screentitle_login\">Login</string>\r\n    <string name=\"hint_password\">Password</string>\r\n    <string name=\"button_login\">Log in</string>\r\n    <string name=\"dialog_password_text\">Enter password for %1$s</string>\r\n    <string name=\"dialog_password_title\">Log in</string>\r\n    <string name=\"dialog_password_incorrect\">Sorry, that\\'s not it.</string>\r\n    <!--endregion Login screen-->\r\n\r\n    <!--region Password settings-->\r\n    <string name=\"dialog_password_settings_button_login\">Log in</string>\r\n    <string name=\"dialog_password_settings_text\">Enter password for settings</string>\r\n    <string name=\"dialog_password_settings_title\">Log in</string>\r\n    <!--endregion Password Settings-->\r\n\r\n    <!--region Inventory-->\r\n    <string name=\"screentitle_inventory\">Inventory</string>\r\n    <string name=\"screentitle_itemproperty_input\">Item Property Input</string>\r\n    <string name=\"screentitle_itemproperty_no_input\">Item Property No Input</string>\r\n    <!--endregion Inventory-->\r\n\r\n    <!--region PickorderSelect-->\r\n    <string name=\"screentitle_pickorderselect\">Pick orders</string>\r\n    <string name=\"pack\">Pack</string>\r\n    <string name=\"second\">De tweede knop</string>\r\n    <string name=\"question_show_processingorparkedorders_message\">There are still orders parked or being processed \\n\\nDo you want to show them?</string>\r\n    <string name=\"question_show_processingorparkedorders_title\">Show all orders?</string>\r\n    <string name=\"question_show\">Show</string>\r\n    <string name=\"question_dontshow\">Don\\'t Show</string>\r\n    <!--endregion PickorderSelect-->\r\n\r\n    <!--region Pickorder Lines-->\r\n    <string name=\"screentitle_pickorderlines\">Pick lines</string>\r\n    <string name=\"tab_pickorderline_topick\">To pick</string>\r\n    <string name=\"tab_pickorderline_picked\">Picked</string>\r\n    <string name=\"tab_pickorderline_total\">Total</string>\r\n\r\n    <string name=\"tab_to_select\">To select</string>\r\n\r\n    <string name=\"use_darkmode\">Use dark mode</string>\r\n    <string name=\"confirm\">Confirm</string>\r\n    <string name=\"im_at\">I\\'m at</string>\r\n    <string name=\"scan_bincode\">Scan BIN</string>\r\n    <string name=\"scan_article_or_bincode\">Scan article or BIN</string>\r\n    <string name=\"nothing_more_todo_for_bin\">There is nothing to do for this location</string>\r\n    <!--endregion Pickorder Lines-->\r\n\r\n    <!--region Leave screen-->\r\n    <string name=\"message_sure_leave_screen_text\">Do you really want to leave this screen?</string>\r\n    <string name=\"message_sure_leave_pick_screen_text\">Do you really want to leave this pick? \\n\\nYou will go back to pick order select</string>\r\n    <string name=\"message_sure_leave_qc_screen_text\">Do you really want to leave this quality control? \\n\\nYou will go back to quality control order select</string>\r\n    <string name=\"message_sure_leave_screen_positive\">Leave</string>\r\n    <string name=\"message_sure_leave_screen_negative\">Stay</string>\r\n    <string name=\"message_sure_leave_screen_title\">Leave this screen?</string>\r\n    <string name=\"message_sure_leave_pick_screen_title\">Leave this pick?</string>\r\n    <string name=\"message_sure_leave_qc_screen_title\">Leave this quality control?</string>\r\n    <!--endregion Leave screen-->\r\n\r\n    <!--region Sortorder Lines-->\r\n    <string name=\"screentitle_sortorderlines\">Sort lines</string>\r\n    <string name=\"error_no_more_articles_to_sort\">There are no more articles to sort</string>\r\n    <!--endregion Sortorder Lines-->\r\n\r\n    <!--region Storeorder Lines-->\r\n    <string name=\"screentitle_storeorderlines\">Store lines</string>\r\n    <string name=\"error_no_more_sourcedocuments_to_sort\">There are no more sourcedocuments to store</string>\r\n    <!--endregion Sortorder Lines-->\r\n\r\n    <!--region Sortorder Lines-->\r\n    <string name=\"screentitle_qclines\">QC lines</string>\r\n    <string name=\"screentitle_qcorders\">QC orders</string>\r\n    <string name=\"error_no_more_articles_to_check\">There are no more articles to check</string>\r\n    <!--endregion Sortorder Lines-->\r\n\r\n    <!--region Shiporder Lines-->\r\n    <string name=\"error_no_more_articles_to_ship\">There are no more articles to ship</string>\r\n    <string name=\"unknown_shippingagentservice\">Unknown shipping service</string>\r\n    <string name=\"unknown_shippingagent\">Unknown shipping agent</string>\r\n    <string name=\"error_unknown_shippingunit\">Unknown shippingunit</string>\r\n    <string name=\"error_unknown_salesorder\">Unknown salesorder</string>\r\n    <string name=\"scan_salesorder\">scan salesorder</string>\r\n    <!--endregion Shiporder Lines-->\r\n\r\n    <!--region Pickorder Pick-->\r\n    <string name=\"screentitle_pickorderpick\">Picking</string>\r\n    <string name=\"message_underpick_header\">Finish order line?</string>\r\n    <string name=\"message_correcy_line_header\">Correct line quanity?</string>\r\n    <string name=\"message_underpick_text\">You need %1$s of these, you\\'ve only picked %2$s. Are you sure that there are no more articles available and you want to finish this line?</string>\r\n    <string name=\"message_underpick_property_text\">You need %1$s of these, you\\'ve only picked %2$s. The amount filled at this tab is the picked number of articles</string>\r\n    <string name=\"message_undermove_text\">You need %1$s of these, you\\'ve only moved %2$s. Are you sure that there are no more articles available and you want to finish this line?</string>\r\n    <string name=\"message_undercheck_text\">There were  %1$s picked items\\n\\You\\'ve checked %2$s items.\\n\\nAre you sure that you want to correct the picked quantity?</string>\r\n    <string name=\"message_underplace_text\">Quantity to low\\n\\nYou try to place %1$s items\\n\\You would have to place %2$s items\\n\\nBut you can only place %3$s items on other BINS</string>\r\n    <string name=\"button_close_orderline\">Finish</string>\r\n    <string name=\"choose_barcode\">Choose barcode</string>\r\n    <string name=\"quantity_per_scan\">Quantity per scan: </string>\r\n    <string name=\"error_could_not_close_order\">The order could not be closed, please try again</string>\r\n    <string name=\"message_overpick_not_allowed\">Picking more than requested not allowed</string>\r\n    <!--endregion Pickorder Pick-->\r\n\r\n    <!--region itemproperty-->\r\n    <string name=\"message_fill_all_properties\">All properties need to have the same amount</string>\r\n    <string name=\"message_property_not_allowed\">Property value not allowed for current line</string>\r\n    <!--endregion itemproperty-->\r\n\r\n    <!--region Receive-->\r\n    <string name=\"message_underreceive_text\">You need %1$s of these, you\\'ve only received %2$s. Are you sure that there are no more articles available and you want to finish this line?</string>\r\n    <string name=\"message_underreceive_property_text\">You need %1$s of these, you\\'ve only received %2$s. The amount filled at this tab is the received number of articles</string>\r\n    <!--endregion Receive-->\r\n\r\n    <!--region Sortorderselect-->\r\n    <string name=\"screentitle_sortorderselect\">Sortorders</string>\r\n    <string name=\"screentitle_storeorderselect\">Store orders</string>\r\n    <!--endregion Screens-->\r\n\r\n    <!--region filter Pickorder Lines-->\r\n    <string name=\"filter_orderlines_title\">Show orders that are: </string>\r\n    <string name=\"filter_orderlines_enable\">Use filters</string>\r\n    <string name=\"filter_orderlines_enable_summary\">Enable or disable all filters below</string>\r\n    <string name=\"filter_orderlines_enable_key\" translatable=\"false\">FILTERORDERLINES_ENABLE</string>\r\n    <string name=\"filter_orderlines_processing\">Being processed or on hold</string>\r\n    <string name=\"filter_orderlines_processing_summary_on\">Showing these</string>\r\n    <string name=\"filter_orderlines_processing_summary_off\">Not showing these</string>\r\n    <string name=\"filter_orderlines_processing_key\" translatable=\"false\">FILTERORDERLINES_PROCESSING</string>\r\n    <string name=\"filter_orderlines_singlearticles\">Single articles pick</string>\r\n    <string name=\"filter_orderlines_singlearticles_summary_on\">Showing ONLY single articles</string>\r\n    <string name=\"filter_orderlines_singlearticles_summary_off\">Don\\'t care if single or not</string>\r\n\r\n    <string name=\"filter_orderlines_singlearticles_key\" translatable=\"false\">FILTERORDERLINES_SINGLEARTICLES</string>\r\n    <string name=\"filter_orderlines_my_orders\">Assigned to me</string>\r\n    <string name=\"filter_orderlines_my_orders_summary\">Orders that are assigned to me</string>\r\n    <string name=\"filter_orderlines_my_orders_key\" translatable=\"false\">FILTERORDERLINES_MYORDERS</string>\r\n    <string name=\"filter_orderlines_their_orders\">Assigned to someone else</string>\r\n    <string name=\"filter_orderlines_their_orders_summary\">Orders that are assigned to someone else</string>\r\n    <string name=\"filter_orderlines_their_orders_key\" translatable=\"false\">FILTERORDERLINES_THEIRORDERS</string>\r\n    <string name=\"filter_orderlines_nobodys_orders\">Not assigned to anyone</string>\r\n    <string name=\"filter_orderlines_nobodys_orders_summary\">Orders that are not assigned to anyone</string>\r\n    <string name=\"filter_orderlines_nobodys_orders_key\" translatable=\"false\">FILTERORDERLINES_NOBODYSORDERS</string>\r\n    <string name=\"shared_preference_serial_key\" translatable=\"false\">SHARED_PREFRENCE_SERIAL</string>\r\n    <string name=\"shared_preference_dark_mode\" translatable=\"false\">SHARED_PREFRENCE_DARKMODE</string>\r\n    <string name=\"filter_orderlines_apply_key\" translatable=\"false\">FILTERORDERLINES_APPLY</string>\r\n    <string name=\"filter_orderlines_apply\">Click or swipe down to apply</string>\r\n\r\n    <string name=\"label_swipe_up_for_filters\">Swipe up for filters</string>\r\n    <string name=\"label_swipe_down_to_hide\">Swipe down to hide</string>\r\n\r\n    <!--endregion filter Pickorder Lines-->\r\n\r\n    <!--region shiporder select-->\r\n    <string name=\"screentitle_shiporderselect\">Shiporder select</string>\r\n    <string name=\"screentitle_finish_shiporderselect\">Finish Shiporder select</string>\r\n    <!--endregion shiporder select-->\r\n\r\n    <!--region qcporder select-->\r\n    <string name=\"screentitle_qcorderselect\">Quality Control order select</string>\r\n    <string name=\"screentitle_qc\">Quality Control</string>\r\n    <!--endregion qcporder select-->\r\n\r\n    <!--region errors-->\r\n    <string name=\"error_unspecified\">Error</string>\r\n    <string name=\"error_unknown_barcode\">Unknown barcode</string>\r\n    <!--endregion errors-->\r\n\r\n    <!--region orderdone-->\r\n    <string name=\"orderdone_header_default\">Order is done!</string>\r\n    <string name=\"orderdone_text_default\">You\\'re all done with this order. Want to close it?</string>\r\n    <string name=\"currentlocation_header_default\">Current location</string>\r\n    <string name=\"currentlocation_text_default\">Please typ or scan the current location</string>\r\n    <string name=\"error_currentlocation_could_not_update\">There was an error updating this order.\\nPlease try again</string>\r\n    <string name=\"botton_set_currentlocation\">Set location</string>\r\n    <!--endregion orderdone-->\r\n\r\n    <string name=\"choose_branch\">Choose branch</string>\r\n    <string name=\"no_orders\">There are no orders</string>\r\n    <string name=\"get_stock_failed\">Getting stock failed</string>\r\n    <string name=\"show_only_defects\">Show only defects</string>\r\n    <string name=\"refreshorders_description\">Refresh orders</string>\r\n    <string name=\"couldnt_connect\">No connection</string>\r\n    <string name=\"message_header_orderdone\">Order %1$s is done!</string>\r\n    <string name=\"message_text_orderdone\">You\\'re done with this order, do you want to close it?</string>\r\n    <string name=\"button_close_order\">Close order</string>\r\n    <string name=\"reset\">Reset</string>\r\n    <string name=\"message_reset_header\">Reset this line?</string>\r\n    <string name=\"message_reset_text\">The quantity will be reset to 0 with a status of \\'to pick\\'</string>\r\n    <string name=\"button_reset\">Reset</string>\r\n    <string name=\"abort_order_abort\">Abort</string>\r\n    <string name=\"abort_order_order\">order</string>\r\n    <string name=\"message_abort_header\">Abort this order?</string>\r\n    <string name=\"message_abort_text\">All open lines will be closed with a quantity of 0</string>\r\n    <string name=\"button_abort\">Abort</string>\r\n\r\n    <string name=\"message_orderbusy_header\">Order still busy</string>\r\n    <string name=\"message_orderbusy_text\">What do you want to do with the current order?</string>\r\n    <string name=\"message_orderbusy_accept\">Accept</string>\r\n    <string name=\"message_orderbusy_reject\">Reject</string>\r\n    <string name=\"error_no_more_articles_to_pick\">There are no more articles to pick for this barcode</string>\r\n    <string name=\"error_couldnt_lock_order\">This order could not be locked</string>\r\n    <string name=\"comments\">comments</string>\r\n    <string name=\"button_ok\">OK</string>\r\n\r\n    <!--region lockorder-->\r\n    <string name=\"lockorder_order_assigned_to_another_user\">This order is assigned to another user</string>\r\n    <string name=\"lockorder_order_already_busy_on_other_scanner\">This order is already locked on another scanner.</string>\r\n    <string name=\"lockorder_order_already_assigned_to_user\">Looks like you were already working on this order on another scanner, do you want to continue on this one?</string>\r\n    <string name=\"lockorder_order_could_not_be_locked\">this order could not be locked</string>\r\n    <string name=\"button_lock\">Lock</string>\r\n    <string name=\"button_dont_lock\">Don\\'t lock</string>\r\n    <string name=\"hint_current_location\">Current location</string>\r\n    <string name=\"message_webservice_live\">The webservice is up and running</string>\r\n    <string name=\"packing_table\">Packing table</string>\r\n    <string name=\"tab_sortorderline_tosort\">To sort</string>\r\n    <string name=\"tab_sortorderline_sorted\">Sorted</string>\r\n    <string name=\"tab_sortorderline_tostore\">To store</string>\r\n    <string name=\"tab_sortorderline_stored\">Stored</string>\r\n    <string name=\"tab_qcorderline_tocheck\">To check</string>\r\n    <string name=\"tab_qcorderline_checked\">Checked</string>\r\n    <string name=\"sortorder_nothing_selected\">Select a line first</string>\r\n    <string name=\"message_sortorderbusy_text\">What do you want to do with the current order?</string>\r\n    <string name=\"message_sortorderbusy_accept\">Accept</string>\r\n    <string name=\"message_sortorderbusy_reject\">Reject</string>\r\n    <string name=\"message_sortorderbusy_header\">Sortorderline still busy</string>\r\n    <string name=\"screentitle_sortordersort\">Sorting</string>\r\n    <string name=\"message_scan_article_first\">Scan article first</string>\r\n    <string name=\"message_packingtable_already_assigned\">This packing table is already assigned to a different sales order</string>\r\n    <string name=\"message_salesorder_assigned_different_packingtable\">This sales order is already assigned to a different packing table</string>\r\n    <string name=\"message_scan_article\">Scan article</string>\r\n    <string name=\"message_scan_article_or_new_bin\">Scan article or new BIN</string>\r\n    <string name=\"scan_packingtable_parameter1\">Scan packing table %1$s</string>\r\n    <string name=\"question_open_sort\">Do you want to continue with sorting?</string>\r\n    <string name=\"question_open_sort_title\">Open sort?</string>\r\n    <string name=\"question_open_ship\">Do you want to continue with shipping?</string>\r\n    <string name=\"question_open_ship_title\">Open ship?</string>\r\n    <string name=\"unknow_sort_barcode_type\">This barcode is neither an article, nor a sort location.</string>\r\n    <string name=\"scan_sort_location\">Scan sort location</string>\r\n    <string name=\"scan_sort_location_parameter1\">Scan sort location %1$s</string>\r\n    <string name=\"details\">Details</string>\r\n    <string name=\"tab_shiporderline_toship\">To ship</string>\r\n    <string name=\"tab_shiporderline_shipped\">Shipped</string>\r\n    <string name=\"tab_shiporderline_total\">Total</string>\r\n    <string name=\"screentitle_shiporderlines\">Ship lines</string>\r\n    <!--endregion lockorder-->\r\n\r\n    <!--region packaging-->\r\n    <string name=\"choose_packiging_title\">Choose packaging</string>\r\n    <string name=\"choose_packiging_subtitle\">Click item to change quantity</string>\r\n    <!--endregion packaging-->\r\n\r\n    <!--region Determine transport-->\r\n    <string name=\"screentitle_determine_transport\">Determine transport</string>\r\n    <string name=\"workplace_updated\">Workplace was successfully updated</string>\r\n    <string name=\"error_unknown_user\">Unknown user</string>\r\n    <string name=\"error_scan_packintable_first\">Scan packingtable first</string>\r\n    <string name=\"no_advice_locations\">No advice location</string>\r\n    <string name=\"advice_locations\">Advice locations:</string>\r\n    <string name=\"ship_pick_at_least_one_package\">Pick at least one package</string>\r\n    <string name=\"error_unknown_or_article\">Unknown salesorder or article</string>\r\n    <string name=\"error_unknown_salesorder_or_article\">Unknown salesorder or article</string>\r\n\r\n    <!--endregion Determine transport-->\r\n\r\n    <string name=\"parameter1_not_found\">%1$s not found</string>\r\n    <string name=\"dialog_sending\">Sending</string>\r\n    <string name=\"dialog_sent\">Sent!</string>\r\n    <string name=\"dialog_notsent\">Not sent!</string>\r\n    <string name=\"button_open_internet_settings\">open internet settings</string>\r\n    <string name=\"button_try_again\">try again</string>\r\n    <string name=\"getting_data\">Getting data</string>\r\n    <string name=\"succes_scannerlogon\">Scanner successfully logged on</string>\r\n    <string name=\"fail_scannerlogon\">Scanner could not log on</string>\r\n    <string name=\"getdata_succes_scannerlogon\">Scanner successfully logged on</string>\r\n    <string name=\"getdata_fail_scannerlogon\">Scanner could not log on</string>\r\n    <string name=\"webservice_error_header\">Oops!</string>\r\n    <string name=\"webservice_error_text\">something went wrong</string>\r\n    <string name=\"getting_data_header\">Getting data</string>\r\n    <string name=\"getting_data_text\">please wait</string>\r\n    <string name=\"scan_pickcart_or_salesorder\">Scan pickcart or salesorder</string>\r\n    <string name=\"message_scan_pickcart_or_salesorder\">Scan pick cart or salesorder</string>\r\n    <string name=\"message_pickcartbox_already_assigned\">This pickcartbox is already assigned to a different salesorder</string>\r\n    <string name=\"message_salesorder_assigned_different_location\">This salesorder is already assigned to %1$s</string>\r\n    <string name=\"message_wrong_sourceno\">Wrong source number</string>\r\n    <string name=\"message_unknown_pickcartbox\">Unknown pickcartbox</string>\r\n    <string name=\"message_unknown_salesorder\">Unknown salesorder</string>\r\n    <string name=\"message_unknown_order\">Unknown order</string>\r\n    <string name=\"scan_article_or_salesorder_or_pickcartbox\">Scan article or salesorder/pickcartbox</string>s\r\n    <string name=\"message_wrong_pickcartbox\">Wrong pickcartbox</string>\r\n    <string name=\"number_cannot_be_lower\">Number can not be lower than required number</string>\r\n    <string name=\"number_cannot_be_higher\">Number can not be higher than required number</string>\r\n    <string name=\"number_cannot_be_higher_than_stock\">Number can not be higher than available stock</string>\r\n    <string name=\"select_shippingunit\">Scan or select shippingunit</string>\r\n    <string name=\"choose_environment\">Choose environment</string>\r\n    <string name=\"environment_set_to_parameter1\">The environment has been set to: %1$s</string>\r\n    <string name=\"current_environment\">Current environment</string>\r\n    <string name=\"label_current_environment\">Currently using</string>\r\n    <string name=\"current_environment_unknown\">unknown</string>\r\n    <string name=\"error_no_environments\">Please set an environment first</string>\r\n    <string name=\"add_environment\">Add environment</string>\r\n    <string name=\"environment_label_description\">Description</string>\r\n    <string name=\"environment_hint_description\">description</string>\r\n    <string name=\"environment_label_name\">Name</string>\r\n    <string name=\"save\">Save</string>\r\n    <string name=\"environment_label_url\">URL</string>\r\n    <string name=\"environment_hint_url\">url</string>\r\n    <string name=\"add_manually\">Add manually</string>\r\n    <string name=\"environment_parameter1_saved\">Environment %1$s was saved</string>\r\n    <string name=\"environment_hint_name\">name</string>\r\n    <string name=\"delete\">delete</string>\r\n    <string name=\"parameter1_is_removed\">%1$s is removed</string>\r\n    <string name=\"undo\">undo</string>\r\n    <string name=\"message_cant_delete_active_environment\">You can\\'t delete the active environment</string>\r\n    <string name=\"error_interface_version_should_be_parameter1_is_parameter2\">Interface mismatch\\nweb: %1$s\\nlocal: %2$s</string>\r\n    <string name=\"message_downloading_update\">Downloading program update</string>\r\n\r\n    <string name=\"choose_barcode_first\">Please choose a barcode first</string>\r\n    <string name=\"manual_input_only_barcodenumber_bigger1\">Manual input is only allowed when barcode quantity is 1</string>\r\n    <string name=\"couldnt_send_line\">Could\\'t send line</string>\r\n    <string name=\"all_orders_sent\">All orders are sent</string>\r\n    <string name=\"order_done_button\">Order done!</string>\r\n    <string name=\"order_done_close\">Close</string>\r\n    <string name=\"message_couldnt_unlock_order\">Could\\'t unlock order</string>\r\n\r\n    <string name=\"password_header_default\">Password</string>\r\n    <string name=\"password_text_default\">Enter password</string>\r\n    <string name=\"password_hint_default\">password</string>\r\n    <string name=\"error_unknown_branch\">Unknown branch</string>\r\n    <string name=\"error_get_autorisations_failed\">Getting Autorisations failed</string>\r\n    <string name=\"error_no_autorisations_available\">No autorisations available for this user in this location</string>\r\n    <string name=\"error_get_workplaces_failed\">Getting workplaces failed</string>\r\n    <string name=\"error_get_stockowner_failed\">Getting authorized stockowners failed</string>\r\n    <string name=\"error_no_workplaces_available\">There are no workplaces available for this location</string>\r\n    <string name=\"error_unknown_autorisation\">Autorisation is unknown</string>\r\n    <string name=\"error_get_pickorders_failed\">Getting pickorders from server failed</string>\r\n    <string name=\"error_couldnt_delete_details\">Could not delete order details</string>\r\n    <string name=\"error_get_lines_failed\">Getting lines from server failed</string>\r\n    <string name=\"error_get_bins_failed\">Getting bins from server failed</string>\r\n    <string name=\"error_get_possible_bins_failed\">Getting possible bins from server failed</string>\r\n    <string name=\"error_couldnt_unlock_order\">Couldn\\'t unlock order</string>\r\n    <string name=\"error_get_article_images_failed\">Getting article images failed</string>\r\n    <string name=\"error_couldnt_release_lock_order\">Couln\\'t release order lock</string>\r\n    <string name=\"error_get_barcodes_failed\">Getting barcodes failed</string>\r\n    <string name=\"error_get_composite_barcodes_failed\">Getting composite barcodes failed</string>\r\n    <string name=\"error_getting_sort_lines_failed\">Could not get sort lines</string>\r\n    <string name=\"error_getting_store_lines_failed\">Could not get store lines</string>\r\n    <string name=\"error_get_adresses_failed\">Getting adresses failed</string>\r\n    <string name=\"error_get_comments_failed\">Getting comments failed</string>\r\n    <string name=\"error_get_settings_failed\">Getting settings failed</string>\r\n    <string name=\"error_couldnt_reset_line\">Couldn\\'t reset line</string>\r\n    <string name=\"error_couldnt_abort_order\">Could not abort order</string>\r\n    <string name=\"error_article_scan_not_allowed\">Article scan not allowed here</string>\r\n    <string name=\"nothing_more_todo_for_article\">Nothing todo for scanned article</string>\r\n    <string name=\"lines_to_be_send\">There are still unsend lines</string>\r\n    <string name=\"error_couldnt_set_line_on_busy\">Couldn\\'t set line on status busy</string>\r\n    <string name=\"no_barcodes_availabe_for_this_line\">No barcodes available for this line</string>\r\n    <string name=\"mutiple_barcodes_posible\">Multiple barcodes possible</string>\r\n    <string name=\"could_not_get_article_image\">Could not get article image</string>\r\n    <string name=\"message_unknown_barcode\">Unknown/unexpected barcode</string>\r\n    <string name=\"error_inserting_salesorderpackingtable\">Could not add salesorder packing table</string>\r\n    <string name=\"error_updating_processing_sequence\">Could not update processing sequence</string>\r\n    <string name=\"previous_barcode_could_not_be_deleted\">Previous barcodes could not be deleted</string>\r\n    <string name=\"message_select_one_of_multiple_barcodes\">Multiple barcodes available, please select one</string>\r\n    <string name=\"invalid_user_not_assigned\">invalid_user_not_assigned</string>\r\n    <string name=\"message_meant_for_other_user\">This assignment is assigned to another user:</string>\r\n    <string name=\"message_another_user_already_started\">Another user already started:</string>\r\n    <string name=\"order_will_be_deleted\">Order will be deleted</string>\r\n    <string name=\"order_cant_be_started\">Order can\\'t be started</string>\r\n    <string name=\"feedback\">Feedback</string>\r\n    <string name=\"message_empty_name\">Name is empty</string>\r\n    <string name=\"message_empty_description\">Description is empty</string>\r\n    <string name=\"message_empty_URL\">URL is empty</string>\r\n    <string name=\"message_empty_isdefault\">IsDefault is not filled</string>\r\n    <string name=\"hold_the_order\">Hold this order</string>\r\n    <string name=\"error_couldnt_handle_step\">This step could not be handled</string>\r\n    <string name=\"send_order\">(Re)Send order</string>\r\n    <string name=\"error_get_sorting_detals_failed\">Getting sort details failed</string>\r\n    <string name=\"error_get_property_line_data_failed\">Getting property line data failed</string>\r\n    <string name=\"scan_pickcartbox\">Scan pickcartbox</string>\r\n    <string name=\"all_lines_sent\">All lines are sent</string>\r\n    <string name=\"error_article_scan_mandatory\">You can only scan articles</string>\r\n    <string name=\"message_scan_packinglocation_or_salesorder\">Scan packinglocation or salesorder</string>\r\n    <string name=\"scan_article_or_sort_location\">Scan article or sort location</string>\r\n    <string name=\"couldnt_update_line\">Could not update line</string>\r\n    <string name=\"couldnt_update_order\">Could not update order</string>\r\n    <string name=\"message_progress_to_send\">There is still progress that needs to be send</string>\r\n    <string name=\"message_send_now\">Do you want to send the progress now?</string>\r\n    <string name=\"message_send\">Send now</string>\r\n    <string name=\"error_get_linebarcodes_failed\">Getting line barcodes failed</string>\r\n    <string name=\"error_no_shippingagents_available\">There are no shipping agents available</string>\r\n    <string name=\"error_no_shippingagent_services_available\">No shipping agent services available</string>\r\n    <string name=\"error_no_shippingagent_services_units_available\">No shipping agent service units available</string>\r\n    <string name=\"error_getting_pack_and_ship_lines_failed\">Getting pack and ship lines failed</string>\r\n    <string name=\"error_getting_packages_failed\">Getting packages failed</string>\r\n    <string name=\"message_article_not_allowed\">Article scan not allowed</string>\r\n    <string name=\"dialog_error\">error detail</string>\r\n    <string name=\"shown\">shown</string>\r\n    <string name=\"orders\">orders</string>\r\n    <string name=\"inventory_orders\">orders</string>\r\n    <string name=\"no_inventory_orders\">No open inventory orders</string>\r\n    <string name=\"dont_care\">Don\\'t care</string>\r\n    <string name=\"show_all\">Show all</string>\r\n    <string name=\"message_license_error\">Getting license failed</string>\r\n    <string name=\"message_license_release_error\">License release failed</string>\r\n    <string name=\"message_workplace_selected\">Workplace selected</string>\r\n\r\n    <!--region Inventory-->\r\n    <string name=\"screentitle_inventoryorderselect\">Inventory</string>\r\n    <string name=\"error_get_inventoryorders_failed\">Getting inventoryorders from server failed</string>\r\n    <string name=\"error_get_inventorylines_failed\">Getting inventorylines from server failed</string>\r\n    <string name=\"button_new_inventoryorder\">New</string>\r\n    <string name=\"hint_document_inventory\">Document</string>\r\n    <string name=\"button_create_inventory\">Create</string>\r\n    <string name=\"createinventory_header_default\">Create inventory</string>\r\n    <string name=\"createinventory_text_default\">Create new inventory?</string>\r\n    <string name=\"screentitle_inventoryorderbins\">Inventory bins</string>\r\n    <string name=\"tab_inventorybin_todo\">open</string>\r\n    <string name=\"tab_inventorybin_done\">done</string>\r\n    <string name=\"tab_inventorybin_total\">total</string>\r\n    <string name=\"hint_input_bin\">Scan or type BIN</string>\r\n    <string name=\"hint_set_serial\">Type serial</string>\r\n    <string name=\"hint_add_bin\">Scan or type new bin</string>\r\n    <string name=\"hint_storage_bin\">Scan or type storage bin</string>\r\n    <string name=\"hint_add_packingslip\">Packingslip</string>\r\n    <string name=\"add_bin_header_default\">Add bin</string>\r\n    <string name=\"set_bin_header_default\">Set bin</string>\r\n    <string name=\"scan_bin_header_default\">Scan BIN</string>\r\n    <string name=\"set_serial_header_default\">Set serial</string>\r\n    <string name=\"button_add_bin\">Add bin</string>\r\n    <string name=\"button_set_bin\">Set bin</string>\r\n    <string name=\"button_set\">Set</string>\r\n    <string name=\"message_bin_added\">Bin %1$s was added</string>\r\n    <string name=\"message_bin_not_added\">Bin %1$s was not added</string>\r\n    <string name=\"screentitle_inventoryordercount\">Inventory count</string>\r\n    <string name=\"error_get_line_barcodes_failed\">Getting line barcodes failed</string>\r\n    <string name=\"error_get_line_propertys_failed\">Getting line propertys failed</string>\r\n    <string name=\"error_get_line_property_values_failed\">Getting line property values failed</string>\r\n    <string name=\"message_couldnt_create_order\">Order could not be created</string>\r\n    <string name=\"message_add_bin_not_allowed\">You are not allowed to add a BIN</string>\r\n    <string name=\"message_bin_could_not_be_added_via_webservice\">Bin could not be added via web service</string>\r\n    <string name=\"message_add_article_now_allowed\">Adding article not allowed</string>\r\n    <string name=\"message_adding_unkown_article_failed\">Adding unknown article failed</string>\r\n    <string name=\"message_adding_line_failed\">Adding line failed</string>\r\n    <string name=\"message_adding_erp_article_failed\">Adding ERP article with barcode %1$s failed</string>\r\n    <string name=\"message_barcode_unknown_ERP\">ERP doesn\\'t recognise scanned barcode\\n %1$s</string>\r\n    <string name=\"message_add_article_for_this_bin_now_allowed\">Article belongs to another BIN, adding lines is not allowed</string>\r\n    <string name=\"error_barcode_doesnt_belong_to_line\">This barcode doesn\\'t belong to this line</string>\r\n    <string name=\"message_line_save_failed\">Saving line failed, please try again</string>\r\n    <string name=\"scan_article_header_default\">Add article</string>\r\n    <string name=\"message_workplace_not_updated\">Workplace not updated on server</string>\r\n    <string name=\"message_close_inventoryorder_text\">U are about to close this count order, are you sure?</string>\r\n    <string name=\"message_close_inventoryorder\">Close count order</string>\r\n    <string name=\"lines\">Lines</string>\r\n    <string name=\"items\">Items</string>\r\n    <string name=\"message_bin_close_failed\">Closing BIN failed</string>\r\n    <string name=\"message_close_bin\">Close BIN</string>\r\n    <string name=\"message_bin_text_sure\">There are no lines in this BIN. Are you sure you want to close it?</string>\r\n    <string name=\"message_bin_already_closed\">This BIN has already been closed, scan another BIN</string>\r\n    <string name=\"message_close_order\">Close order</string>\r\n    <string name=\"message_close_order_text\">You are about to close the order, are you sure?</string>\r\n    <string name=\"message_removing_line_failed\">Removing line failed</string>\r\n    <string name=\"message_reset_line_via_webservice_failed\">Resetting line via webservice failed</string>\r\n    <string name=\"message_reset_bin_via_webservice_failed\">Resetting BIN via webservice failed</string>\r\n    <string name=\"screentitle_intakeorderselect\">Intake</string>\r\n    <string name=\"error_get_intakeorders_failed\">Getting orders failed</string>\r\n    <string name=\"error_get_intakelines_failed\">Getting lines failed</string>\r\n    <string name=\"screentitle_intakeorderlines\">Lines</string>\r\n    <string name=\"message_cancel_switch\">Cancel tabswitch</string>\r\n    <string name=\"message_accept_switch\">Accept tabswitch</string>\r\n    <string name=\"message_cancel_line\">Cancel scans</string>\r\n    <string name=\"message_accept_line\">Accept scans</string>\r\n    <string name=\"message_accept\">Accept</string>\r\n    <string name=\"message_cancel\">Cancel</string>\r\n    <string name=\"message_leave\">Leave</string>\r\n    <string name=\"message_close\">Close</string>\r\n    <string name=\"message_shipping_basics_invalid\">Shipping basics for this order are invalid, order can\\'t be shipped</string>\r\n    <string name=\"tab_todo\">Todo</string>\r\n    <string name=\"tab_done\">Done</string>\r\n    <string name=\"tab_total\">Total</string>\r\n    <string name=\"hint_add_itemno\">Type Item Number</string>\r\n    <string name=\"hint_add_variantcode\">Type variantcode</string>\r\n    <string name=\"hint_add_barcode\">Scan or type barcode</string>\r\n    <string name=\"hint_add_article\">Scan or type article</string>\r\n    <string name=\"button_add_article\">Add article</string>\r\n    <string name=\"add_article_header_default\">Add Article</string>\r\n    <string name=\"search_article_header_default\">Search Article</string>\r\n    <string name=\"screentitle_intake\">Intake</string>\r\n    <string name=\"message_bin_not_valid\">Invalid BIN</string>\r\n    <string name=\"message_no_lines_for_this_bin\">There are no lines for this BIN</string>\r\n    <string name=\"message_wrong_bin\">Wrong bin</string>\r\n    <string name=\"message_extra_pieces_not_allowed\">Extra pieces are not allowed</string>\r\n    <string name=\"message_extra_items_not_allowed\">Extra items are not allowed</string>\r\n    <string name=\"message_current_line_missing\">Current line is missing</string>\r\n    <string name=\"message_bin_or_item_missing\">Bin or item missing</string>\r\n    <string name=\"message_bin_wrong\">Bin is wrong</string>\r\n    <string name=\"message_bin_not_allowed\">Bin scan not allowed</string>\r\n    <string name=\"message_no_lines_for_this_barcode\">No lines available for this barcode</string>\r\n\r\n    <!--region battery-->\r\n    <string name=\"battery_at_parameter1_percent\">Battery is at %1$s%%</string>\r\n    <string name=\"battery_ischarging_over_parameter1\">Battery is charging over %1$s</string>\r\n    <string name=\"battery_isnotcharging\">Battery is not charging</string>\r\n    <string name=\"battery_unknownnotcharging\">I can\\'t tell if the battery is charging</string>\r\n\r\n    <string name=\"battery_usb\">USB</string>\r\n    <string name=\"battery_ac\">AC</string>\r\n    <string name=\"battery_wireless\">wireless</string>\r\n\r\n    <string name=\"battery_power_connected\">Connected</string>\r\n    <string name=\"battery_power_disconnected\">Disconnected</string>\r\n\r\n    <!--endregion battery-->\r\n\r\n    <string name=\"android_no_codename\">No codename</string>\r\n    <string name=\"message_zero_lines_cant_be_reset\">Lines with quantity 0 can\\'t be reset</string>\r\n    <string name=\"message_finish_later\">Finish later</string>\r\n    <string name=\"message_close_now\">Close now</string>\r\n    <string name=\"message_bin_unknown\">Bin %1$s unknown to this branch</string>\r\n    <string name=\"multiple_barcodes\">Multiple barcodes</string>\r\n    <string name=\"message_unknown_barcode_for_this_line\">Unknown barcode for this line</string>\r\n    <string name=\"message_adding_or_changing_bin_now_allowed\">Adding/changing bins is not allowed</string>\r\n    <string name=\"quantity_scanned\">Quantity scanned:</string>\r\n    <string name=\"message_split_line\">Split line</string>\r\n    <string name=\"stored\">Stored:</string>\r\n    <string name=\"error_unknown_location\">Scan not recogised as a BIN</string>\r\n    <string name=\"error_print_failed\">Print label failed</string>\r\n    <!--endregion Inventory-->\r\n\r\n    <!--region supervisor-->\r\n    <string name=\"supervisor_password_header\">Supervisor</string>\r\n    <string name=\"supervisor_password_text\">You need to be a supervisor for this</string>\r\n    <string name=\"supervisor_deviations_password_text\">You need to be a supervisor for this, because you have deviations</string>\r\n    <!--endregion supervisor-->\r\n\r\n    <!--region move-->\r\n    <string name=\"screentitle_packandshiporderselect\">Pack and Ship orders</string>\r\n    <string name=\"screentitle_packandship_single\">Pack and Ship Single</string>\r\n    <string name=\"screentitle_packandship_multi\">Pack and Ship Multi</string>\r\n    <string name=\"screentitle_moveorderselect\">Move orders</string>\r\n    <string name=\"screentitle_move_mi_singlepiece\">Move Place Singlepiece</string>\r\n    <string name=\"error_get_moveorders_failed\">Getting moveorders from server failed</string>\r\n    <string name=\"error_get_movelines_failed\">Getting movelines from server failed</string>\r\n    <string name=\"error_get_packandshiporders_failed\">Getting pack and ship orders from server failed</string>\r\n    <string name=\"button_create_move\">Create</string>\r\n    <string name=\"createmove_header_default\">Create moveorder</string>\r\n    <string name=\"createmove_text_default\">Create new moveorder?</string>\r\n    <string name=\"screentitle_moveorderlines\">Move lines</string>\r\n    <string name=\"screentitle_moveorderlines_take\">Move lines Take</string>\r\n    <string name=\"screentitle_moveorderlines_place\">Move lines Place</string>\r\n    <string name=\"tab_moveorderline_notdone\">Not done</string>\r\n    <string name=\"tab_moveorderline_done\">Done</string>\r\n    <string name=\"tab_moveorderline_total\">Total</string>\r\n    <string name=\"screentitle_moveordertake\">Move take</string>\r\n    <string name=\"message_moveorderbusy_header\">Orderline still busy</string>\r\n    <string name=\"couldnt_send_line_no_connection\">Could not send line, because there is no connection available</string>\r\n    <string name=\"show_only_deviations\">Show todo/deviations</string>\r\n    <string name=\"message_close_storeorder_text\">You stored %1$s items\\nYou needed %2$s items\\n\\n%3$s\\n\\nWould you like to close the order?</string>\r\n    <string name=\"message_close_generated_storeorder_text\">You stored %1$s items\\n\\n\\nWould you like to close the order?</string>\r\n    <string name=\"message_close_receiveorder_generated_text\">You received %1$s items\\n\\n\\n\\nWould you like to close the order?</string>\r\n    <string name=\"message_close_bin_with_progress\">You already made progress in this bin. Do you really want to close it?</string>\r\n    <string name=\"message_bin_empty_close\">Do you really want to close this BIN although it\\'s empty?</string>\r\n    <string name=\"message_exactly_what_you_needed\">Exactly what you needed</string>\r\n    <string name=\"message_bin_required\">You need to scan a BIN</string>\r\n    <string name=\"message_no_connection_try_again\">No connection, try again</string>\r\n    <string name=\"message_no_connection_header\">No connection</string>\r\n    <string name=\"message_checking_connection\">Checking connection....</string>\r\n    <string name=\"message_please_wait\">Please wait…</string>\r\n    <string name=\"connected\">Connected</string>\r\n    <string name=\"not_connected\">Not connected</string>\r\n    <string name=\"message_scan_destination\">Scan destination</string>\r\n    <string name=\"message_scan_is_not_location\">Please scan a location</string>\r\n    <string name=\"message_select_stockowner\">Please select Stockowner</string>\r\n    <string name=\"message_location_incorrect\">Location incorrect</string>\r\n    <string name=\"zero\">0</string>\r\n    <!--endregion move-->\r\n\r\n    <!--Region return-->\r\n    <string name=\"message_check_barcodes\">Check barcodes with ERP</string>\r\n    <string name=\"multiple_documents\">Multiple documents</string>\r\n    <string name=\"multiple_documents_switch\" translatable=\"false\">Multiple_documents_switch</string>\r\n    <string name=\"check_receive_barcodes_switch\" translatable=\"false\">check_receive_barcodes_switch</string>\r\n    <string name=\"message_close_document\">Close document</string>\r\n    <string name=\"message_document_text_sure\">Are you sure you want to close the document</string>\r\n    <string name=\"message_document_close_fail\">Document closing failed</string>\r\n    <string name=\"screentitle_returnorderdocument\">Return document</string>\r\n    <string name=\"message_document_add_not_allowed\">Not allowed to add a document</string>\r\n    <string name=\"message_remove_return_order\">Return order not removed</string>\r\n    <string name=\"error_get_returnorderlines_failed\">Getting returnorder lines failed</string>\r\n    <string name=\"error_get_returnorders_failed\">Getting returnorders failed</string>\r\n    <string name=\"error_get_returnordersdocuments_failed\">Getting returnorderdocuments failed</string>\r\n    <string name=\"create_return\">Create return</string>\r\n    <string name=\"createreturn_text_default\">Create return</string>\r\n    <string name=\"message_scan_return_document\">Scan return document</string>\r\n    <string name=\"message_scan_return_bin\">Scan return bin</string>\r\n    <string name=\"message_scan_receive_bin\">Scan receive bin</string>\r\n    <string name=\"message_unknown_bin\">Bin unknown at current location</string>\r\n    <string name=\"message_bin_not_allowed_for_return\">Bin not allowed for return</string>\r\n    <string name=\"message_bin_not_allowed_for_receive\">Bin not allowed for receive</string>\r\n    <string name=\"screentitle_return\">Return</string>\r\n    <string name=\"button_add_document\">Add document</string>\r\n    <string name=\"add_document_header_default\">Add Document</string>\r\n    <string name=\"error_getting_return_reasons\">Getting return reasons failes</string>\r\n    <string name=\"choose_reason\">Choose returnreason</string>\r\n    <string name=\"hint_add_reason\">Scan or select reason</string>\r\n    <string name=\"select_reason_switch\" translatable=\"false\">Select_reason_switch</string>\r\n    <string name=\"select_reason\">Select reason</string>\r\n    <string name=\"screentitle_returnorderdocuments\">Return documents</string>\r\n    <string name=\"scan_or_select_document\">Scan or select document</string>\r\n    <string name=\"message_clear_reason\">Clear reason</string>\r\n    <string name=\"message_shipment_already_checked\">This shipment is already checked</string>\r\n    <string name=\"message_shipment_already_handled\">This shipment is already handled</string>\r\n    <string name=\"message_reason_scan_not_allowed\">Reason scan is not allowed</string>\r\n    <string name=\"message_reason_unknown\">Reason unknown</string>\r\n    <string name=\"message_scan_reason_first\">Decide reason, before you scan a different article</string>\r\n    <string name=\"message_document_already_active\">This document is the current document</string>\r\n    <string name=\"create_external_receive\">Create external receive</string>\r\n    <string name=\"create\">Create</string>\r\n    <string name=\"create_intake_order\">Create intake order</string>\r\n    <string name=\"message_scan_receive_document\">Scan/type document</string>\r\n    <string name=\"screentitle_receive\">Receive</string>\r\n    <string name=\"error_could_not_invalidate_order\">Could not invalidate order</string>\r\n    <string name=\"message_order_invalidated\">Order invalidated</string>\r\n    <string name=\"order_has_deleted_by_erp\">Order deleted by ERP</string>\r\n    <string name=\"message_next_activity_not_found\">Next activity can\\'t be found</string>\r\n    <string name=\"message_less_items\">LESS items</string>\r\n    <string name=\"message_extra_items\">EXTRA items</string>\r\n    <string name=\"screentitle_inventorybincount\">Bin count</string>\r\n    <string name=\"message_current_shipment_unknown\">Current shipment unknown</string>\r\n    <string name=\"message_shipping_agent_unkown_or_empty\">Shipping agent unknown or empty</string>\r\n    <string name=\"message_shipping_agentservice_unkown_or_empty\">ShippingAgentService unknown or empty</string>\r\n    <string name=\"message_shipping_agentservice_shippingingunits_unkown_or_empty\">Shipping units unknown or empty</string>\r\n    <string name=\"hint_document_receive\">Document</string>\r\n    <string name=\"hint_stockowner\">Stockowner</string>\r\n    <string name=\"error_get_next_activity_failed\">Getting next activity failed</string>\r\n    <string name=\"message_locking_order_failed\">Locking order failed</string>\r\n    <string name=\"message_order_not_created\">Order could not be created</string>\r\n    <string name=\"message_scan_is_not_document\">Scan doesn\\'t match document, please scan a document</string>\r\n    <string name=\"message_unknown\">Unknown</string>\r\n    <string name=\"message_orderlinebusy_header\">Orderline busy</string>\r\n    <string name=\"message_orderlinebusy_text\">Line is still busy, what do you want to do with your current scans</string>\r\n    <string name=\"message_add_item\">Add item</string>\r\n    <string name=\"message_add_item_are_you_sure\">You are about to add an unexpected item:\\n\\n%1$s\\n\\nAre you sure?</string>\r\n    <string name=\"message_more_then_expected\">Quantity higher than expected</string>\r\n    <string name=\"number_received_total_cant_be_higher_then\">You are not allowed to receive more then %1$s items of this variant</string>\r\n    <string name=\"number_received_total_eminently_more\">You are about to receive %1$s pieces\\n\\nThis is eminently more then the %2$s expected pieces.\\n\\nAre you sure?</string>\r\n    <string name=\"message_reset_variant_via_webservice_failed\">Resetting variant via webservice failed</string>\r\n    <string name=\"create_pick\">Create Pick order</string>\r\n    <string name=\"create_move\">Create Move order</string>\r\n    <string name=\"create_inventory\">Create Inventory</string>\r\n    <string name=\"create_pack_and_ship\">Create Pack and Ship order</string>\r\n    <string name=\"tab_moveorderline_take\">Take</string>\r\n    <string name=\"tab_moveorderline_place\">Place</string>\r\n    <string name=\"screentitle_moveline_take\">Take article</string>\r\n    <string name=\"screentitle_moveline_place\">Place article</string>\r\n    <string name=\"message_article_required\">Article required</string>\r\n    <string name=\"image_view_battery\">image view battery</string>\r\n    <string name=\"imageview_is_charging\">imageview is charging</string>\r\n    <string name=\"message_no\">No</string>\r\n    <string name=\"message_yes\">Yes</string>\r\n    <string name=\"screentitle_packaging\">Packaging</string>\r\n    <string name=\"message_no_packaging_units_defined\">No packaging units defined</string>\r\n    <string name=\"message_close_packaging\">Close packaging</string>\r\n    <string name=\"message_close_packaging_text\">\"Do you want to close packaging?\\n\\nYou entered the following units:\\n\\n%1$s</string>\r\n    <string name=\"close_dialog\">Close dialog</string>\r\n    <string name=\"message_close_packaging_question\">Close packaging?</string>\r\n    <string name=\"error_unknown_packagingunit\">Unknown packagingunit</string>\r\n    <string name=\"message_open_packaging_text\">Would you like to add packaging to the order?</string>\r\n    <string name=\"error_get_packaging_failed\">Getting packaging failed</string>\r\n    <string name=\"message_extra_pieces_exceeded_header\">Extra pieces exceeded</string>\r\n    <string name=\"message_approve\">Approve</string>\r\n    <string name=\"tab_in\">In</string>\r\n    <string name=\"tab_out\">Out</string>\r\n    <string name=\"tab_selected\">Selected</string>\r\n    <string name=\"message_quantity_sourceno\">Quantity in sourceno:</string>\r\n    <string name=\"message_scan_bin_first\">Scan bin first</string>\r\n    <string name=\"message_close_action_first_before_new_bin\">Close this action first, before scanning new BIN</string>\r\n    <string name=\"message_already_exists_reset_first\">Line already exists for this article and BIN, of you want to edit it reset the line first</string>\r\n    <string name=\"message_take_already_exists\">You can\\'t PLACE an article on the same BIN as where you took it</string>\r\n    <string name=\"message_no_stock_available\">No stock available</string>\r\n    <string name=\"message_no_sorting_location_adviced\">No advised location</string>\r\n    <string name=\"message_scan_bin_or_article\">Scan BIN or Article</string>\r\n    <string name=\"message_scan_article_or_close_line\">Scan article or close line</string>\r\n    <string name=\"message_scan_bin\">Scan BIN</string>\r\n    <string name=\"message_unknown_article\">Unknown article</string>\r\n    <string name=\"message_no_place_lines_for_article\">There\\'s nothing to place for this article</string>\r\n    <string name=\"message_line_send\">Line has been send</string>\r\n    <string name=\"message_previous_line_send\">Previous line has been send</string>\r\n    <string name=\"message_unknown_itemvariant\">Unknown ItemVariant</string>\r\n    <string name=\"message_itemvariant_not_taken_so_cant_be_placed\">ItemVariant not taken, so no items to place</string>\r\n    <string name=\"show_only_todo\">Show todo</string>\r\n    <string name=\"message_itemvariant_unknown\">ItemVariant unknown</string>\r\n    <string name=\"message_already_placed_so_not_possible\">You can\\'t reset this line, because there are already handled place lines for this ItemVariant</string>\r\n    <string name=\"message_shipment_unkown_or_already_send\">Shipment unknown or already send</string>\r\n    <string name=\"screentitle_bin_stock\">BIN Stock</string>\r\n    <string name=\"screentitle_article_stock\">Article Stock</string>\r\n    <string name=\"message_place_line_already_exists\">Place line already exists, if you want to mutate first rest the line</string>\r\n    <string name=\"bin_stock\">BIN stock</string>\r\n    <string name=\"close_take\">Close TAKE</string>\r\n    <string name=\"barcode_info\">Barcode info</string>\r\n    <string name=\"article_stock\">Article stock</string>\r\n    <string name=\"check_barcode\">Check Barcode</string>\r\n    <string name=\"pair_pro_glove\">Pair Pro Glove</string>\r\n    <string name=\"combine_picks\">Combine Picks</string>\r\n    <string name=\"select_single_pick\">Select single pick</string>\r\n    <string name=\"couldnt_create_combined_order\">Couldn\\'t create combined order</string>\r\n    <string name=\"couldnt_remove_order_from_combined_order\">Couldn\\'t remove order from combined order</string>\r\n    <string name=\"couldnt_remove_combined_order\">Couldn\\'t remove combined order</string>\r\n\r\n    <string name=\"message_pick_done\">Picking done?</string>\r\n    <string name=\"message_close_pick_fase\">Would you like to finish picking?</string>\r\n\r\n    <string name=\"message_store_done\">Store done?</string>\r\n    <string name=\"message_sort_done\">Sorting done?</string>\r\n    <string name=\"message_close_sort_fase\">Would you like to finish sorting?</string>\r\n    <string name=\"message_close_store_fase\">Would you like to finish storing?</string>\r\n\r\n    <string name=\"message_qcdone\">Quality Control  done?</string>\r\n    <string name=\"message_close_qc_fase\">Would you like to finish quality control?</string>\r\n\r\n    <string name=\"message_packandshipdone\">Ship fase done?</string>\r\n    <string name=\"message_close_packandship_fase\">Would you like to finish ship fase?</string>\r\n    <string name=\"message_no_lines_for_this_bin_and_article\">No lines available for this BIN and article</string>\r\n    <string name=\"message_line_reset_succesfull\">Line has been reset</string>\r\n    <string name=\"message_close_place\">Close PLACE?</string>\r\n    <string name=\"message_close_place_text\">Do you really want to close PLACE?</string>\r\n    <string name=\"message_scanning_not_allowed\">You can\\'t scan here</string>\r\n    <string name=\"message_print_failed\">Print failed</string>\r\n    <string name=\"novalueyet\">---</string>\r\n    <string name=\"none\">none</string>\r\n    <string name=\"enter_BIN\">Enter BIN</string>\r\n    <string name=\"print_BIN\">Print BIN</string>\r\n    <string name=\"print_Article\">Print Article</string>\r\n    <string name=\"message_identifier_unknown\">Identifier unknown</string>\r\n    <string name=\"destination_invalid\">Destination invalid</string>\r\n    <string name=\"message_action_handled\">Action Handled</string>\r\n    <string name=\"message_action_failed\">Action Failed</string>\r\n    <string name=\"instruction\">Instruction</string>\r\n    <string name=\"message_scan_identifier\">Scan Identifier</string>\r\n    <string name=\"message_scan_destination_mi_single_piece\">Scan Destination</string>\r\n    <string name=\"message_set_serial_first\">Serial empty, please set serial</string>\r\n    <string name=\"message_barcode_already_scanned_and_unique\">Barcode has already been scanned and is unique</string>\r\n    <string name=\"error_matching_lines_and_barcodes_failed\">Matching lines and barcodes failed</string>\r\n    <string name=\"choose_workflow\">Choose workflow</string>\r\n    <string name=\"error_get_shipping_methods_failed\">Get Shipping Methods failed</string>\r\n    <string name=\"scan_document\">Scan document</string>\r\n    <string name=\"scan_next_document_to_close_current\">Scan next document to close current or press OK</string>\r\n    <string name=\"scan_next_document_or_close\">Scan next document for same address or press OK to Send</string>\r\n    <string name=\"message_shipment_not_send\">Shipment not send</string>\r\n    <string name=\"message_shipment_send\">Shipment  send</string>\r\n    <string name=\"message_shipment_incomplete\">Shipment incomplete</string>\r\n    <string name=\"message_workplaces_not_available\">Workplaces not available</string>\r\n    <string name=\"number_of_documents\">Documents:</string>\r\n    <string name=\"documents\">Documents</string>\r\n    <string name=\"message_no_addresses_to_check\">No addresses to check</string>\r\n    <string name=\"message_address_mismatch\">Address mismatch</string>\r\n    <string name=\"message_addressname_mismatch\">AddressName mismatch</string>\r\n    <string name=\"message_zipcode_mismatch\">Zipcode mismatch</string>\r\n    <string name=\"message_city_mismatch\">City mismatch</string>\r\n    <string name=\"message_country_mismatch\">Country mismatch</string>\r\n    <string name=\"error_unknow_storement\">Weborder to store can\\'t be found</string>\r\n    <string name=\"message_bin_cant_be_used_for_storage\">This BIN can\\'t be used for storage</string>\r\n    <string name=\"message_please_enter_a\">\"Please enter a \"</string>\r\n    <string name=\"message_please_enter\">\"Please enter a %1$s\"</string>\r\n    <string name=\"message_and_a\">and a</string>\r\n    <string name=\"quantity_asked\">Quantity asked:</string>\r\n    <string name=\"quantity_handled\">Quantity handled:</string>\r\n    <string name=\"multi_user_assignments_not_supported_in_android\">Multi user assignments not supported in Android (at the moment)</string>\r\n    <string name=\"message_select_a_destination\">Select a destination...</string>\r\n    <string name=\"message_itempropery_value_already_used\">Value already used</string>\r\n    <string name=\"message_itempropery_value_wrong\">Value wrong</string>\r\n    <string name=\"addedorhandled\">added/handled</string>\r\n    <string name=\"message_property_unknown\">Property unknown</string>\r\n    <!--End Region return-->\r\n\r\n    <!--Region plurals-->\r\n    <plurals name=\"plural_orders\">\r\n        <item quantity=\"one\">order</item>\r\n        <item quantity=\"other\">orders</item>\r\n    </plurals>\r\n\r\n    <plurals name=\"plural_parameter1_orders\">\r\n        <item quantity=\"one\">%d order</item>\r\n        <item quantity=\"other\">%d orders</item>\r\n    </plurals>\r\n\r\n    <!--End Region plurals-->\r\n</resources>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/res/values/strings.xml	(date 1620740448096)
@@ -657,6 +657,7 @@
     <string name="hint_add_variantcode">Type variantcode</string>
     <string name="hint_add_barcode">Scan or type barcode</string>
     <string name="hint_add_article">Scan or type article</string>
+    <string name="hint_add_property">Scan or type Item Property</string>
     <string name="button_add_article">Add article</string>
     <string name="add_article_header_default">Add Article</string>
     <string name="search_article_header_default">Search Article</string>
@@ -694,6 +695,7 @@
     <string name="message_bin_unknown">Bin %1$s unknown to this branch</string>
     <string name="multiple_barcodes">Multiple barcodes</string>
     <string name="message_unknown_barcode_for_this_line">Unknown barcode for this line</string>
+    <string name="message_unknown_value">Value not valid for property</string>
     <string name="message_adding_or_changing_bin_now_allowed">Adding/changing bins is not allowed</string>
     <string name="quantity_scanned">Quantity scanned:</string>
     <string name="message_split_line">Split line</string>
@@ -777,6 +779,7 @@
     <string name="add_document_header_default">Add Document</string>
     <string name="error_getting_return_reasons">Getting return reasons failes</string>
     <string name="choose_reason">Choose returnreason</string>
+    <string name="fill_property">Fill item property</string>
     <string name="hint_add_reason">Scan or select reason</string>
     <string name="select_reason_switch" translatable="false">Select_reason_switch</string>
     <string name="select_reason">Select reason</string>
@@ -925,6 +928,7 @@
     <string name="message_shipment_send">Shipment  send</string>
     <string name="message_shipment_incomplete">Shipment incomplete</string>
     <string name="message_workplaces_not_available">Workplaces not available</string>
+    <string name="message_templates_not_available">Templates not available</string>
     <string name="number_of_documents">Documents:</string>
     <string name="documents">Documents</string>
     <string name="message_no_addresses_to_check">No addresses to check</string>
Index: app/src/main/res/layout/fragment_print_item_label.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:background=\"@color/colorWhite\"\r\n    android:id=\"@+id/lineBinPrint\">\r\n    <TextView\r\n        android:id=\"@+id/textViewTitle\"\r\n        style=\"@style/acceptRejectText\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        />\r\n    <include layout=\"@layout/default_articleinfo_compact\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/textViewTitle\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        />\r\n    <Spinner\r\n        android:id=\"@+id/barcodeSpinner\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        android:textSize=\"15sp\"\r\n        android:textAlignment=\"center\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/articleInfoCompactContainer\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        >\r\n    </Spinner>\r\n    <Spinner\r\n        android:id=\"@+id/workspaceSpinner\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        android:textSize=\"15sp\"\r\n        android:textAlignment=\"center\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/barcodeSpinner\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        >\r\n    </Spinner>\r\n    <Spinner\r\n        android:id=\"@+id/layoutSpinner\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        android:textSize=\"15sp\"\r\n        android:textAlignment=\"center\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/workspaceSpinner\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        >\r\n    </Spinner>\r\n    <include layout=\"@layout/default_quantity_fragment_control\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/layoutSpinner\"\r\n        />\r\n    <Button\r\n        android:id=\"@+id/printButton\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        style=\"@style/Widget.AppCompat.Button.ButtonBar.AlertDialog\"\r\n        android:text=\"@string/print\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/quantityFragmentContainer\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        />\r\n    <Button\r\n        android:id=\"@+id/cancelButton\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        style=\"@style/Widget.AppCompat.Button.ButtonBar.AlertDialog\"\r\n        android:text=\"@string/cancel\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/quantityFragmentContainer\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        />\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/progressBar\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        android:indeterminate=\"true\"\r\n        android:progressDrawable=\"@drawable/ic_progressbar\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@id/printButton\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/quantityFragmentContainer\"\r\n        />\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_print_item_label.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/res/layout/fragment_print_item_label.xml	(date 1620742288439)
@@ -31,6 +31,17 @@
         app:layout_constraintEnd_toEndOf="parent"
         >
     </Spinner>
+    <TextView
+        android:id="@+id/textViewWorkspaceFail"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/default_margin"
+        android:textSize="@dimen/textsize_big"
+        android:textColor="@color/colorTextDarkest"
+        app:layout_constraintTop_toBottomOf="@id/barcodeSpinner"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        />
     <Spinner
         android:id="@+id/workspaceSpinner"
         android:layout_width="0dp"
@@ -43,6 +54,17 @@
         app:layout_constraintEnd_toEndOf="parent"
         >
     </Spinner>
+    <TextView
+        android:id="@+id/textViewLayoutFail"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/default_margin"
+        android:textSize="@dimen/textsize_big"
+        android:textColor="@color/colorTextDarkest"
+        app:layout_constraintTop_toBottomOf="@id/textViewWorkspaceFail"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        />
     <Spinner
         android:id="@+id/layoutSpinner"
         android:layout_width="0dp"
@@ -58,7 +80,7 @@
     <include layout="@layout/default_quantity_fragment_control"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_margin="@dimen/default_margin"
+        android:layout_margin="@dimen/default_double_margin"
         app:layout_constraintTop_toBottomOf="@id/layoutSpinner"
         />
     <Button
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Receive/ReceiveorderLinePropertyInputActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Receive;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\n\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLine;\r\nimport SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;\r\n\r\nimport nl.icsvertex.scansuite.BuildConfig;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DynamicItemPropertyFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyNoInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.PagerAdapters.ItemPropertyPagerAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class ReceiveorderLinePropertyInputActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Private Properties\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n\r\n    private AppCompatImageButton imageButtonNoInputPropertys;\r\n    private TextView articleDescriptionCompactText;\r\n    private TextView articleDescription2CompactText;\r\n    private TextView articleItemCompactText;\r\n    private TextView articleBarcodeCompactText;\r\n    private TextView quantityCompactText;\r\n    private cIntakeorderBarcode intakeorderBarcode;\r\n\r\n    private List<String> titleObl;\r\n    private AppCompatImageButton imageButtonDone;\r\n\r\n    private  List<cIntakeorderBarcode> scannedBarcodesObl;\r\n\r\n    private TabLayout itemPropertyTabLayout;\r\n    private ViewPager itemPropertyViewpager;\r\n    public  int numberOfTabsInt;\r\n    public boolean amountHandledBln;\r\n    private boolean isGeneratedBln;\r\n    private boolean deletedFromRecyclerBln;\r\n    private int tabIndexInt;\r\n\r\n    private  void mFillSummaryPropertyList (){\r\n\r\n        List<cLinePropertyValue> resultObl = new ArrayList<>();\r\n        List<cLineProperty> hulpObl = new ArrayList<>();\r\n\r\n        if (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl == null){\r\n            cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl = new ArrayList<>();\r\n        }else {\r\n            cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl.clear();\r\n        }\r\n        if ( cReceiveorderSummaryLine.currentReceiveorderSummaryLine.presetValueObl() != null &&  cReceiveorderSummaryLine.currentReceiveorderSummaryLine.presetValueObl().size() > 0){\r\n            resultObl.addAll(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.presetValueObl());\r\n            for(cLinePropertyValue linePropertyValue : resultObl){\r\n                if (!hulpObl.contains(linePropertyValue.getLineProperty())){\r\n                    hulpObl.add(linePropertyValue.getLineProperty());\r\n                }\r\n            }\r\n        }\r\n\r\n        for (cLineProperty lineProperty : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyInputObl()) {\r\n            if (hulpObl.contains(lineProperty)){\r\n                continue;\r\n            }\r\n            resultObl.add(new cLinePropertyValue(lineProperty));\r\n        }\r\n\r\n       cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl.addAll(resultObl);\r\n    }\r\n\r\n    private LinkedHashMap<String, ArrayList<cLinePropertyValue>> localItemPropertySortObl(){\r\n        LinkedHashMap<String, ArrayList<cLinePropertyValue>> linkedHashMap = new LinkedHashMap<>();\r\n        // ArrayList<cPickorderLinePropertyValue> pickorderLinePropertyValues = new ArrayList<>();\r\n\r\n        Collections.sort(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl, new Comparator<cLinePropertyValue>() {\r\n\r\n            @Override\r\n            public int compare(cLinePropertyValue o1, cLinePropertyValue o2) {\r\n                return Integer.compare(o1.getLineProperty().getSortingSequenceNoInt(), o2.getLineProperty().getSortingSequenceNoInt());\r\n            }\r\n        });\r\n\r\n        for (cLinePropertyValue linePropertyValue : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl) {\r\n            //Create the hasmap dynammically and fill it\r\n            ArrayList<cLinePropertyValue> loopList = linkedHashMap.get(linePropertyValue.getPropertyCodeStr());\r\n            if (loopList == null) {\r\n                ArrayList<cLinePropertyValue> propertyValues = new ArrayList<>();\r\n                propertyValues.add(linePropertyValue);\r\n                linkedHashMap.put(linePropertyValue.getPropertyCodeStr(), propertyValues);\r\n            }\r\n            else{\r\n                loopList.add(linePropertyValue);\r\n            }\r\n\r\n        }\r\n        return linkedHashMap;\r\n    }\r\n\r\n    public double getQuantityHandledDbl(){\r\n\r\n        double quantityDbl = 0;\r\n\r\n        if (this.titleObl == null || this.localItemPropertySortObl().size() == 0) {\r\n            return quantityDbl;\r\n        }\r\n\r\n        ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(this.titleObl.get(0));\r\n\r\n        for (cLinePropertyValue linePropertyValue : loopList ) {\r\n            quantityDbl += linePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n        return  quantityDbl;\r\n\r\n    }\r\n\r\n    public  double getQuantityAvailable() {\r\n        return    cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() - mQuantityHandledDbl();\r\n    }\r\n\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public  ReceiveorderLinePropertyInputActivity() {\r\n\r\n    }\r\n\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_pickorderlineitemproperty_input);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n\r\n        //Set listeners here, so click listeners only work after activity is shown\r\n        this.mSetListeners();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cConnection.pRegisterWifiChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            cConnection.pUnregisterWifiChangedReceiver();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n\r\n            if (this.intakeorderBarcode.getQuantityHandledDbl() == 0){\r\n                this.mGoBackToLinesActivity(true);\r\n\r\n                return true;\r\n            }\r\n            if (mCheckAllPropertysHandledBln()){\r\n                this.mShowAcceptFragment();\r\n                return true;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n\r\n        if (this.intakeorderBarcode.getQuantityHandledDbl() == 0){\r\n            this.mGoBackToLinesActivity(true);\r\n\r\n            return;\r\n        }\r\n        if (mCheckAllPropertysHandledBln()){\r\n            this.mShowAcceptFragment();\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultFragment methods\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_itemproperty_input));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.articleDescriptionCompactText = findViewById(R.id.articleDescriptionCompactText);\r\n        this.articleDescription2CompactText = findViewById(R.id.articleDescription2CompactText);\r\n        this.articleItemCompactText = findViewById(R.id.articleItemCompactText);\r\n        this.articleBarcodeCompactText = findViewById(R.id.articleBarcodeCompactText);\r\n        this.quantityCompactText = findViewById(R.id.quantityCompactText);\r\n        this.itemPropertyTabLayout = findViewById(R.id.itemPropertyTabLayout);\r\n        this.itemPropertyViewpager = findViewById(R.id.itemPropertyViewpager);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n\r\n        this.toolbarImage.setImageResource(R.drawable.ic_info);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.mSetArticleInfo();\r\n        this.mFillSummaryPropertyList();\r\n        this.mBuildAndFillTabs();\r\n        this.mSetQuantityText();\r\n        this.mShowHideOKButton();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHeaderListener();\r\n        this.mSetNoInputPropertyListener();\r\n        this.mSetCloseListener();\r\n        this.mSetTabLayoutListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Regioni ICSDefaultFragment methods\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        if (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyInputObl().size() == 1) {\r\n            cLineProperty.currentLineProperty = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyInputObl().get(0);\r\n        } else {\r\n            cLineProperty.currentLineProperty = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getLineProperty(Objects.requireNonNull(Objects.requireNonNull(this.itemPropertyTabLayout.getTabAt(this.itemPropertyTabLayout.getSelectedTabPosition())).getText()).toString());\r\n        }\r\n        this.pHandeManualAction(pvBarcodeScan);\r\n    }\r\n\r\n    public  void pCancelReceive() {\r\n\r\n        this.mGoBackToLinesActivity(true);\r\n    }\r\n\r\n    public  void pHandeManualAction(cBarcodeScan pvBarcodeScan){\r\n        //Check if kwnown value is selected\r\n        if(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyValue(pvBarcodeScan.getBarcodeOriginalStr()) != null){\r\n            cLinePropertyValue.currentLinePropertyValue = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyValue(pvBarcodeScan.getBarcodeOriginalStr());\r\n            cLineProperty.currentLineProperty = cLinePropertyValue.currentLinePropertyValue.getLineProperty();\r\n        }\r\n\r\n        if (cLineProperty.currentLineProperty.getItemProperty()== null ) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_unknown),\"\",true, true);\r\n            return;\r\n        }\r\n\r\n\r\n        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);\r\n            return;\r\n        }\r\n\r\n        if (!this.amountHandledBln){\r\n            if (this.getQuantityHandledDbl() == cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getAllowedQuantityDbl() && !this.isGeneratedBln) {\r\n                cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_extra_pieces_not_allowed),R.raw.badsound, true);\r\n                return;\r\n            }\r\n        }\r\n        //Check unique values if needed\r\n        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\",true, true);\r\n            return;\r\n        }\r\n\r\n        cLineProperty.currentLineProperty.pReceiveLineValueAdded(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        if (this.amountHandledBln && !cLinePropertyValue.currentLinePropertyValue.getItemProperty().getUniqueBln()){\r\n\r\n            if (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyValueObl(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr()).size() > 1 ){\r\n\r\n                int totalInt = (int) Math.round(this.intakeorderBarcode.getQuantityHandledDbl());\r\n                int availableInt = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.specificLinePropertyObl(cLineProperty.currentLineProperty.getPropertyCodeStr()).size();\r\n                int commitInt;\r\n                double amountDbl ;\r\n                for(cLinePropertyValue linePropertyValue : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyValueObl(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){\r\n\r\n                    if (linePropertyValue.getQuantityDbl() > 0 && !linePropertyValue.getValueStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getValueStr())){\r\n                        totalInt -= (int) Math.round(linePropertyValue.getQuantityDbl());\r\n                        availableInt -= 1;\r\n                        continue;\r\n                    }\r\n                    amountDbl = totalInt/ availableInt;\r\n                    commitInt = (int) Math.round(amountDbl);\r\n                    totalInt -= commitInt;\r\n\r\n                    if (availableInt == 1) {\r\n                        commitInt += totalInt;\r\n                    }\r\n                    linePropertyValue.quantityDbl = commitInt;\r\n\r\n                    availableInt -= 1;\r\n                }\r\n            }\r\n            else{\r\n                cLinePropertyValue.currentLinePropertyValue.quantityDbl = this.intakeorderBarcode.getQuantityHandledDbl();\r\n            }\r\n        }\r\n\r\n        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, pvBarcodeScan.getBarcodeOriginalStr() + \" \"  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);\r\n        this.pTryToChangeQuantity();\r\n        this.pRefreshActivity();\r\n\r\n    }\r\n\r\n    public void pHandled() {\r\n        if (!mCheckAllPropertysHandledBln()){\r\n            return;\r\n        }\r\n        this.mGoBackToLinesActivity(false);\r\n    }\r\n\r\n    public void pRefreshActivity(){\r\n        this.mSetQuantityText();\r\n        this.mShowHideOKButton();\r\n        this.mBuildAndFillTabs();\r\n        this.mSelectTabAndItem();\r\n    }\r\n\r\n    private void mSelectTabAndItem(){\r\n        if(cLinePropertyValue.currentLinePropertyValue ==null){\r\n            if(this.deletedFromRecyclerBln){\r\n                this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.tabIndexInt));\r\n            }\r\n            this.deletedFromRecyclerBln = false;\r\n            return;\r\n        }\r\n        this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.titleObl.indexOf(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())));\r\n    }\r\n\r\n    public void pDeleteValueFromRecyler() {\r\n        this.deletedFromRecyclerBln = true;\r\n        this.tabIndexInt = this.itemPropertyTabLayout.getSelectedTabPosition();\r\n       cReceiveorderSummaryLine.currentReceiveorderSummaryLine.handledPropertyValueObl.remove(cLinePropertyValue.currentLinePropertyValue);\r\n        cLinePropertyValue.currentLinePropertyValue = null;\r\n    }\r\n\r\n    public void pShowNumericInputFragment() {\r\n        mShowNumberPickerFragment();\r\n    }\r\n\r\n    public void pShowTextInputFragment() {\r\n        mShowTextInputFragment();\r\n    }\r\n\r\n    public void pResetTab(boolean pvResetBln){\r\n        if (pvResetBln) {\r\n            this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(0));\r\n        }\r\n    }\r\n    public void pShowDatePickerDialog() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        DatePickerFragment datePickerFragment = new DatePickerFragment(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.presetValueObl());\r\n        datePickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTDATEFRAGMENT_TAG);\r\n    }\r\n\r\n    public   void pTryToChangeQuantity() {\r\n\r\n        if (this.amountHandledBln){return;}\r\n\r\n        double newQuantityDbl = 0.0;\r\n\r\n        for(cLinePropertyValue linePropertyValue: cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyValueObl(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){\r\n            newQuantityDbl += linePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n\r\n        //Check if we would exceed amount, then show message if needed\r\n        if (newQuantityDbl > cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl()) {\r\n\r\n            if (cIntakeorder.currentIntakeOrder.getReceiveNoExtraPiecesBln() && !cIntakeorder.currentIntakeOrder.isGenerated() && cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() > 0 ) {\r\n                this.mShowExtraPiecesNotAllowed();\r\n                return ;\r\n            }\r\n\r\n            if (cSetting.RECEIVE_EXTRA_PIECES_PERCENTAGE() > 0 && cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() > 0  && (cSetting.RECEIVE_EXTRA_PIECES_PERCENTAGE_MANDATORY())) {\r\n\r\n                //Check if the new quantity would exceed the allowed quantity\r\n                if (newQuantityDbl > cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getAllowedQuantityDbl()) {\r\n\r\n                    //We would exceed the allowed quantity so show that this is not allowed\r\n                    this.mShowExtraPiecesNotAllowedByPercentage(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getAllowedQuantityDbl());\r\n                    return ;\r\n                }\r\n            }\r\n            intakeorderBarcode.quantityHandledDbl = newQuantityDbl;\r\n            cReceiveorderSummaryLine.currentReceiveorderSummaryLine.quantityHandledDbl = mQuantityHandledDbl();\r\n            return;\r\n        }\r\n\r\n        //Check if value already is zero\r\n        if ( newQuantityDbl <= 0 ) {\r\n            intakeorderBarcode.quantityHandledDbl = 0.0;\r\n            return;\r\n        }\r\n        intakeorderBarcode.quantityHandledDbl = newQuantityDbl;\r\n        cReceiveorderSummaryLine.currentReceiveorderSummaryLine.quantityHandledDbl = mQuantityHandledDbl();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mSetCloseListener() {\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                amountHandledBln = true;\r\n                if (!mCheckAllPropertysHandledBln()){\r\n                    return;\r\n                }\r\n                pHandled();\r\n            }\r\n        });\r\n    }\r\n\r\n    private boolean mCheckAllPropertysHandledBln(){\r\n\r\n        for (cLineProperty lineProperty : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyInputObl()){\r\n            if (!lineProperty.getIsRequiredBln()){\r\n                continue;\r\n            }\r\n            double quantityDbl = 0.0;\r\n            ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(lineProperty.getPropertyCodeStr());\r\n            for (cLinePropertyValue linePropertyValue : loopList ) {\r\n                quantityDbl += linePropertyValue.getQuantityDbl();\r\n            }\r\n            if (quantityDbl != this.getQuantityHandledDbl()){\r\n                this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.titleObl.indexOf(lineProperty.getPropertyCodeStr())));\r\n                cUserInterface.pDoNope(itemPropertyTabLayout, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, cAppExtension.activity.getString(R.string.message_fill_all_properties),R.raw.headsupsound,false);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private double mQuantityHandledDbl(){\r\n        Double newQuantityDbl= 0.0;\r\n\r\n        if (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.barcodesObl()!= null){\r\n            for (cIntakeorderBarcode intakeorderBarcode: cReceiveorderSummaryLine.currentReceiveorderSummaryLine.barcodesObl()){\r\n                newQuantityDbl += intakeorderBarcode.getQuantityHandledDbl();\r\n            }\r\n        }\r\n        newQuantityDbl += intakeorderBarcode.quantityHandledDbl;\r\n\r\n        return newQuantityDbl;\r\n    }\r\n\r\n    private void mSetTabLayoutListener(){\r\n        this.itemPropertyTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                amountHandledBln = tab.getPosition() > 0;\r\n                itemPropertyViewpager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetHeaderListener() {\r\n\r\n        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mScrollToBottom();\r\n            }\r\n        });\r\n\r\n        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View view) {\r\n                mScrollToTop();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mScrollToTop() {\r\n    }\r\n\r\n    private void mScrollToBottom() {\r\n    }\r\n\r\n    private void mSetArticleInfo(){\r\n\r\n        this.mSetBarcode();\r\n        this.isGeneratedBln = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() == 0.0;\r\n\r\n        this.articleDescriptionCompactText.setText(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getDescriptionStr());\r\n        this.articleDescription2CompactText.setText(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getDescription2Str());\r\n        this.articleItemCompactText.setText(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getItemNoAndVariantCodeStr());\r\n        this.articleBarcodeCompactText.setText(intakeorderBarcode.getBarcodeAndQuantityStr());\r\n\r\n        if (!cReceiveorderSummaryLine.currentReceiveorderSummaryLine.hasPropertysBln() || cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyNoInputObl() == null || cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyNoInputObl().size() == 0) {\r\n            this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n        }\r\n        else {\r\n            this.imageButtonNoInputPropertys.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private  void mSetBarcode(){\r\n        this.scannedBarcodesObl = new ArrayList<>();\r\n        intakeorderBarcode = new cIntakeorderBarcode(cIntakeorderBarcode.currentIntakeOrderBarcode);\r\n        this.scannedBarcodesObl.add(intakeorderBarcode);\r\n\r\n        if (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityHandledDbl() > 0) {\r\n            Double handledDbl = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityHandledDbl();\r\n            for (cIntakeorderBarcode intakeorderBarcode : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.barcodesObl()){\r\n                handledDbl -= intakeorderBarcode.getQuantityHandledDbl();\r\n            }\r\n            if (handledDbl > 0){\r\n                cReceiveorderSummaryLine.currentReceiveorderSummaryLine.barcodesObl().get(0).quantityHandledDbl = handledDbl;\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mSetQuantityText() {\r\n        String quantityStr = \"\";\r\n\r\n        if (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() > 0){\r\n            quantityStr =   cText.pDoubleToStringStr(mQuantityHandledDbl()) + \"/\" +  cText.pDoubleToStringStr(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl());\r\n        } else {\r\n            quantityStr =    cText.pIntToStringStr((int)this.getQuantityHandledDbl());\r\n        }\r\n\r\n        this.quantityCompactText.setText(quantityStr);\r\n    }\r\n\r\n    private  void mShowHideOKButton() {\r\n\r\n        if (this.getQuantityHandledDbl() == 0) {\r\n            this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n\r\n    }\r\n\r\n    private  void mShowExtraPiecesNotAllowed(){\r\n        cUserInterface.pShowSnackbarMessage(toolbarImage , cAppExtension.context.getString(R.string.number_cannot_be_higher), null, false);\r\n    }\r\n\r\n    private  void mShowExtraPiecesNotAllowedByPercentage(Double pvValueDbl){\r\n\r\n        cUserInterface.pShowSnackbarMessage(toolbarImage , cAppExtension.context.getString(R.string.number_received_total_cant_be_higher_then, cText.pDoubleToStringStr(pvValueDbl)) , null, false);\r\n\r\n    }\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, (int) cLinePropertyValue.currentLinePropertyValue.getQuantityDbl());\r\n\r\n        double availableDbl  = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() - cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityHandledDbl();\r\n        ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr());\r\n\r\n        for (cLinePropertyValue linePropertyValue : loopList ) {\r\n            availableDbl -= linePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n        if (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityDbl() == 0){\r\n            availableDbl = 999;\r\n        }\r\n\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, availableDbl);\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mShowTextInputFragment() {\r\n        if ( cLinePropertyValue.currentLinePropertyValue == null){\r\n            return;\r\n        }\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment( cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase());\r\n        itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n    private  void mGoBackToLinesActivity(Boolean pvCancelBln) {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        if (!pvCancelBln){ new Thread(new Runnable() {\r\n            public void run() {\r\n                mSendScans();\r\n            }\r\n        }).start();}\r\n        else{\r\n            mShowLinesActivity();\r\n        }\r\n    }\r\n\r\n    private void mShowLinesActivity(){\r\n        this.mResetCurrents();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, ReceiveLinesActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n    }\r\n\r\n\r\n    private void mSetNoInputPropertyListener() {\r\n        this.imageButtonNoInputPropertys.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowItemPropertyNoInputFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mShowItemPropertyNoInputFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        ItemPropertyNoInputFragment itemPropertyNoInputFragment = new ItemPropertyNoInputFragment();\r\n        itemPropertyNoInputFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.ITEMPROPERTYVALUENOINPUTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private void mBuildAndFillTabs() {\r\n        ArrayList<Fragment> fragments = new ArrayList<>();\r\n\r\n        this.titleObl = new ArrayList<>();\r\n        for (Map.Entry<String, ArrayList<cLinePropertyValue>> itemPropertyEntry :  this.localItemPropertySortObl().entrySet()) {\r\n\r\n\r\n            this.itemPropertyTabLayout.addTab(this.itemPropertyTabLayout.newTab());\r\n\r\n            DynamicItemPropertyFragment dynamicItemPropertyFragment = new DynamicItemPropertyFragment(itemPropertyEntry.getValue());\r\n            fragments.add(dynamicItemPropertyFragment);\r\n\r\n            this.titleObl.add(itemPropertyEntry.getKey());\r\n        }\r\n\r\n        ItemPropertyPagerAdapter itemPropertyPagerAdapter = new ItemPropertyPagerAdapter(fragments, this.titleObl);\r\n        this.itemPropertyViewpager.setAdapter(itemPropertyPagerAdapter);\r\n        this.itemPropertyTabLayout.setupWithViewPager(itemPropertyViewpager);\r\n    }\r\n\r\n    private void mSendScans() {\r\n\r\n        //If internet is not connected\r\n        if (!cConnection.isInternetConnectedBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line_no_connection), null);\r\n            return;\r\n        }\r\n\r\n        if(!cReceiveorderSummaryLine.currentReceiveorderSummaryLine.pItemVariantHandledBln(this.scannedBarcodesObl)) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.couldnt_send_line), \"\",true,true);\r\n            return;\r\n        }\r\n        cIntakeorderBarcode.currentIntakeOrderBarcode.quantityHandledDbl += this.intakeorderBarcode.getQuantityHandledDbl();\r\n\r\n        this.mShowLinesActivity();\r\n\r\n    }\r\n\r\n    private void mResetCurrents(){\r\n        cReceiveorderSummaryLine.currentReceiveorderSummaryLine = null;\r\n        cReceiveorderLine.currentReceiveorderLine = null;\r\n        cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = null;\r\n        cIntakeorderBarcode.currentIntakeOrderBarcode = null;\r\n    }\r\n\r\n\r\n    private void mShowAcceptFragment(){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        String acceptStr = cAppExtension.activity.getString(R.string.message_accept_line);\r\n        String rejectStr = cAppExtension.activity.getString(R.string.message_cancel_line);\r\n\r\n        if (BuildConfig.FLAVOR.toUpperCase().equalsIgnoreCase(\"BMN\")) {\r\n            acceptStr =  cAppExtension.activity.getString(R.string.message_yes);\r\n            rejectStr = cAppExtension.activity.getString(R.string.message_no);\r\n        }\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_orderlinebusy_header),\r\n                cAppExtension.activity.getString(R.string.message_orderlinebusy_text),\r\n                rejectStr, acceptStr, false);\r\n        acceptRejectFragment.setCancelable(true);\r\n\r\n        runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    //End Region Private Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Receive/ReceiveorderLinePropertyInputActivity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Receive/ReceiveorderLinePropertyInputActivity.java	(date 1620993433960)
@@ -36,6 +36,7 @@
 import SSU_WHS.General.cPublicDefinitions;
 
 import SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;
+import SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;
 import SSU_WHS.Intake.Intakeorders.cIntakeorder;
 import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
@@ -354,8 +355,29 @@
     }
 
     public  void pHandeManualAction(cBarcodeScan pvBarcodeScan){
+
+        if(  cReceiveorderSummaryLine.currentReceiveorderSummaryLine.presetValueObl() != null){
+            boolean foundBln = false;
+            ArrayList<String> propertyObl = new ArrayList<>();
+            for (cLinePropertyValue propertyValue : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.presetValueObl()){
+                if(propertyValue.getPropertyCodeStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){
+                    propertyObl.add(propertyValue.getValueStr());}
+            }
+            if (propertyObl.size() > 0){
+                for (String string: propertyObl){
+                    if (string.equalsIgnoreCase(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()))){
+                        foundBln = true;
+                        break;
+                    }
+                }
+                if(!foundBln){
+                    cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_not_allowed),"",true, true);
+                    return;
+                }
+            }
+        }
         //Check if kwnown value is selected
-        if(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyValue(pvBarcodeScan.getBarcodeOriginalStr()) != null){
+        if(cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyValue(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr())) != null){
             cLinePropertyValue.currentLinePropertyValue = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.linePropertyValue(pvBarcodeScan.getBarcodeOriginalStr());
             cLineProperty.currentLineProperty = cLinePropertyValue.currentLinePropertyValue.getLineProperty();
         }
@@ -366,7 +388,7 @@
         }
 
 
-        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {
+        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()))) {
             cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);
             return;
         }
@@ -378,13 +400,13 @@
             }
         }
         //Check unique values if needed
-        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());
+        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
         if (!hulpRst.resultBln) {
             cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),"",true, true);
             return;
         }
 
-        cLineProperty.currentLineProperty.pReceiveLineValueAdded(pvBarcodeScan.getBarcodeOriginalStr());
+        cLineProperty.currentLineProperty.pReceiveLineValueAdded(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));
 
         if (this.amountHandledBln && !cLinePropertyValue.currentLinePropertyValue.getItemProperty().getUniqueBln()){
 
@@ -418,7 +440,7 @@
             }
         }
 
-        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, pvBarcodeScan.getBarcodeOriginalStr() + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
+        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()) + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
         this.pTryToChangeQuantity();
         this.pRefreshActivity();
 
@@ -637,6 +659,8 @@
         intakeorderBarcode = new cIntakeorderBarcode(cIntakeorderBarcode.currentIntakeOrderBarcode);
         this.scannedBarcodesObl.add(intakeorderBarcode);
 
+        cLinePropertyValue.quantityPerUnitOfMeasureDbl = cIntakeorderBarcode.currentIntakeOrderBarcode.getQuantityPerUnitOfMeasureDbl();
+
         if (cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityHandledDbl() > 0) {
             Double handledDbl = cReceiveorderSummaryLine.currentReceiveorderSummaryLine.getQuantityHandledDbl();
             for (cIntakeorderBarcode intakeorderBarcode : cReceiveorderSummaryLine.currentReceiveorderSummaryLine.barcodesObl()){
@@ -710,7 +734,7 @@
             return;
         }
         cUserInterface.pCheckAndCloseOpenDialogs();
-        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment( cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase());
+        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment( cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase(), cReceiveorderSummaryLine.currentReceiveorderSummaryLine.presetValueObl());
         itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);
     }
 
@@ -719,7 +743,8 @@
 
         cUserInterface.pShowGettingData();
 
-        if (!pvCancelBln){ new Thread(new Runnable() {
+        if (!pvCancelBln){
+            new Thread(new Runnable() {
             public void run() {
                 mSendScans();
             }
Index: app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ICS.Utils.Scanning;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.BarcodeInfoActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.CreateIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveMISinglepieceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipMultiActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSingleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.CreateReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.CreateReturnActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderShipActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddEnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BranchFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SearchArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SetBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PasswordFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ReasonFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.CreateInventoryActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\n\r\npublic class cBarcodeScan {\r\n\r\n    private static String currentActivityContextStr = \"\";\r\n\r\n    public static class BarcodeType {\r\n\r\n        public static final int Unknown = 0;\r\n        public static final int EAN8 = 1;\r\n        public static final int EAN13 = 2;\r\n    }\r\n\r\n    private String barcodeFormattedStr;\r\n    public String getBarcodeFormattedStr() {\r\n        return barcodeFormattedStr;\r\n    }\r\n\r\n    public String barcodeOriginalStr;\r\n    public String getBarcodeOriginalStr() {\r\n        return barcodeOriginalStr;\r\n    }\r\n\r\n    public String barcodeTypeStr;\r\n    public String getBarcodeTypeStr() {\r\n        return barcodeTypeStr;\r\n    }\r\n\r\n    private   Boolean containsCrlf = false;\r\n    public Boolean getContainsCrlfBln() {\r\n        return containsCrlf;\r\n    }\r\n\r\n    public cBarcodeScan(){\r\n\r\n    }\r\n\r\n    private static IntentFilter BarcodeIntentFilter;\r\n    private static void getBarcodeIntentFilter() {\r\n        if (BarcodeIntentFilter == null) {\r\n            BarcodeIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static IntentFilter BarcodeFragmentIntentFilter;\r\n    private static void getBarcodeFragmentIntentFilter() {\r\n        if (BarcodeFragmentIntentFilter == null) {\r\n            BarcodeFragmentIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeFragmentIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeFragmentIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeReceiver;\r\n    private static void getBarcodeReceiver() {\r\n        if (BarcodeReceiver == null) {\r\n            BarcodeReceiver = new BroadcastReceiver(){\r\n                @Override\r\n                public void onReceive(Context pvContext, Intent pvIntent) {\r\n\r\n                    if (pvContext != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(pvIntent);\r\n\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    //Login\r\n                    if (cAppExtension.activity instanceof LoginActivity) {\r\n                        LoginActivity loginActivity = (LoginActivity)cAppExtension.activity;\r\n                        loginActivity.pHandleScan(barcodeScan);\r\n                       }\r\n\r\n                    //BarcodeInfo\r\n                    if (cAppExtension.activity instanceof BarcodeInfoActivity) {\r\n                        BarcodeInfoActivity barcodeInfoActivity = (BarcodeInfoActivity)cAppExtension.activity;\r\n                        barcodeInfoActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Pick\r\n                    if (cAppExtension.activity instanceof PickorderSelectActivity){\r\n                        PickorderSelectActivity pickorderSelectActivity = (PickorderSelectActivity)cAppExtension.activity;\r\n                        pickorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                        pickorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                        pickorderLinesGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n                        PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                        pickorderPickActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n                        PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n                        pickorderPickGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Sort\r\n                    if (cAppExtension.activity instanceof SortorderSelectActivity){\r\n                        SortorderSelectActivity sortorderSelectActivity = (SortorderSelectActivity)cAppExtension.activity;\r\n                        sortorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderLinesActivity){\r\n                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                        sortorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderSortActivity){\r\n                        SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n                        sortorderSortActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Ship\r\n                    if (cAppExtension.activity instanceof ShiporderSelectActivity){\r\n                        ShiporderSelectActivity shiporderSelectActivity = (ShiporderSelectActivity)cAppExtension.activity;\r\n                        shiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderLinesActivity){\r\n                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                        shiporderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderShipActivity){\r\n                        ShiporderShipActivity shiporderShipActivity = (ShiporderShipActivity)cAppExtension.activity;\r\n                        shiporderShipActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Finish Single Pieces\r\n                    if (cAppExtension.activity instanceof FinishShiporderSelectActivity){\r\n                        FinishShiporderSelectActivity finishShiporderSelectActivity = (FinishShiporderSelectActivity)cAppExtension.activity;\r\n                        finishShiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof FinishShipLinesActivity){\r\n                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                        finishShipLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //QC\r\n                    if (cAppExtension.activity instanceof QualityControlLinesActivity){\r\n                        QualityControlLinesActivity qualityControlLinesActivity = (QualityControlLinesActivity)cAppExtension.activity;\r\n                        qualityControlLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderQCActivity){\r\n                        PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n                        pickorderQCActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Inventory\r\n                    if (cAppExtension.activity instanceof CreateInventoryActivity) {\r\n                        CreateInventoryActivity createInventoryActivity = (CreateInventoryActivity)cAppExtension.activity;\r\n                        createInventoryActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderSelectActivity){\r\n                        InventoryorderSelectActivity inventoryorderSelectActivity = (InventoryorderSelectActivity)cAppExtension.activity;\r\n                        inventoryorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinsActivity){\r\n                        InventoryorderBinsActivity inventoryorderBinsActivity = (InventoryorderBinsActivity)cAppExtension.activity;\r\n                        inventoryorderBinsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinActivity){\r\n                        InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n                        inventoryorderBinActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n                        InventoryArticleActivity inventoryArticleDetailActivity = (InventoryArticleActivity)cAppExtension.activity;\r\n                        inventoryArticleDetailActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n                        InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;\r\n                        inventoryLinePropertyInputActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    //Intake\r\n                    if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){\r\n                        IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;\r\n                        intakeAndReceiveSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReceiveActivity){\r\n                        CreateReceiveActivity createReceiveActivity = (CreateReceiveActivity)cAppExtension.activity;\r\n                        createReceiveActivity.pHandleScan(barcodeScan,false,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateIntakeActivity){\r\n                        CreateIntakeActivity createIntakeActivity = (CreateIntakeActivity)cAppExtension.activity;\r\n                        createIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveLinesActivity){\r\n                        ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                        receiveLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n                        ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n                        receiveOrderReceiveActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity){\r\n                        ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n                        receiveorderLinePropertyInputActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n                        IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n                        intakeorderMATLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n                        IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n                        intakeorderMASLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n                        IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n                        IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeGeneratedActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity){\r\n                        IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n                        intakeOrderLinePropertyInputActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Return\r\n                    if (cAppExtension.activity instanceof ReturnorderSelectActivity){\r\n                        ReturnorderSelectActivity returnorderSelectActivity = (ReturnorderSelectActivity)cAppExtension.activity;\r\n                        returnorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                        ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                        returnorderDocumentsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                        ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                        returnorderDocumentActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReturnActivity) {\r\n                        CreateReturnActivity createReturnActivity = (CreateReturnActivity)cAppExtension.activity;\r\n                        createReturnActivity.pHandleScan(barcodeScan,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                        ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                        returnArticleDetailActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Move\r\n                    if (cAppExtension.activity instanceof MoveorderSelectActivity){\r\n                        MoveorderSelectActivity moveorderSelectActivity = (MoveorderSelectActivity)cAppExtension.activity;\r\n                        moveorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateMoveActivity){\r\n                        CreateMoveActivity createMoveActivity = (CreateMoveActivity)cAppExtension.activity;\r\n                        createMoveActivity.pHandleScan(barcodeScan, false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n                        MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n                        moveLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n                        MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n                        moveLinesTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n                        MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n                        moveLineTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n                        MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n                        moveLinesPlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n                        MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n                        moveLinePlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLineTakeActivity){\r\n                        MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n                        moveLineTakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceActivity){\r\n                        MoveLinePlaceActivity moveLinePlaceActivity = (MoveLinePlaceActivity)cAppExtension.activity;\r\n                        moveLinePlaceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveMISinglepieceActivity){\r\n                        MoveMISinglepieceActivity moveMISinglepieceActivity = (MoveMISinglepieceActivity)cAppExtension.activity;\r\n                        moveMISinglepieceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity){\r\n                        MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveorderLinesPlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity){\r\n                        MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveLinePlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipSingleActivity){\r\n                        PackAndShipSingleActivity packAndShipSingleActivity = (PackAndShipSingleActivity)cAppExtension.activity;\r\n                        packAndShipSingleActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipMultiActivity){\r\n                        PackAndShipMultiActivity packAndShipMultiActivity = (PackAndShipMultiActivity)cAppExtension.activity;\r\n                        packAndShipMultiActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderSelectActivity){\r\n                        StoreorderSelectActivity storeorderSelectActivity = (StoreorderSelectActivity)cAppExtension.activity;\r\n                        storeorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderLinesActivity){\r\n                        StoreorderLinesActivity storeorderLinesActivity = (StoreorderLinesActivity)cAppExtension.activity;\r\n                        storeorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeFragmentReceiver;\r\n    private static void getBarcodeFragmentReceiver() {\r\n        if (BarcodeFragmentReceiver == null) {\r\n            BarcodeFragmentReceiver = new BroadcastReceiver(){\r\n\r\n                @Override\r\n                public void onReceive(Context context, Intent intent) {\r\n\r\n                    if (context != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(intent);\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    if (cAppExtension.dialogFragment instanceof BranchFragment) {\r\n                        BranchFragment branchFragment = (BranchFragment)cAppExtension.dialogFragment;\r\n                        branchFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof StepDoneFragment) {\r\n                        StepDoneFragment stepDoneFragment = (StepDoneFragment)cAppExtension.dialogFragment;\r\n                        stepDoneFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof WorkplaceFragment) {\r\n                        WorkplaceFragment workplaceFragment = (WorkplaceFragment)cAppExtension.dialogFragment;\r\n                        workplaceFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof CurrentLocationFragment) {\r\n                        CurrentLocationFragment currentLocationFragment = (CurrentLocationFragment)cAppExtension.dialogFragment;\r\n                        currentLocationFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof ArticleFullViewFragment) {\r\n                        ArticleFullViewFragment articleFullViewFragment = (ArticleFullViewFragment)cAppExtension.dialogFragment;\r\n                        articleFullViewFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof EnvironmentFragment) {\r\n                        EnvironmentFragment environmentFragment = (EnvironmentFragment)cAppExtension.dialogFragment;\r\n                        environmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddEnvironmentFragment) {\r\n                        AddEnvironmentFragment addEnvironmentFragment = (AddEnvironmentFragment)cAppExtension.dialogFragment;\r\n                        addEnvironmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddBinFragment) {\r\n                        AddBinFragment addBinFragment = (AddBinFragment)cAppExtension.dialogFragment;\r\n                        addBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof SetBinFragment) {\r\n                        SetBinFragment setBinFragment = (SetBinFragment)cAppExtension.dialogFragment;\r\n                        setBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddArticleFragment) {\r\n                        AddArticleFragment addArticleFragment = (AddArticleFragment)cAppExtension.dialogFragment;\r\n                        addArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanArticleFragment) {\r\n                        ScanArticleFragment scanArticleFragment = (ScanArticleFragment)cAppExtension.dialogFragment;\r\n                        scanArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n                    if (cAppExtension.dialogFragment instanceof SearchArticleFragment) {\r\n                        SearchArticleFragment searchArticleFragment = (SearchArticleFragment)cAppExtension.dialogFragment;\r\n                        searchArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanBinFragment) {\r\n                        ScanBinFragment scanBinFragment = (ScanBinFragment)cAppExtension.dialogFragment;\r\n                        scanBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof PasswordFragment) {\r\n                        PasswordFragment passwordFragment = (PasswordFragment)cAppExtension.dialogFragment;\r\n                        passwordFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ReasonFragment) {\r\n                        ReasonFragment reasonFragment = (ReasonFragment)cAppExtension.dialogFragment;\r\n                        reasonFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment  instanceof ItemPropertyTextInputFragment){\r\n                        ItemPropertyTextInputFragment itemPropertyTextInputFragment = (ItemPropertyTextInputFragment)cAppExtension.dialogFragment;\r\n                        itemPropertyTextInputFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment  instanceof DatePickerFragment){\r\n                        DatePickerFragment datePickerFragment = (DatePickerFragment)cAppExtension.dialogFragment;\r\n                        datePickerFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public static void pRegisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeIntentFilter();\r\n        cBarcodeScan.getBarcodeReceiver();\r\n\r\n        //Prevent multiple receivers on same context\r\n        if (cBarcodeScan.currentActivityContextStr.equalsIgnoreCase(cAppExtension.context.getClass().getSimpleName())) {\r\n             return;\r\n        }\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeReceiver,BarcodeIntentFilter);\r\n        cBarcodeScan.currentActivityContextStr  = cAppExtension.context.getClass().getSimpleName();\r\n\r\n\r\n\r\n    }\r\n\r\n    public static void pRegisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeFragmentIntentFilter();\r\n        cBarcodeScan.getBarcodeFragmentReceiver();\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeFragmentReceiver,BarcodeFragmentIntentFilter);\r\n\r\n    }\r\n\r\n    public static void pUnregisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n         cAppExtension.context.unregisterReceiver(BarcodeReceiver);\r\n            cBarcodeScan.currentActivityContextStr = \"\";\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void pUnregisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n            cAppExtension.context.unregisterReceiver(BarcodeFragmentReceiver);\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static cBarcodeScan pFakeScan(String pvBarcodeStr) {\r\n        cBarcodeScan result = new cBarcodeScan();\r\n        result.barcodeOriginalStr = pvBarcodeStr;\r\n        result.barcodeFormattedStr = pvBarcodeStr;\r\n        result.barcodeTypeStr = cText.pIntToStringStr( BarcodeType.Unknown);\r\n        return  result;\r\n    }\r\n\r\n    private static cBarcodeScan mGetBarcode(Intent pvIntent) {\r\n\r\n        cBarcodeScan resultBarcodeScan;\r\n\r\n        Bundle extras = pvIntent.getExtras();\r\n        String returnBarcodeStr;\r\n        String scannedBarcodeStr = \"\";\r\n        String barcodeTypeStr = \"\";\r\n\r\n\r\n        if (extras != null) {\r\n\r\n            //so who is sending us this?\r\n            if (Objects.requireNonNull(pvIntent.getAction()).equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_TC55_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODE);\r\n                String honeywellBarcodeType = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODETYPE);\r\n                barcodeTypeStr = cBarcodeScanDefinitions.pGetHoneyWellBarcodeTypeStr(honeywellBarcodeType);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        assert scannedBarcodeStr != null;\r\n\r\n        scannedBarcodeStr = mCleanBarcodeStr(scannedBarcodeStr);\r\n        returnBarcodeStr =  mCleanBarcodeStr(scannedBarcodeStr) ;\r\n\r\n        //If it's an EAN barcodeStr cut off checkdigit\r\n        assert barcodeTypeStr != null;\r\n        if (barcodeTypeStr.toUpperCase().contains(\"EAN\") ) {\r\n\r\n            if (returnBarcodeStr.length() == 13) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,12);\r\n            }\r\n\r\n            if (returnBarcodeStr.length() == 8) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,8);\r\n            }\r\n        }\r\n\r\n        if (barcodeTypeStr.contains(\"GS1\")) {\r\n            barcodeTypeStr = \"GS1-128\";\r\n        }\r\n\r\n        resultBarcodeScan = new cBarcodeScan();\r\n        resultBarcodeScan.barcodeOriginalStr = scannedBarcodeStr;\r\n        resultBarcodeScan.barcodeFormattedStr = returnBarcodeStr;\r\n        resultBarcodeScan.barcodeTypeStr = barcodeTypeStr;\r\n        resultBarcodeScan.containsCrlf = scannedBarcodeStr.contains(\"\\\\n\");\r\n\r\n\r\n\r\n        return resultBarcodeScan;\r\n    }\r\n\r\n    private static String mCleanBarcodeStr(String pvDirtyBarcodeStr) {\r\n        return  pvDirtyBarcodeStr.replaceAll(\"([\\\\r\\\\n\\\\t])\",\"\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(date 1620732124632)
@@ -25,6 +25,7 @@
 import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
 import nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;
+import nl.icsvertex.scansuite.Activities.Move.MoveLineItemPropertyActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;
@@ -74,6 +75,7 @@
 import nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;
 import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
+import nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyStockFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;
@@ -409,6 +411,11 @@
                         moveLinePlaceMTActivity.pHandleScan(barcodeScan);
                     }
 
+                    if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+                        MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity)cAppExtension.activity;
+                        moveLineItemPropertyActivity.pHandleScan(barcodeScan);
+                    }
+
                     if (cAppExtension.activity instanceof MoveLineTakeActivity){
                         MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;
                         moveLineTakeActivity.pHandleScan(barcodeScan);
@@ -551,6 +558,12 @@
                         searchArticleFragment.pHandleScan(barcodeScan);
                         return;
                     }
+
+                    if (cAppExtension.dialogFragment instanceof ItemPropertyStockFragment) {
+                        ItemPropertyStockFragment itemPropertyStockFragment = (ItemPropertyStockFragment)cAppExtension.dialogFragment;
+                        itemPropertyStockFragment.pHandleScan(barcodeScan);
+                        return;
+                    }
 
                     if (cAppExtension.dialogFragment instanceof ScanBinFragment) {
                         ScanBinFragment scanBinFragment = (ScanBinFragment)cAppExtension.dialogFragment;
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryLinePropertyInputActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Inventory;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport nl.icsvertex.scansuite.BuildConfig;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectPropertyFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DynamicItemPropertyFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyNoInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.PagerAdapters.ItemPropertyPagerAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class InventoryLinePropertyInputActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Private Properties\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n\r\n    private AppCompatImageButton imageButtonNoInputPropertys;\r\n    private TextView articleDescriptionCompactText;\r\n    private TextView articleDescription2CompactText;\r\n    private TextView articleItemCompactText;\r\n    private TextView articleBarcodeCompactText;\r\n    private TextView quantityCompactText;\r\n\r\n    private List<String> titleObl;\r\n    private AppCompatImageButton imageButtonDone;\r\n\r\n    private TabLayout itemPropertyTabLayout;\r\n    private ViewPager itemPropertyViewpager;\r\n    public  int numberOfTabsInt;\r\n    public boolean amountHandledBln;\r\n    private boolean deletedFromRecyclerBln;\r\n    private int tabIndexInt;\r\n\r\n    private  List<cLinePropertyValue> localItemPropertyValueObl (){\r\n\r\n        List<cLinePropertyValue> resultObl = new ArrayList<>();\r\n        List<cLineProperty> hulpObl = new ArrayList<>();\r\n\r\n        if (cInventoryorderLine.currentInventoryOrderLine.linePropertyValuesObl() != null && cInventoryorderLine.currentInventoryOrderLine.linePropertyValuesObl() .size() > 0 ) {\r\n            resultObl.addAll(cInventoryorderLine.currentInventoryOrderLine.linePropertyValuesObl());\r\n            for(cLinePropertyValue linePropertyValue : resultObl){\r\n                if (!hulpObl.contains(linePropertyValue.getLineProperty())){\r\n                    hulpObl.add(linePropertyValue.getLineProperty());\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        for (cLineProperty inputLineProperty : cInventoryorderLine.currentInventoryOrderLine.linePropertyInputObl()) {\r\n            if (hulpObl.contains(inputLineProperty)){\r\n                continue;\r\n            }\r\n            resultObl.add(new cLinePropertyValue(inputLineProperty));\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    private LinkedHashMap<String, ArrayList<cLinePropertyValue>> localItemPropertySortObl(){\r\n        LinkedHashMap<String, ArrayList<cLinePropertyValue>> linkedHashMap = new LinkedHashMap<>();\r\n        // ArrayList<cPickorderLinePropertyValue> pickorderLinePropertyValues = new ArrayList<>();\r\n\r\n        for (cLinePropertyValue linePropertyValue : localItemPropertyValueObl()) {\r\n            //Create the hasmap dynammically and fill it\r\n            ArrayList<cLinePropertyValue> loopList = linkedHashMap.get(linePropertyValue.getPropertyCodeStr());\r\n            if (loopList == null) {\r\n                ArrayList<cLinePropertyValue> propertyValues = new ArrayList<>();\r\n                propertyValues.add(linePropertyValue);\r\n                linkedHashMap.put(linePropertyValue.getPropertyCodeStr(), propertyValues);\r\n            }\r\n            else{\r\n                loopList.add(linePropertyValue);\r\n            }\r\n\r\n        }\r\n        return linkedHashMap;\r\n    }\r\n\r\n    public double getQuantityHandledDbl(){\r\n\r\n        double quantityDbl = 0;\r\n\r\n        if (this.titleObl == null || this.localItemPropertySortObl().size() == 0) {\r\n            return quantityDbl;\r\n        }\r\n\r\n        ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(this.titleObl.get(0));\r\n\r\n        for (cLinePropertyValue pickorderLinePropertyValue : loopList ) {\r\n            quantityDbl += pickorderLinePropertyValue.getQuantityDbl();\r\n        }\r\n\r\n        return  quantityDbl;\r\n\r\n    }\r\n\r\n    public  double getQuantityAvailable() {\r\n        return    cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl() - this.getQuantityHandledDbl();\r\n    }\r\n\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public  InventoryLinePropertyInputActivity() {\r\n\r\n    }\r\n\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_pickorderlineitemproperty_input);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n\r\n        //Set listeners here, so click listeners only work after activity is shown\r\n        this.mSetListeners();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cConnection.pRegisterWifiChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            cConnection.pUnregisterWifiChangedReceiver();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            if (cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl() == 0 ) {\r\n               this.mStartInventoryBINActivity();\r\n                return true;\r\n            }\r\n            amountHandledBln = true;\r\n            if (mCheckAllPropertysHandledBln()){\r\n\r\n                this.mShowAcceptFragment();\r\n                return true;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl() == 0){\r\n            this.mStartInventoryBINActivity();\r\n            return;\r\n        }\r\n        amountHandledBln = true;\r\n        if (mCheckAllPropertysHandledBln()){\r\n\r\n            this.mShowAcceptFragment();\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultFragment methods\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_itemproperty_input));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.articleDescriptionCompactText = findViewById(R.id.articleDescriptionCompactText);\r\n        this.articleDescription2CompactText = findViewById(R.id.articleDescription2CompactText);\r\n        this.articleItemCompactText = findViewById(R.id.articleItemCompactText);\r\n        this.articleBarcodeCompactText = findViewById(R.id.articleBarcodeCompactText);\r\n        this.quantityCompactText = findViewById(R.id.quantityCompactText);\r\n        this.itemPropertyTabLayout = findViewById(R.id.itemPropertyTabLayout);\r\n        this.itemPropertyViewpager = findViewById(R.id.itemPropertyViewpager);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n\r\n        this.toolbarImage.setImageResource(R.drawable.ic_info);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        // this.mSetItemPropertyValueRecycler();\r\n        this.mSetArticleInfo();\r\n        this.mSetQuantityText();\r\n        this.mShowHideOKButton();\r\n        this.mBuildAndFillTabs();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHeaderListener();\r\n        this.mSetNoInputPropertyListener();\r\n        this.mSetCloseListener();\r\n        this.mSetTabLayoutListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Regioni ICSDefaultFragment methods\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        if (cInventoryorderLine.currentInventoryOrderLine.linePropertyInputObl().size() == 1) {\r\n            cLineProperty.currentLineProperty = cInventoryorderLine.currentInventoryOrderLine.linePropertyInputObl().get(0);\r\n\r\n        } else{\r\n            cLineProperty.currentLineProperty = cInventoryorderLine.currentInventoryOrderLine.getLineProperty(Objects.requireNonNull(Objects.requireNonNull(this.itemPropertyTabLayout.getTabAt(this.itemPropertyTabLayout.getSelectedTabPosition())).getText()).toString());\r\n        }\r\n\r\n        this.pHandeManualAction(pvBarcodeScan);\r\n    }\r\n\r\n    public  void pCancel() {\r\n        //Check if we need to remove the SalesorderPackingTableLines\r\n\r\n        cInventoryorderLine.currentInventoryOrderLine.pResetRst();\r\n        cInventoryorderLine.currentInventoryOrderLine = null;\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    public  void pHandeManualAction(cBarcodeScan pvBarcodeScan){\r\n        if (cLineProperty.currentLineProperty.getItemProperty()== null ) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_unknown),\"\",true, true);\r\n            return;\r\n        }\r\n\r\n        if (!cRegex.pCheckRegexBln( cLineProperty.currentLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {\r\n\r\n            //Check for article scan if so handle article\r\n            if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n                mHandleArticleScan(pvBarcodeScan);\r\n                return;\r\n            }\r\n\r\n            cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);\r\n            return;\r\n        }\r\n\r\n//        if (!this.amountHandledBln){\r\n//            if (this.getQuantityHandledDbl() == cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl()) {\r\n//                cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout,cAppExtension.activity.getString(R.string.message_extra_pieces_not_allowed),R.raw.badsound, true);\r\n//                return;\r\n//            }\r\n//        }\r\n        //Check unique values if needed\r\n        cResult hulpRst = cLineProperty.currentLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());\r\n        if (!hulpRst.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\",true, true);\r\n            return;\r\n        }\r\n\r\n        cLineProperty.currentLineProperty.pValueAdded(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        if (this.amountHandledBln && !cLinePropertyValue.currentLinePropertyValue.getItemProperty().getUniqueBln()){\r\n            cLinePropertyValue.currentLinePropertyValue.quantityDbl = cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl();\r\n        }\r\n\r\n        cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, pvBarcodeScan.getBarcodeOriginalStr() + \" \"  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);\r\n        this.pTryToChangeQuantity();\r\n        this.pRefreshActivity();\r\n\r\n    }\r\n\r\n    public void pHandled() {\r\n\r\n        if (!mCheckAllPropertysHandledBln()){\r\n            return;\r\n        }\r\n        this.mHandleDone();\r\n    }\r\n\r\n    public void pRefreshActivity(){\r\n        this.mSetQuantityText();\r\n        this.mShowHideOKButton();\r\n        this.mBuildAndFillTabs();\r\n        this.mSelectTabAndItem();\r\n    }\r\n\r\n    private void mSelectTabAndItem(){\r\n        if(cLinePropertyValue.currentLinePropertyValue ==null){\r\n            if(this.deletedFromRecyclerBln){\r\n                this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.tabIndexInt));\r\n            }\r\n            this.deletedFromRecyclerBln = false;\r\n            return;\r\n        }\r\n        this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.titleObl.indexOf(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())));\r\n    }\r\n\r\n    public void pDeleteValueFromRecyler() {\r\n        this.deletedFromRecyclerBln = true;\r\n        this.tabIndexInt = this.itemPropertyTabLayout.getSelectedTabPosition();\r\n        cLinePropertyValue.allLinePropertysValuesObl.remove(cLinePropertyValue.currentLinePropertyValue);\r\n        cLinePropertyValue.currentLinePropertyValue = null;\r\n    }\r\n\r\n    public void pShowNumericInputFragment() {\r\n        mShowNumberPickerFragment();\r\n    }\r\n\r\n    public void pShowTextInputFragment() {\r\n        mShowTextInputFragment();\r\n    }\r\n\r\n    public void pResetTab(boolean pvResetBln){\r\n        if (pvResetBln) {\r\n            this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(0));\r\n            //     this.itemPropertyViewpager.setCurrentItem(0);\r\n        }\r\n    }\r\n    public void pShowDatePickerDialog() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        DatePickerFragment datePickerFragment = new DatePickerFragment(cInventoryorderLine.currentInventoryOrderLine.presetValueObl);\r\n        datePickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTDATEFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mHandleArticleScan(cBarcodeScan pvBarcodeScan){\r\n        amountHandledBln = true;\r\n        if (!mCheckAllPropertysHandledBln()){\r\n            return;\r\n        }\r\n\r\n        //Keep the scan, so BIN activity can handle it\r\n        InventoryorderBinActivity.barcodeScanToHandle = pvBarcodeScan;\r\n\r\n        this.mHandleDone();\r\n    }\r\n\r\n    private void mSetCloseListener() {\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                amountHandledBln = true;\r\n                if (!mCheckAllPropertysHandledBln()){\r\n                    return;\r\n                }\r\n                pHandled();\r\n            }\r\n        });\r\n    }\r\n\r\n    private boolean mCheckAllPropertysHandledBln(){\r\n\r\n        if (!this.amountHandledBln){\r\n            return false;\r\n        }\r\n\r\n        for (cLineProperty inputPickorderLineProperty : cInventoryorderLine.currentInventoryOrderLine.linePropertyInputObl()){\r\n            if (!inputPickorderLineProperty.getIsRequiredBln()){\r\n                continue;\r\n            }\r\n            double quantityDbl = 0.0;\r\n            ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(inputPickorderLineProperty.getPropertyCodeStr());\r\n            for (cLinePropertyValue linePropertyValue : loopList ) {\r\n                quantityDbl += linePropertyValue.getQuantityDbl();\r\n            }\r\n            if (quantityDbl != this.getQuantityHandledDbl()){\r\n                this.itemPropertyTabLayout.selectTab(this.itemPropertyTabLayout.getTabAt(this.titleObl.indexOf(inputPickorderLineProperty.getPropertyCodeStr())));\r\n                cUserInterface.pDoNope(itemPropertyTabLayout, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.itemPropertyTabLayout, cAppExtension.activity.getString(R.string.message_fill_all_properties),R.raw.headsupsound,false);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void mSetTabLayoutListener(){\r\n        this.itemPropertyTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                amountHandledBln = tab.getPosition() > 0;\r\n                itemPropertyViewpager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetHeaderListener() {\r\n\r\n        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mScrollToBottom();\r\n            }\r\n        });\r\n\r\n        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View view) {\r\n                mScrollToTop();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mScrollToTop() {\r\n    }\r\n\r\n    private void mScrollToBottom() {\r\n    }\r\n\r\n    private void mSetArticleInfo(){\r\n        this.articleDescriptionCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n        this.articleDescription2CompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());\r\n        this.articleItemCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());\r\n        this.articleBarcodeCompactText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeAndQuantityStr());\r\n\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.hasPropertysBln() || cInventoryorderLine.currentInventoryOrderLine.linePropertyNoInputObl() == null || cInventoryorderLine.currentInventoryOrderLine.linePropertyNoInputObl().size() == 0) {\r\n            this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n        }\r\n        else {\r\n            this.imageButtonNoInputPropertys.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private  void mSetQuantityText() {\r\n        String quantityStr ;\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl() > 0) {\r\n            quantityStr =   (int)this.getQuantityHandledDbl() + \"/\" +  cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl());\r\n        }else {\r\n            quantityStr =   cText.pIntToStringStr( (int)this.getQuantityHandledDbl());\r\n        }\r\n\r\n        this.quantityCompactText.setText(quantityStr);\r\n    }\r\n\r\n    private  void mShowHideOKButton() {\r\n\r\n        if (this.getQuantityHandledDbl() == 0) {\r\n            this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n\r\n    }\r\n\r\n    public   void pTryToChangeQuantity() {\r\n\r\n        if (this.amountHandledBln){\r\n            return;\r\n        }\r\n        double newQuantityDbl;\r\n\r\n        newQuantityDbl = this.getQuantityHandledDbl();\r\n\r\n        if (newQuantityDbl <= 0) {\r\n            newQuantityDbl = 0;\r\n        }\r\n\r\n        //Set the new quantityDbl and show in Activity\r\n\r\n        cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),\r\n                                                                  cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );\r\n\r\n        cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = newQuantityDbl;\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  newQuantityDbl;\r\n\r\n    }\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, (int) cLinePropertyValue.currentLinePropertyValue.getQuantityDbl());\r\n        double availableDbl = 0.0;\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl() != 0){\r\n            availableDbl  = cInventoryorderLine.currentInventoryOrderLine.getQuantityDbl();\r\n            ArrayList<cLinePropertyValue> loopList = localItemPropertySortObl().get(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr());\r\n\r\n            for (cLinePropertyValue linePropertyValue : loopList ) {\r\n                availableDbl -= linePropertyValue.getQuantityDbl();\r\n            }\r\n        }   else {\r\n            availableDbl = 999;\r\n        }\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, availableDbl);\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mShowTextInputFragment() {\r\n        if (cLinePropertyValue.currentLinePropertyValue == null){\r\n            return;\r\n        }\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment(cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase());\r\n        itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n    private  void mStartInventoryBINActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        this.mResetCurrents();\r\n        InventoryorderBinActivity.busyBln = false;\r\n\r\n        final Intent intent = new Intent(cAppExtension.context, InventoryorderBinActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        cAppExtension.activity.finish();\r\n    }\r\n\r\n\r\n    private void mSetNoInputPropertyListener() {\r\n        this.imageButtonNoInputPropertys.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowItemPropertyNoInputFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mShowItemPropertyNoInputFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        ItemPropertyNoInputFragment itemPropertyNoInputFragment = new ItemPropertyNoInputFragment();\r\n        itemPropertyNoInputFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.ITEMPROPERTYVALUENOINPUTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private void mBuildAndFillTabs() {\r\n        ArrayList<Fragment> fragments = new ArrayList<>();\r\n\r\n        this.titleObl = new ArrayList<>();\r\n        for (Map.Entry<String, ArrayList<cLinePropertyValue>> itemPropertyEntry :  this.localItemPropertySortObl().entrySet()) {\r\n\r\n\r\n            this.itemPropertyTabLayout.addTab(this.itemPropertyTabLayout.newTab());\r\n\r\n            DynamicItemPropertyFragment dynamicItemPropertyFragment = new DynamicItemPropertyFragment(itemPropertyEntry.getValue());\r\n            fragments.add(dynamicItemPropertyFragment);\r\n\r\n            this.titleObl.add(itemPropertyEntry.getKey());\r\n        }\r\n\r\n        ItemPropertyPagerAdapter itemPropertyPagerAdapter = new ItemPropertyPagerAdapter(fragments, this.titleObl);\r\n        this.itemPropertyViewpager.setAdapter(itemPropertyPagerAdapter);\r\n        this.itemPropertyTabLayout.setupWithViewPager(itemPropertyViewpager);\r\n    }\r\n\r\n    private  void mHandleDone() {\r\n\r\n        //Try to save the line to the database\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pSaveLineViaWebserviceBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_line_save_failed),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        //Change quantityDbl handled in database\r\n        cInventoryorderLine.currentInventoryOrderLine.pUpdateQuantityInDatabase();\r\n\r\n        cUserInterface.pHideGettingData();\r\n\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    private void mResetCurrents(){\r\n        cInventoryorderLine.currentInventoryOrderLine = null;\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = null;\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode = null;\r\n    }\r\n\r\n    private void mShowAcceptFragment(){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        String acceptStr = cAppExtension.activity.getString(R.string.message_accept_line);\r\n        String rejectStr = cAppExtension.activity.getString(R.string.message_cancel_line);\r\n\r\n        if (BuildConfig.FLAVOR.toUpperCase().equalsIgnoreCase(\"BMN\")) {\r\n            acceptStr =  cAppExtension.activity.getString(R.string.message_yes);\r\n            rejectStr = cAppExtension.activity.getString(R.string.message_no);\r\n        }\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_orderlinebusy_header),\r\n                cAppExtension.activity.getString(R.string.message_orderlinebusy_text),\r\n                rejectStr, acceptStr, false);\r\n        acceptRejectFragment.setCancelable(true);\r\n\r\n        runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    //End Region Private Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryLinePropertyInputActivity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryLinePropertyInputActivity.java	(date 1620825912395)
@@ -32,11 +32,13 @@
 import ICS.cAppExtension;
 import SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;
 import SSU_WHS.General.cPublicDefinitions;
+import SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;
 import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
 import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
 import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
 import SSU_WHS.LineItemProperty.LineProperty.cLineProperty;
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
+import SSU_WHS.Receive.ReceiveSummaryLine.cReceiveorderSummaryLine;
 import nl.icsvertex.scansuite.BuildConfig;
 import nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectPropertyFragment;
@@ -533,6 +535,8 @@
     }
 
     private void mSetArticleInfo(){
+        cLinePropertyValue.quantityPerUnitOfMeasureDbl = cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl();
+
         this.articleDescriptionCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());
         this.articleDescription2CompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());
         this.articleItemCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());
@@ -619,7 +623,7 @@
             return;
         }
         cUserInterface.pCheckAndCloseOpenDialogs();
-        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment(cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase());
+        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment(cLinePropertyValue.currentLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase(), cInventoryorderLine.currentInventoryOrderLine.presetValueObl);
         itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);
     }
 
@@ -677,6 +681,25 @@
 
     private  void mHandleDone() {
 
+        cUserInterface.pShowGettingData();
+
+        new Thread(new Runnable() {
+            public void run() {
+                mSendScans();
+            }
+        }).start();
+
+    }
+
+    private void mSendScans() {
+
+        //If internet is not connected
+        if (!cConnection.isInternetConnectedBln()) {
+            //could not send line, let user know but answer succes so user can go to next line
+            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line_no_connection), null);
+            return;
+        }
+
         //Try to save the line to the database
         if (!cInventoryorderLine.currentInventoryOrderLine.pSaveLineViaWebserviceBln()) {
             cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_line_save_failed),"",true,true);
@@ -685,10 +708,8 @@
 
         //Change quantityDbl handled in database
         cInventoryorderLine.currentInventoryOrderLine.pUpdateQuantityInDatabase();
-
-        cUserInterface.pHideGettingData();
-
         this.mStartInventoryBINActivity();
+
     }
 
     private void mResetCurrents(){
Index: app/src/main/res/layout/fragment_itemproperty_no_input.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"0dp\"\r\n    android:layout_height=\"0dp\"\r\n    app:layout_constraintTop_toTopOf=\"parent\"\r\n    app:layout_constraintEnd_toEndOf=\"parent\"\r\n    app:layout_constraintStart_toStartOf=\"parent\"\r\n    app:layout_constraintBottom_toBottomOf=\"parent\"\r\n    >\r\n    <include layout=\"@layout/toolbar_default\" />\r\n    <include layout=\"@layout/default_articleinfo_compact\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"@dimen/default_margin\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/toolbar\"\r\n        />\r\n    <com.google.android.material.tabs.TabLayout\r\n        android:id=\"@+id/itemPropertyTabLayout\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/articleInfoCompactContainer\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintBottom_toTopOf=\"@id/buttonOK\"\r\n        />\r\n    <androidx.viewpager.widget.ViewPager\r\n        android:id=\"@+id/itemPropertyViewpager\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/itemPropertyTabLayout\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        />\r\n    <Button\r\n        android:id=\"@+id/buttonOK\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        style=\"@style/Widget.AppCompat.Button.ButtonBar.AlertDialog\"\r\n        android:text=\"@string/button_ok\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_itemproperty_no_input.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/res/layout/fragment_itemproperty_no_input.xml	(date 1621408105451)
@@ -15,23 +15,20 @@
         android:layout_margin="@dimen/default_margin"
         app:layout_constraintTop_toBottomOf="@id/toolbar"
         />
-    <com.google.android.material.tabs.TabLayout
-        android:id="@+id/itemPropertyTabLayout"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        app:layout_constraintTop_toTopOf="parent"
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/itemPropertyRecyclerview"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_marginBottom="8dp"
+        android:layout_marginEnd="8dp"
+        android:layout_marginStart="8dp"
+        android:layout_marginTop="24dp"
+        android:scrollbars="vertical"
         app:layout_constraintTop_toBottomOf="@id/articleInfoCompactContainer"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintBottom_toTopOf="@id/buttonOK"
         />
-    <androidx.viewpager.widget.ViewPager
-        android:id="@+id/itemPropertyViewpager"
-        android:layout_width="match_parent"
-        android:layout_height="0dp"
-        app:layout_constraintTop_toBottomOf="@id/itemPropertyTabLayout"
-        app:layout_constraintBottom_toBottomOf="parent"
-        />
     <Button
         android:id="@+id/buttonOK"
         android:layout_width="wrap_content"
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/CreateInventoryActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Inventory;\r\n\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.InputFilter;\r\nimport android.view.KeyEvent;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\n\r\nimport com.google.android.material.switchmaterial.SwitchMaterial;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class CreateInventoryActivity  extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Private Properties\r\n\r\n    private  ConstraintLayout createInventoryContainer;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private Spinner spinner;\r\n\r\n    private  EditText editTextDocument;\r\n    private SwitchMaterial checkBarcodesSwitch;\r\n    private  Button createButton;\r\n    private  Button cancelButton;\r\n    //End Region private Properties\r\n\r\n    //Region Constructor\r\n    public CreateInventoryActivity() {\r\n    }\r\n    //End Region Constructor\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_create_inventory_order);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mStartOrderSelectActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        if (pvMenuItem.getItemId() == android.R.id.home) {\r\n            this.mStartOrderSelectActivity();\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.create_inventory));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n            this.toolbarImage = findViewById(R.id.toolbarImage);\r\n            this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n            this.createInventoryContainer = findViewById(R.id.createInventoryContainer);\r\n            this.spinner = findViewById(R.id.stockownerSpinner);\r\n            this.editTextDocument = findViewById(R.id.editTextDocument);\r\n            this.checkBarcodesSwitch = findViewById(R.id.checkBarcodesSwitch);\r\n            this.createButton = findViewById(R.id.createButton);\r\n            this.cancelButton = findViewById(R.id.cancelButton);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_inventory);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        InputFilter[] filterArray = new InputFilter[1];\r\n        filterArray[0] = new InputFilter.LengthFilter(50);\r\n\r\n        this.mShowStockOwnerSpinner();\r\n        this.editTextDocument.setFilters(filterArray);\r\n        cUserInterface.pShowKeyboard(this.editTextDocument);\r\n\r\n        if (!cSetting.INV_BARCODE_CHECK()) {\r\n            this.checkBarcodesSwitch.setVisibility(View.GONE);\r\n        }\r\n        else{\r\n            this.checkBarcodesSwitch.setChecked(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetCreateListener();\r\n        this.mSetCancelListener();\r\n        this.mSetEditorActionListener();\r\n        this.mSetStockOwnerSpinnerListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n              mStartOrderSelectActivity();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetCreateListener() {\r\n        this.createButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n                mHandleCreateOrder();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        String barcodeWithoutPrefixStr;\r\n\r\n        //No prefix\r\n        if (!cRegex.pHasPrefix(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            this.editTextDocument.setText(pvBarcodeScan.getBarcodeOriginalStr());\r\n            this.createButton.performClick();\r\n            return;\r\n        }\r\n\r\n        boolean foundBln = false;\r\n\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.DOCUMENT)) {\r\n            foundBln = true;\r\n        }\r\n\r\n        //has prefix, is DOCUMENT\r\n        if (foundBln) {\r\n            barcodeWithoutPrefixStr = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n            this.editTextDocument.setText(barcodeWithoutPrefixStr);\r\n            this.createButton.performClick();\r\n        }\r\n        else {\r\n            //has prefix, isn't DOCUMENT\r\n            cUserInterface.pDoNope(createInventoryContainer, true, true);\r\n        }\r\n    }\r\n\r\n    private void mSetEditorActionListener() {\r\n        this.editTextDocument.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\r\n                if (i == EditorInfo.IME_ACTION_DONE || i == EditorInfo.IME_ACTION_GO ) {\r\n                    createButton.callOnClick();\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mHandleCreateOrder(){\r\n\r\n        cResult hulpResult;\r\n\r\n        //Try to create the order\r\n        if (!this.mTryToCreateOrderBln()) {\r\n            return;\r\n        }\r\n\r\n        //Try to lock the order\r\n        if (!this.mTryToLockOrderBln()) {\r\n            return;\r\n        }\r\n\r\n        InventoryorderSelectActivity.startedViaMenuBln = false;\r\n\r\n        //Delete the detail, so we can get them from the webservice\r\n        cInventoryorder.currentInventoryOrder.pDeleteDetails();\r\n\r\n        hulpResult = cInventoryorder.currentInventoryOrder.pGetOrderDetailsRst();\r\n        if (!hulpResult.resultBln) {\r\n            cUserInterface.pDoExplodingScreen((hulpResult.messagesStr()),\"\", false, false);\r\n            return;\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // If everything went well, then start Lines Activity\r\n                mShowInventoryorderBinsActivity();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private  boolean mTryToCreateOrderBln(){\r\n\r\n        Boolean resultBln =  cInventoryorder.pCreateInventoryOrderViaWebserviceBln((this.editTextDocument.getText().toString()), this.checkBarcodesSwitch.isChecked());\r\n        if (!resultBln) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_couldnt_create_order),\"\", true, true);\r\n            return  false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  boolean mTryToLockOrderBln(){\r\n\r\n        cResult hulpResult;\r\n        hulpResult = cInventoryorder.currentInventoryOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Inventory, cWarehouseorder.WorkflowInventoryStepEnu.Inventory);\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown ) {\r\n            cUserInterface.pDoExplodingScreen((hulpResult.messagesStr()),\"\", false, false);\r\n            return  false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mShowInventoryorderBinsActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        Intent intent = new Intent(cAppExtension.context, InventoryorderBinsActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n       cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mStartOrderSelectActivity() {\r\n        Intent intent = new Intent(cAppExtension.context, InventoryorderSelectActivity.class);\r\n        InventoryorderSelectActivity.startedViaMenuBln = false;\r\n        cAppExtension.activity.startActivity(intent);\r\n    }\r\n    private void mShowStockOwnerSpinner() {\r\n\r\n        if (cStockOwner.allStockOwnerObl  == null || cStockOwner.allStockOwnerObl.size() == 0) {\r\n            this.spinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.spinner.setVisibility(View.VISIBLE);\r\n        this.spinner.setVisibility(View.VISIBLE);\r\n\r\n        this.mFillStockOwnerSpinner();\r\n    }\r\n    private void mFillStockOwnerSpinner() {\r\n\r\n        if (cStockOwner.allStockOwnerObl == null ||  cStockOwner.allStockOwnerObl.size() <= 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> stockOwnerObl = new ArrayList<>();\r\n\r\n        if (cUser.currentUser.currentBranch.stockOwnerObl().size() >= 1) {\r\n            for (cStockOwner stockOwner :cUser.currentUser.currentBranch.stockOwnerObl() ) {\r\n                stockOwnerObl.add(stockOwner.getDescriptionStr());\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (cStockOwner stockOwner :cStockOwner.allStockOwnerObl ) {\r\n                stockOwnerObl.add(stockOwner.getDescriptionStr());\r\n            }\r\n        }\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                stockOwnerObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.spinner.setAdapter(adapter);\r\n        if (cUser.currentUser.currentStockOwner != null)\r\n        { this.spinner.setSelection(adapter.getPosition(cUser.currentUser.currentStockOwner.getDescriptionStr()));}\r\n    }\r\n    private void mSetStockOwnerSpinnerListener() {\r\n\r\n        this.spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                cUser.currentUser.currentStockOwner = cStockOwner.pGetStockOwnerByDescriptionStr(spinner.getSelectedItem().toString());\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/CreateInventoryActivity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/CreateInventoryActivity.java	(date 1620293966806)
@@ -198,7 +198,15 @@
         this.createButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View pvView) {
-                mHandleCreateOrder();
+                cUserInterface.pShowGettingData();
+                Runnable runnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        mHandleCreateOrder();
+                    }
+                };
+                Thread createOrder = new Thread(runnable);
+                createOrder.start();
             }
         });
     }
@@ -237,6 +245,7 @@
             @Override
             public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                 if (i == EditorInfo.IME_ACTION_DONE || i == EditorInfo.IME_ACTION_GO ) {
+                    cUserInterface.pHideKeyboard();
                     createButton.callOnClick();
                 }
                 return true;
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Inventory;\r\n\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.InputType;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class InventoryArticleActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    //End Region Public Properties\r\n\r\n    //Region Private\r\n\r\n    private  ConstraintLayout inventoryArticleDetailContainer;\r\n\r\n    private Toolbar toolbar;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n    private  TextView articleDescriptionText;\r\n    private  TextView articleDescription2Text;\r\n    private  TextView articleItemText;\r\n    private  TextView articleBarcodeText;\r\n    private  ImageView articleThumbImageView;\r\n\r\n    private TextView binText;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n\r\n    private  int inventoryCounterMinusHelperInt;\r\n    private  int inventoryCounterPlusHelperInt;\r\n    private  Handler minusHandler;\r\n    private  Handler plusHandler;\r\n\r\n    private  ImageView imageButtonDone;\r\n    private  ImageButton imageButtonBarcode;\r\n    private ImageView imageButtonNoInputPropertys;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public InventoryArticleActivity() {\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_inventoryarticle);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n            super.onPause();\r\n\r\n            if (cAppExtension.activity instanceof  InventoryArticleActivity) {\r\n                cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            }\r\n             LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_intakeactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n\r\n//        invalidateOptionsMenu();\r\n\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(true);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mStartInventoryBINActivity();\r\n                return true;\r\n\r\n            case R.id.item_print_item:\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.message_scan_article));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.inventoryArticleDetailContainer = findViewById(R.id.inventoryArticleDetailContainer);\r\n\r\n        this.toolbar =  findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.binText = findViewById(R.id.binText);\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_inventory);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        String subTitleStr = cInventoryorder.currentInventoryOrder.getOrderNumberStr();\r\n        this.toolbarSubTitle.setText(subTitleStr);\r\n        this.toolbarSubTitle.setSelected(true);\r\n\r\n        setSupportActionBar(this.toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInvAmountManualBln()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        this.inventoryCounterPlusHelperInt = 0;\r\n        this. inventoryCounterMinusHelperInt = 0;\r\n\r\n        this.articleDescriptionText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n        this.articleItemText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());\r\n\r\n        this.binText.setText(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n\r\n        this.mShowQuantityInfo();\r\n        this.mShowArticleImage();\r\n        this.mShowBarcodeInfo();\r\n        this.mHideArticleInfo();\r\n\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n       this.mSetDoneListener();\r\n\r\n        if (cSetting.INV_AMOUNT_MANUAL()) {\r\n            this.mSetNumberListener();\r\n            this.mSetImageButtonBarcodeListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(final cBarcodeScan pvBarcodeScan){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        //Only ARTICLE scans are allowed\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n            mDoUnknownScan(cAppExtension.context.getString(R.string.error_article_scan_mandatory));\r\n            return;\r\n        }\r\n\r\n        //Check if the scanned value belongs to this line\r\n        if (! cInventoryorder.currentInventoryOrder.pCheckBarcodeWithLineBarcodesBln(pvBarcodeScan)) {\r\n\r\n            //Keep the scan, so BIN activity can handle it\r\n            InventoryorderBinActivity.barcodeScanToHandle = pvBarcodeScan;\r\n\r\n            //Close this activity, we are done with the current article\r\n            this.mHandleDone();\r\n           return;\r\n        }\r\n\r\n\r\n\r\n\r\n        this.mShowBarcodeInfo();\r\n\r\n        //Try to raise quantityDbl\r\n        this.mTryToChangeInventoryQuantity(true, false,cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() );\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mTryToChangeInventoryQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n\r\n                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),\r\n                                                                          cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );\r\n\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n            } else {\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;\r\n            }\r\n\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n            return;\r\n        }\r\n\r\n        //negative\r\n\r\n        //Check if value already is zero\r\n        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {\r\n\r\n            //If we have a decimal, correct it to zero\r\n            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {\r\n                pvAmountDbl = 0;\r\n                pvAmountFixedBln = true;\r\n\r\n            } else {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (pvAmountDbl < 0) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n        if (pvAmountFixedBln) {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n        }else {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;\r\n        }\r\n\r\n        //Change quantityDbl in activity\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n    }\r\n\r\n    private  void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cInventoryorderLine.currentInventoryOrderLine.articleImage == null || cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap());\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo() {\r\n\r\n        this.quantityText.setImeOptions(EditorInfo.IME_ACTION_DONE);\r\n        this.quantityText.setSelectAllOnFocus(true);\r\n        this.quantityText.requestFocus();\r\n        this.quantityText.setSingleLine();\r\n        this.quantityText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_TEXT_VARIATION_NORMAL);\r\n        this.quantityText.setCursorVisible(false);\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n        this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (!cSetting.INV_AMOUNT_MANUAL()) {\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n            cUserInterface.pDoNope(this.quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() > 1) {\r\n\r\n            //Try to switch to another barcode for the same article, so the user doesn't have to manually\r\n            cInventoryorderBarcode inventoryorderBarcode = cInventoryorderBarcode.getSingleQuantityBarcodeForItemAndVariant(cInventoryorderBarcode.currentInventoryOrderBarcode);\r\n            if (inventoryorderBarcode != null) {\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n            }\r\n            else\r\n            {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n\r\n    private  void mHandleDone() {\r\n\r\n        //Try to save the line to the database\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pSaveLineViaWebserviceBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_line_save_failed),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        //Change quantityDbl handled in database\r\n        cInventoryorderLine.currentInventoryOrderLine.pUpdateQuantityInDatabase();\r\n\r\n        cUserInterface.pHideGettingData();\r\n        this.mResetCurrents();\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    private void mDoUnknownScan(String pvErrorMessageStr) {\r\n        cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer,pvErrorMessageStr,null,true);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(this.inventoryArticleDetailContainer);\r\n        constraintSetSpace.connect(this.articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(this.inventoryArticleDetailContainer);\r\n\r\n    }\r\n\r\n    private  void mShowBarcodeInfo(){\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode != null) {\r\n            this.articleBarcodeText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getUnitOfMeasureInfoStr());\r\n        } else {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.message_unknown_barcode));\r\n        }\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl() == null || cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 1) {\r\n                    pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLine.currentInventoryOrderLine.barcodesObl().get(0).getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEFRAGMENT_LIST_TAG);\r\n    }\r\n\r\n    private void mStartInventoryBINActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        InventoryorderBinActivity.busyBln = false;\r\n\r\n        final Intent intent = new Intent(cAppExtension.context, InventoryorderBinActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n            cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mResetCurrents(){\r\n        cInventoryorderLine.currentInventoryOrderLine = null;\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = null;\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode = null;\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityHandledDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,99999);\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    inventoryCounterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n                mTryToChangeInventoryQuantity(true, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    inventoryCounterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n                mTryToChangeInventoryQuantity(false, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mSetDoneListener(){\r\n\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mHandleDone();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n        this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n    }\r\n\r\n\r\n    //End Region Private Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(date 1620293333981)
@@ -33,6 +33,8 @@
 
 import com.google.android.material.navigation.NavigationView;
 
+import java.util.ArrayList;
+
 import ICS.Interfaces.iICSDefaultActivity;
 import ICS.Utils.Scanning.cBarcodeScan;
 import ICS.Utils.cText;
@@ -48,6 +50,7 @@
 import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
 import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
 import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
+import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import SSU_WHS.Picken.PickorderLines.cPickorderLine;
 import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
 import nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;
Index: app/src/main/res/layout/fragment_itemstock.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"0dp\"\r\n    android:layout_height=\"0dp\"\r\n    app:layout_constraintTop_toTopOf=\"parent\"\r\n    app:layout_constraintEnd_toEndOf=\"parent\"\r\n    app:layout_constraintStart_toStartOf=\"parent\"\r\n    app:layout_constraintBottom_toBottomOf=\"parent\"\r\n    android:padding=\"8dp\"\r\n    android:id=\"@+id/itemStockContainer\"\r\n    >\r\n    <TextView\r\n        android:id=\"@+id/textViewItem\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textSize=\"@dimen/textsize_big\"\r\n        android:textColor=\"@color/colorTextDarkest\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/stockRecyclerview\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:layout_marginTop=\"24dp\"\r\n        android:layout_marginEnd=\"8dp\"\r\n        android:scrollbars=\"vertical\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/textViewItem\"\r\n        app:layout_constraintBottom_toTopOf=\"@id/buttonOk\" />\r\n    <Button\r\n        android:id=\"@+id/buttonOk\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        style=\"@style/Widget.AppCompat.Button.ButtonBar.AlertDialog\"\r\n        android:text=\"@string/button_ok\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_itemstock.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/res/layout/fragment_itemstock.xml	(date 1620309046716)
@@ -20,7 +20,17 @@
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintEnd_toEndOf="parent"
         />
-
+    <ProgressBar
+        android:id="@+id/progressBar"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/default_margin"
+        android:indeterminate="true"
+        android:progressDrawable="@drawable/ic_progressbar"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/textViewItem"
+        />
     <androidx.recyclerview.widget.RecyclerView
         android:id="@+id/stockRecyclerview"
         android:layout_width="match_parent"
@@ -41,4 +51,5 @@
         android:text="@string/button_ok"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toEndOf="parent"/>
+
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout-v21/fragment_binitems.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"0dp\"\r\n    android:layout_height=\"0dp\"\r\n    app:layout_constraintTop_toTopOf=\"parent\"\r\n    app:layout_constraintEnd_toEndOf=\"parent\"\r\n    app:layout_constraintStart_toStartOf=\"parent\"\r\n    app:layout_constraintBottom_toBottomOf=\"parent\"\r\n    android:padding=\"8dp\"\r\n    android:id=\"@+id/binItemsContainer\"\r\n    >\r\n    <TextView\r\n        android:id=\"@+id/textViewBIN\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textSize=\"@dimen/textsize_big\"\r\n        android:textColor=\"@color/colorTextDarkest\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        android:id=\"@+id/binRecyclerview\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:layout_marginTop=\"24dp\"\r\n        android:layout_marginEnd=\"8dp\"\r\n        android:scrollbars=\"vertical\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/textViewBIN\"\r\n        app:layout_constraintBottom_toTopOf=\"@id/buttonOk\"/>\r\n    <Button\r\n        android:id=\"@+id/buttonOk\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        style=\"@style/Widget.AppCompat.Button.ButtonBar.AlertDialog\"\r\n        android:text=\"@string/button_ok\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout-v21/fragment_binitems.xml	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/res/layout-v21/fragment_binitems.xml	(date 1620309046779)
@@ -20,7 +20,17 @@
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintEnd_toEndOf="parent"
         />
-
+    <ProgressBar
+        android:id="@+id/progressBar"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/default_margin"
+        android:indeterminate="true"
+        android:progressDrawable="@drawable/ic_progressbar"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/textViewBIN"
+        />
     <androidx.recyclerview.widget.RecyclerView
         app:layout_constraintBottom_toBottomOf="parent"
         android:id="@+id/binRecyclerview"
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/BinItemsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BinItem.cBinItem;\r\nimport SSU_WHS.Basics.BinItem.cBinItemAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class BinItemsFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n    private RecyclerView binRecyclerview;\r\n\r\n    private cBinItemAdapter binItemAdapter;\r\n    private cBinItemAdapter getBinItemAdapter(){\r\n        if (this.binItemAdapter == null) {\r\n            this.binItemAdapter = new cBinItemAdapter();\r\n        }\r\n\r\n        return  binItemAdapter;\r\n    }\r\n\r\n    private String binCodeStr;\r\n    private TextView textViewBIN;\r\n    private Button buttonOk;\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public BinItemsFragment(String pvBinCodeStr) {\r\n        binCodeStr = pvBinCodeStr;\r\n    }\r\n    //End Region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(LayoutInflater pvInflater, ViewGroup pvContainer, Bundle pvSavedInstanceState) {\r\n        return pvInflater.inflate(R.layout.fragment_binitems, pvContainer);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View pvView, @Nullable Bundle pvSavedInstanceState) {\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cUserInterface.pEnableScanner();\r\n        cAppExtension.dialogFragment = this;\r\n\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = getResources().getDisplayMetrics().heightPixels - getResources().getDimensionPixelSize(R.dimen.default_double_margin);\r\n\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultFragment methods\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        if (getView() != null) {\r\n            this.textViewBIN = getView().findViewById(R.id.textViewBIN);\r\n            this.binRecyclerview = getView().findViewById(R.id.binRecyclerview);\r\n            this.buttonOk = getView().findViewById(R.id.buttonOk);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.textViewBIN.setText(this.binCodeStr);\r\n        this.mGetData();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetCloseListener();\r\n    }\r\n\r\n    //End Region iICSDefaultFragment methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mGetData() {\r\n\r\n        boolean webserviceResult;\r\n        webserviceResult = cBinItem.pGetBinItemsViaWebserviceBln(this.binCodeStr);\r\n        this.mShowNoLinesIcon(!webserviceResult);\r\n    }\r\n\r\n    private  void mShowNoLinesIcon(final Boolean pvShowBln){\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                cUserInterface.pHideGettingData();\r\n\r\n                if (pvShowBln) {\r\n\r\n                    binRecyclerview.setVisibility(View.INVISIBLE);\r\n\r\n                    FragmentTransaction fragmentTransaction = getChildFragmentManager().beginTransaction();\r\n                    NothingHereFragment fragment = new NothingHereFragment();\r\n                    fragmentTransaction.replace(R.id.binItemsContainer, fragment);\r\n                    fragmentTransaction.commit();\r\n                    return;\r\n\r\n\r\n                }\r\n\r\n                binRecyclerview.setVisibility(View.VISIBLE);\r\n                binRecyclerview.setHasFixedSize(false);\r\n                binRecyclerview.setAdapter(getBinItemAdapter());\r\n                binRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n\r\n                List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n                for (Fragment fragment : fragments) {\r\n                    if (fragment instanceof NothingHereFragment) {\r\n                        FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                        fragmentTransaction.remove(fragment);\r\n                        fragmentTransaction.commit();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetCloseListener() {\r\n        this.buttonOk.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                   dismiss();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/BinItemsFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/BinItemsFragment.java	(date 1620308892430)
@@ -6,6 +6,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
+import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
@@ -51,6 +52,7 @@
     private String binCodeStr;
     private TextView textViewBIN;
     private Button buttonOk;
+    private ProgressBar progressBar;
 
     //End Region Private Properties
 
@@ -113,6 +115,8 @@
             this.textViewBIN = getView().findViewById(R.id.textViewBIN);
             this.binRecyclerview = getView().findViewById(R.id.binRecyclerview);
             this.buttonOk = getView().findViewById(R.id.buttonOk);
+            this.progressBar = getView().findViewById(R.id.progressBar);
+            this.progressBar.setVisibility(View.INVISIBLE);
         }
 
     }
@@ -121,7 +125,15 @@
     @Override
     public void mFieldsInitialize() {
         this.textViewBIN.setText(this.binCodeStr);
-        this.mGetData();
+        this.progressBar.setVisibility(View.VISIBLE);
+        Runnable runnable = new Runnable() {
+            @Override
+            public void run() {
+                mGetData();
+            }
+        };
+        Thread getData = new Thread(runnable);
+        getData.start();
     }
 
     @Override
@@ -138,6 +150,7 @@
         boolean webserviceResult;
         webserviceResult = cBinItem.pGetBinItemsViaWebserviceBln(this.binCodeStr);
         this.mShowNoLinesIcon(!webserviceResult);
+        this.progressBar.setVisibility(View.INVISIBLE);
     }
 
     private  void mShowNoLinesIcon(final Boolean pvShowBln){
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemPropertyTextInputFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.text.method.PasswordTransformationMethod;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class ItemPropertyTextInputFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    private  TextView textHeader;\r\n    private  EditText inputText;\r\n    private  Button buttonCancel;\r\n    private  Button buttonOk;\r\n    private final String typeStr;\r\n\r\n\r\n    public ItemPropertyTextInputFragment(String pvTypeStr) {\r\n        this.typeStr = pvTypeStr;\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_itemproperty_text_input, container, false);\r\n\r\n    }\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cUserInterface.pShowKeyboard(this.inputText);\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        if (getView() != null) {\r\n            this.textHeader = getView().findViewById(R.id.textHeader);\r\n            this.inputText = getView().findViewById(R.id.inputText);\r\n            this.buttonCancel = getView().findViewById(R.id.buttonCancel);\r\n            this.buttonOk = getView().findViewById(R.id.buttonOk);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.inputText.setSelectAllOnFocus(true);\r\n        this.inputText.requestFocus();\r\n        this.inputText.setHint(cAppExtension.activity.getString(R.string.message_please_enter, cLinePropertyValue.currentLinePropertyValue.getItemProperty().getOmschrijvingStr().toLowerCase()));\r\n        this.textHeader.setText(cLinePropertyValue.currentLinePropertyValue.getItemProperty().getOmschrijvingStr());\r\n\r\n        if (this.typeStr.equals(\"DECIMAL\")){\r\n            this.inputText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_SIGNED| InputType.TYPE_NUMBER_FLAG_DECIMAL);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetCancelListener();\r\n        this.mSetOKListener();\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n        this.inputText.setText(pvBarcodeScan.getBarcodeOriginalStr());\r\n        mHandleOk();\r\n    }\r\n\r\n    private void mSetOKListener() {\r\n\r\n        this.buttonOk.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mHandleOk();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetCancelListener() {\r\n        this.buttonCancel.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n              dismiss();\r\n                }\r\n        });\r\n    }\r\n\r\n\r\n    private void mHandleOk() {\r\n        if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.pHandeManualAction(cBarcodeScan.pFakeScan(this.inputText.getText().toString()));\r\n            dismiss();\r\n        }\r\n        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity) cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.inputText.getText().toString()));\r\n            dismiss();\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity) cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.inputText.getText().toString()));\r\n            dismiss();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemPropertyTextInputFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ItemPropertyTextInputFragment.java	(date 1620825912378)
@@ -14,6 +14,8 @@
 import androidx.annotation.Nullable;
 import androidx.fragment.app.DialogFragment;
 
+import java.util.ArrayList;
+
 import ICS.Interfaces.iICSDefaultFragment;
 import ICS.Utils.Scanning.cBarcodeScan;
 import ICS.Utils.cRegex;
@@ -21,6 +23,8 @@
 import ICS.cAppExtension;
 import SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;
 import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;
+import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
+import nl.icsvertex.scansuite.Activities.Move.MoveLineItemPropertyActivity;
 import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
 import nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;
 import nl.icsvertex.scansuite.R;
@@ -32,11 +36,19 @@
     private  EditText inputText;
     private  Button buttonCancel;
     private  Button buttonOk;
+    private ArrayList<String> propertyObl;
     private final String typeStr;
 
 
-    public ItemPropertyTextInputFragment(String pvTypeStr) {
+    public ItemPropertyTextInputFragment(String pvTypeStr, ArrayList<cLinePropertyValue> pvLinePropertyValues) {
         this.typeStr = pvTypeStr;
+        if (pvLinePropertyValues != null){
+            this.propertyObl = new ArrayList<>();
+            for (cLinePropertyValue propertyValue : pvLinePropertyValues){
+                if(propertyValue.getPropertyCodeStr().equalsIgnoreCase(cLinePropertyValue.currentLinePropertyValue.getPropertyCodeStr())){
+                    this.propertyObl.add(propertyValue.getValueStr());}
+            }
+        }
     }
 
     @Override
@@ -142,6 +154,10 @@
 
 
     private void mHandleOk() {
+        if (!mCheckValueAllowedBln()){
+            return;
+        }
+
         if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {
             PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity) cAppExtension.activity;
             pickorderLineItemPropertyInputActvity.pHandeManualAction(cBarcodeScan.pFakeScan(this.inputText.getText().toString()));
@@ -157,5 +173,38 @@
             intakeOrderLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.inputText.getText().toString()));
             dismiss();
         }
+        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {
+            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity) cAppExtension.activity;
+            inventoryLinePropertyInputActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.inputText.getText().toString()));
+            dismiss();
+        }
+        if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+            MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity) cAppExtension.activity;
+            moveLineItemPropertyActivity.pHandeManualAction(cBarcodeScan.pFakeScan(this.inputText.getText().toString()));
+            dismiss();
+        }
+    }
+
+    private boolean mCheckValueAllowedBln(){
+        if (this.propertyObl == null || this.propertyObl.size() < 1){
+            return true;
+        }
+        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity){
+            return true;
+        }
+        //Check if allowed in activity
+        if (cAppExtension.activity instanceof MoveLineItemPropertyActivity){
+            return true;
+        }
+        for (String string: this.propertyObl) {
+            if (string.equalsIgnoreCase(this.inputText.getText().toString())){
+                return  true;
+            }
+        }
+
+        cUserInterface.pDoNope(this.inputText, true, true);
+        cUserInterface.pShowSnackbarMessage(this.buttonOk, cAppExtension.activity.getString(R.string.message_property_not_allowed),R.raw.headsupsound,false);
+
+        return false;
     }
 }
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ScanArticleFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.os.Bundle;\r\nimport android.text.InputFilter;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport nl.icsvertex.scansuite.Activities.General.MenuActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class ScanArticleFragment extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private TextView textViewScanArticleHeader;\r\n    private TextView textViewScanArticleText;\r\n    private EditText editTextScanArticle;\r\n    private Button scanArticleButton;\r\n    private Button cancelButton;\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    public ScanArticleFragment() {\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_scan_article, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment  = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        int width = getResources().getDisplayMetrics().widthPixels;\r\n        int height = WindowManager.LayoutParams.WRAP_CONTENT;\r\n        Objects.requireNonNull(Objects.requireNonNull(getDialog()).getWindow()).setLayout(width, height);\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n\r\n        cBarcodeScan.pRegisterBarcodeFragmentReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        if (getView() != null) {\r\n            this.textViewScanArticleHeader = getView().findViewById(R.id.textViewScanArticleHeader );\r\n            this.textViewScanArticleText = getView().findViewById(R.id.textViewScanArticleText);\r\n            this.editTextScanArticle = getView().findViewById(R.id.editTextScanArticle);\r\n            this.scanArticleButton = getView().findViewById(R.id.scanArticleButton);\r\n            this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.textViewScanArticleHeader.setText(R.string.scan_article_header_default);\r\n\r\n        InputFilter[] filterArray = new InputFilter[1];\r\n        filterArray[0] = new InputFilter.LengthFilter(20);\r\n        this.editTextScanArticle.setFilters(filterArray);\r\n        cUserInterface.pShowKeyboard(this.editTextScanArticle);\r\n        this.textViewScanArticleText.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetScanArticleListener();\r\n        this.mSetCancelListener();\r\n        this.mSetEditorActionListener();\r\n    }\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetScanArticleListener() {\r\n        this.scanArticleButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                if (editTextScanArticle.getText().toString().trim().isEmpty()) {\r\n                    cUserInterface.pDoNope(editTextScanArticle, true, true);\r\n                    return;\r\n                }\r\n\r\n               dismiss();\r\n\r\n                if (cAppExtension.activity instanceof MenuActivity) {\r\n                    MenuActivity menuActivity = (MenuActivity)cAppExtension.activity;\r\n                    menuActivity.pHandleHandleArticleScanned( cBarcodeScan.pFakeScan(editTextScanArticle.getText().toString()));\r\n\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Has prefix, so check if this is an\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n            cUserInterface.pDoNope(this.editTextScanArticle, true, true);\r\n            return;\r\n        }\r\n\r\n        //no prefix, fine\r\n        this.editTextScanArticle.setText(pvBarcodeScan.getBarcodeOriginalStr());\r\n        this.scanArticleButton.callOnClick();\r\n    }\r\n    private void mSetEditorActionListener() {\r\n        this.editTextScanArticle.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\r\n                if (i == EditorInfo.IME_ACTION_DONE || i == EditorInfo.IME_ACTION_GO ) {\r\n                    scanArticleButton.callOnClick();\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ScanArticleFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/ScanArticleFragment.java	(date 1620307877208)
@@ -152,6 +152,7 @@
                dismiss();
 
                 if (cAppExtension.activity instanceof MenuActivity) {
+                    cUserInterface.pHideKeyboard();
                     MenuActivity menuActivity = (MenuActivity)cAppExtension.activity;
                     menuActivity.pHandleHandleArticleScanned( cBarcodeScan.pFakeScan(editTextScanArticle.getText().toString()));
 
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectPropertyFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport ICS.Interfaces.iICSDefaultFragment;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Packaging.PackagingActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveorderLinePropertyInputActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class AcceptRejectPropertyFragment  extends DialogFragment implements iICSDefaultFragment {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private Button cancelButton;\r\n    private ImageView acceptImageView;\r\n    private  ImageView rejectImageView;\r\n    private TextView acceptRejectHeader;\r\n    private  TextView acceptRejectText;\r\n    private  TextView textReject;\r\n    private  TextView textAccept;\r\n\r\n    private final String  titleStr;\r\n    private final String  messageStr;\r\n    private final String  acceptStr;\r\n    private final String rejectStr;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public AcceptRejectPropertyFragment(String pvTitleStr, String pvMessageStr, String pvRejectStr, String pvAcceptStr) {\r\n        this.titleStr = pvTitleStr;\r\n        this.messageStr = pvMessageStr;\r\n\r\n        this.acceptStr = pvAcceptStr;\r\n        this.rejectStr = pvRejectStr;\r\n    }\r\n    //End Region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n    @Override\r\n    public View onCreateView(LayoutInflater pvInflater, ViewGroup pvViewGroup,\r\n                             Bundle pvSavedInstanceState) {\r\n\r\n        // Inflate the layout for this fragment\r\n        return pvInflater.inflate(R.layout.fragment_accept_reject, pvViewGroup, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        cAppExtension.dialogFragment = this;\r\n        this.mFragmentInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void mFragmentInitialize() {\r\n        this.mFindViews();\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        if (getView() != null) {\r\n            this.acceptImageView = getView().findViewById(R.id.acceptImageView);\r\n            this.rejectImageView = getView().findViewById(R.id.rejectImageView);\r\n            this.cancelButton = getView().findViewById(R.id.cancelButton);\r\n            this.textReject = getView().findViewById(R.id.textReject);\r\n            this.textAccept = getView().findViewById(R.id.textAccept);\r\n            this.acceptRejectHeader = getView().findViewById(R.id.textViewAcceptRejectHeader);\r\n            this.acceptRejectText = getView().findViewById(R.id.textViewAcceptRejectText);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                acceptRejectHeader.setText(titleStr);\r\n                acceptRejectText.setText(messageStr);\r\n                textReject.setText(rejectStr);\r\n                textAccept.setText(acceptStr);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetAcceptListener();\r\n        this.mSetRejectListener();\r\n        this.mSetCancelListener();\r\n    }\r\n    //End Region Default Methods\r\n\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetAcceptListener() {\r\n\r\n        this.acceptImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mAccept();\r\n            }\r\n        });\r\n\r\n        this.textAccept.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mAccept();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetRejectListener() {\r\n        this.rejectImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mReject();\r\n            }\r\n        });\r\n        this.textReject.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                mReject();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mAccept() {\r\n\r\n        if (cAppExtension.activity instanceof  PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.amountHandledBln = true;\r\n            pickorderLineItemPropertyInputActvity.pResetTab(false);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.amountHandledBln = true;\r\n            receiveorderLinePropertyInputActivity.pResetTab(false);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.amountHandledBln = true;\r\n            intakeOrderLinePropertyInputActivity.pResetTab(false);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof InventoryLinePropertyInputActivity) {\r\n            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;\r\n            inventoryLinePropertyInputActivity.amountHandledBln = true;\r\n            inventoryLinePropertyInputActivity.pResetTab(false);\r\n            this.dismiss();\r\n\r\n        }\r\n    }\r\n\r\n    private void mReject() {\r\n\r\n        if (cAppExtension.activity instanceof  PickorderLineItemPropertyInputActvity) {\r\n            PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n            pickorderLineItemPropertyInputActvity.amountHandledBln = false;\r\n            pickorderLineItemPropertyInputActvity.pResetTab(true);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof  ReceiveorderLinePropertyInputActivity) {\r\n            ReceiveorderLinePropertyInputActivity receiveorderLinePropertyInputActivity = (ReceiveorderLinePropertyInputActivity)cAppExtension.activity;\r\n            receiveorderLinePropertyInputActivity.amountHandledBln = false;\r\n            receiveorderLinePropertyInputActivity.pResetTab(true);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof  IntakeOrderLinePropertyInputActivity) {\r\n            IntakeOrderLinePropertyInputActivity intakeOrderLinePropertyInputActivity = (IntakeOrderLinePropertyInputActivity)cAppExtension.activity;\r\n            intakeOrderLinePropertyInputActivity.amountHandledBln = false;\r\n            intakeOrderLinePropertyInputActivity.pResetTab(true);\r\n            this.dismiss();\r\n\r\n        }\r\n        if (cAppExtension.activity instanceof  InventoryLinePropertyInputActivity) {\r\n            InventoryLinePropertyInputActivity inventoryLinePropertyInputActivity = (InventoryLinePropertyInputActivity)cAppExtension.activity;\r\n            inventoryLinePropertyInputActivity.amountHandledBln = false;\r\n            inventoryLinePropertyInputActivity.pResetTab(true);\r\n            this.dismiss();\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectPropertyFragment.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/AcceptRejectPropertyFragment.java	(date 1620720016839)
@@ -23,6 +23,7 @@
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryLinePropertyInputActivity;
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;
 import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;
+import nl.icsvertex.scansuite.Activities.Move.MoveLineItemPropertyActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;
 import nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;
@@ -211,6 +212,13 @@
             inventoryLinePropertyInputActivity.amountHandledBln = true;
             inventoryLinePropertyInputActivity.pResetTab(false);
             this.dismiss();
+
+        }
+        if (cAppExtension.activity instanceof MoveLineItemPropertyActivity) {
+            MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity)cAppExtension.activity;
+            moveLineItemPropertyActivity.amountHandledBln = true;
+            moveLineItemPropertyActivity.pResetTab(false);
+            this.dismiss();
 
         }
     }
@@ -243,6 +251,13 @@
             inventoryLinePropertyInputActivity.amountHandledBln = false;
             inventoryLinePropertyInputActivity.pResetTab(true);
             this.dismiss();
+
+        }
+        if (cAppExtension.activity instanceof  MoveLineItemPropertyActivity) {
+            MoveLineItemPropertyActivity moveLineItemPropertyActivity = (MoveLineItemPropertyActivity)cAppExtension.activity;
+            moveLineItemPropertyActivity.amountHandledBln = false;
+            moveLineItemPropertyActivity.pResetTab(true);
+            this.dismiss();
 
         }
     }
Index: app/src/main/java/SSU_WHS/Basics/ArticleProperty/cArticleProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.ArticleProperty;\r\n\r\nimport org.json.JSONObject;\r\nimport java.util.ArrayList;\r\n\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\n\r\npublic class cArticleProperty {\r\n    //Public Properties\r\n    public String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return itemNoStr;\r\n    }\r\n\r\n    public String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return variantCodeStr;\r\n    }\r\n\r\n    private final String propertyCodeStr;\r\n    public String getPropertyCodeStr() {return propertyCodeStr;}\r\n\r\n    public cItemProperty getItemProperty() {\r\n\r\n        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {\r\n            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {\r\n                return  itemProperty;\r\n            }\r\n        }\r\n        return  null;\r\n    }\r\n\r\n    private final Integer sortingSequenceNoInt;\r\n    public Integer getSortingSequenceNoInt() {return sortingSequenceNoInt;}\r\n\r\n    private final String inputWorkflowsStr;\r\n    public String getInputWorkflowsStr(){return inputWorkflowsStr;}\r\n\r\n    private final String requiredWorkFlowsStr;\r\n    public String getRequiredWorkFlowsStr() {return this.requiredWorkFlowsStr;}\r\n\r\n    public cArticleProperty (JSONObject pvJsonObject , cArticle pvArticle) {\r\n        cArticlePropertyEntity articlePropertyEntity = new cArticlePropertyEntity(pvJsonObject);\r\n\r\n        this.itemNoStr = pvArticle.getItemNoStr();\r\n        this.variantCodeStr = pvArticle.getVariantCodeStr();\r\n        this.propertyCodeStr = articlePropertyEntity.getPropertyCodeStr();\r\n        this.sortingSequenceNoInt = articlePropertyEntity.getSortingSequenceNoInt();\r\n        this.inputWorkflowsStr = articlePropertyEntity.getInputWorkflowsStr();\r\n        this.requiredWorkFlowsStr = articlePropertyEntity.getRequiredWorkFlowsStr();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/ArticleProperty/cArticleProperty.java	(revision 3c81935088de9f86a179129f04b9d0a2d43951cc)
+++ app/src/main/java/SSU_WHS/Basics/ArticleProperty/cArticleProperty.java	(date 1620817464338)
@@ -1,7 +1,9 @@
 package SSU_WHS.Basics.ArticleProperty;
 
 import org.json.JSONObject;
+
 import java.util.ArrayList;
+import java.util.Arrays;
 
 import SSU_WHS.Basics.Article.cArticle;
 import SSU_WHS.Basics.ItemProperty.cItemProperty;
@@ -41,9 +43,18 @@
     private final String inputWorkflowsStr;
     public String getInputWorkflowsStr(){return inputWorkflowsStr;}
 
+    public ArrayList<String> InputWorkflowObl(){
+        return new ArrayList<String>(Arrays.asList( getInputWorkflowsStr().split(";")));
+    }
+
     private final String requiredWorkFlowsStr;
     public String getRequiredWorkFlowsStr() {return this.requiredWorkFlowsStr;}
 
+    public ArrayList<String> RequiredWorkflowObl(){
+
+        return new ArrayList<String>(Arrays.asList( getRequiredWorkFlowsStr().split(";")));
+    }
+
     public cArticleProperty (JSONObject pvJsonObject , cArticle pvArticle) {
         cArticlePropertyEntity articlePropertyEntity = new cArticlePropertyEntity(pvJsonObject);
 
