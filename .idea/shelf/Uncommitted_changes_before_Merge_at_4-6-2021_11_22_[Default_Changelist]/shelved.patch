Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"nl.icsvertex.scansuite\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n\r\n    <application\r\n        android:name=\"ICS.cAppExtension\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"false\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        android:largeHeap=\"true\">\r\n        <provider\r\n            android:name=\".cGenericFileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n\r\n\r\n        <activity\r\n            android:name=\".Activities.General.MainDefaultActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.MenuActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.General.LoginActivity\"\r\n            android:launchMode=\"singleTask\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".Activities.General.LoginActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:launchMode=\"singleTask\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n\r\n        <activity\r\n            android:name=\".Activities.General.BarcodeInfoActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderPickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLineItemPropertyInputActvity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Pick.CreatePickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Pick.PickorderLinesGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Pick.PickorderPickGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSortActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.QualityControl.QualityControlLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.QualityControl.PickorderQCActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShipLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity\r\n            android:name=\".Activities.Inventory.CreateInventoryActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryArticleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryLinePropertyInputActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Receive.CreateReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.CreateIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.IntakeAndReceive.CreateIntakeOrReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMASLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderLinePropertyInputActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveOrderReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveorderLinePropertyInputActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Returns.ReturnorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.CreateReturnActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnArticleDetailActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Move.MoveorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.CreateMoveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineItemPropertyActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesPlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveMISinglepieceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveorderLinesPlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Packaging.PackagingActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.CreatePackAndShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSingleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipMultiActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:launchMode=\"singleTask\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <meta-data\r\n            android:name=\"io.fabric.ApiKey\"\r\n            android:value=\"0a3a15057e61fb1e84d5024bd01b5657d9a4c76e\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/AndroidManifest.xml	(date 1622788891805)
@@ -7,6 +7,7 @@
     <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
     <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.READ_PRIVILEGED_PHONE_STATE" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.VIBRATE" />
     <uses-permission android:name="android.permission.CAMERA" />
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Intake/IntakeorderMATLinesActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Intake;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.appcompat.widget.SwitchCompat;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLine;\r\nimport SSU_WHS.Intake.IntakeorderMATLineSummary.cIntakeorderMATSummaryLineAdapter;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class IntakeorderMATLinesActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    public static Fragment currentLineFragment;\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //Region Views\r\n\r\n    private TextView textViewChosenOrder;\r\n    private ImageView imageButtonComments;\r\n\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private ImageView imageViewStart;\r\n    private SearchView recyclerSearchView;\r\n    private ImageView closeButton;\r\n    private RecyclerView recyclerViewLines;\r\n\r\n    private SwitchCompat switchDeviations;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    public enum InputType {\r\n        UNKNOWN,\r\n        BIN,\r\n        ARTICLE\r\n    }\r\n\r\n    private InputType currentInputType = InputType.UNKNOWN;\r\n\r\n    private ImageView imageButtonCloseOrder;\r\n\r\n    private cIntakeorderMATSummaryLineAdapter intakeorderMATSummaryLineAdapter;\r\n    private cIntakeorderMATSummaryLineAdapter getIntakeorderMATSummaryLineAdapter(){\r\n        if (this.intakeorderMATSummaryLineAdapter == null) {\r\n            this.intakeorderMATSummaryLineAdapter = new cIntakeorderMATSummaryLineAdapter();\r\n        }\r\n\r\n        return  this.intakeorderMATSummaryLineAdapter;\r\n    }\r\n\r\n    //End Region Views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_intakeorder_lines);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        this.mActivityInitialize();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_intakeactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n\r\n//        invalidateOptionsMenu();\r\n\r\n        if (cSetting.GENERIC_PRINT_BINLABEL() && cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine != null){\r\n            MenuItem item_print_bin = pvMenu.findItem(R.id.item_print_bin);\r\n            item_print_bin.setVisible(true);\r\n        }\r\n\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL() && cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine != null){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(true);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_intakeorderlines));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        //Set listeners here, so click listeners only work after activity is shown\r\n        this.mSetListeners();\r\n\r\n        this.switchDeviations.setChecked(cIntakeorder.currentIntakeOrder.showDeviationsBln);\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n        this.textViewChosenOrder = findViewById(R.id.textViewChosenOrder);\r\n        this.imageButtonComments = findViewById(R.id.imageButtonComments);\r\n        this.recyclerSearchView = findViewById(R.id.recyclerSearchView);\r\n        this.closeButton =  this.recyclerSearchView.findViewById(R.id.search_close_btn);\r\n        this.recyclerViewLines = findViewById(R.id.recyclerViewLines);\r\n        this.imageViewStart = findViewById(R.id.imageViewStart);\r\n        this.switchDeviations = findViewById(R.id.switchDeviations);\r\n        this.imageButtonCloseOrder = findViewById(R.id.imageButtonCloseOrder);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_intake);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubTitle.setSelected(true);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        ViewCompat.setTransitionName(this.textViewChosenOrder, cPublicDefinitions.VIEW_CHOSEN_ORDER);\r\n        this.textViewChosenOrder.setText(cIntakeorder.currentIntakeOrder.getOrderNumberStr());\r\n        this.imageButtonCloseOrder.setVisibility(View.VISIBLE);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetRecyclerOnScrollListener();\r\n        this.mSetSearchListener();\r\n        this.mSetSearchCloseListener();\r\n        this.mSetShowCommentListener();\r\n        this.mSetStartLineListener();\r\n        this.mSetDeviationsListener();\r\n        this.mSetSendOrderListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        this.mShowComments();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n\r\n                this.pLeaveActivity();\r\n                return true;\r\n\r\n            case R.id.item_print_bin:\r\n                selectedFragment = new PrintBinLabelFragment();\r\n                break;\r\n\r\n            case R.id.item_print_item:\r\n                selectedFragment = new PrintItemLabelFragment();\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.pLeaveActivity();\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pIntakelineSelected(cIntakeorderMATSummaryLine pvIntakeorderMATSummaryLine) {\r\n        cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine = pvIntakeorderMATSummaryLine;\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan,\r\n                                   Boolean pvLineSelectedBln) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        cResult hulpResult;\r\n\r\n        //BIN button has been pressed, so we already have a current line\r\n        if (pvLineSelectedBln) {\r\n\r\n            //Clear current barcodeStr\r\n            cIntakeorderBarcode.currentIntakeOrderBarcode = null;\r\n            hulpResult = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.pSummaryLineBusyRst();\r\n            if (!hulpResult.resultBln) {\r\n                this.mStepFailed(hulpResult.messagesStr());\r\n                cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine = null;\r\n                return;\r\n            }\r\n\r\n            this.mStartStoreActivity();\r\n            return;\r\n        }\r\n\r\n        //Check if we have scanned a BIN and check if there are not handled linesInt for this BIN\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.BIN)) {\r\n\r\n            if (!cIntakeorder.currentIntakeOrder.isBINScanPossible()) {\r\n                //unknown scan\r\n                cIntakeorder.currentIntakeOrder.currentBin= null;\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.message_bin_not_allowed), pvBarcodeScan.getBarcodeOriginalStr());\r\n                return;\r\n            }\r\n\r\n            //Handle the BIN scan\r\n            hulpResult = this.mHandleBINScan(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()));\r\n\r\n            //Something went wrong, so show message and stop\r\n            if (!hulpResult.resultBln) {\r\n                this.mDoUnknownScan(hulpResult.messagesStr(), pvBarcodeScan.getBarcodeOriginalStr());\r\n                this.mFillRecycler(cIntakeorderMATSummaryLine.sortedMATSummaryLinesObl());\r\n                return;\r\n            }\r\n\r\n            //Hide the keyboard\r\n            cUserInterface.pHideKeyboard();\r\n\r\n            //Filter has been set in mHandleBINScan so we are donereturn;\r\n            return;\r\n        }\r\n\r\n        //Check if we have scanned an ARTICLE and check if there are not handled linesInt for this ARTICLE\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n\r\n\r\n\r\n            //Handle the ARTICLE scan\r\n            hulpResult = this.mHandleArticleScan(pvBarcodeScan);\r\n\r\n            //Something went wrong, so show message and stop\r\n            if (!hulpResult.resultBln) {\r\n                this.mDoUnknownScan(hulpResult.messagesStr(), pvBarcodeScan.getBarcodeOriginalStr());\r\n                this.mFillRecycler(cIntakeorderMATSummaryLine.sortedMATSummaryLinesObl());\r\n                return;\r\n            }\r\n\r\n            //Hide the keyboard\r\n            cUserInterface.pHideKeyboard();\r\n\r\n            //Filter has been set in mHandleArticleScan so we are done\r\n            return;\r\n\r\n        }\r\n\r\n        //unknown scan\r\n        this.mDoUnknownScan(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n    }\r\n\r\n    public void pDone() {\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleClose).start();\r\n\r\n    }\r\n\r\n    public void pLeaveActivity() {\r\n\r\n        cIntakeorder.currentIntakeOrder.pLockReleaseViaWebserviceBln();\r\n        this.mStartOrderSelectActivity();\r\n    }\r\n\r\n    public  void pSetToolBarTitleWithCounters(final String pvTextStr){\r\n\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            toolbarSubTitle.setText(pvTextStr);\r\n\r\n            //Close open dialogs, so keyboard will also close\r\n            cUserInterface.pHideKeyboard();\r\n\r\n            //Click to make even more sure that keyboard gets hidden\r\n            toolbarSubTitle.performClick();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    public void pStartLine(){\r\n        IntakeOrderIntakeActivity.handledViaPropertysBln = false;\r\n        cAppExtension.activity.runOnUiThread(() -> imageViewStart.performClick());\r\n    }\r\n\r\n    public  void pShowData(List<cIntakeorderMATSummaryLine> pvDataObl) {\r\n        this.mFillRecycler(pvDataObl);\r\n    }\r\n\r\n    public  void pPasswordSuccess() {\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        this.mShowCloseOrderDialog(cAppExtension.activity.getString(R.string.message_leave), cAppExtension.activity.getString(R.string.message_close));\r\n    }\r\n\r\n    public  void pPasswordCancelled() {\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private  cResult mHandleArticleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        String searchStr;\r\n        this.currentInputType = InputType.ARTICLE;\r\n\r\n        //Check if this is a barcodeStr we already know\r\n        cIntakeorderBarcode.currentIntakeOrderBarcode = cIntakeorder.currentIntakeOrder.pGetOrderBarcode(pvBarcodeScan);\r\n        if (cIntakeorderBarcode.currentIntakeOrderBarcode == null) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_unknown_barcode));\r\n            return result;\r\n        }\r\n\r\n        //Get all lines for this barcodeStr\r\n        if (cIntakeorderBarcode.currentIntakeOrderBarcode.linesObl().size() == 0) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_no_lines_for_this_barcode));\r\n            return result;\r\n        }\r\n\r\n        //Set the scanned barcodeStr, so we can raise quantity in next activity\r\n        cIntakeorder.currentIntakeOrder.intakeorderBarcodeScanned = cIntakeorderBarcode.currentIntakeOrderBarcode;\r\n\r\n        searchStr = cIntakeorderBarcode.currentIntakeOrderBarcode.getItemNoStr();\r\n\r\n        if (!cIntakeorderBarcode.currentIntakeOrderBarcode.getVariantCodeStr().isEmpty()) {\r\n            searchStr += ' ' + cIntakeorderBarcode.currentIntakeOrderBarcode.getVariantCodeStr();\r\n        }\r\n\r\n\r\n        this.closeButton.callOnClick();\r\n        this.currentInputType = InputType.ARTICLE;\r\n        this.recyclerSearchView.setQuery(searchStr, true);\r\n        this.recyclerSearchView.callOnClick();\r\n\r\n        //Article is known and also not handled, so everything is fine\r\n        this.currentInputType = InputType.UNKNOWN;\r\n        return result;\r\n    }\r\n\r\n    private cResult mHandleBINScan(String pvBinCodeStr) {\r\n\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        this.currentInputType = InputType.BIN;\r\n\r\n        //Get the current BIN\r\n        cIntakeorder.currentIntakeOrder.currentBin =  cUser.currentUser.currentBranch.pGetBinByCode(pvBinCodeStr);\r\n        if (  cIntakeorder.currentIntakeOrder.currentBin  == null) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_bin_unknown,pvBinCodeStr));\r\n            return result;\r\n        }\r\n\r\n        List<cIntakeorderMATSummaryLine> hulpObl = cIntakeorderMATSummaryLine.pGetSummaryLinesWithBINCode(cIntakeorder.currentIntakeOrder.currentBin.getBinCodeStr());\r\n\r\n        //If there are no lines for the current BIN, then refresh recycler\r\n        if ( hulpObl  == null ||   hulpObl.size() == 0) {\r\n            this.mDoUnknownScan(cAppExtension.activity.getString(R.string.message_no_lines_for_this_bin), pvBinCodeStr);\r\n            cIntakeorder.currentIntakeOrder.currentBin= null;\r\n            ReceiveLinesActivity.busyBln = false;\r\n            result.resultBln = true;\r\n\r\n            if (!cIntakeorder.currentIntakeOrder.showDeviationsBln) {\r\n                this.getIntakeorderMATSummaryLineAdapter().pFillData(cIntakeorderMATSummaryLine.sortedMATSummaryLinesObl());\r\n            } else {\r\n                this.getIntakeorderMATSummaryLineAdapter().pShowDeviations();\r\n            }\r\n            return result;\r\n        }\r\n\r\n        this.recyclerSearchView.setQuery(pvBinCodeStr, true);\r\n        this.recyclerSearchView.callOnClick();\r\n\r\n        this.currentInputType = InputType.UNKNOWN;\r\n        return result;\r\n    }\r\n\r\n    private  boolean mTryToCloseOrderBln() {\r\n\r\n        cResult hulpResult;\r\n        hulpResult = new cResult();\r\n        hulpResult.resultBln = false;\r\n\r\n        hulpResult = cIntakeorder.currentIntakeOrder.pMATHandledViaWebserviceRst();\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown) {\r\n            cUserInterface.pDoExplodingScreen(hulpResult.messagesStr(), \"\", true, true);\r\n            return false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n\r\n            //If we got any comments, show them\r\n            if (cIntakeorder.currentIntakeOrder.pFeedbackCommentObl() != null && cIntakeorder.currentIntakeOrder.pFeedbackCommentObl().size() > 0) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cIntakeorder.currentIntakeOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mHandleClose() {\r\n\r\n        if (!this.mTryToCloseOrderBln()) {\r\n            return;\r\n        }\r\n\r\n        this.mStartOrderSelectActivity();\r\n\r\n    }\r\n\r\n    private void mSetShowCommentListener() {\r\n        this.imageButtonComments.setOnClickListener(view -> mShowCommentsFragment(cIntakeorder.currentIntakeOrder.pCommentObl(), \"\"));\r\n    }\r\n\r\n    private void mSetDeviationsListener() {\r\n        this.switchDeviations.setOnCheckedChangeListener((compoundButton, show) -> {\r\n\r\n            if (switchDeviations.isChecked()) {\r\n                cIntakeorder.currentIntakeOrder.showDeviationsBln = true;\r\n                getIntakeorderMATSummaryLineAdapter().pShowDeviations();\r\n            }\r\n            else {\r\n                cIntakeorder.currentIntakeOrder.showDeviationsBln = false;\r\n                getIntakeorderMATSummaryLineAdapter().pFillData(cIntakeorderMATSummaryLine.sortedMATSummaryLinesObl());\r\n            }\r\n        });\r\n}\r\n\r\n    private void mSetStartLineListener() {\r\n        this.imageViewStart.setOnClickListener(view -> pHandleScan(null,true));\r\n    }\r\n\r\n    private void mSetSendOrderListener() {\r\n\r\n        this.imageButtonCloseOrder.setOnClickListener(view -> {\r\n\r\n            //do we need an administrator for this?\r\n            if (!cSetting.RECEIVE_STORE_DEVIATIONS_PASSWORD().isEmpty() && cIntakeorderMATSummaryLine.totalItemsDifference() > 0 ) {\r\n                cUserInterface.pShowpasswordDialog(getString(R.string.supervisor_password_header), getString(R.string.supervisor_deviations_password_text), false);\r\n                return;\r\n            }\r\n\r\n            mShowCloseOrderDialog(cAppExtension.activity.getString(R.string.message_leave), cAppExtension.activity.getString(R.string.message_close));\r\n        });\r\n    }\r\n\r\n    private  void mDoUnknownScan(String pvErrorMessageStr, String pvScannedBarcodeStr) {\r\n        this.currentInputType = InputType.UNKNOWN;\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, pvScannedBarcodeStr, true, true);\r\n    }\r\n\r\n    private  void mShowCommentsFragment(List<cComment> pvDataObl, String pvTitleStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(cPublicDefinitions.KEY_COMMENTHEADER, pvTitleStr);\r\n\r\n        CommentFragment commentFragment = new CommentFragment(pvDataObl);\r\n        commentFragment.setArguments(bundle);\r\n\r\n        commentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.COMMENTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private  void mStepFailed(String pvErrorMessageStr) {\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, cIntakeorder.currentIntakeOrder.getOrderNumberStr(), true, true);\r\n        cIntakeorder.currentIntakeOrder.pLockReleaseViaWebserviceBln();\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n    }\r\n\r\n    private  void mStartOrderSelectActivity() {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            Intent intent = new Intent(cAppExtension.context, IntakeAndReceiveSelectActivity.class);\r\n            IntakeAndReceiveSelectActivity.startedViaMenuBln = false;\r\n            startActivity(intent);\r\n            finish();\r\n        });\r\n\r\n    }\r\n\r\n    private  void mShowComments() {\r\n\r\n        if (cIntakeorder.currentIntakeOrder.pCommentObl() == null || cIntakeorder.currentIntakeOrder.pCommentObl().size() == 0) {\r\n            this.imageButtonComments.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonComments.setVisibility(View.VISIBLE);\r\n\r\n        //We already showed the comments\r\n        if (cComment.commentsShownBln) {\r\n            return;\r\n        }\r\n\r\n        this.mShowCommentsFragment(cIntakeorder.currentIntakeOrder.pCommentObl(), \"\");\r\n        cComment.commentsShownBln = true;\r\n    }\r\n\r\n    private  void mShowCloseOrderDialog(String pvRejectStr,String pvAcceptStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        String messageStr = \"\";\r\n        if (cIntakeorderMATSummaryLine.totalItemsDifference() == 0 ) {\r\n            messageStr = (cAppExtension.activity.getString(R.string.message_exactly_what_you_needed));\r\n        }\r\n\r\n        if (cIntakeorderMATSummaryLine.totalItems() > cIntakeorderMATSummaryLine.totalItemsHandled()) {\r\n            messageStr =   cText.pDoubleToStringStr(cIntakeorderMATSummaryLine.totalItemsDifference()) + \" LESS items\";\r\n        }\r\n\r\n        if (cIntakeorderMATSummaryLine.totalItems() < cIntakeorderMATSummaryLine.totalItemsHandled()) {\r\n            messageStr =   cText.pDoubleToStringStr(cIntakeorderMATSummaryLine.totalItemsDifference()) + \" EXTRA items\";\r\n        }\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_close_order),\r\n                cAppExtension.activity.getString(R.string.message_close_storeorder_text,\r\n                        cText.pDoubleToStringStr(cIntakeorderMATSummaryLine.totalItemsHandled()),\r\n                        cText.pDoubleToStringStr(cIntakeorderMATSummaryLine.totalItems()), messageStr),\r\n                pvRejectStr,\r\n                pvAcceptStr ,\r\n                false);\r\n\r\n        acceptRejectFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            // show my popup\r\n            acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n        });\r\n\r\n    }\r\n\r\n    private void mStartStoreActivity(){\r\n        IntakeOrderIntakeActivity.handledViaPropertysBln = false;\r\n\r\n        //we have a LINE to handle, so start Store activity\r\n        Intent intent = new Intent(cAppExtension.context, IntakeOrderIntakeActivity.class);\r\n        startActivity(intent);\r\n\r\n    }\r\n\r\n    private void mFillRecycler(List<cIntakeorderMATSummaryLine> pvDataObl) {\r\n\r\n        if (pvDataObl.size() == 0) {\r\n            this.imageViewStart.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageViewStart.setVisibility(View.VISIBLE);\r\n\r\n        //Show the recycler view\r\n        this.recyclerViewLines.setHasFixedSize(false);\r\n        this.recyclerViewLines.setAdapter( this.getIntakeorderMATSummaryLineAdapter());\r\n        this.recyclerViewLines.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n        this.recyclerViewLines.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    private void mSetRecyclerOnScrollListener() {\r\n        this.recyclerViewLines.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(@NonNull RecyclerView pvRecyclerView, int pvNewStateInt) {\r\n                super.onScrollStateChanged(pvRecyclerView, pvNewStateInt);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetSearchListener() {\r\n        //make whole view clickable\r\n        this.recyclerSearchView.setOnClickListener(pvView -> cAppExtension.activity.runOnUiThread(() -> recyclerSearchView.setIconified(false)));\r\n\r\n//        query entered\r\n        this.recyclerSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String pvQueryTextStr) {\r\n                switch (currentInputType) {\r\n                    case UNKNOWN:\r\n                        getIntakeorderMATSummaryLineAdapter().pSetFilter(pvQueryTextStr, false);\r\n                        return  true;\r\n\r\n                    case ARTICLE:\r\n                        getIntakeorderMATSummaryLineAdapter().pSetFilter(pvQueryTextStr, true);\r\n                        return  true;\r\n\r\n                    case BIN:\r\n                        getIntakeorderMATSummaryLineAdapter().pSetBINFilter(pvQueryTextStr);\r\n                        return  true;\r\n                }\r\n\r\n                return  true;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String pvQueryTextStr) {\r\n             return  true;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mSetSearchCloseListener() {\r\n        //make whole view clickable\r\n        this.closeButton.setOnClickListener(pvView -> {\r\n            recyclerSearchView.setQuery(\"\",false);\r\n            recyclerSearchView.setIconified(true);\r\n            currentInputType = InputType.UNKNOWN;\r\n            cIntakeorder.currentIntakeOrder.currentBin = null;\r\n\r\n            if (switchDeviations.isChecked()) {\r\n                cIntakeorder.currentIntakeOrder.showDeviationsBln = true;\r\n                getIntakeorderMATSummaryLineAdapter().pShowDeviations();\r\n            }\r\n            else {\r\n                cIntakeorder.currentIntakeOrder.showDeviationsBln = false;\r\n                getIntakeorderMATSummaryLineAdapter().pFillData(cIntakeorderMATSummaryLine.sortedMATSummaryLinesObl());\r\n            }\r\n\r\n        });\r\n\r\n        //query entered\r\n\r\n\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n    }\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Intake/IntakeorderMATLinesActivity.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Intake/IntakeorderMATLinesActivity.java	(date 1622796018692)
@@ -319,6 +319,11 @@
 
             //Clear current barcodeStr
             cIntakeorderBarcode.currentIntakeOrderBarcode = null;
+
+            if (cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine == null) {
+                return;
+            }
+
             hulpResult = cIntakeorderMATSummaryLine.currentIntakeorderMATSummaryLine.pSummaryLineBusyRst();
             if (!hulpResult.resultBln) {
                 this.mStepFailed(hulpResult.messagesStr());
Index: app/src/main/res/xml/pick_filter.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PreferenceScreen xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <SwitchPreference\r\n        android:key=\"@string/filter_orderlines_enable_key\"\r\n        android:title=\"@string/filter_orderlines_enable\"\r\n        android:summary=\"@string/filter_orderlines_enable_summary\"\r\n        android:icon=\"@drawable/ic_nofilter_black_24dp\"\r\n        android:defaultValue=\"true\"\r\n        />\r\n    <PreferenceCategory\r\n        android:title=\"@string/filter_orderlines_title\">\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_processing_key\"\r\n            android:title=\"@string/filter_orderlines_processing\"\r\n            android:icon=\"@drawable/ic_coffee_black_24dp\"\r\n            android:summaryOff=\"@string/show_all\"\r\n            android:summaryOn=\"@string/filter_orderlines_processing_summary_on\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n        />\r\n        <!--android:summary=\"@string/filter_orderlines_processing_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_singlearticles_key\"\r\n            android:title=\"@string/filter_orderlines_singlearticles\"\r\n            android:summaryOn=\"@string/filter_orderlines_singlearticles_summary_on\"\r\n            android:summaryOff=\"@string/show_all\"\r\n            android:icon=\"@drawable/ic_circle_one_black_24p\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_singlearticles_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_my_orders_key\"\r\n            android:title=\"@string/filter_orderlines_my_orders\"\r\n            android:icon=\"@drawable/ic_me_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_my_orders_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_their_orders_key\"\r\n            android:title=\"@string/filter_orderlines_their_orders\"\r\n            android:icon=\"@drawable/ic_others_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_their_orders_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_nobodys_orders_key\"\r\n            android:title=\"@string/filter_orderlines_nobodys_orders\"\r\n            android:icon=\"@drawable/ic_nobody_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_nobodys_orders_summary\"-->\r\n    </PreferenceCategory>\r\n    <Preference\r\n        android:title=\"@string/filter_orderlines_apply\"\r\n        android:key=\"@string/filter_orderlines_apply_key\"\r\n        />\r\n</PreferenceScreen>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/xml/pick_filter.xml	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/res/xml/pick_filter.xml	(date 1622795484356)
@@ -5,7 +5,7 @@
         android:title="@string/filter_orderlines_enable"
         android:summary="@string/filter_orderlines_enable_summary"
         android:icon="@drawable/ic_nofilter_black_24dp"
-        android:defaultValue="true"
+        android:defaultValue="false"
         />
     <PreferenceCategory
         android:title="@string/filter_orderlines_title">
@@ -16,7 +16,7 @@
             android:summaryOff="@string/show_all"
             android:summaryOn="@string/filter_orderlines_processing_summary_on"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
         />
         <!--android:summary="@string/filter_orderlines_processing_summary"-->
         <SwitchPreference
@@ -26,7 +26,7 @@
             android:summaryOff="@string/show_all"
             android:icon="@drawable/ic_circle_one_black_24p"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_singlearticles_summary"-->
         <SwitchPreference
@@ -34,7 +34,7 @@
             android:title="@string/filter_orderlines_my_orders"
             android:icon="@drawable/ic_me_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_my_orders_summary"-->
         <SwitchPreference
@@ -42,7 +42,7 @@
             android:title="@string/filter_orderlines_their_orders"
             android:icon="@drawable/ic_others_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_their_orders_summary"-->
         <SwitchPreference
@@ -50,7 +50,7 @@
             android:title="@string/filter_orderlines_nobodys_orders"
             android:icon="@drawable/ic_nobody_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_nobodys_orders_summary"-->
     </PreferenceCategory>
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/IntakeAndReceive/CreateIntakeOrReceiveActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.IntakeAndReceive;\r\n\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.InputFilter;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SwitchCompat;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.ViewCompat;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class CreateIntakeOrReceiveActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n    private Spinner stockownerSpinner;\r\n    private Spinner workflowSpinner;\r\n    private EditText editTextDocument;\r\n    private EditText editTextPackingslip;\r\n    private EditText editTextBin;\r\n    private SwitchCompat switchCheckBarcodes;\r\n    private  Button createReceiveButton;\r\n    private  Button cancelButton;\r\n    //End Region private Properties\r\n\r\n    //Region Constructor\r\n    public CreateIntakeOrReceiveActivity() {\r\n    }\r\n    //End Region Constructor\r\n\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_create_receive_or_intake_order);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n\r\n        if (cAppExtension.activity instanceof CreateIntakeOrReceiveActivity) {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        this.mActivityInitialize();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mStartOrderSelectActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        if (pvMenuItem.getItemId() == android.R.id.home) {\r\n            this.mStartOrderSelectActivity();\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.create_receive_or_intake));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n        this.stockownerSpinner = findViewById(R.id.stockownerSpinner);\r\n        this.workflowSpinner = findViewById(R.id.workflowSpinner);\r\n        this.editTextDocument = findViewById(R.id.editTextDocument);\r\n        this.editTextPackingslip = findViewById(R.id.editTextPackingslip);\r\n        this.editTextBin = findViewById(R.id.editTextBin);\r\n        this.switchCheckBarcodes = findViewById(R.id.checkBarcodesSwitch);\r\n        this.createReceiveButton = findViewById(R.id.createButton);\r\n        this.cancelButton = findViewById(R.id.cancelButton);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_intake);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubTitle.setText(cUser.currentUser.currentBranch.getBranchNameStr());\r\n\r\n        ViewCompat.setTransitionName(toolbarImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE);\r\n        ViewCompat.setTransitionName(toolbarTitle, cPublicDefinitions.VIEW_NAME_HEADER_TEXT);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        InputFilter[] filterArray = new InputFilter[1];\r\n        filterArray[0] = new InputFilter.LengthFilter(50);\r\n        this.editTextDocument.setFilters(filterArray);\r\n\r\n        this.mShowStockOwnerSpinner();\r\n        this.mFillWorkflowSpinner();\r\n        if (!cUser.currentUser.currentBranch.isBinMandatoryBln()) {\r\n            this.editTextBin.setVisibility(View.GONE);\r\n        }\r\n        else {\r\n            this.mSetBin();\r\n        }\r\n\r\n        if (!cUser.currentUser.currentBranch.getReceiveDefaultBinStr().isEmpty()) {\r\n            this.editTextBin.setText(cUser.currentUser.currentBranch.getReceiveDefaultBinStr());\r\n        }\r\n\r\n        if (!cSetting.RECEIVE_BARCODE_CHECK()) {\r\n            this.switchCheckBarcodes.setVisibility(View.GONE);\r\n        }\r\n        else{\r\n            this.switchCheckBarcodes.setChecked(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetCreateListener();\r\n        this.mSetCancelListener();\r\n        this.mSetEditorActionListener();\r\n        this.mSetWorkflowSpinnerListener();\r\n        this.mSetStockOwnerSpinnerListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        cIntakeorder.newWorkflowStr = \"\";\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan, boolean pvIsDocumentBln, boolean pvIsPackingSlipBln, boolean pvBinBln) {\r\n\r\n        String barcodeWithoutPrefixStr = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        boolean documentBln = false;\r\n        boolean binBln = false;\r\n\r\n        if (pvIsDocumentBln) {\r\n            this.editTextDocument.setText(barcodeWithoutPrefixStr);\r\n            this.editTextPackingslip.requestFocus();\r\n            return;\r\n        }\r\n\r\n        if (pvIsPackingSlipBln) {\r\n            this.editTextPackingslip.setText(barcodeWithoutPrefixStr);\r\n            this.editTextBin.requestFocus();\r\n            return;\r\n        }\r\n\r\n        if (pvBinBln) {\r\n            this.editTextBin.setText(barcodeWithoutPrefixStr);\r\n            this.editTextBin.requestFocus();\r\n            return;\r\n        }\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.BIN)) {\r\n            binBln = true;\r\n        }\r\n\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.DOCUMENT)) {\r\n            documentBln = true;\r\n        }\r\n\r\n        //has prefix, is DOCUMENT\r\n        if (documentBln   ||this.editTextDocument.getText().toString().isEmpty()) {\r\n            this.editTextDocument.setText(barcodeWithoutPrefixStr);\r\n            this.editTextPackingslip.requestFocus();\r\n            return;\r\n        }\r\n\r\n        if (binBln) {\r\n            barcodeWithoutPrefixStr = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n            cBranchBin branchBin = cUser.currentUser.currentBranch.pGetBinByCode(barcodeWithoutPrefixStr);\r\n\r\n            if (branchBin == null) {\r\n                cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_unknown_bin), null);\r\n                return;\r\n            }\r\n\r\n            if (!branchBin.getBinCodeStr().equalsIgnoreCase(cUser.currentUser.currentBranch.getReceiveDefaultBinStr())) {\r\n                if (!branchBin.isUseForReturnSalesBln()){\r\n                    cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_bin_not_allowed_for_receive),\"\",true,true);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.editTextBin.setText(barcodeWithoutPrefixStr);\r\n            return;\r\n        }\r\n\r\n        this.editTextPackingslip.setText(barcodeWithoutPrefixStr);\r\n        this.editTextPackingslip.requestFocus();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Method\r\n\r\n    private  void mCreateOrder(final String pvDocumentStr, final String pvPackingSlipStr, final String pvBinCodeStr, final boolean pvCheckBarcodesBln){\r\n\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(() -> mHandleCreateOrder(pvDocumentStr,pvPackingSlipStr,pvBinCodeStr,pvCheckBarcodesBln)).start();\r\n\r\n    }\r\n\r\n    private void mSetCancelListener() {\r\n        this.cancelButton.setOnClickListener(pvView -> mStartOrderSelectActivity());\r\n    }\r\n\r\n    private void mStartOrderSelectActivity() {\r\n        Intent intent = new Intent(cAppExtension.context, IntakeAndReceiveSelectActivity.class);\r\n        IntakeAndReceiveSelectActivity.startedViaMenuBln = false;\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private void mSetCreateListener() {\r\n        this.createReceiveButton.setOnClickListener(pvView -> {\r\n\r\n            if (cIntakeorder.newWorkflowStr.isEmpty()) {\r\n                cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_workflow),null);\r\n                return;\r\n            }\r\n\r\n            IntakeAndReceiveSelectActivity.startedViaMenuBln = false;\r\n            mCreateOrder(editTextDocument.getText().toString().trim(),\r\n                    editTextPackingslip.getText().toString().trim(),\r\n                    editTextBin.getText().toString().trim(),\r\n                    switchCheckBarcodes.isChecked());\r\n        });\r\n    }\r\n\r\n    private void mSetEditorActionListener() {\r\n        this.editTextDocument.setOnEditorActionListener((textView, i, keyEvent) -> {\r\n            if (i == EditorInfo.IME_ACTION_DONE || i == EditorInfo.IME_ACTION_GO ) {\r\n\r\n                pHandleScan(cBarcodeScan.pFakeScan(editTextDocument.getText().toString()),true,false, false);\r\n                cUserInterface.pHideKeyboard();\r\n\r\n            }\r\n            return true;\r\n        });\r\n\r\n        this.editTextPackingslip.setOnEditorActionListener((textView, i, keyEvent) -> {\r\n            if (i == EditorInfo.IME_ACTION_DONE || i == EditorInfo.IME_ACTION_GO ) {\r\n\r\n                pHandleScan(cBarcodeScan.pFakeScan(editTextPackingslip.getText().toString()),false,true,false);\r\n                cUserInterface.pHideKeyboard();\r\n\r\n            }\r\n            return true;\r\n        });\r\n\r\n        this.editTextBin.setOnEditorActionListener((textView, i, keyEvent) -> {\r\n            if (i == EditorInfo.IME_ACTION_DONE || i == EditorInfo.IME_ACTION_GO ) {\r\n\r\n                pHandleScan(cBarcodeScan.pFakeScan(editTextBin.getText().toString()),false,false,true);\r\n                cUserInterface.pHideKeyboard();\r\n\r\n            }\r\n            return true;\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void mSetBin(){\r\n\r\n        if (!cUser.currentUser.currentBranch.getReceiveDefaultBinStr().isEmpty()) {\r\n            this.editTextBin.setText(cUser.currentUser.currentBranch.getReceiveDefaultBinStr());\r\n        }\r\n        else {\r\n\r\n            if (!cUser.currentUser.currentBranch.pGetReceiveBinsViaWebserviceBln()) {\r\n                return;\r\n            }\r\n\r\n            if (cUser.currentUser.currentBranch.receiveBinsObl != null&& cUser.currentUser.currentBranch.receiveBinsObl.size() == 1) {\r\n                this.editTextBin.setText(cUser.currentUser.currentBranch.receiveBinsObl.get(0).getBinCodeStr());\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mHandleCreateOrder(String pvDocumentstr, String pvPackingSlipStr, String pvBinCodeStr, boolean pvCheckBarcodesBln){\r\n\r\n        cResult hulpResult;\r\n\r\n        hulpResult = this.mTryToCreateOrderRst(pvDocumentstr,pvPackingSlipStr,pvBinCodeStr,pvCheckBarcodesBln);\r\n        if (!hulpResult.resultBln) {\r\n            return;\r\n        }\r\n\r\n        // We created an assignment, but need to open a different assignment\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Next && hulpResult.resultAction != null) {\r\n\r\n            //all Intakeorders\r\n            if (!cIntakeorder.pGetIntakeOrdersViaWebserviceBln(true, \"\")) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_get_intakeorders_failed), \"\", true, true );\r\n                return;\r\n            }\r\n\r\n            if (cIntakeorder.allIntakeordersObl == null || cIntakeorder.allIntakeordersObl.size() == 0) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_get_next_activity_failed), \"\", true, true );\r\n                return;\r\n            }\r\n\r\n\r\n            for (cIntakeorder intakeorder : cIntakeorder.allIntakeordersObl) {\r\n\r\n                if (intakeorder.getOrderNumberStr().equalsIgnoreCase(hulpResult.resultAction.nextAssignmentStr)) {\r\n                    cIntakeorder.currentIntakeOrder = intakeorder;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (cIntakeorder.currentIntakeOrder == null) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_next_activity_not_found),\"\",true,true);\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        //Try to lock the order\r\n        if (!this.mTryToLockOrderBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_locking_order_failed),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        //Delete the detail, so we can get them from the webservice\r\n        cIntakeorder.currentIntakeOrder.pDeleteDetailsBln();\r\n\r\n        hulpResult = cIntakeorder.currentIntakeOrder.pGetOrderDetailsRst();\r\n        if (!hulpResult.resultBln) {\r\n            this.mStepFailed(hulpResult.messagesStr());\r\n            return;\r\n        }\r\n\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Ordernumber\", cIntakeorder.currentIntakeOrder.getOrderNumberStr());\r\n\r\n        switch(cIntakeorder.currentIntakeOrder.getOrderTypeStr().toUpperCase()) {\r\n            case \"EOS\":\r\n                // If everything went well, then start Lines Activity\r\n                cAppExtension.activity.runOnUiThread(this::mShowReceiveLinesActivity);\r\n                break;\r\n            case \"MAS\":\r\n            case \"MAT\":\r\n                cAppExtension.activity.runOnUiThread(this::mShowIntakeLinesActivity);\r\n                break;\r\n            default:\r\n                // code block\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    private  cResult mTryToCreateOrderRst(String pvDocumentstr, String pvPackingSlipStr, String pvBinCodeStr, boolean pvCheckBarcodesBln){\r\n\r\n        cResult result = new cResult();\r\n\r\n        switch(cIntakeorder.newWorkflowStr) {\r\n            case \"EOS\":\r\n            case \"EOR\":\r\n                result   =  cIntakeorder.pCreateReceiveOrderViaWebserviceRst(pvDocumentstr, pvPackingSlipStr, pvBinCodeStr, pvCheckBarcodesBln);\r\n                if (!result.resultBln) {\r\n                    this.editTextDocument.setText(\"\");\r\n                    mStepFailed(result.messagesStr());\r\n                    return  result;\r\n                }\r\n                break;\r\n            case \"MAS\":\r\n                result   =  cIntakeorder.pCreateIntakeOrderViaWebserviceRst(pvDocumentstr, pvBinCodeStr, pvCheckBarcodesBln);\r\n                if (!result.resultBln) {\r\n                    this.editTextDocument.setText(\"\");\r\n                    mStepFailed(result.messagesStr());\r\n                    return  result;\r\n                }\r\n                break;\r\n            default:\r\n                // code block\r\n        }\r\n\r\n\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    private  boolean mTryToLockOrderBln(){\r\n\r\n        cResult hulpResult;\r\n        hulpResult = cIntakeorder.currentIntakeOrder.pLockViaWebserviceRst();\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown ) {\r\n            mStepFailed(hulpResult.messagesStr());\r\n            return  false;\r\n        }\r\n        return (hulpResult.activityActionEnu != cWarehouseorder.ActivityActionEnu.Delete) &&\r\n                (hulpResult.activityActionEnu != cWarehouseorder.ActivityActionEnu.NoStart);\r\n\r\n    }\r\n\r\n    private  void mStepFailed(String pvErrorMessageStr){\r\n\r\n        if (cIntakeorder.currentIntakeOrder != null) {\r\n            cUserInterface.pDoExplodingScreen(pvErrorMessageStr, cIntakeorder.currentIntakeOrder.getOrderNumberStr(), true, true );\r\n        }\r\n        else\r\n        {\r\n            cUserInterface.pDoExplodingScreen(pvErrorMessageStr,cAppExtension.activity.getString(R.string.message_couldnt_create_order) + \" \" +  this.editTextDocument.getText().toString(), true, true );\r\n        }\r\n\r\n        if (cIntakeorder.currentIntakeOrder != null) {\r\n            cIntakeorder.currentIntakeOrder.pLockReleaseViaWebserviceBln();\r\n        }\r\n\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n    }\r\n\r\n    private  void mShowReceiveLinesActivity() {\r\n\r\n        ReceiveLinesActivity.closeOrderClickedBln = false;\r\n        ReceiveLinesActivity.packagingClickedBln = false;\r\n        ReceiveLinesActivity.packagingHandledBln = false;\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        Intent intent = new Intent(cAppExtension.context, ReceiveLinesActivity.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private  void mShowIntakeLinesActivity() {\r\n\r\n        final Intent intent;\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        switch (cIntakeorder.currentIntakeOrder.getOrderTypeStr().toUpperCase()) {\r\n            case  \"MAT\":\r\n                intent = new Intent(cAppExtension.context, IntakeorderMATLinesActivity.class);\r\n                break;\r\n\r\n            case \"MAS\":\r\n                intent = new Intent(cAppExtension.context, IntakeorderMASLinesActivity.class);\r\n                break;\r\n\r\n            default:\r\n                throw new IllegalStateException(\"Unexpected value: \" + cIntakeorder.currentIntakeOrder.getOrderTypeStr().toUpperCase());\r\n        }\r\n\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private void mShowStockOwnerSpinner() {\r\n\r\n        if (cStockOwner.allStockOwnerObl  == null || cStockOwner.allStockOwnerObl.size() == 0) {\r\n            this.stockownerSpinner.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        this.stockownerSpinner.setVisibility(View.VISIBLE);\r\n        this.stockownerSpinner.setVisibility(View.VISIBLE);\r\n\r\n        this.mFillStockOwnerSpinner();\r\n    }\r\n\r\n    private void mFillStockOwnerSpinner() {\r\n\r\n        if (cStockOwner.allStockOwnerObl == null ||  cStockOwner.allStockOwnerObl.size() <= 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> stockOwnerObl = new ArrayList<>();\r\n\r\n        if (cUser.currentUser.currentBranch.stockOwnerObl().size() >= 1) {\r\n            for (cStockOwner stockOwner :cUser.currentUser.currentBranch.stockOwnerObl() ) {\r\n                stockOwnerObl.add(stockOwner.getDescriptionStr());\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (cStockOwner stockOwner :cStockOwner.allStockOwnerObl ) {\r\n                stockOwnerObl.add(stockOwner.getDescriptionStr());\r\n            }\r\n        }\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                stockOwnerObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.stockownerSpinner.setAdapter(adapter);\r\n        if (cUser.currentUser.currentStockOwner != null)\r\n        { this.stockownerSpinner.setSelection(adapter.getPosition(cUser.currentUser.currentStockOwner.getDescriptionStr()));}\r\n    }\r\n\r\n    private void mSetStockOwnerSpinnerListener() {\r\n\r\n        this.stockownerSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                cUser.currentUser.currentStockOwner = cStockOwner.pGetStockOwnerByDescriptionStr(stockownerSpinner.getSelectedItem().toString());\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    private void mFillWorkflowSpinner() {\r\n\r\n        if (cSetting.RECEIVE_NEW_WORKFLOWS() == null ||  cSetting.RECEIVE_NEW_WORKFLOWS().size() <= 0 ) {\r\n            return;\r\n        }\r\n\r\n        List<String> workflowObl = new ArrayList<>();\r\n\r\n        for (String workflowStr : cSetting.RECEIVE_NEW_WORKFLOWS()) {\r\n            workflowObl.add(cWarehouseorder.pGetWorkflowDescriptionStr(workflowStr));\r\n        }\r\n\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(cAppExtension.context,\r\n                android.R.layout.simple_spinner_dropdown_item,\r\n                workflowObl);\r\n\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        this.workflowSpinner.setAdapter(adapter);\r\n    }\r\n\r\n    private void mSetWorkflowSpinnerListener() {\r\n\r\n        this.workflowSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                cIntakeorder.newWorkflowStr =  cWarehouseorder.pGetWorkflowByDescriptionStr(workflowSpinner.getSelectedItem().toString());\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // your code here\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/IntakeAndReceive/CreateIntakeOrReceiveActivity.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/IntakeAndReceive/CreateIntakeOrReceiveActivity.java	(date 1622790061885)
@@ -499,6 +499,11 @@
     private  boolean mTryToLockOrderBln(){
 
         cResult hulpResult;
+
+        if (cIntakeorder.currentIntakeOrder == null) {
+            return false;
+        }
+
         hulpResult = cIntakeorder.currentIntakeOrder.pLockViaWebserviceRst();
         //Everything was fine, so we are done
         if (hulpResult.resultBln) {
Index: app/src/main/res/xml/combine_pick_filter.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PreferenceScreen xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <SwitchPreference\r\n        android:key=\"@string/filter_orderlines_enable_key\"\r\n        android:title=\"@string/filter_orderlines_enable\"\r\n        android:summary=\"@string/filter_orderlines_enable_summary\"\r\n        android:icon=\"@drawable/ic_nofilter_black_24dp\"\r\n        android:defaultValue=\"true\"\r\n        />\r\n    <PreferenceCategory\r\n        android:title=\"@string/filter_orderlines_title\">\r\n        <!--android:summary=\"@string/filter_orderlines_processing_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_singlearticles_key\"\r\n            android:title=\"@string/filter_orderlines_singlearticles\"\r\n            android:summaryOn=\"@string/filter_orderlines_singlearticles_summary_on\"\r\n            android:summaryOff=\"@string/show_all\"\r\n            android:icon=\"@drawable/ic_circle_one_black_24p\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_singlearticles_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_my_orders_key\"\r\n            android:title=\"@string/filter_orderlines_my_orders\"\r\n            android:icon=\"@drawable/ic_me_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_my_orders_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_their_orders_key\"\r\n            android:title=\"@string/filter_orderlines_their_orders\"\r\n            android:icon=\"@drawable/ic_others_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_their_orders_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_nobodys_orders_key\"\r\n            android:title=\"@string/filter_orderlines_nobodys_orders\"\r\n            android:icon=\"@drawable/ic_nobody_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_nobodys_orders_summary\"-->\r\n    </PreferenceCategory>\r\n    <Preference\r\n        android:title=\"@string/filter_orderlines_apply\"\r\n        android:key=\"@string/filter_orderlines_apply_key\"\r\n        />\r\n</PreferenceScreen>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/xml/combine_pick_filter.xml	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/res/xml/combine_pick_filter.xml	(date 1622795497545)
@@ -5,7 +5,7 @@
         android:title="@string/filter_orderlines_enable"
         android:summary="@string/filter_orderlines_enable_summary"
         android:icon="@drawable/ic_nofilter_black_24dp"
-        android:defaultValue="true"
+        android:defaultValue="false"
         />
     <PreferenceCategory
         android:title="@string/filter_orderlines_title">
@@ -17,7 +17,7 @@
             android:summaryOff="@string/show_all"
             android:icon="@drawable/ic_circle_one_black_24p"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_singlearticles_summary"-->
         <SwitchPreference
@@ -25,7 +25,7 @@
             android:title="@string/filter_orderlines_my_orders"
             android:icon="@drawable/ic_me_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_my_orders_summary"-->
         <SwitchPreference
@@ -33,7 +33,7 @@
             android:title="@string/filter_orderlines_their_orders"
             android:icon="@drawable/ic_others_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_their_orders_summary"-->
         <SwitchPreference
@@ -41,7 +41,7 @@
             android:title="@string/filter_orderlines_nobodys_orders"
             android:icon="@drawable/ic_nobody_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_nobodys_orders_summary"-->
     </PreferenceCategory>
Index: app/src/main/res/xml/standard_filter.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PreferenceScreen xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <SwitchPreference\r\n        android:key=\"@string/filter_orderlines_enable_key\"\r\n        android:title=\"@string/filter_orderlines_enable\"\r\n        android:summary=\"@string/filter_orderlines_enable_summary\"\r\n        android:icon=\"@drawable/ic_nofilter_black_24dp\"\r\n        android:defaultValue=\"true\"\r\n        />\r\n    <PreferenceCategory\r\n        android:title=\"@string/filter_orderlines_title\">\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_processing_key\"\r\n            android:title=\"@string/filter_orderlines_processing\"\r\n            android:icon=\"@drawable/ic_coffee_black_24dp\"\r\n            android:summaryOff=\"@string/filter_orderlines_processing_summary_off\"\r\n            android:summaryOn=\"@string/filter_orderlines_processing_summary_on\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n        />\r\n        <!--android:summary=\"@string/filter_orderlines_processing_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_my_orders_key\"\r\n            android:title=\"@string/filter_orderlines_my_orders\"\r\n            android:icon=\"@drawable/ic_me_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_my_orders_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_their_orders_key\"\r\n            android:title=\"@string/filter_orderlines_their_orders\"\r\n            android:icon=\"@drawable/ic_others_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_their_orders_summary\"-->\r\n        <SwitchPreference\r\n            android:key=\"@string/filter_orderlines_nobodys_orders_key\"\r\n            android:title=\"@string/filter_orderlines_nobodys_orders\"\r\n            android:icon=\"@drawable/ic_nobody_black_24dp\"\r\n            android:dependency=\"@string/filter_orderlines_enable_key\"\r\n            android:defaultValue=\"true\"\r\n            />\r\n        <!--android:summary=\"@string/filter_orderlines_nobodys_orders_summary\"-->\r\n    </PreferenceCategory>\r\n    <Preference\r\n        android:title=\"@string/filter_orderlines_apply\"\r\n        android:key=\"@string/filter_orderlines_apply_key\"\r\n        />\r\n</PreferenceScreen>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/xml/standard_filter.xml	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/res/xml/standard_filter.xml	(date 1622795506630)
@@ -5,7 +5,7 @@
         android:title="@string/filter_orderlines_enable"
         android:summary="@string/filter_orderlines_enable_summary"
         android:icon="@drawable/ic_nofilter_black_24dp"
-        android:defaultValue="true"
+        android:defaultValue="false"
         />
     <PreferenceCategory
         android:title="@string/filter_orderlines_title">
@@ -16,7 +16,7 @@
             android:summaryOff="@string/filter_orderlines_processing_summary_off"
             android:summaryOn="@string/filter_orderlines_processing_summary_on"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
         />
         <!--android:summary="@string/filter_orderlines_processing_summary"-->
         <SwitchPreference
@@ -24,7 +24,7 @@
             android:title="@string/filter_orderlines_my_orders"
             android:icon="@drawable/ic_me_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_my_orders_summary"-->
         <SwitchPreference
@@ -32,7 +32,7 @@
             android:title="@string/filter_orderlines_their_orders"
             android:icon="@drawable/ic_others_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_their_orders_summary"-->
         <SwitchPreference
@@ -40,7 +40,7 @@
             android:title="@string/filter_orderlines_nobodys_orders"
             android:icon="@drawable/ic_nobody_black_24dp"
             android:dependency="@string/filter_orderlines_enable_key"
-            android:defaultValue="true"
+            android:defaultValue="false"
             />
         <!--android:summary="@string/filter_orderlines_nobodys_orders_summary"-->
     </PreferenceCategory>
Index: app/release/normal/release/output-metadata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/release/normal/release/output-metadata.json	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/release/normal/release/output-metadata.json	(date 1622711070037)
@@ -1,1 +1,18 @@
-                                                                                                                                                                                                                                                                                                                                                                
\ No newline at end of file
+{
+  "version": 2,
+  "artifactType": {
+    "type": "APK",
+    "kind": "Directory"
+  },
+  "applicationId": "nl.icsvertex.scansuite",
+  "variantName": "normalRelease",
+  "elements": [
+    {
+      "type": "SINGLE",
+      "filters": [],
+      "versionCode": 158103,
+      "versionName": "1.5.8.103A",
+      "outputFile": "app-normal-release.apk"
+    }
+  ]
+}
\ No newline at end of file
Index: app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/FilterOrderLinesFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Fragments.Dialogs;\r\n\r\n\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.preference.Preference;\r\nimport androidx.preference.PreferenceFragmentCompat;\r\nimport androidx.preference.PreferenceManager;\r\n\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class FilterOrderLinesFragment extends PreferenceFragmentCompat {\r\n\r\n    @Override\r\n    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n\r\n\r\n        if (cAppExtension.context instanceof PickorderSelectActivity) {\r\n\r\n            if (PickorderSelectActivity.currentModusEnu == PickorderSelectActivity.ModusEnu.NORMAL) {\r\n                setPreferencesFromResource(R.xml.pick_filter, rootKey);\r\n            }\r\n            else\r\n            {\r\n                setPreferencesFromResource(R.xml.combine_pick_filter, rootKey);\r\n            }\r\n\r\n        }\r\n\r\n        if (cAppExtension.context instanceof SortorderSelectActivity) {\r\n            setPreferencesFromResource(R.xml.pick_filter, rootKey);\r\n        }\r\n\r\n        if (cAppExtension.context instanceof ShiporderSelectActivity) {\r\n            setPreferencesFromResource(R.xml.pick_filter, rootKey);\r\n        }\r\n        if (cAppExtension.context instanceof StoreorderSelectActivity) {\r\n            setPreferencesFromResource(R.xml.pick_filter, rootKey);\r\n        }\r\n\r\n        if (cAppExtension.context instanceof InventoryorderSelectActivity) {\r\n            setPreferencesFromResource(R.xml.standard_filter, rootKey);\r\n        }\r\n\r\n        if (cAppExtension.context instanceof IntakeAndReceiveSelectActivity) {\r\n            setPreferencesFromResource(R.xml.standard_filter, rootKey);\r\n        }\r\n\r\n        if (cAppExtension.context instanceof ReturnorderSelectActivity) {\r\n            setPreferencesFromResource(R.xml.standard_filter, rootKey);\r\n        }\r\n\r\n        if (cAppExtension.context instanceof MoveorderSelectActivity) {\r\n            setPreferencesFromResource(R.xml.standard_filter, rootKey);\r\n        }\r\n\r\n        if (cAppExtension.context instanceof PackAndShipSelectActivity) {\r\n            setPreferencesFromResource(R.xml.standard_filter, rootKey);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        Preference applyButton = findPreference(getString(R.string.filter_orderlines_apply_key));\r\n        if (applyButton != null) {\r\n            applyButton.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {\r\n                @Override\r\n                public boolean onPreferenceClick(Preference preference) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n    @Override\r\n    public void onActivityCreated(Bundle savedInstanceState) {\r\n        super.onActivityCreated(savedInstanceState);\r\n        SharedPreferences.OnSharedPreferenceChangeListener spChanged = new\r\n                SharedPreferences.OnSharedPreferenceChangeListener() {\r\n                    @Override\r\n                    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,\r\n                                                          String key) {\r\n\r\n                    }\r\n                };\r\n        PreferenceManager.getDefaultSharedPreferences(cAppExtension.activity.getApplicationContext()).registerOnSharedPreferenceChangeListener(spChanged);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/FilterOrderLinesFragment.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/nl/icsvertex/scansuite/Fragments/Dialogs/FilterOrderLinesFragment.java	(date 1622795771206)
@@ -8,7 +8,6 @@
 import androidx.preference.PreferenceFragmentCompat;
 import androidx.preference.PreferenceManager;
 
-import ICS.Utils.cSharedPreferences;
 import ICS.Utils.cUserInterface;
 import ICS.cAppExtension;
 import nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;
@@ -80,26 +79,19 @@
         super.onCreate(savedInstanceState);
         Preference applyButton = findPreference(getString(R.string.filter_orderlines_apply_key));
         if (applyButton != null) {
-            applyButton.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-                @Override
-                public boolean onPreferenceClick(Preference preference) {
-                    return true;
-                }
-            });
+            applyButton.setOnPreferenceClickListener(preference -> true);
         }
         cUserInterface.pEnableScanner();
     }
-    @Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-        SharedPreferences.OnSharedPreferenceChangeListener spChanged = new
-                SharedPreferences.OnSharedPreferenceChangeListener() {
-                    @Override
-                    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,
-                                                          String key) {
 
-                    }
-                };
-        PreferenceManager.getDefaultSharedPreferences(cAppExtension.activity.getApplicationContext()).registerOnSharedPreferenceChangeListener(spChanged);
-    }
+// todo: kijken of dit niet alles en zijn moeder kapot maakt
+
+//    @Override
+//    public void onActivityCreated(Bundle savedInstanceState) {
+//        super.onActivityCreated(savedInstanceState);
+//        SharedPreferences.OnSharedPreferenceChangeListener spChanged = (sharedPreferences, key) -> {
+//
+//        };
+//        PreferenceManager.getDefaultSharedPreferences(cAppExtension.activity.getApplicationContext()).registerOnSharedPreferenceChangeListener(spChanged);
+//    }
 }
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLinesActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Pick;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cNoSwipeViewPager;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BinItemsFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemStockFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SendingFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Pick.PickorderLinesToPickFragment;\r\nimport nl.icsvertex.scansuite.PagerAdapters.PickorderLinesPagerAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class PickorderLinesActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    public static Fragment currentLineFragment;\r\n    public static boolean startedViaOrderSelectBln;\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //Region Views\r\n    private TextView quantityPickordersText;\r\n    private TabLayout pickorderLinesTabLayout;\r\n    private cNoSwipeViewPager pickorderLinesViewPager;\r\n    private ImageView imageButtonComments;\r\n\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private ImageView imageButtonCloseOrder;\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_pickorderlines);\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n                super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        this.mActivityInitialize();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cConnection.pRegisterWifiChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            cConnection.pUnregisterWifiChangedReceiver();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_pick,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n        //  invalidateOptionsMenu();\r\n\r\n        MenuItem item_bin_stock = pvMenu.findItem(R.id.item_bin_stock);\r\n        MenuItem item_article_stock = pvMenu.findItem(R.id.item_article_stock);\r\n        item_bin_stock.setVisible(cPickorderLine.currentPickOrderLine != null);\r\n        item_article_stock.setVisible(cPickorderLine.currentPickOrderLine != null);\r\n\r\n        if (cSetting.GENERIC_PRINT_BINLABEL()){\r\n            MenuItem item_print_bin = pvMenu.findItem(R.id.item_print_bin);\r\n            item_print_bin.setVisible(cPickorderLine.currentPickOrderLine != null);\r\n        }\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(cPickorderLine.currentPickOrderLine != null);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n\r\n        DialogFragment selectedFragment = null;\r\n\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mTryToLeaveActivity();\r\n                return true;\r\n\r\n            case R.id.item_bin_stock:\r\n                selectedFragment = new BinItemsFragment(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n                break;\r\n\r\n            case R.id.item_article_stock:\r\n\r\n                cArticle.currentArticle= cPickorder.currentPickOrder.articleObl.get(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n                selectedFragment = new ItemStockFragment();\r\n                break;\r\n\r\n            case R.id.item_print_bin:\r\n                selectedFragment = new PrintBinLabelFragment();\r\n                break;\r\n\r\n            case R.id.item_print_item:\r\n                if (cPickorderLine.currentPickOrderLine.pGetBarcodesObl()){\r\n                    cArticle.currentArticle= cPickorder.currentPickOrder.articleObl.get(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n                    selectedFragment = new PrintItemLabelFragment();\r\n                }\r\n                else\r\n                {  cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.no_barcodes_availabe_for_this_line),null);}\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        mTryToLeaveActivity();\r\n    }\r\n\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_pickorderlines));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        //Set listeners here, so click listeners only work after activity is shown\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.quantityPickordersText = findViewById(R.id.quantityPickordersText);\r\n        this.pickorderLinesTabLayout = findViewById(R.id.pickorderLinesTabLayout);\r\n        this.pickorderLinesViewPager = findViewById(R.id.pickorderLinesViewpager);\r\n\r\n        this.imageButtonComments = findViewById(R.id.imageButtonComments);\r\n        this.imageButtonCloseOrder = findViewById(R.id.imageButtonCloseOrder);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        this.toolbarSubtext.setText(cPickorder.currentPickOrder.getOrderNumberStr());\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.imageButtonCloseOrder.setVisibility(View.INVISIBLE);\r\n        this.mSetTabLayout();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetShowCommentListener();\r\n        this.mSetCloseOrderListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n        this.mShowComments();\r\n\r\n        //Call this here, because this is called everytime the activiy gets shown\r\n        this.pCheckAllDone();\r\n\r\n    }\r\n\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pChangeTabCounterText(String pvTextStr){\r\n        this.quantityPickordersText.setText(pvTextStr);\r\n    }\r\n\r\n    public  void pPicklineSelected(cPickorderLine pvPickorderLine) {\r\n        cPickorderLine.currentPickOrderLine = pvPickorderLine;\r\n\r\n        if (PickorderLinesActivity.currentLineFragment instanceof  PickorderLinesToPickFragment) {\r\n            PickorderLinesToPickFragment pickorderLinesToPickFragment = (PickorderLinesToPickFragment)PickorderLinesActivity.currentLineFragment;\r\n            pickorderLinesToPickFragment.pSetChosenBinCode();\r\n        }\r\n\r\n    }\r\n\r\n    public  void pPicklineToResetSelected(cPickorderLine pvPickorderLine) {\r\n        cPickorderLine.currentPickOrderLine = pvPickorderLine;\r\n    }\r\n\r\n    public  void pSetCurrentLocation(String pvCurrentLocationStr) {\r\n\r\n        if (!cPickorder.currentPickOrder.pUpdateCurrentLocationBln(pvCurrentLocationStr)) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_currentlocation_could_not_update), \"\", true, false);\r\n            return;\r\n        }\r\n\r\n        //Check if we are done\r\n        if (cPickorder.currentPickOrder.pGetLinesNotHandledFromDatabaseObl().size() > 0 ) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        //We are done\r\n        this.pPickingDone(\"\");\r\n\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan, Boolean pvBinSelectedBln) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        cResult hulpResult;\r\n\r\n        //BIN button has been pressed, so we already have a current line\r\n        if (pvBinSelectedBln) {\r\n\r\n            //Clear current barcodeStr\r\n            cPickorderBarcode.currentPickorderBarcode = null;\r\n\r\n            hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n            if (!hulpResult.resultBln) {\r\n                mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPicking);\r\n                cPickorderLine.currentPickOrderLine = null;\r\n                return;\r\n            }\r\n\r\n            //Set last selected index\r\n            cPickorder.currentPickOrder.lastSelectedIndexInt = cPickorder.currentPickOrder.pGetIndexOfNotHandledLineInt(cPickorderLine.currentPickOrderLine);\r\n\r\n            //we have a line to handle, so start Pick activity\r\n            this.mStartPickActivity();\r\n            return;\r\n        }\r\n\r\n        //If we scan a branch reset current branch\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.LOCATION)) {\r\n            cPickorder.currentPickOrder.scannedBranch  = null;\r\n        }\r\n\r\n        //If we still need a destination scan, make sure we scan this first\r\n        if (cPickorder.currentPickOrder.scannedBranch  == null && cPickorder.currentPickOrder.isPFBln() ) {\r\n            cResult hulpRst = this.mCheckDestionationRst(pvBarcodeScan);\r\n            if (! hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\", true, true);\r\n            }\r\n\r\n            //If we scanned, refresh to pick fragment and leave this void\r\n            if (PickorderLinesActivity.currentLineFragment instanceof PickorderLinesToPickFragment ) {\r\n                PickorderLinesToPickFragment pickorderLinesToPickFragment = (PickorderLinesToPickFragment)PickorderLinesActivity.currentLineFragment;\r\n                pickorderLinesToPickFragment.pBranchScanned();\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Check if we have scanned a BIN and check if there are not handled linesInt for this BIN\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.BIN)) {\r\n\r\n            String barcodewithoutPrefix = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n            //Clear current barcodeStr\r\n            cPickorderBarcode.currentPickorderBarcode = null;\r\n\r\n            cPickorderLine.currentPickOrderLine = cPickorder.currentPickOrder.pGetNextLineToHandleForBin(barcodewithoutPrefix);\r\n            if (cPickorderLine.currentPickOrderLine == null) {\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.nothing_more_todo_for_bin), barcodewithoutPrefix);\r\n                return;\r\n            }\r\n\r\n            hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n            if (!hulpResult.resultBln) {\r\n                this.mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n                cPickorderLine.currentPickOrderLine = null;\r\n                return;\r\n            }\r\n\r\n            //Set last selected index\r\n            cPickorder.currentPickOrder.lastSelectedIndexInt = cPickorder.currentPickOrder.pGetIndexOfNotHandledLineInt(cPickorderLine.currentPickOrderLine);\r\n\r\n            //we have a line to handle, so start Pick activity\r\n            this.mStartPickActivity();\r\n            return;\r\n        }\r\n\r\n        //Check if we have scanned an ARTICLE and check if there are not handled linesInt for this ARTICLE\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n\r\n            if (!cSetting.PICK_BIN_IS_ITEM() && !cPickorder.currentPickOrder.isSingleBinBln() ) {\r\n                //unknown scan\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.error_article_scan_not_allowed), pvBarcodeScan.getBarcodeOriginalStr());\r\n                return;\r\n            }\r\n\r\n            String barcodewithoutPrefix = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n            cPickorderLine pickorderLineMatched = cPickorder.currentPickOrder.pGetLineNotHandledByBarcode(pvBarcodeScan);\r\n\r\n            // Article always had BIN, so ARTICLE is EQUAL to BIN\r\n            if (pickorderLineMatched== null) {\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.nothing_more_todo_for_article), barcodewithoutPrefix);\r\n                return;\r\n            }\r\n\r\n            cPickorderLine.currentPickOrderLine = pickorderLineMatched;\r\n\r\n            cPickorderBarcode.currentPickorderBarcode = cPickorderBarcode.pGetPickbarcodeViaBarcode(pvBarcodeScan);\r\n            if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.nothing_more_todo_for_article), barcodewithoutPrefix);\r\n                return;\r\n            }\r\n\r\n            hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n            if (!hulpResult.resultBln) {\r\n                this.mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n                return;\r\n            }\r\n\r\n            //Set last selected index\r\n            cPickorder.currentPickOrder.lastSelectedIndexInt = cPickorder.currentPickOrder.pGetIndexOfNotHandledLineInt(cPickorderLine.currentPickOrderLine);\r\n\r\n            if (cPickorderLine.currentPickOrderLine.getQuantityDbl() == 1) {\r\n                if (cSetting.PICK_BIN_IS_ITEM() || cPickorder.currentPickOrder.isSingleBinBln() && !cPickorder.currentPickOrder.isPickAutoNextBln()) {\r\n                    //Add barcode\r\n                    cPickorderLine.currentPickOrderLine.pAddOrUpdateLineBarcode(cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n\r\n                    //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n                    cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n                    this.mSendPickorderLine();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            cPickorder.currentPickOrder.pickorderBarcodeScanned = cPickorderBarcode.currentPickorderBarcode;\r\n\r\n            //we have a line to handle, so start Pick activity\r\n            this.mStartPickActivity();\r\n            return;\r\n        }\r\n\r\n        //unknown scan\r\n        this.mDoUnknownScan(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n    }\r\n\r\n    public void pCheckAllDone() {\r\n\r\n        // If not everything is done, then leave\r\n        if (!this.mAllLinesDoneBln()) {\r\n            this.imageButtonCloseOrder.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        //All lines are done\r\n\r\n        if (!cConnection.isInternetConnectedBln()) {\r\n            cConnection.pShowTryAgainDialog();\r\n            this.imageButtonCloseOrder.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        // Show close button, so user can close the order manually\r\n        this.imageButtonCloseOrder.setVisibility(View.VISIBLE);\r\n\r\n        // If not everything is sent, then leave\r\n        if (!this.mCheckAndSentLinesBln()) {\r\n            return;\r\n        }\r\n\r\n        //We started an split order, so don't show done pop-up\r\n        if (PickorderLinesActivity.startedViaOrderSelectBln && !cPickorder.currentPickOrder.getDocumentStr().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.pQuantityHandledDbl() == 0) {\r\n            // Show order done fragment\r\n            this.mShowPickDoneFragment(false);\r\n            return;\r\n        }\r\n\r\n        // If there is no next step, then we are done\r\n        if (!cPickorder.currentPickOrder.isPackAndShipNeededBln() && !cPickorder.currentPickOrder.isBPBln() && !cPickorder.currentPickOrder.isBCBln()) {\r\n            if (!cPickorder.currentPickOrder.isPickActivityBinRequiredBln() ||\r\n                    !cPickorder.currentPickOrder.getCurrentLocationStr().isEmpty()) {\r\n\r\n                // Show pick done fragment\r\n                this.mShowPickDoneFragment(false);\r\n                return;\r\n            }\r\n\r\n            // Show order done fragment\r\n            this.mShowPickDoneFragment(true);\r\n        }\r\n\r\n        //Show Current Location fragment\r\n        if (cPickorder.currentPickOrder.isPickActivityBinRequiredBln() &&\r\n                cPickorder.currentPickOrder.getCurrentLocationStr().isEmpty()) {\r\n            // Show order done fragment\r\n            this.mShowCurrentLocationFragment();\r\n            return;\r\n        }\r\n\r\n        //We are done\r\n        this.pPickingDone(\"\");\r\n\r\n    }\r\n\r\n    public  void pPickingDone(String pvCurrentLocationStr) {\r\n\r\n        //If we received a current location, then update it via the webservice and locally\r\n        //If we didn't receive a location, then we picked 0 items, so it's oke\r\n        if (!pvCurrentLocationStr.isEmpty()){\r\n            if (!cPickorder.currentPickOrder.pUpdateCurrentLocationBln(pvCurrentLocationStr)) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_currentlocation_could_not_update), \"\", true, false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.pQuantityHandledDbl() > 0 ) {\r\n            //Pick Transfer\r\n            if (cPickorder.currentPickOrder.isTransferBln()) {\r\n                if (!cPickorder.currentPickOrder.isSortableBln()&&\r\n                        cPickorder.currentPickOrder.isPickTransferAskWorkplaceBln() && cWorkplace.currentWorkplace == null ) {\r\n\r\n                    //If we don't need to ship, then we ask for a workplace now otherwise ask it later\r\n                    if (!cPickorder.currentPickOrder.isPackAndShipNeededBln()) {\r\n                        this.mShowWorkplaceFragment();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            else {\r\n\r\n                //Pick Sales\r\n\r\n                //Check if we need to select a workplaceStr\r\n                if (!cPickorder.currentPickOrder.isSortableBln()&&\r\n                   cPickorder.currentPickOrder.isPickSalesAskWorkplaceBln() && cWorkplace.currentWorkplace == null ) {\r\n\r\n                    //If we don't need to ship, then we ask for a workplace now otherwise ask it later\r\n                    if (!cPickorder.currentPickOrder.isPackAndShipNeededBln()) {\r\n                        this.mShowWorkplaceFragment();\r\n                        return;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n\r\n            //We did nothing, but still want to print manco documents\r\n            if (!cPickorder.currentPickOrder.getDocumentStr().isEmpty()) {\r\n                this.mShowWorkplaceFragment();\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.pClosePickAndDecideNextStep();\r\n\r\n    }\r\n\r\n    public  void pClosePickAndDecideNextStep(){\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandlePickFaseHandledAndDecideNextStep).start();\r\n\r\n    }\r\n\r\n    public  void pLeaveActivity(){\r\n\r\n        cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPicking);\r\n\r\n        //If activity bin is not required, then don't show the fragment\r\n        if (!cPickorder.currentPickOrder.isPickActivityBinRequiredBln() ||\r\n            cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 ||\r\n            !cPickorder.currentPickOrder.getCurrentLocationStr().isEmpty()) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        this.mShowCurrentLocationFragment();\r\n\r\n    }\r\n\r\n    public void pAskAbort() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(cAppExtension.context);\r\n        builder.setTitle(R.string.message_abort_header);\r\n        builder.setMessage(cAppExtension.activity.getString(R.string.message_abort_text));\r\n        builder.setPositiveButton(R.string.button_abort, (dialogInterface, i) -> {\r\n            cUserInterface.pCheckAndCloseOpenDialogs();\r\n            mAbortOrder();\r\n        });\r\n\r\n        builder.setNeutralButton(R.string.cancel, (dialogInterface, i) -> cUserInterface.pCheckAndCloseOpenDialogs());\r\n\r\n        builder.show();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private  boolean mPickFaseHandledBln(){\r\n\r\n        cResult hulpResult;\r\n        hulpResult = new cResult();\r\n        hulpResult.resultBln = false;\r\n\r\n        hulpResult = cPickorder.currentPickOrder.pPickFaseHandledViaWebserviceRst();\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if ( hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown ) {\r\n            cUserInterface.pDoExplodingScreen(hulpResult.messagesStr(),\"\",true,true);\r\n            return  false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold ) {\r\n\r\n            //If we got any comments, show them\r\n            if (cPickorder.currentPickOrder.pFeedbackCommentObl() != null && cPickorder.currentPickOrder.pFeedbackCommentObl().size() > 0 ) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return  false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mHandlePickFaseHandledAndDecideNextStep(){\r\n\r\n        if (!this.mPickFaseHandledBln()) {\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.isStorableBln()) {\r\n            this.mStoreNextStep();\r\n            return;\r\n        }\r\n\r\n\r\n        if (cPickorder.currentPickOrder.isSortableBln()) {\r\n            this.mSortNextStep();\r\n            return;\r\n        }\r\n\r\n        //If Pack or Ship is not required, then we are dibe\r\n        if (cPickorder.currentPickOrder.isPackAndShipNeededBln()) {\r\n            this.mPackAndShipNextStap();\r\n            return;\r\n        }\r\n\r\n        this.mStartOrderSelectActivity();\r\n\r\n    }\r\n\r\n    private void mChangeSelectedTab(TabLayout.Tab pvTab) {\r\n\r\n        switch (pvTab.getPosition()) {\r\n            case 0:\r\n                this.pChangeTabCounterText(cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityNotHandledDbl()) + \"/\" + cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityTotalDbl()));\r\n                break;\r\n            case 1:\r\n                this.pChangeTabCounterText(cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityHandledDbl()) + \"/\" + cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityTotalDbl()));\r\n                break;\r\n            case 2:\r\n                this.pChangeTabCounterText(cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityTotalDbl()));\r\n                break;\r\n            default:\r\n\r\n        }\r\n    }\r\n\r\n    private void mSetShowCommentListener() {\r\n        this.imageButtonComments.setOnClickListener(view -> mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackAndPickCommentObl(),\"\"));\r\n    }\r\n\r\n    private void mSetCloseOrderListener() {\r\n\r\n        this.imageButtonCloseOrder.setOnClickListener(view -> {\r\n\r\n          PickorderLinesActivity.startedViaOrderSelectBln = false;\r\n          pCheckAllDone();\r\n\r\n        });\r\n    }\r\n\r\n    private   void mDoUnknownScan(String pvErrorMessageStr, String pvScannedBarcodeStr) {\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, pvScannedBarcodeStr, true, true);\r\n    }\r\n\r\n    private  void mShowCommentsFragment(List<cComment> pvDataObl, String pvTitleStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(cPublicDefinitions.KEY_COMMENTHEADER, pvTitleStr);\r\n\r\n        CommentFragment commentFragment = new CommentFragment(pvDataObl);\r\n        commentFragment.setArguments(bundle);\r\n\r\n        commentFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.COMMENTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private  void mShowCurrentLocationFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        cUserInterface.pPlaySound(R.raw.goodsound, null);\r\n\r\n        final CurrentLocationFragment currentLocationFragment = new CurrentLocationFragment();\r\n        currentLocationFragment.setCancelable(true);\r\n        currentLocationFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.CURRENTLOCATION_TAG);\r\n    }\r\n\r\n    private  void mShowWorkplaceFragment() {\r\n\r\n        WorkplaceFragment workplaceFragment = new WorkplaceFragment();\r\n        workplaceFragment.setCancelable(false);\r\n        workplaceFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.WORKPLACEFRAGMENT_TAG);\r\n    }\r\n\r\n    private  void mShowPickDoneFragment(Boolean pvShowCurrentLocationBln) {\r\n\r\n        cUserInterface.pPlaySound(R.raw.goodsound, null);\r\n\r\n        final StepDoneFragment stepDoneFragment = new StepDoneFragment(cAppExtension.activity.getString(R.string.message_pick_done), cAppExtension.activity.getString(R.string.message_close_pick_fase) , pvShowCurrentLocationBln);\r\n        stepDoneFragment.setCancelable(false);\r\n        stepDoneFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ORDERDONE_TAG);\r\n    }\r\n\r\n    private  Boolean mCheckAndSentLinesBln() {\r\n\r\n        final List<cPickorderLine> linesToSendObl = cPickorder.currentPickOrder.pGetLinesToSendFromDatabaseObl();\r\n\r\n        // If there is nothing to send, then we are done\r\n        if (linesToSendObl.size() == 0 ) {\r\n            return  true;\r\n        }\r\n\r\n        this.mShowSending();\r\n\r\n\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        Callable<Boolean> callableBln = () -> {\r\n\r\n            // Try to send each line, if one failes then stop\r\n            for (cPickorderLine pickorderLine : linesToSendObl) {\r\n\r\n                //Set the current line\r\n                cPickorderLine.currentPickOrderLine = pickorderLine;\r\n\r\n                //Try to send the line\r\n               cPickorderLine.currentPickOrderLine .pHandledBln();\r\n\r\n            }\r\n            return  true;\r\n        };\r\n\r\n\r\n        try {\r\n            Future<Boolean> callableResultBln = executorService.submit(callableBln);\r\n            Boolean hulpBln = callableResultBln.get();\r\n\r\n            if (!hulpBln) {\r\n                    mShowNotSent();\r\n                 return false;\r\n            }\r\n            this.mShowSent();\r\n            return  true;\r\n        }\r\n        catch (InterruptedException | ExecutionException ignored) {\r\n        }\r\n      return  false;\r\n\r\n\r\n    }\r\n\r\n    private  Boolean mAllLinesDoneBln() {\r\n        return cPickorder.currentPickOrder.pGetLinesNotHandledFromDatabaseObl().size() <= 0;\r\n    }\r\n\r\n    private  void mShowSending() {\r\n        final SendingFragment sendingFragment = new SendingFragment();\r\n        sendingFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            // show my popup\r\n            sendingFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.SENDING_TAG);\r\n        });\r\n    }\r\n\r\n    private void mShowNotSent() {\r\n        Fragment fragment = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.SENDING_TAG);\r\n        if (fragment != null) {\r\n            if (fragment instanceof SendingFragment) {\r\n                ((SendingFragment) fragment).pShowCrashAnimation(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mShowSent() {\r\n        Fragment fragment = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.SENDING_TAG);\r\n        if (fragment != null) {\r\n            if (fragment instanceof SendingFragment) {\r\n                ((SendingFragment) fragment).pShowFlyAwayAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mStepFailed(String pvErrorMessageStr, cWarehouseorder.StepCodeEnu pvStepCodeEnu,int pvWorkflowPickStepInt ){\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, cPickorder.currentPickOrder.getOrderNumberStr(), true, true );\r\n        cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(pvStepCodeEnu,pvWorkflowPickStepInt);\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n    }\r\n\r\n    private  void mAskSort() {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(cAppExtension.context);\r\n\r\n            builder.setMessage(cAppExtension.context.getString(R.string.question_open_sort));\r\n            builder.setTitle(cAppExtension.context.getString(R.string.question_open_sort_title));\r\n            builder.setPositiveButton(R.string.open, (dialog, id) -> mStartSortActivity());\r\n            builder.setNegativeButton(R.string.no, (dialogInterface, i) -> mStartOrderSelectActivity());\r\n            builder.setIcon(R.drawable.ic_menu_sort);\r\n            builder.show();\r\n        });\r\n    }\r\n\r\n    private  void mAskShip() {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(cAppExtension.context);\r\n\r\n            builder.setMessage(cAppExtension.context.getString(R.string.question_open_ship));\r\n            builder.setTitle(cAppExtension.context.getString(R.string.question_open_ship_title));\r\n            builder.setPositiveButton(R.string.open, (dialog, id) -> mStartShipActivity());\r\n            builder.setNegativeButton(R.string.no, (dialogInterface, i) -> mStartOrderSelectActivity());\r\n            builder.setIcon(R.drawable.ic_menu_ship);\r\n            builder.show();\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    private  void mStoreNextStep(){\r\n\r\n        //If activity bin is not required, then don't show the fragment\r\n        if ( cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 ) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        // If setting is not defined, then ask user\r\n        if (cSetting.PICK_STORAGE_AUTO_START() == null) {\r\n            this.mAskSort();\r\n            return;\r\n        }\r\n\r\n        // If settings is false, then go back to order select\r\n        if (!cSetting.PICK_STORAGE_AUTO_START()) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        // If settings is true, then go  to sort\r\n        if (cSetting.PICK_STORAGE_AUTO_START()) {\r\n            this.mStartStoreActivity();\r\n        }\r\n\r\n    }\r\n\r\n    private  void mSortNextStep(){\r\n\r\n        //If activity bin is not required, then don't show the fragment\r\n        if ( cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 ) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        // If setting is not defined, then ask user\r\n        if (cSetting.PICK_PACK_AND_SHIP_AUTO_START() == null) {\r\n            this.mAskSort();\r\n            return;\r\n        }\r\n\r\n        // If settings is false, then go back to order select\r\n        if (!cSetting.PICK_SORT_AUTO_START()) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        // If settings is true, then go  to sort\r\n        if (cSetting.PICK_SORT_AUTO_START()) {\r\n            this.mStartSortActivity();\r\n        }\r\n\r\n    }\r\n\r\n    private void mPackAndShipNextStap(){\r\n\r\n        //If activity bin is not required, then don't show the fragment\r\n        if ( cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 ) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        // If setting is not defined, then ask user\r\n        if (cSetting.PICK_PACK_AND_SHIP_AUTO_START() == null) {\r\n            this.mAskShip();\r\n            return;\r\n        }\r\n\r\n        // If settings is false, then go back to order select\r\n            if (!cSetting.PICK_PACK_AND_SHIP_AUTO_START()) {\r\n                this.mStartOrderSelectActivity();\r\n                return;\r\n            }\r\n\r\n        // If settings is true, then go  to ship\r\n            if (cSetting.PICK_PACK_AND_SHIP_AUTO_START()) {\r\n                this.mStartShipActivity();\r\n            }\r\n\r\n    }\r\n\r\n    private void mTryToLeaveActivity(){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_sure_leave_pick_screen_title),\r\n                cAppExtension.activity.getString(R.string.message_sure_leave_pick_screen_text),cAppExtension.activity.getString(R.string.message_cancel),cAppExtension.activity.getString(R.string.message_leave), false);\r\n        acceptRejectFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            // show my popup\r\n            acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n        });\r\n\r\n    }\r\n\r\n    private  void mStartOrderSelectActivity() {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            Intent intent = new Intent(cAppExtension.context, PickorderSelectActivity.class);\r\n            PickorderSelectActivity.startedViaMenuBln = false;\r\n           startActivity(intent);\r\n           finish();\r\n        });\r\n\r\n    }\r\n\r\n    private  void mStartSortActivity() {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleStartSortActivity).start();\r\n\r\n    }\r\n\r\n    private  void mStartStoreActivity() {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleStartStoreActivity).start();\r\n\r\n    }\r\n\r\n    private  void mHandleStartStoreActivity(){\r\n\r\n        //Clear workplaceStr, so you have to select it in the next step\r\n        cWorkplace.currentWorkplace = null;\r\n\r\n        //Try to lock the pickorder\r\n        if (!cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_Picking, cWarehouseorder.WorkflowPickStepEnu.PickStorage).resultBln) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_couldnt_lock_order),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickStorage);\r\n            return;\r\n        }\r\n\r\n        //Get sort linesInt\r\n        if (!cPickorder.currentPickOrder.pGetStorageLinesViaWebserviceBln(true)) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_getting_sort_lines_failed),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickStorage);\r\n            return;\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            //Show Sort Activity\r\n            Intent intent = new Intent(cAppExtension.context, StoreorderLinesActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n        });\r\n    }\r\n\r\n    private  void mHandleStartSortActivity(){\r\n\r\n        //Clear workplaceStr, so you have to select it in the next step\r\n        cWorkplace.currentWorkplace = null;\r\n\r\n        //Try to lock the pickorder\r\n        if (!cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_Picking, cWarehouseorder.WorkflowPickStepEnu.PickSorting).resultBln) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_couldnt_lock_order),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return;\r\n        }\r\n\r\n        //Get sort linesInt\r\n        if (!cPickorder.currentPickOrder.pGetLinesViaWebserviceBln(true,cWarehouseorder.PickOrderTypeEnu.SORT)) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_getting_sort_lines_failed),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return;\r\n        }\r\n\r\n        if (!cPickorder.currentPickOrder.pGetPropertyLineDataViaWebserviceBln()) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_get_property_line_data_failed),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return;\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            //Show Sort Activity\r\n            Intent intent = new Intent(cAppExtension.context, SortorderLinesActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n        });\r\n    }\r\n\r\n    private  void mStartShipActivity() {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleStartShipActivity).start();\r\n\r\n    }\r\n\r\n    private  void mHandleStartShipActivity(){\r\n\r\n        cResult hulpResult;\r\n\r\n        if (!this.mTryToLockShipOrderBln()) {\r\n            return;\r\n        }\r\n\r\n        hulpResult = cPickorder.currentPickOrder.pGetShipmentDetailsRst();\r\n        if (!hulpResult.resultBln) {\r\n            this.mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return;\r\n        }\r\n\r\n        //Show ShipLines\r\n        Intent intent = new Intent(cAppExtension.context, ShiporderLinesActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n\r\n    }\r\n\r\n    private  void mStartPickActivity(){\r\n        //we have a line to handle, so start Pick activity\r\n        Intent intent = new Intent(cAppExtension.context, PickorderPickActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n    }\r\n\r\n    private  void mShowComments(){\r\n\r\n        if (cPickorder.currentPickOrder.pFeedbackAndPickCommentObl() == null || cPickorder.currentPickOrder.pFeedbackAndPickCommentObl().size() == 0) {\r\n            this.imageButtonComments.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonComments.setVisibility(View.VISIBLE);\r\n\r\n        //We already showed the comments\r\n        if (cComment.commentsShownBln) {\r\n            return;\r\n        }\r\n\r\n        this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackAndPickCommentObl(),\"\");\r\n        cComment.commentsShownBln = true;\r\n    }\r\n\r\n    private  boolean mTryToLockShipOrderBln(){\r\n\r\n        cResult hulpResult;\r\n        hulpResult = cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown ) {\r\n            this.mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return  false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if ( hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete ||\r\n              hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart ) {\r\n\r\n\r\n            //If we got any comments, show them\r\n            if (cPickorder.currentPickOrder.pFeedbackCommentObl() != null && cPickorder.currentPickOrder.pFeedbackCommentObl().size() > 0 ) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return  false;\r\n        }\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  cResult mCheckDestionationRst(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cResult resultRst = new cResult();\r\n\r\n        //If we don't need a branch, we are done\r\n        if (!cPickorder.currentPickOrder.isPFBln()) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.destionationBranch() != null) {\r\n            cPickorder.currentPickOrder.scannedBranch = cPickorder.currentPickOrder.destionationBranch();\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        //Check if scan matches a branch in open lines\r\n        cPickorder.currentPickOrder.scannedBranch = cPickorder.currentPickOrder.pGetBranchForOpenLines(pvBarcodeScan.getBarcodeOriginalStr());\r\n        if (cPickorder.currentPickOrder.scannedBranch  != null) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        //If we don't have a match, check if we have a location scan\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.LOCATION)) {\r\n            cPickorder.currentPickOrder.scannedBranch  = null;\r\n            resultRst.resultBln = false;\r\n            resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_scan_is_not_location));\r\n            return  resultRst;\r\n        }\r\n\r\n        //We have a location scan, now strip the prefix and check if plain value matches a branch in open lines\r\n        String barcodewithoutPrefix = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n        cPickorder.currentPickOrder.scannedBranch  = cPickorder.currentPickOrder.pGetBranchForOpenLines(barcodewithoutPrefix);\r\n        if (cPickorder.currentPickOrder.scannedBranch  != null) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        resultRst.resultBln = false;\r\n        resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_location_incorrect));\r\n        return  resultRst;\r\n\r\n    }\r\n\r\n    private void mSetTabLayout(){\r\n\r\n        if (this.pickorderLinesTabLayout.getTabCount() == 0) {\r\n            this.pickorderLinesTabLayout.addTab(this.pickorderLinesTabLayout.newTab().setText(R.string.tab_pickorderline_topick));\r\n            this.pickorderLinesTabLayout.addTab(this.pickorderLinesTabLayout.newTab().setText(R.string.tab_pickorderline_picked));\r\n            this.pickorderLinesTabLayout.addTab(this.pickorderLinesTabLayout.newTab().setText(R.string.tab_pickorderline_total));\r\n        }\r\n\r\n\r\n        PickorderLinesPagerAdapter pickorderLinesPagerAdapter = new PickorderLinesPagerAdapter(this.pickorderLinesTabLayout.getTabCount());\r\n        this.pickorderLinesViewPager.setAdapter(pickorderLinesPagerAdapter);\r\n        this.pickorderLinesViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(this.pickorderLinesTabLayout));\r\n        this.pickorderLinesTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab pvTab) {\r\n                pickorderLinesViewPager.setCurrentItem(pvTab.getPosition());\r\n                mChangeSelectedTab(pvTab);\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab pvTab) {\r\n                cUserInterface.pKillAllSounds();\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab pvTab) {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mAbortOrder() {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        if (!cPickorder.currentPickOrder.pAbortBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_couldnt_abort_order), cPickorderLine.currentPickOrderLine.getLineNoInt().toString(), true, true );\r\n            return;\r\n        }\r\n\r\n        cUserInterface.pHideGettingData();\r\n\r\n        //Check if we are done\r\n        PickorderLinesActivity.startedViaOrderSelectBln = false;\r\n        this.pCheckAllDone();\r\n\r\n    }\r\n\r\n    private  void mSendPickorderLine() {\r\n\r\n        //If internet is not connected\r\n        if (!cConnection.isInternetConnectedBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), R.raw.badsound);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n            return;\r\n        }\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.pHandledBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), R.raw.badsound);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n        }\r\n\r\n        cPickorder.currentPickOrder.lastSelectedIndexInt = 0;\r\n        cPickorderLine.currentPickOrderLine = null;\r\n        cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_line_send), R.raw.headsupsound);\r\n        this.mActivityInitialize();\r\n\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLinesActivity.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLinesActivity.java	(date 1622789033628)
@@ -238,16 +238,17 @@
 
         this.mFindViews();
 
+        this.mSetListeners();
+
+        if (cPickorder.currentPickOrder == null) {
+            return;
+        }
+
         this.mSetToolbar(getResources().getString(R.string.screentitle_pickorderlines));
 
         this.mFieldsInitialize();
 
-        //Set listeners here, so click listeners only work after activity is shown
-        this.mSetListeners();
-
         this.mInitScreen();
-
-        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());
     }
 
     @Override
@@ -281,7 +282,6 @@
         this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);
         this.toolbarTitle.setText(pvScreenTitleStr);
         this.toolbarTitle.setSelected(true);
-
         this.toolbarSubtext.setText(cPickorder.currentPickOrder.getOrderNumberStr());
         this.toolbarSubtext.setSelected(true);
 
@@ -295,6 +295,7 @@
 
     @Override
     public void mFieldsInitialize() {
+
         this.imageButtonCloseOrder.setVisibility(View.INVISIBLE);
         this.mSetTabLayout();
     }
Index: app/src/main/java/SSU_WHS/Basics/Settings/cSetting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.Settings;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.Fragments.Packaging.PackagingUsedFragment;\r\n\r\npublic class cSetting {\r\n\r\n    //region Public Properties\r\n    private String nameStr;\r\n    public String getNameStr() {\r\n        return nameStr;\r\n    }\r\n\r\n    private settingEnu getSettingEnu(){\r\n\r\n        settingEnu settingEnu;\r\n\r\n        try {\r\n            settingEnu =   cSetting.settingEnu.valueOf(this.getNameStr().toUpperCase());\r\n        }\r\n        catch(Exception e) {\r\n            settingEnu = cSetting.settingEnu.UNKNOWN;\r\n        }\r\n\r\n             return settingEnu ;\r\n\r\n    }\r\n\r\n    private String valueStr;\r\n    public String getValueStr() {\r\n        return valueStr;\r\n    }\r\n\r\n    private cSettingsEntity settingsEntity;\r\n\r\n    private cSettingsViewModel getSettingsViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cSettingsViewModel.class);\r\n    }\r\n\r\n    public static List<cSetting> allSettingsObl;\r\n    public  static boolean settingsAvailableBln;\r\n\r\n    public enum settingEnu {\r\n        //from the resultobl\r\n        SCANNERFIXEDBRANCH,\r\n        SCANNERDESCRIPTION,\r\n        SCANNERREQUIREDVERSION,\r\n        SCANNERAPPLICATIONENVIRONMENT,\r\n        SCANNERCULTURE,\r\n        SCANNERREQUIREDCONFIGURATION,\r\n        SCANNERREAPPLYCONFIGURATION,\r\n        SCANNERVERSIONCONFIGVERSION,\r\n        SCANNERREQUIREDSCANNERVERSIONCONFIGVERSION,\r\n\r\n        //settings\r\n        ARTIKELMASK,\r\n        CACHED_DATA_MAX_AGE_ARTICLE,\r\n        CACHED_DATA_MAX_AGE_ARTICLE_IMAGE,\r\n        CACHED_DATA_MAX_AGE_BARCODE,\r\n        CACHED_DATA_MAX_AGE_BIN_ARTICLE,\r\n        CACHED_DATA_MAX_AGE_PROPERTY,\r\n        CACHED_DATA_MAX_AGE_STOCK,\r\n        EXTRET_AMOUNT_MANUAL,\r\n        EXTRET_AUTO_ACCEPT_AT_NEW_BIN,\r\n        EXTRET_AUTO_ACCEPT_AT_NEW_ITEM,\r\n        EXTRET_AUTO_CREATE_ORDER,\r\n        EXTRET_BARCODE_CHECK,\r\n        EXTRET_NEW_WORKFLOWS,\r\n        EXTRET_REASON_REQUIRED,\r\n        GENERIC_PRINT_BINLABEL,\r\n        GENERIC_PRINT_ITEMLABEL,\r\n        GENERIC_SHOW_BIN_DESCRIPTION,\r\n        GENERIC_STATUS_UPDATE,\r\n        GENERIC_STATUS_UPDATE_START_SYNCHRONOUS,\r\n        GENERIC_UNLOCK_BUSY_ORDERS_ALLOWED,\r\n        GENERIC_WAKE_SERVER_AT_STARTUP,\r\n        GENERIC_WEBSERVICE_TIMEOUT_ERP_IN_S,\r\n        GENERIC_WEBSERVICE_TIMEOUT_SSU_IN_S,\r\n        INTERFACE_RESULT_METHOD,\r\n        INV_ADD_EXTRA_BIN,\r\n        INV_ADD_EXTRA_LINES,\r\n        INV_AMOUNT_MANUAL,\r\n        INV_AUTO_CLOSE_BIN,\r\n        INV_AUTO_CREATE_ORDER,\r\n        INV_BARCODE_CHECK,\r\n        INV_BIN_MANUAL,\r\n        INV_NEW_WORKFLOWS,\r\n        INV_PRECOUNT,\r\n        INV_SHOW_EXT_REF,\r\n        INV_RESET_PASSWORD,\r\n        MOVE_AMOUNT_MANUAL,\r\n        MOVE_AUTO_ACCEPT_AT_NEW_BIN,\r\n        MOVE_AUTO_ACCEPT_AT_NEW_ITEM,\r\n        MOVE_AUTO_ACCEPT_AT_REQUESTED,\r\n        MOVE_AUTO_ACCEPT_VALIDATION_MESSAGE,\r\n        MOVE_AUTO_CREATE_ORDER,\r\n        MOVE_AUTO_CREATE_ORDER_MI,\r\n        MOVE_AUTO_CREATE_ORDER_MO,\r\n        MOVE_AUTO_CREATE_ORDER_MV,\r\n        MOVE_BARCODE_CHECK,\r\n        MOVE_CONTAINER_REQUIRED,\r\n        MOVE_MI_BATCH_TAKE_AVAILABLE,\r\n        MOVE_MI_BATCH_TAKE_DEFAULT,\r\n        MOVE_MI_BATCH_TAKE_REQUIRED,\r\n        MOVE_MO_BATCH_PLACE_AVAILABLE,\r\n        MOVE_MO_BATCH_PLACE_DEFAULT,\r\n        MOVE_MO_BATCH_PLACE_REQUIRED,\r\n        MOVE_MT_PLACE_AMOUNT_MANUAL,\r\n        MOVE_MT_PLACE_AUTO_ITEM,\r\n        MOVE_MT_TAKE_ALLOW_END,\r\n        MOVE_MT_TAKE_AMOUNT_MANUAL,\r\n        MOVE_MT_TAKE_AUTO_ACCEPT_SINGLE_PIECE,\r\n        MOVE_MT_TAKE_AUTO_ITEM,\r\n        MOVE_MT_TAKE_AUTO_ITEM_CONTAINER_ONCE,\r\n        MOVE_MT_TAKE_IGNORE_UNDERTAKE,\r\n        MOVE_MT_TRACK_CURRENT_LOCATION,\r\n        MOVE_MV_PLACE_AFTER_TAKES_DONE,\r\n        MOVE_NEW_WORKFLOWS,\r\n        MOVE_NO_EXTRA_BINS,\r\n        MOVE_NO_EXTRA_ITEMS,\r\n        MOVE_NO_EXTRA_PIECES,\r\n        MOVE_ORDER_BIN_REQUIRED,\r\n        MOVE_VALIDATE_STOCK,\r\n        MOVE_VALIDATE_STOCK_ENFORCE,\r\n        MOVEITEM_AMOUNT_MANUAL,\r\n        MOVEITEM_WITH_AMOUNT,\r\n        MOVE_WITH_PICTURE,\r\n        MOVE_WITH_PICTURE_AUTO_OPEN,\r\n        MOVE_WITH_PICTURE_PREFETCH,\r\n        OVERPICK_PERCENTAGE,\r\n        OVERPICKEN,\r\n        PICK_AUTO_ACCEPT,\r\n        PICK_AUTO_ACCEPT_AT_NEW_BIN,\r\n        PICK_AUTO_ACCEPT_AT_NEW_ITEM,\r\n        PICK_AUTO_ACCEPT_AT_NEW_LOCATION,\r\n        PICK_AUTO_CREATE_ORDER,\r\n        PICK_AUTO_CREATE_ORDER_SALES,\r\n        PICK_AUTO_CREATE_ORDER_TRANSFER,\r\n        PICK_AUTO_NEXT,\r\n        PICK_AUTO_START_PICKEN,\r\n        PICK_BARCODE_CHECK,\r\n        PICK_BIN_IS_ITEM,\r\n        PICK_BIN_MANUAL,\r\n        PICK_CONTAINER_IS_COLLI,\r\n        PICK_FINISH_PACK_FASE_AVAILABLE,\r\n        PICK_FINISH_PACK_SINGLE_PIECE,\r\n        PICK_FINISH_PACK_SINGLE_PIECE_MANUAL,\r\n        PICK_INCOMPLETE_AUTO_STORAGE,\r\n        PICK_INCOMPLETE_STORE,\r\n        PICK_INCOMPLETE_TO_NEW_PICKORDER,\r\n        PICK_LOCATION_MANUAL,\r\n        PICK_NEW_WORKFLOWS,\r\n        PICK_NOTIFY_NO_NETWORK,\r\n        PICK_PACK_AND_SHIP_AUTO_START,\r\n        PICK_PACK_AND_SHIP_FASE_AVAILABLE,\r\n        PICK_PACKING_SALES,\r\n        PICK_PACKING_TABLE_IS_BIN,\r\n        PICK_PACKING_TABLE_SCAN_REQUIRED,\r\n        PICK_PACKING_TRANSFER,\r\n        PICK_STORAGE_AUTO_START,\r\n        PICK_PER_SCAN,\r\n        PICK_PICK_PV_VKO_EACH_PIECE,\r\n        PICK_PICK_TO_CONTAINER,\r\n        PICK_PICK_TO_CONTAINER_TYPE,\r\n        PICK_PRINT_ADDRESSLABEL,\r\n        PICK_PRINT_ADDRESSLABEL_QUANTITY,\r\n        PICK_PRINT_ADDRESSLABEL_TEMPLATE,\r\n        PICK_PRINT_CONTENTLABEL,\r\n        PICK_PRINT_CONTENTLABEL_QUANTITY,\r\n        PICK_PRINT_CONTENTLABEL_TEMPLATE,\r\n        PICK_PRINT_CONTENTLABEL_TEMPLATE_NOCONTENT,\r\n        PICK_QC_CHECK_REJECT,\r\n        PICK_QC_FASE_AVAILABLE,\r\n        PICK_REJECT_DURING_PICK,\r\n        PICK_REJECT_DURING_SORT,\r\n        PICK_REMEMBER_LINE,\r\n        PICK_SALES_ASK_WORKPLACE,\r\n        PICK_SELECTEREN_BARCODE,\r\n        PICK_SEPARATE_QC,\r\n        PICK_SHIPPING_AGENT_OVERRIDABLE,\r\n        PICK_SHIPPING_BATCH_PRINT,\r\n        PICK_SHIPPING_METHOD_OVERRIDABLE,\r\n        PICK_SHIPPING_PACKAGE_CONTENT_COUNT_REQUIRED,\r\n        PICK_SHIPPING_PACKAGE_OVERRIDABLE,\r\n        PICK_SHIPPING_PACKAGE_REQUIRED,\r\n        PICK_SHIPPING_PACKAGE_WEIGHT_REQUIRED,\r\n        PICK_SHIPPING_SALES,\r\n        PICK_SHIPPING_SERVICE_OVERRIDABLE,\r\n        PICK_SHIPPING_TRANSFER,\r\n        PICK_SHOW_EXT_REF,\r\n        PICK_SORT_FASE_AVAILABLE,\r\n        PICK_SOURCE_MANUAL,\r\n        PICK_STORE_FASE_AVAILABLE,\r\n        PICK_TRANSFER_ASK_WORKPLACE,\r\n        PICK_WITH_PICTURE,\r\n        PICK_WITH_PICTURE_AUTO_OPEN,\r\n        PICK_WITH_PICTURE_PREFETCH,\r\n        PICK_SHIPPING_QC_CHECK_COUNT,\r\n        REALTIME_BARCODE_CHECK,\r\n        RECEIVE_AMOUNT_MANUAL_EO,\r\n        RECEIVE_AMOUNT_MANUAL_MA,\r\n        RECEIVE_AMOUNT_MANUAL_OM,\r\n        RECEIVE_AUTO_CREATE_ORDER,\r\n        RECEIVE_AUTO_CREATE_ORDER_EO,\r\n        RECEIVE_AUTO_CREATE_ORDER_MA,\r\n        RECEIVE_AUTO_CREATE_ORDER_OM,\r\n        RECEIVE_BARCODE_CHECK,\r\n        RECEIVE_EXPORT_PART,\r\n        RECEIVE_INTAKE_EO_AUTO_ACCEPT_AT_NEW_ITEM,\r\n        RECEIVE_INTAKE_OM_AUTO_ACCEPT_AT_NEW_ITEM,\r\n        RECEIVE_NEW_WORKFLOWS,\r\n        RECEIVE_NO_EXTRA_BINS,\r\n        RECEIVE_NO_EXTRA_ITEMS,\r\n        RECEIVE_NO_EXTRA_PIECES,\r\n        RECEIVE_STORE_AUTO_ACCEPT_AT_NEW_BIN,\r\n        RECEIVE_STORE_AUTO_ACCEPT_AT_NEW_ITEM,\r\n        RECEIVE_STORE_AUTO_ACCEPT_AT_REQUESTED,\r\n        RECEIVE_STORE_AUTO_ACCEPT_VALIDATION_MESSAGE,\r\n        RECEIVE_STORE_DEVIATIONS_PASSWORD,\r\n        RETOUR_AMOUNT_MANUAL,\r\n        RETOUR_AUTO_ACCEPT_AT_NEW_ITEM,\r\n        RETOUR_AUTO_CREATE_ORDER_RV,\r\n        RETOUR_BARCODE_CHECK,\r\n        RETOUR_DOCUMENT_BARCODELAYOUT,\r\n        RETOUR_DOCUMENT_EACH_ITEM,\r\n        RETOUR_MULTI_DOCUMENT,\r\n        RETOUR_MULTI_DOCUMENT_POSSIBLE,\r\n        RETOUR_NEW_WORKFLOWS,\r\n        RETOUR_REASON_REQUIRED,\r\n        RETOUR_ORDER_BIN_NO_CHECK,\r\n        RETOUR_VALIDATE_CURRENT_LOCATION,\r\n        SELFPICK_AMOUNT_MANUAL,\r\n        SELFPICK_EXTERNAL_REFERENCES,\r\n        SELFPICK_LOGIN,\r\n        SELFPICK_LOGOUT,\r\n        SELFPICK_SHOW_PRICE,\r\n        SOFTWARE_DIRECTORY,\r\n        PICK_SORT_AUTO_START,\r\n        PICK_SORT_LOCATION_ADVICE,\r\n        PICK_SORT_LOCATION_ADVICE_MANDATORY,\r\n        GENERIC_ITEM_EXTRA_FIELD1,\r\n        GENERIC_ITEM_EXTRA_FIELD2,\r\n        GENERIC_ITEM_EXTRA_FIELD3,\r\n        GENERIC_ITEM_EXTRA_FIELD4,\r\n        GENERIC_ITEM_EXTRA_FIELD5,\r\n        GENERIC_ITEM_EXTRA_FIELD6,\r\n        GENERIC_ITEM_EXTRA_FIELD7,\r\n        GENERIC_ITEM_EXTRA_FIELD8,\r\n        UPDATE_PACKAGE_URL,\r\n        RECEIVE_INTAKE_EO_CREATE_EXTRA_ITEM_VALIDATION,\r\n        RECEIVE_EXTRA_PIECES_PERCENTAGE,\r\n        RECEIVE_EXTRA_PIECES_PERCENTAGE_MANDATORY,\r\n        RECEIVE_RESET_PASSWORD,\r\n        RECEIVE_DEVIATIONS_PASSWORD,\r\n        PACK_AND_SHIP_NEW_WORKFLOWS,\r\n        PACK_AND_SHIP_AUTO_CREATE_ORDER,\r\n        UNKNOWN\r\n    }\r\n\r\n    //end region Public Properties\r\n\r\n     //Region Constructor\r\n    private cSetting(JSONObject pvJsonObject) {\r\n        this.settingsEntity = new cSettingsEntity(pvJsonObject);\r\n        this.nameStr = this.settingsEntity.getNameStr();\r\n        this.valueStr = this.settingsEntity.getValueStr();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getSettingsViewModel().insert(this.settingsEntity);\r\n\r\n        if (cSetting.allSettingsObl == null){\r\n            cSetting.allSettingsObl = new ArrayList<>();\r\n        }\r\n        cSetting.allSettingsObl.add(this);\r\n        return  true;\r\n    }\r\n\r\n    private static cSetting mGetSettingByEnu(settingEnu pvSettingEnu){\r\n        if(cSetting.allSettingsObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cSetting setting : cSetting.allSettingsObl)\r\n        {\r\n            if(setting.getSettingEnu() == pvSettingEnu){\r\n                return  setting;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cSettingsViewModel settingsViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cSettingsViewModel.class);\r\n        settingsViewModel.deleteAll();\r\n        return true;\r\n            }\r\n\r\n    public static boolean pGetSettingsViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cSetting.allSettingsObl = null;\r\n            cSetting.pTruncateTableBln();\r\n        }\r\n\r\n        if (cSetting.allSettingsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cSettingsViewModel settingsViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cSettingsViewModel.class);\r\n        WebResult =  settingsViewModel.pGetSettingsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cSetting Setting = new cSetting(jsonObject);\r\n                Setting.pInsertInDatabaseBln();\r\n            }\r\n\r\n            cSetting.settingsAvailableBln = true;\r\n            return  true;\r\n        }\r\n        else {\r\n                cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETSETTINGS);\r\n                return  false;\r\n        }\r\n    }\r\n    //End Region Public Methods\r\n\r\n    //Region Settings\r\n\r\n    // GENERIC Settings\r\n\r\n    public  static boolean REALTIME_BARCODE_CHECK() {\r\n\r\n        cSetting Setting =  mGetSettingByEnu(settingEnu.REALTIME_BARCODE_CHECK);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean GENERIC_UNLOCK_BUSY_ORDERS_ALLOWED(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_UNLOCK_BUSY_ORDERS_ALLOWED);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n        if (Setting.valueStr.equalsIgnoreCase( \"\")) {\r\n            return  false;\r\n        }\r\n\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean GENERIC_PRINT_BINLABEL(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_PRINT_BINLABEL);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n        if (Setting.valueStr.equalsIgnoreCase( \"\")) {\r\n            return  false;\r\n        }\r\n\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean GENERIC_PRINT_ITEMLABEL(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_PRINT_ITEMLABEL);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n        if (Setting.valueStr.equalsIgnoreCase( \"\")) {\r\n            return  false;\r\n        }\r\n\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static String GENERIC_ITEM_EXTRA_FIELD1(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_ITEM_EXTRA_FIELD1);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static String GENERIC_ITEM_EXTRA_FIELD2(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_ITEM_EXTRA_FIELD2);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static String GENERIC_ITEM_EXTRA_FIELD3(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_ITEM_EXTRA_FIELD3);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static String GENERIC_ITEM_EXTRA_FIELD4(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_ITEM_EXTRA_FIELD4);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static String GENERIC_ITEM_EXTRA_FIELD5(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_ITEM_EXTRA_FIELD5);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static String GENERIC_ITEM_EXTRA_FIELD6(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_ITEM_EXTRA_FIELD6);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static String GENERIC_ITEM_EXTRA_FIELD7(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_ITEM_EXTRA_FIELD7);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static String GENERIC_ITEM_EXTRA_FIELD8(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.GENERIC_ITEM_EXTRA_FIELD8);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    // PICK Settings\r\n    public static boolean PICK_SORT_FASE_AVAILABLE(){\r\n\r\n            cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_SORT_FASE_AVAILABLE);\r\n            if (Setting == null) {\r\n                return  false;\r\n            }\r\n\r\n            return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_AUTO_ACCEPT(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_AUTO_ACCEPT);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_PACK_AND_SHIP_FASE_AVAILABLE(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_PACK_AND_SHIP_FASE_AVAILABLE);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_FINISH_PACK_FASE_AVAILABLE(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_FINISH_PACK_FASE_AVAILABLE);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_STORE_FASE_AVAILABLE(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_STORE_FASE_AVAILABLE);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n\r\n\r\n    public static boolean PICK_SHIPPING_SALES(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_SHIPPING_SALES);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_SALES_ASK_WORKPLACE(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_SALES_ASK_WORKPLACE);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_BIN_IS_ITEM(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_BIN_IS_ITEM);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_BIN_MANUAL(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_BIN_MANUAL);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_SORT_AUTO_START(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_SORT_AUTO_START);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        if (Setting.valueStr.equalsIgnoreCase( \"\")) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static String PICK_SORT_LOCATION_ADVICE(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_SORT_LOCATION_ADVICE);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static Boolean PICK_SORT_LOCATION_ADVICE_MANDATORY(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_SORT_LOCATION_ADVICE_MANDATORY);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        if (Setting.valueStr.equalsIgnoreCase( \"\")) {\r\n            return  null;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static Boolean PICK_PACK_AND_SHIP_AUTO_START(){\r\n\r\n        cSetting Setting =  mGetSettingByEnu(settingEnu.PICK_PACK_AND_SHIP_AUTO_START);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n        if (Setting.valueStr.equalsIgnoreCase( \"\")) {\r\n            return  null;\r\n        }\r\n\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static Boolean PICK_STORAGE_AUTO_START(){\r\n\r\n        cSetting Setting =  mGetSettingByEnu(settingEnu.PICK_STORAGE_AUTO_START);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n        if (Setting.valueStr.equalsIgnoreCase( \"\")) {\r\n            return  null;\r\n        }\r\n\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_BARCODE_CHECK(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_BARCODE_CHECK);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_PER_SCAN(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_PER_SCAN);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_SELECTEREN_BARCODE(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_SELECTEREN_BARCODE);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static List<String> PICK_NEW_WORKFLOWS(){\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_NEW_WORKFLOWS);\r\n        if (Setting == null || Setting.getValueStr().isEmpty()) {\r\n            return resultObl;\r\n        }\r\n\r\n        if (!Setting.getValueStr().contains(\";\")) {\r\n            resultObl.add(Setting.getValueStr());\r\n            return resultObl;\r\n        }\r\n\r\n        resultObl = new ArrayList<>(Arrays.asList(Setting.valueStr.split(\";\")));\r\n\r\n        return resultObl ;\r\n    }\r\n\r\n    public static boolean PICK_AUTO_CREATE_ORDER(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_AUTO_CREATE_ORDER);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_AUTO_CREATE_ORDER_SALES(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_AUTO_CREATE_ORDER_SALES);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean PICK_AUTO_CREATE_ORDER_TRANSFER(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_AUTO_CREATE_ORDER_TRANSFER);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n\r\n    // RECEIVE Settings\r\n    public static boolean RECEIVE_BARCODE_CHECK(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_BARCODE_CHECK);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static List<String> RECEIVE_NEW_WORKFLOWS(){\r\n\r\n        List<String> resultObl = new  ArrayList();\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_NEW_WORKFLOWS);\r\n        if (Setting == null || Setting.getValueStr().isEmpty()) {\r\n            return resultObl;\r\n        }\r\n\r\n        if (!Setting.getValueStr().contains(\";\")) {\r\n            resultObl.add(Setting.getValueStr());\r\n            return resultObl;\r\n        }\r\n\r\n        resultObl = new ArrayList<>(Arrays.asList(Setting.valueStr.split(\";\")));\r\n\r\n        return resultObl ;\r\n    }\r\n\r\n    public static List<String> RECEIVE_EO_NEW_WORKFLOWS(){\r\n\r\n        List<String> resultObl = new  ArrayList();\r\n\r\n        for (String workflowStr : RECEIVE_NEW_WORKFLOWS() ) {\r\n\r\n            if (workflowStr.equalsIgnoreCase(\"EOR\") || workflowStr.equalsIgnoreCase(\"EOS\") )     {\r\n                resultObl.add((workflowStr));\r\n            }\r\n\r\n        }\r\n\r\n        return resultObl ;\r\n    }\r\n\r\n    public static List<String> RECEIVE_MA_NEW_WORKFLOWS(){\r\n\r\n        List<String> resultObl = new  ArrayList();\r\n\r\n        for (String workflowStr : RECEIVE_NEW_WORKFLOWS() ) {\r\n\r\n            if (workflowStr.equalsIgnoreCase(\"MAS\")  )     {\r\n                resultObl.add((workflowStr));\r\n            }\r\n\r\n        }\r\n\r\n        return resultObl ;\r\n    }\r\n\r\n    public static boolean RECEIVE_AMOUNT_MANUAL_MA(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_AMOUNT_MANUAL_MA);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n\r\n    public static boolean RECEIVE_AUTO_CREATE_ORDER(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_AUTO_CREATE_ORDER);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean RECEIVE_AUTO_CREATE_ORDER_EO(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_AUTO_CREATE_ORDER_EO);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean RECEIVE_AUTO_CREATE_ORDER_MA(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_AUTO_CREATE_ORDER_MA);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean RECEIVE_NO_EXTRA_ITEMS(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_NO_EXTRA_ITEMS);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean RECEIVE_NO_EXTRA_PIECES(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_NO_EXTRA_PIECES);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public  static String RECEIVE_INTAKE_EO_CREATE_EXTRA_ITEM_VALIDATION(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_INTAKE_EO_CREATE_EXTRA_ITEM_VALIDATION);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n\r\n    }\r\n\r\n    public static String RECEIVE_STORE_DEVIATIONS_PASSWORD(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_STORE_DEVIATIONS_PASSWORD);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static int RECEIVE_EXTRA_PIECES_PERCENTAGE(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_EXTRA_PIECES_PERCENTAGE);\r\n        if (Setting == null) {\r\n            return 0;\r\n        }\r\n\r\n        return  cText.pStringToIntegerInt(Setting.valueStr);\r\n    }\r\n\r\n    public static boolean RECEIVE_EXTRA_PIECES_PERCENTAGE_MANDATORY(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_EXTRA_PIECES_PERCENTAGE_MANDATORY);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static String RECEIVE_RESET_PASSWORD(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_RESET_PASSWORD);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static String RECEIVE_DEVIATIONS_PASSWORD(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RECEIVE_DEVIATIONS_PASSWORD);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n\r\n    // INVENTORY Settings\r\n\r\n    public static boolean INV_AUTO_CREATE_ORDER(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.INV_AUTO_CREATE_ORDER);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean INV_AMOUNT_MANUAL(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.INV_AMOUNT_MANUAL);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean INV_BARCODE_CHECK(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.INV_BARCODE_CHECK);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static String INV_RESET_PASSWORD(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.INV_RESET_PASSWORD);\r\n        if (Setting == null) {\r\n            return \"\";\r\n        }\r\n\r\n        return Setting.valueStr;\r\n    }\r\n\r\n    public static List<String>  INV_NEW_WORKFLOWS(){\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.INV_NEW_WORKFLOWS);\r\n        if (Setting == null || Setting.getValueStr().isEmpty()) {\r\n            return resultObl;\r\n        }\r\n\r\n        if (!Setting.getValueStr().contains(\";\")) {\r\n            resultObl.add(Setting.getValueStr());\r\n            return resultObl;\r\n        }\r\n\r\n        resultObl = new ArrayList<>(Arrays.asList(Setting.valueStr.split(\";\")));\r\n\r\n        return resultObl ;\r\n    }\r\n\r\n    public static boolean INV_ADD_EXTRA_LINES(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.INV_ADD_EXTRA_LINES);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n\r\n    // MOVE Settings\r\n    public static List<String> MOVE_NEW_WORKFLOWS(){\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.MOVE_NEW_WORKFLOWS);\r\n        if (Setting == null || Setting.getValueStr().isEmpty()) {\r\n            return resultObl;\r\n        }\r\n\r\n        if (!Setting.getValueStr().contains(\";\")) {\r\n            resultObl.add(Setting.getValueStr());\r\n            return resultObl;\r\n        }\r\n\r\n        resultObl = new ArrayList<>(Arrays.asList(Setting.valueStr.split(\";\")));\r\n\r\n        return resultObl ;\r\n    }\r\n\r\n    public static boolean MOVE_BARCODE_CHECK(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.MOVE_BARCODE_CHECK);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean MOVE_MT_TAKE_ALLOW_END(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.MOVE_MT_TAKE_ALLOW_END);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean MOVE_AUTO_CREATE_ORDER(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.MOVE_AUTO_CREATE_ORDER);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean MOVE_WITH_PICTURE(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.MOVE_WITH_PICTURE);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean MOVE_WITH_PICTURE_AUTO_OPEN(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.MOVE_WITH_PICTURE_AUTO_OPEN);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean MOVE_AUTO_ACCEPT_AT_REQUESTED(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.MOVE_AUTO_ACCEPT_AT_REQUESTED);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean MOVE_AMOUNT_MANUAL(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.MOVE_AMOUNT_MANUAL);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    // RETURN Settings\r\n    public static boolean RETOUR_BARCODE_CHECK(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RETOUR_BARCODE_CHECK);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean RETOUR_AMOUNT_MANUAL(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RETOUR_AMOUNT_MANUAL);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static List<String> RETOUR_NEW_WORKFLOWS(){\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RETOUR_NEW_WORKFLOWS);\r\n        if (Setting == null || Setting.getValueStr().isEmpty()) {\r\n            return resultObl;\r\n        }\r\n\r\n        if (!Setting.getValueStr().contains(\";\")) {\r\n            resultObl.add(Setting.getValueStr());\r\n            return resultObl;\r\n        }\r\n\r\n        resultObl = new ArrayList<>(Arrays.asList(Setting.valueStr.split(\";\")));\r\n\r\n        return resultObl ;\r\n    }\r\n\r\n    public static boolean RETOUR_ORDER_BIN_NO_CHECK(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RETOUR_ORDER_BIN_NO_CHECK);\r\n        if (Setting == null) {\r\n            return false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    public static boolean RETOUR_VALIDATE_CURRENT_LOCATION(){\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.RETOUR_VALIDATE_CURRENT_LOCATION);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    //PACK AND SHIP Settings\r\n\r\n    public static List<String> PACK_AND_SHIP_NEW_WORKFLOWS(){\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PACK_AND_SHIP_NEW_WORKFLOWS);\r\n        if (Setting == null) {\r\n            return resultObl;\r\n        }\r\n\r\n        if (!Setting.getValueStr().contains(\";\")) {\r\n            resultObl.add(Setting.getValueStr());\r\n            return resultObl;\r\n        }\r\n\r\n        resultObl = new ArrayList<>(Arrays.asList(Setting.valueStr.split(\";\")));\r\n\r\n        return resultObl ;\r\n    }\r\n\r\n    public static boolean PACK_AND_SHIP_AUTO_CREATE_ORDER(){\r\n\r\n        cSetting Setting =   mGetSettingByEnu(settingEnu.PACK_AND_SHIP_AUTO_CREATE_ORDER);\r\n        if (Setting == null) {\r\n            return  false;\r\n        }\r\n\r\n        return cText.pStringToBooleanBln(Setting.valueStr,false);\r\n    }\r\n\r\n    //End Region Settings\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/Settings/cSetting.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/SSU_WHS/Basics/Settings/cSetting.java	(date 1622790271396)
@@ -595,7 +595,7 @@
         return Setting.valueStr;
     }
 
-    public static Boolean PICK_SORT_LOCATION_ADVICE_MANDATORY(){
+    public static boolean PICK_SORT_LOCATION_ADVICE_MANDATORY(){
 
         cSetting Setting =   mGetSettingByEnu(settingEnu.PICK_SORT_LOCATION_ADVICE_MANDATORY);
         if (Setting == null) {
@@ -603,7 +603,7 @@
         }
 
         if (Setting.valueStr.equalsIgnoreCase( "")) {
-            return  null;
+            return  false;
         }
 
         return cText.pStringToBooleanBln(Setting.valueStr,false);
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderPickActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Pick;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.LineItemProperty.LineProperty.cLineProperty;\r\nimport SSU_WHS.LineItemProperty.LinePropertyValue.cLinePropertyValue;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcode;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTable;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleInfoFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BinItemsFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyNoInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemStockFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class PickorderPickActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Private Properties\r\n\r\n    private static boolean articleScannedLastBln;\r\n    private static boolean destionationScannedBln;\r\n    private static boolean noInputPropertysShownBln;\r\n    public static boolean handledViaPropertysBln;\r\n\r\n    private int pickCounterMinusHelperInt;\r\n    private int pickCounterPlusHelperInt;\r\n\r\n    private Handler minusHandler;\r\n    private Handler plusHandler;\r\n\r\n    private ConstraintLayout pickorderPickContainer;\r\n\r\n    private CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n\r\n    private  Toolbar toolbar;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private  TextView articleDescriptionText;\r\n    private  TextView articleDescription2Text;\r\n    private  TextView articleItemText;\r\n    private  TextView articleBarcodeText;\r\n    private  TextView quantityText;\r\n    private  TextView quantityRequiredText;\r\n    private  ImageView articleThumbImageView;\r\n\r\n    private  ImageView imageButtonNoInputPropertys;\r\n    private  ImageView imageButtonBarcode;\r\n\r\n    private  CardView sourcenoContainer;\r\n    private  TextView sourcenoText;\r\n\r\n    private  AppCompatImageButton imageButtonMinus;\r\n    private  AppCompatImageButton imageButtonPlus;\r\n    private  AppCompatImageButton imageButtonDone;\r\n\r\n    private  TextView textViewAction;\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_pickorder_pick);\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n\r\n        this.mActivityInitialize();\r\n\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_pick,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n      //  invalidateOptionsMenu();\r\n\r\n        MenuItem item_bin_stock = pvMenu.findItem(R.id.item_bin_stock);\r\n        MenuItem item_article_stock = pvMenu.findItem(R.id.item_article_stock);\r\n        item_bin_stock.setVisible(true);\r\n        item_article_stock.setVisible(true);\r\n\r\n        if (cSetting.GENERIC_PRINT_BINLABEL()){\r\n            MenuItem item_print_bin = pvMenu.findItem(R.id.item_print_bin);\r\n            item_print_bin.setVisible(cPickorder.currentPickOrder.currentBranchBin != null);\r\n        }\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(cPickorderBarcode.currentPickorderBarcode != null);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n\r\n        switch (item.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mShowAcceptFragment();\r\n                return true;\r\n\r\n            case R.id.item_bin_stock:\r\n                selectedFragment = new BinItemsFragment(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n                break;\r\n\r\n            case R.id.item_article_stock:\r\n\r\n                cArticle.currentArticle= cPickorder.currentPickOrder.articleObl.get(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n                selectedFragment = new ItemStockFragment();\r\n                break;\r\n\r\n            case R.id.item_print_bin:\r\n                selectedFragment = new PrintBinLabelFragment();\r\n                break;\r\n\r\n            case R.id.item_print_item:\r\n                cArticle.currentArticle= cPickorder.currentPickOrder.articleObl.get(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        item.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        mShowAcceptFragment();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity Methods\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_pickorderpick));\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        this.mFieldsInitialize();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.pickorderPickContainer = findViewById(R.id.pickorderPickContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n\r\n        this.toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.sourcenoText = findViewById(R.id.sourcenoText);\r\n        this.sourcenoContainer = findViewById(R.id.sourceNoContainer);\r\n\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n\r\n        this.textViewAction = findViewById(R.id.textViewAction);\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n\r\n        this.pickCounterPlusHelperInt = 0;\r\n        this.pickCounterMinusHelperInt = 0;\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            return;\r\n        }\r\n\r\n        this.mEnablePlusMinusAndBarcodeSelectViews();\r\n        this.mShowArticleImage();\r\n        this.mShowOrHideGenericExtraFields();\r\n\r\n        this.mShowArticleInfo();\r\n        this.mShowBarcodeInfo();\r\n        this.mShowQuantityInfo();\r\n        this.mShowSortingInstruction();\r\n        this.mShowNoInputPropertyInfo();\r\n\r\n        this.mCheckLineDone();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n        PickorderPickActivity.destionationScannedBln = cPickorder.currentPickOrder.destionationBranch() != null;\r\n\r\n        //We scanned a BIN, so nu current barcodeStr known\r\n        if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n            //Initialise article scanned boolean\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            this.mShowNoInputPropertys();\r\n            return;\r\n        }\r\n\r\n        // We scanned an ARTICLE in BIN IS ITEM Modus so handle barcide\r\n        if (cSetting.PICK_BIN_IS_ITEM()) {\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            this.pHandleScan(cBarcodeScan.pFakeScan(cPickorderBarcode.currentPickorderBarcode.getBarcodeStr()));\r\n            this.mShowNoInputPropertys();\r\n            return;\r\n        }\r\n\r\n\r\n        //We scannedn an ARTICLE in Single BIN activity\r\n        if (cPickorder.currentPickOrder.pickorderBarcodeScanned != null) {\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            this.pHandleScan(cBarcodeScan.pFakeScan(cPickorder.currentPickOrder.pickorderBarcodeScanned.getBarcodeStr()));\r\n            cPickorder.currentPickOrder.pickorderBarcodeScanned = null;\r\n            this.mShowNoInputPropertys();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n\r\n        this.mSetArticleImageListener();\r\n        this.mSetNoInputPropertyListener();\r\n        this.mSetImageButtonBarcodeListener();\r\n\r\n        if (cSetting.PICK_SELECTEREN_BARCODE()) {\r\n            this.mSetNumberListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n\r\n    }\r\n\r\n    // End Region iICSDefaultActivity Methods\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n\r\n\r\n        if (!cPickorder.currentPickOrder.isPABln()) {\r\n            PickorderPickActivity.destionationScannedBln = true;\r\n        }\r\n\r\n        //If we still need a destination scan, make sure we scan this first\r\n        if (!PickorderPickActivity.destionationScannedBln) {\r\n            cResult hulpRst = this.mCheckDestionationRst(pvBarcodeScan);\r\n            if (! hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\", true, true);\r\n                return;\r\n            }\r\n\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_article));\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.isPVBln()) {\r\n            this.mHandlePVScan(pvBarcodeScan);\r\n            return;\r\n        }\r\n\r\n        //Check if there are composite barcodes for this line that matcht the scan\r\n       List<cPickorderCompositeBarcode> compositeBarcodesMatchedObl =   cPickorderLine.currentPickOrderLine.pFindCompositeBarcodeForLine(pvBarcodeScan);\r\n\r\n        // No Matches\r\n       if  (compositeBarcodesMatchedObl.size() == 0) {\r\n\r\n           //Just look for a normal barcode with the scan\r\n           if (!cPickorderLine.currentPickOrderLine.pFindBarcodeViaBarcodeInLineBarcodes(pvBarcodeScan)) {\r\n               cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n               return;\r\n           }\r\n       }\r\n        else\r\n       {\r\n           if (! cPickorderLine.currentPickOrderLine.pFindBarcodeViaCompositeBarcodeInLineBarcodes(compositeBarcodesMatchedObl,pvBarcodeScan.getBarcodeOriginalStr())) {\r\n               cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n               return;\r\n           }\r\n\r\n       }\r\n\r\n        //If we found the barcodeStr, currentbarcode is alreay filled, so make this selected\r\n        this.mBarcodeSelected(cPickorderBarcode.currentPickorderBarcode);\r\n\r\n    }\r\n\r\n    public  void pAcceptPick(boolean ignoreAccept) {\r\n        if (ignoreAccept) {\r\n            cUserInterface.pPlaySound(R.raw.headsupsound,null);\r\n            cUserInterface.pDoBoing(this.textViewAction);\r\n            return;\r\n        }\r\n        cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n        this.mPickDone();\r\n    }\r\n\r\n    public  void pAcceptRejectDialogDismissed() {\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty() && !cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n            cPickorderLine.currentPickOrderLine.processingSequenceStr = \"\";\r\n            cPickorderLine.currentPickOrderLine.pUpdateProcessingSequenceBln(\"\");\r\n            PickorderPickActivity.articleScannedLastBln = true;\r\n        }\r\n\r\n    }\r\n\r\n    public  void pCancelPick() {\r\n        //Check if we need to remove the SalesorderPackingTableLines\r\n        if (cPickorderLine.currentPickOrderLine.pGetLinesForProcessingSequenceObl().size() <= 1)  {\r\n            cSalesOrderPackingTable.pDeleteFromDatabaseBln(cPickorderLine.currentPickOrderLine.getProcessingSequenceStr());\r\n        }\r\n        cPickorderLine.currentPickOrderLine.pUpdateProcessingSequenceBln(\"\");\r\n        cPickorderLine.currentPickOrderLine.pCancelIndatabase();\r\n        this.mGoBackToLinesActivity();\r\n    }\r\n\r\n    public  void pRegisterBarcodeReceiver(){\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    //Views\r\n\r\n    private void mSetArticleImageListener() {\r\n        this.articleThumbImageView.setOnClickListener(view -> mShowFullArticleFragment());\r\n    }\r\n\r\n    private void mSetNoInputPropertyListener() {\r\n        this.imageButtonNoInputPropertys.setOnClickListener(view -> {\r\n            PickorderPickActivity.noInputPropertysShownBln = false;\r\n            mShowNoInputPropertys();\r\n        });\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(pvView -> {\r\n\r\n            if (cPickorderLine.currentPickOrderLine.barcodesObl == null || cPickorderLine.currentPickOrderLine.barcodesObl.size() == 0) {\r\n                return;\r\n            }\r\n\r\n            mEnablePlusMinusAndBarcodeSelectViews();\r\n\r\n            //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n            if (cPickorderLine.currentPickOrderLine.barcodesObl.size() == 1) {\r\n                pHandleScan(cBarcodeScan.pFakeScan(cPickorderLine.currentPickOrderLine.barcodesObl.get(0).getBarcodeStr()));\r\n                return;\r\n            }\r\n\r\n            mShowBarcodeSelectFragment();\r\n        });\r\n    }\r\n\r\n    private  void mShowOrHideGenericExtraFields() {\r\n\r\n        boolean hideArticleInfoContainer = false;\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            hideArticleInfoContainer = true;\r\n        }\r\n        else\r\n        {\r\n            //Get article info via the web service\r\n            cArticle.currentArticle  = new cArticle(cPickorderLine.currentPickOrderLine.getItemNoStr(), cPickorderLine.currentPickOrderLine.getVariantCodeStr());\r\n\r\n            if ( cPickorderLine.currentPickOrderLine.itemProperyDataObl() == null) {\r\n                hideArticleInfoContainer = true;\r\n            }\r\n\r\n        }\r\n\r\n      if (hideArticleInfoContainer) {\r\n            this.mHideArticleInfo();\r\n      }\r\n        else{\r\n            this.articleInfoContainer.setVisibility(View.VISIBLE);\r\n\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.articleInfoContainer, new ArticleInfoFragment(cPickorderLine.currentPickOrderLine.itemProperyDataObl()));\r\n            transaction.commit();\r\n        }\r\n    }\r\n\r\n    private  void mShowArticleInfo() {\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            this.articleDescriptionText.setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            this.articleDescription2Text .setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            this.articleItemText.setText(cAppExtension.activity.getString(R.string.novalueyet));\r\n            return;\r\n        }\r\n\r\n        this.articleDescriptionText.setText(cPickorderLine.currentPickOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cPickorderLine.currentPickOrderLine.getDescription2Str());\r\n        this.articleItemText.setText(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n\r\n        if (cPickorderLine.currentPickOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n    }\r\n\r\n    private  void mShowBarcodeInfo() {\r\n\r\n        if (cPickorderLine.currentPickOrderLine.barcodesObl.size() == 1) {\r\n                cPickorderBarcode.currentPickorderBarcode = cPickorderLine.currentPickOrderLine.barcodesObl.get(0);\r\n        }\r\n        else\r\n        {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.mutiple_barcodes_posible));\r\n        }\r\n\r\n        if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n            return;\r\n        }\r\n\r\n        this.articleBarcodeText.setText(cPickorderBarcode.currentPickorderBarcode.getBarcodeAndQuantityStr());\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo(){\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            this.quantityText.setVisibility(View.INVISIBLE);\r\n            this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        double quantityDbl = 0;\r\n\r\n        if (cPickorderLine.currentPickOrderLine.handledBarcodesObl().size() > 0) {\r\n            for (cPickorderLineBarcode pickorderLineBarcode : cPickorderLine.currentPickOrderLine.handledBarcodesObl())\r\n\r\n                quantityDbl += pickorderLineBarcode.getQuantityhandledDbl();\r\n        }\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(quantityDbl));\r\n        this.quantityRequiredText.setText(cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityDbl()));\r\n    }\r\n\r\n    private  void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cPickorder.currentPickOrder.isPickWithPictureBln()) {\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        if (cPickorderLine.currentPickOrderLine == null) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cPickorderLine.currentPickOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cPickorderLine.currentPickOrderLine.articleImage == null || cPickorderLine.currentPickOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cPickorderLine.currentPickOrderLine.articleImage.imageBitmap());\r\n\r\n        //Open the image\r\n        if ((cPickorder.currentPickOrder.isPickWithPictureAutoOpenBln())) {\r\n            this.mShowFullArticleFragment();\r\n        }\r\n    }\r\n\r\n    private  void mShowNoInputPropertyInfo() {\r\n\r\n       if (!cPickorderLine.currentPickOrderLine.hasPropertysBln() || cPickorderLine.currentPickOrderLine.linePropertyNoInputObl() == null || cPickorderLine.currentPickOrderLine.linePropertyNoInputObl().size() == 0) {\r\n           this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n       }\r\n       else {\r\n           this.imageButtonNoInputPropertys.setVisibility(View.VISIBLE);\r\n       }\r\n    }\r\n\r\n    private  void mShowSortingInstruction() {\r\n\r\n        this.sourcenoContainer.setVisibility(View.GONE);\r\n\r\n        //If workflow is not PV, then d we are ready\r\n        if (!cPickorder.currentPickOrder.isPVBln()) {\r\n            return;\r\n        }\r\n\r\n        // We already have a processing sequence, show it and pInsertInDatabase a SalesOrderPackingTable in database\r\n        if (!cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty()) {\r\n            this.sourcenoContainer.setVisibility(View.VISIBLE);\r\n            this.sourcenoText.setText(cPickorderLine.currentPickOrderLine.getProcessingSequenceStr());\r\n            this.mAddSalesOrderPackingTableBln();\r\n            return;\r\n        }\r\n\r\n        // We don't have a processing sequence, so look for it in the database\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl() == null || cPickorder.currentPickOrder.salesOrderPackingTableObl().size() == 0) {\r\n            return;\r\n        }\r\n\r\n        //Record for Current Sales order\r\n        cSalesOrderPackingTable recordForSalesOrder = null;\r\n\r\n        for (cSalesOrderPackingTable loopRecord : cPickorder.currentPickOrder.salesOrderPackingTableObl()) {\r\n\r\n            if (loopRecord.getSalesorderStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr()))\r\n                recordForSalesOrder = loopRecord;\r\n        }\r\n\r\n        //If we found something, show it\r\n        if (recordForSalesOrder != null) {\r\n            //Set scan instruction\r\n            this.sourcenoContainer.setVisibility(View.VISIBLE);\r\n            this.sourcenoText.setText(recordForSalesOrder.getPackingtableStr());\r\n        }\r\n    }\r\n\r\n    private  void mEnablePlusMinusAndBarcodeSelectViews() {\r\n\r\n        if (cSetting.PICK_PER_SCAN()) {\r\n            this.imageButtonMinus.setVisibility(View.INVISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.INVISIBLE);\r\n        } else {\r\n            this.imageButtonMinus.setVisibility(View.VISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        if (!cSetting.PICK_SELECTEREN_BARCODE()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n    }\r\n\r\n    //Scans and manual input\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (cSetting.PICK_PER_SCAN()) {\r\n            return;\r\n        }\r\n\r\n        if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n            cUserInterface.pDoNope(quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(pickorderPickContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cPickorderBarcode.currentPickorderBarcode.getQuantityHandledDbl() > 1) {\r\n            cUserInterface.pDoNope(quantityText, true, true);\r\n            cUserInterface.pShowSnackbarMessage(pickorderPickContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n            return;\r\n        }\r\n\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n        this.mTryToChangePickedQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n\r\n    }\r\n\r\n    private  void mHandlePVScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        boolean isSalesorderOrPickcartboxBln = false;\r\n\r\n        //This barcode matches multiple lay-outs so this can be a BIN or an article\r\n        if (Objects.requireNonNull(cBarcodeLayout.pGetBarcodeLayoutByBarcodeObl(pvBarcodeScan.getBarcodeOriginalStr())).size() > 1)\r\n            if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.SALESORDER) || cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.PICKCARTBOX)) {\r\n                isSalesorderOrPickcartboxBln = true;\r\n            }\r\n\r\n        if (!isSalesorderOrPickcartboxBln) {\r\n            if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n                this.mHandlePVArticleScanned(pvBarcodeScan);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.SALESORDER) || cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.PICKCARTBOX) ) {\r\n            this.mHandleSalesOrderOrPickCartScanned(pvBarcodeScan);\r\n            return;\r\n        }\r\n\r\n        cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_unknown_barcode),\"\",true,true);\r\n\r\n\r\n    }\r\n\r\n    private  void mTryToChangePickedQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        double newQuantityDbl;\r\n        List<cPickorderLineBarcode>  hulpObl;\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n\r\n                //Check if we already have barcodes and clear them\r\n                if (cPickorderLine.currentPickOrderLine.handledBarcodesObl().size() > 0 ) {\r\n\r\n                    hulpObl = new ArrayList<>(cPickorderLine.currentPickOrderLine.handledBarcodesObl());\r\n\r\n                    for (cPickorderLineBarcode pickorderLineBarcode : hulpObl) {\r\n                        pickorderLineBarcode.pDeleteFromDatabaseBln();\r\n                    }\r\n                }\r\n\r\n                PickorderPickActivity.articleScannedLastBln = true;\r\n                newQuantityDbl = pvAmountDbl;\r\n            } else {\r\n                newQuantityDbl = cPickorderLine.currentPickOrderLine.getQuantityHandledDbl() + pvAmountDbl;\r\n            }\r\n\r\n            //Check if we would exceed amount, then show message\r\n            if (newQuantityDbl > cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n                this.mShowOverpickNotAllowed();\r\n\r\n                if (cPickorderLine.currentPickOrderLine.getQuantityDbl() > 0) {\r\n                    PickorderPickActivity.articleScannedLastBln = true;\r\n                    return;\r\n                }\r\n\r\n                PickorderPickActivity.articleScannedLastBln = false;\r\n                return;\r\n            }\r\n\r\n            //Set the new quantityDbl and show in Activity\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = newQuantityDbl;\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityHandledDbl()));\r\n\r\n            //Add or update line barcodeStr\r\n            cPickorderLine.currentPickOrderLine.pAddOrUpdateLineBarcode(pvAmountDbl);\r\n\r\n            //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n            cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n\r\n            //Check if this line is done\r\n            this.mCheckLineDone();\r\n            return;\r\n        }\r\n\r\n        //negative\r\n        if (cPickorderLine.currentPickOrderLine.getQuantityHandledDbl() == 0 ) {\r\n            cUserInterface.pDoNope(quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n\r\n        if (pvAmountFixedBln) {\r\n            newQuantityDbl = pvAmountDbl;\r\n        }else {\r\n            newQuantityDbl= cPickorderLine.currentPickOrderLine.getQuantityHandledDbl() - pvAmountDbl;\r\n        }\r\n\r\n        if (newQuantityDbl <= 0) {\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = 0.0;\r\n        }else {\r\n            //Set the new quantityDbl and show in Activity\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = newQuantityDbl;\r\n        }\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityHandledDbl()));\r\n        this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n\r\n        //Remove or update line barcodeStr\r\n        cPickorderLine.currentPickOrderLine.pRemoveOrUpdateLineBarcode();\r\n\r\n    }\r\n\r\n    private  void mHandleSalesOrderOrPickCartScanned(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Strip barcodeStr from regex\r\n        String barcodeWithoutPrefixStr = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        // Check if article is already scanned\r\n        if (!PickorderPickActivity.articleScannedLastBln) {\r\n            // we've scanned a pickCart or a salesOrder, but we need an article\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_scan_article_first), barcodeWithoutPrefixStr, true, true);\r\n            return;\r\n        }\r\n\r\n        //Check if scanned barcodeStr is a SalesOrder or PickCartBox\r\n        boolean isSalesOrderBln = cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.SALESORDER);\r\n        boolean isPickCartBoxBln = cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.PICKCARTBOX);\r\n\r\n        //If we scanned a salesorder, then check if it matches the SourceNo\r\n        if (isSalesOrderBln) {\r\n            //If scanned value doesn't match then we are done\r\n            if (!barcodeWithoutPrefixStr.equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr())) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_sourceno), barcodeWithoutPrefixStr, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        //If we scanned a pickcartbox, then check if it matches the ProcessingSequence if ProcessingSequence is not empty\r\n        if (isPickCartBoxBln && !cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty()) {\r\n            //If scanned value doesn't match then we are done\r\n            if (!barcodeWithoutPrefixStr.equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getProcessingSequenceStr())) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_pickcartbox), barcodeWithoutPrefixStr, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // There are  previous salesorder/pickcaerbox scans, so check if input is correct\r\n        if (!this.mCheckPackingTableAndSourceNoBln(barcodeWithoutPrefixStr)) {\r\n            return;\r\n        }\r\n\r\n        //Set the Processing Sequence\r\n        cPickorderLine.currentPickOrderLine.processingSequenceStr = barcodeWithoutPrefixStr;\r\n\r\n        //try to add SalesOrderPackingtable to database\r\n        if (!this.mAddSalesOrderPackingTableBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_inserting_salesorderpackingtable), barcodeWithoutPrefixStr, true, true);\r\n            cPickorderLine.currentPickOrderLine.processingSequenceStr = \"\";\r\n            return;\r\n        }\r\n\r\n        //try to update ProcessingSequence in database\r\n        if (!cPickorderLine.currentPickOrderLine.pUpdateProcessingSequenceBln(barcodeWithoutPrefixStr)) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_updating_processing_sequence), barcodeWithoutPrefixStr, true, true);\r\n            return;\r\n        }\r\n\r\n        //Set the ProcessingSequence\r\n        cPickorderLine.currentPickOrderLine.processingSequenceStr = barcodeWithoutPrefixStr;\r\n//        this.sourcenoText.setText(cPickorderLine.currentPickOrderLine.processingSequenceStr);\r\n\r\n        // If this is VKO after each piece, then show new instructions\r\n        if (cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n            this.imageButtonDone.setVisibility(View.VISIBLE);\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_article));\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n        }\r\n\r\n        //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n        cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n        PickorderPickActivity.articleScannedLastBln = false;\r\n\r\n        //Check if quantityDbl is sufficient\r\n        if (cPickorderLine.currentPickOrderLine.quantityHandledDbl < cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n            this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n            if (!cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n                this.mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n            }\r\n            return;\r\n        }\r\n\r\n\r\n        //Check if line is done\r\n        this.mCheckLineDone();\r\n\r\n    }\r\n\r\n    private  void mHandlePVArticleScanned(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //We didn't scan an article yet, so handle it as a \"normal\" scan\r\n        //We can scan article multiple times\r\n        if (!PickorderPickActivity.articleScannedLastBln || !cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln() ) {\r\n\r\n            if (!cPickorderLine.currentPickOrderLine.pFindBarcodeViaBarcodeInLineBarcodes(pvBarcodeScan)) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n                return;\r\n            }\r\n\r\n            //Succesfull article scanned\r\n            PickorderPickActivity.articleScannedLastBln = true;\r\n\r\n            //If we found the barcodeStr, currentbarcode is alreay filled, so make this selected\r\n            this.mBarcodeSelected(cPickorderBarcode.currentPickorderBarcode);\r\n            return;\r\n        }\r\n\r\n        //You have to scan a pickcart or salesorder after the last article scan\r\n        cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_scan_pickcart_or_salesorder), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n    }\r\n\r\n    private  void mBarcodeSelected(cPickorderBarcode pvBarcode) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        cPickorderBarcode.currentPickorderBarcode = pvBarcode;\r\n\r\n        if (cPickorderLine.currentPickOrderLine.linePropertyInputObl() != null && cPickorderLine.currentPickOrderLine.linePropertyInputObl().size() > 0 ) {\r\n            mShowItemPropertyInputActivity();\r\n            return;\r\n        }\r\n\r\n        this.mShowArticleInfo();\r\n        this.mShowBarcodeInfo();\r\n        this.mTryToChangePickedQuantity(true, false, cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n    }\r\n\r\n    // Lines, Barcodes, Packing Tables and destionation\r\n\r\n    private  cResult mCheckDestionationRst(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cResult resultRst = new cResult();\r\n\r\n        if (PickorderPickActivity.destionationScannedBln) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.destionationBranch() != null) {\r\n            PickorderPickActivity.destionationScannedBln = true;\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        if (pvBarcodeScan.getBarcodeOriginalStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getDestinationNoStr())) {\r\n            PickorderPickActivity.destionationScannedBln = true;\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        //Check if we have scanned a BIN and check if there are not handled linesInt for this BIN\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.LOCATION)) {\r\n            PickorderPickActivity.destionationScannedBln = false;\r\n            resultRst.resultBln = false;\r\n            resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_scan_is_not_location));\r\n            return  resultRst;\r\n        }\r\n\r\n        //Strip regex\r\n        String barcodewithoutPrefix = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n        //Check if destination is correct\r\n        if (!barcodewithoutPrefix.equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getDestinationNoStr())) {\r\n            PickorderPickActivity.destionationScannedBln = false;\r\n            resultRst.resultBln = false;\r\n            resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_location_incorrect));\r\n            return  resultRst;\r\n        }\r\n\r\n        PickorderPickActivity.destionationScannedBln = true;\r\n        resultRst.resultBln = true;\r\n        return  resultRst;\r\n\r\n    }\r\n\r\n    private  void mCheckLineDone() {\r\n\r\n        //Start with defaults\r\n        boolean incompleteBln = false;\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n        this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_article));\r\n\r\n        //Set instruction\r\n        if (cPickorder.currentPickOrder.isPABln() && !PickorderPickActivity.destionationScannedBln) {\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_destination));\r\n        }\r\n\r\n        //Check if quantityDbl is sufficient\r\n        if (cPickorderLine.currentPickOrderLine.quantityHandledDbl < cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n            this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n            incompleteBln = true;\r\n        }\r\n\r\n        //PV\r\n        if (cPickorder.currentPickOrder.isPVBln()) {\r\n            //We have to scan a pickcart/salesorder after each article scan\r\n            if (cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n\r\n                //Not complete and article last scanned so we have to scan a pickcart/salesorder, set the instruction\r\n                if (PickorderPickActivity.articleScannedLastBln && incompleteBln) {\r\n                    this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n                    this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_pickcart_or_salesorder));\r\n                    return;\r\n                }\r\n            }\r\n\r\n            //We can scan all articles first and then pickcart/salesorder, so set this as the instruction\r\n            if (incompleteBln && cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty()) {\r\n                this.textViewAction.setText(cAppExtension.context.getString(R.string.scan_article_or_salesorder_or_pickcartbox));\r\n                return;\r\n            }\r\n\r\n            // We reached the quantityDbl, but still have to scan the pickcart/salesorder, so set the instruction\r\n            if (cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty()) {\r\n                this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n                this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_pickcart_or_salesorder));\r\n                this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n                return;\r\n            }\r\n\r\n            //We picked less then required, and we have a processing sequence so we are done anyway\r\n            if (incompleteBln && !cPickorderLine.currentPickOrderLine.getProcessingSequenceStr().isEmpty() && !cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln() ) {\r\n                incompleteBln = false;\r\n            }\r\n\r\n        }\r\n\r\n        //If we are incomplete, we are done here\r\n        if (incompleteBln)  {\r\n            return;\r\n        }\r\n\r\n        if (!cSetting.PICK_AUTO_ACCEPT()) {\r\n            this.imageButtonDone.setVisibility(View.VISIBLE);\r\n            this.imageButtonDone.setImageResource(R.drawable.ic_doublecheck_black_24dp);\r\n            return;\r\n        }\r\n\r\n        PickorderPickActivity.articleScannedLastBln = false;\r\n        this.mPickDone();\r\n    }\r\n\r\n    private  void mGetNextPickLineForCurrentBin() {\r\n\r\n        cResult hulpResult;\r\n\r\n        if (!cPickorder.currentPickOrder.isPickAutoNextBln()) {\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            PickorderPickActivity.noInputPropertysShownBln = false;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        //check if there is a next line for this BIN\r\n        cPickorderLine nextLine = cPickorder.currentPickOrder.pGetNextLineToHandleForBin(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n\r\n        //There is no next line, so close this activity\r\n        if (nextLine == null) {\r\n            //Clear current barcodeStr and reset defaults\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            PickorderPickActivity.articleScannedLastBln = false;\r\n            PickorderPickActivity.noInputPropertysShownBln = false;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        //Set the current line, and update it to busy\r\n\r\n        cPickorderLine.currentPickOrderLine = nextLine;\r\n\r\n        hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n        if (!hulpResult.resultBln) {\r\n            cUserInterface.pDoExplodingScreen(hulpResult.messagesStr(),\"\",true,true);\r\n            cPickorderLine.currentPickOrderLine = null;\r\n            this.mGoBackToLinesActivity();\r\n            return;\r\n        }\r\n\r\n        this.mInitnewLineForBin();\r\n    }\r\n\r\n    private void mInitnewLineForBin() {\r\n\r\n        //Play a sound\r\n        cUserInterface.pPlaySound(R.raw.message, null);\r\n\r\n        //Clear current barcodeStr and reset defaults\r\n        PickorderPickActivity.noInputPropertysShownBln = false;\r\n        cPickorderBarcode.currentPickorderBarcode = null;\r\n        PickorderPickActivity.articleScannedLastBln = false;\r\n\r\n        if (cPickorder.currentPickOrder.destionationBranch() == null) {\r\n            PickorderPickActivity.destionationScannedBln = false;\r\n        }\r\n\r\n       this.mShowNoInputPropertys();\r\n\r\n        //Show animation and initialize fields\r\n        Animation animation = AnimationUtils.loadAnimation(cAppExtension.context.getApplicationContext(), R.anim.shrink_and_fade);\r\n        this.pickorderPickContainer.startAnimation(animation);\r\n        animation.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation animation) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation animation) {\r\n                mFieldsInitialize();\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation animation) {\r\n\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private  void mSendPickorderLine() {\r\n\r\n        //If internet is not connected\r\n        if (!cConnection.isInternetConnectedBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), null);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n            return;\r\n        }\r\n\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.pHandledBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), null);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n        }\r\n\r\n    }\r\n\r\n    private  boolean mAddSalesOrderPackingTableBln() {\r\n\r\n        cSalesOrderPackingTable salesOrderPackingTable = new cSalesOrderPackingTable(cPickorderLine.currentPickOrderLine.getSourceNoStr(), cPickorderLine.currentPickOrderLine.getProcessingSequenceStr());\r\n\r\n        //If there are no known salesOrderPackingTables then initiaite so we can add later\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl() == null || cPickorder.currentPickOrder.salesOrderPackingTableObl().size() == 0) {\r\n            cSalesOrderPackingTable.allSalesOrderPackingTabelsObl = new ArrayList<>();\r\n        }\r\n\r\n        //if salesOrderPackingTable already exists, then we are done\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl().contains(salesOrderPackingTable)) {\r\n            return true;\r\n        }\r\n\r\n        // Does not exist, so pInsertInDatabase in database\r\n        salesOrderPackingTable.pInsertInDatabaseBln();\r\n        return true;\r\n\r\n    }\r\n\r\n    private void mHandlePickDoneClick() {\r\n\r\n        //If workflow is then call specific void\r\n        if (cPickorder.currentPickOrder.isPVBln()) {\r\n            this.mHandlePVDone();\r\n            return;\r\n        }\r\n\r\n        if (!PickorderPickActivity.handledViaPropertysBln) {\r\n            //Check if we picked less then asked, if so then show dialog\r\n            if (!cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl()) ) {\r\n                this.mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n                return;\r\n            }\r\n        }\r\n\r\n        //All is done\r\n        this.mPickDone();\r\n\r\n    }\r\n\r\n    private void mHandlePVDone() {\r\n\r\n        if (PickorderPickActivity.articleScannedLastBln) {\r\n            this.textViewAction.setText(R.string.message_scan_pickcart_or_salesorder);\r\n            cUserInterface.pShowToastMessage(getString(R.string.message_scan_pickcart_or_salesorder), R.raw.badsound);\r\n            return;\r\n        }\r\n\r\n        //If we picked less then asked, show dialog\r\n        if (!cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl())) {\r\n            this.mShowUnderPickDialog(cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line));\r\n            return;\r\n        }\r\n\r\n        this.mPickDone();\r\n    }\r\n\r\n    private  void mPickDone() {\r\n\r\n        PickorderPickActivity.handledViaPropertysBln = false;\r\n\r\n        this.mSendPickorderLine();\r\n        this.mGetNextPickLineForCurrentBin();\r\n\r\n    }\r\n\r\n    private  boolean mCheckPackingTableAndSourceNoBln(String pvBarcodeStr) {\r\n\r\n\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl() == null || cPickorder.currentPickOrder.salesOrderPackingTableObl().size() == 0) {\r\n            return true;\r\n        }\r\n\r\n        //Record for Current Sales order\r\n        cSalesOrderPackingTable recordForSalesOrder = null;\r\n\r\n        //Record for Scanned Barcode\r\n        cSalesOrderPackingTable recordForBarcode = null;\r\n\r\n        for (cSalesOrderPackingTable loopRecord : cPickorder.currentPickOrder.salesOrderPackingTableObl()) {\r\n\r\n            if (loopRecord.getSalesorderStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr()))\r\n                recordForSalesOrder = loopRecord;\r\n\r\n            if (loopRecord.getPackingtableStr().equalsIgnoreCase(pvBarcodeStr)) {\r\n                recordForBarcode = loopRecord;\r\n            }\r\n        }\r\n\r\n        //Could not find both, so everything is fine\r\n        if (recordForBarcode == null && recordForSalesOrder == null) {\r\n            return true;\r\n        }\r\n\r\n\r\n        //We found a record for this barcodeStr\r\n        if (recordForBarcode != null) {\r\n\r\n            if (!recordForBarcode.getSalesorderStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr())) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_pickcartbox_already_assigned), \"\", true, true);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //We found a record for this salesorder\r\n        if (recordForSalesOrder != null) {\r\n\r\n            if (!recordForSalesOrder.getPackingtableStr().equalsIgnoreCase(pvBarcodeStr)) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_pickcartbox), recordForSalesOrder.getPackingtableStr(), true, true);\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    //Listeners\r\n    private void mSetDoneListener() {\r\n        this.imageButtonDone.setOnClickListener(view -> mHandlePickDoneClick());\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener((v, event) -> {\r\n\r\n            if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                if (plusHandler != null) return true;\r\n                plusHandler = new Handler();\r\n                plusHandler.postDelayed(mPlusAction, 750);\r\n            }\r\n\r\n            if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                if (plusHandler == null) return true;\r\n                plusHandler.removeCallbacks(mPlusAction);\r\n                plusHandler = null;\r\n                pickCounterPlusHelperInt = 0;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(view -> {\r\n\r\n            //There is no selected barcodeStr, select one first\r\n            if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n                cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                return;\r\n            }\r\n\r\n            PickorderPickActivity.articleScannedLastBln = true;\r\n            pHandleScan(cBarcodeScan.pFakeScan(cPickorderBarcode.currentPickorderBarcode.getBarcodeStr()));\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener((v, event) -> {\r\n            if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                if (minusHandler != null) return true;\r\n                minusHandler = new Handler();\r\n                minusHandler.postDelayed(mMinusAction, 750);\r\n            }\r\n            if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                if (minusHandler == null) return true;\r\n                minusHandler.removeCallbacks(mMinusAction);\r\n                minusHandler = null;\r\n                pickCounterMinusHelperInt = 0;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(view -> {\r\n\r\n\r\n            //There is no selected barcodeStr, select one first\r\n            if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n                cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                return;\r\n            }\r\n\r\n            mTryToChangePickedQuantity(false, false, cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(view -> mNumberClicked());\r\n        quantityRequiredText.setOnClickListener(view -> mNumberClicked());\r\n    }\r\n\r\n    //Dialogs and Activitys\r\n\r\n    private  void mShowFullArticleFragment() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        ArticleFullViewFragment articleFullViewFragment = new ArticleFullViewFragment();\r\n        articleFullViewFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ARTICLEFULL_TAG);\r\n    }\r\n\r\n    private  void mShowUnderPickDialog(String pvRejectStr,String pvAcceptStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_underpick_header),\r\n                cAppExtension.activity.getString(R.string.message_underpick_text,\r\n                        cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityDbl()),\r\n                        cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityHandledDbl())),\r\n                pvRejectStr,\r\n                pvAcceptStr ,\r\n                false);\r\n        acceptRejectFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            // show my popup\r\n            acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n        });\r\n    }\r\n\r\n    private void mShowAcceptFragment(){\r\n        boolean ignoreAccept = false;\r\n        if (cPickorder.currentPickOrder.isPVBln()) {\r\n            ignoreAccept = true;\r\n        }\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_orderbusy_header),\r\n                cAppExtension.activity.getString(R.string.message_orderbusy_text),\r\n                cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line),ignoreAccept);\r\n        acceptRejectFragment.setCancelable(true);\r\n\r\n        runOnUiThread(() -> {\r\n            // show my popup\r\n            acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n        });\r\n    }\r\n\r\n    private  void mGoBackToLinesActivity() {\r\n\r\n        //Reset current branch\r\n        if (cPickorder.currentPickOrder.destionationBranch() == null) {\r\n            cPickorder.currentPickOrder.scannedBranch =  null;\r\n        }\r\n\r\n        Intent intent = new Intent(cAppExtension.context, PickorderLinesActivity.class);\r\n        PickorderLinesActivity.startedViaOrderSelectBln = false;\r\n        PickorderPickActivity.noInputPropertysShownBln = false;\r\n\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, cPickorderLine.currentPickOrderLine.getQuantityDbl().intValue());\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    private  void mShowOverpickNotAllowed(){\r\n        cUserInterface.pShowSnackbarMessage(textViewAction , cAppExtension.context.getString(R.string.number_cannot_be_higher), null, false);\r\n        cUserInterface.pDoNope(quantityText, true, true);\r\n        cUserInterface.pDoNope(quantityRequiredText, false, false);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(pickorderPickContainer);\r\n        constraintSetSpace.connect(articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(pickorderPickContainer);\r\n    }\r\n\r\n    private  void mShowNoInputPropertys(){\r\n\r\n        if (PickorderPickActivity.noInputPropertysShownBln || !cPickorderLine.currentPickOrderLine.hasPropertysBln()|| cPickorderLine.currentPickOrderLine.linePropertyNoInputObl().size() == 0) {\r\n            return;\r\n        }\r\n\r\n        this.mShowItemPropertyNoInputFragment();\r\n\r\n    }\r\n\r\n    private  void mShowItemPropertyNoInputFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        List<cLinePropertyValue> linePropertyValues = new ArrayList<>();\r\n\r\n        for (cLineProperty lineProperty : cPickorderLine.currentPickOrderLine.linePropertyNoInputObl()) {\r\n            linePropertyValues.addAll(lineProperty.propertyValueObl());\r\n        }\r\n\r\n        ItemPropertyNoInputFragment itemPropertyNoInputFragment = new ItemPropertyNoInputFragment(linePropertyValues);\r\n        itemPropertyNoInputFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.ITEMPROPERTYVALUENOINPUTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n\r\n        PickorderPickActivity.noInputPropertysShownBln = true;\r\n    }\r\n\r\n    private  void mShowItemPropertyInputActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        Intent intent = new Intent(cAppExtension.context, PickorderLineItemPropertyInputActvity.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (pickCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (pickCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (pickCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (pickCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (pickCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (pickCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (pickCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (pickCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.pickCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.pickCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    //End Region Number Broadcaster\r\n\r\n    //End Regin Private Methods\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderPickActivity.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderPickActivity.java	(date 1622790271035)
@@ -312,11 +312,16 @@
     }
 
     @Override
-    public void mSetToolbar(String pvScreenTitle) {
+    public void mSetToolbar(String pvScreenTitleStr) {
         this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);
-        this.toolbarTitle.setText(pvScreenTitle);
+        this.toolbarTitle.setText(pvScreenTitleStr);
         this.toolbarTitle.setSelected(true);
         this.toolbarSubtext.setSelected(true);
+
+        if (cPickorderLine.currentPickOrderLine != null) {
+            this.toolbarSubtext.setText(cPickorderLine.currentPickOrderLine.getBinCodeStr());
+        }
+
         Toolbar toolbar = findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
         ActionBar actionBar = getSupportActionBar();
@@ -408,8 +413,6 @@
 
         cUserInterface.pCheckAndCloseOpenDialogs();
 
-
-
         if (!cPickorder.currentPickOrder.isPABln()) {
             PickorderPickActivity.destionationScannedBln = true;
         }
@@ -430,6 +433,10 @@
             this.mHandlePVScan(pvBarcodeScan);
             return;
         }
+
+        if (cPickorderLine.currentPickOrderLine == null) {
+            return;
+        }
 
         //Check if there are composite barcodes for this line that matcht the scan
        List<cPickorderCompositeBarcode> compositeBarcodesMatchedObl =   cPickorderLine.currentPickOrderLine.pFindCompositeBarcodeForLine(pvBarcodeScan);
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderSelectActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Ship;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.app.ActivityOptionsCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.util.Pair;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Licenses.cLicense;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Picken.Pickorders.cPickorderAdapter;\r\nimport SSU_WHS.Picken.Shipment.cShipment;\r\nimport nl.icsvertex.scansuite.Activities.General.MenuActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.FilterOrderLinesFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoOrdersFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class ShiporderSelectActivity extends AppCompatActivity implements iICSDefaultActivity, SwipeRefreshLayout.OnRefreshListener {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    // Region Views\r\n\r\n    //Region Private Properties\r\n\r\n    // Region Views\r\n\r\n    private  SearchView recyclerSearchView;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubTitle;\r\n    private  RecyclerView recyclerViewShiporders;\r\n\r\n    private  ConstraintLayout constraintFilterOrders;\r\n    private  SwipeRefreshLayout swipeRefreshLayout;\r\n    private  BottomSheetBehavior bottomSheetBehavior;\r\n    private  ImageView imageViewFilter;\r\n\r\n    cPickorderAdapter pickorderAdapter;\r\n    cPickorderAdapter getPickorderAdapter(){\r\n        if (this.pickorderAdapter == null) {\r\n            this.pickorderAdapter = new cPickorderAdapter();\r\n        }\r\n\r\n        return  this.pickorderAdapter;\r\n    }\r\n\r\n    // End Region Views\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_shiporder_select);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        this.mActivityInitialize();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n        if (pvMenuItem.getItemId() == android.R.id.home) {\r\n            mTryToLeaveActivity();\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mTryToLeaveActivity();\r\n    }\r\n\r\n    @Override\r\n    public void onRefresh() {\r\n        this.pFillOrders();\r\n\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_shiporderselect));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n        this.recyclerViewShiporders = findViewById(R.id.recyclerViewShiporders);\r\n        this.recyclerSearchView = findViewById(R.id.recyclerSearchView);\r\n        this.imageViewFilter = findViewById(R.id.imageViewFilter);\r\n        this.constraintFilterOrders = findViewById(R.id.constraintFilterOrders);\r\n        this.swipeRefreshLayout = findViewById(R.id.swipeRefreshLayout);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubTitle.setText(cUser.currentUser.currentBranch.getBranchNameStr());\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        this.mInitBottomSheet();\r\n        this.mResetCurrents();\r\n        this.pFillOrders();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetSearchListener();\r\n        this.mSetFilterListener();\r\n        this.mSetSwipeRefreshListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pFillOrders() {\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleFillOrders).start();\r\n\r\n\r\n    }\r\n\r\n    public  void pShiporderSelected(cPickorder pvPickorder) {\r\n\r\n\r\n        if (!mCheckOrderIsLockableBln(pvPickorder)) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.lockorder_order_assigned_to_another_user), R.raw.badsound);\r\n            cUserInterface.pCheckAndCloseOpenDialogs();\r\n            return;\r\n        }\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        //Set the current pickorder\r\n        cPickorder.currentPickOrder = pvPickorder;\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Ordernumber\", cPickorder.currentPickOrder.getOrderNumberStr());\r\n\r\n        new Thread(this::mHandleShipOrderSelected).start();\r\n\r\n\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Try to find a pickorder with the current location and open it\r\n        cPickorder pickorder =  cPickorder.pGetPackAndShipOrderByCurrentLocationStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n        if (pickorder != null) {\r\n            this.pShiporderSelected(pickorder);\r\n            return;\r\n        }\r\n\r\n        //Set filter with scanned barcodeStr if there is no prefix\r\n        if (!cRegex.pHasPrefix(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            //no prefix, fine\r\n            this.recyclerSearchView.setQuery(pvBarcodeScan.getBarcodeOriginalStr(), true);\r\n            this.recyclerSearchView.callOnClick();\r\n            return;\r\n        }\r\n\r\n        // If there is a prefix, check if its a salesorder, then remove prefix en set filter\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.DOCUMENT)) {\r\n            //has prefix, is salesorderStr\r\n           this.recyclerSearchView.setQuery(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()), true);\r\n           this.recyclerSearchView.callOnClick();\r\n           return;\r\n        }\r\n\r\n        //If there is a prefix but it's not a salesorder tgen do nope\r\n        cUserInterface.pDoNope(this.recyclerSearchView, true, true);\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Method\r\n\r\n    private  void mHandleFillOrders() {\r\n\r\n        //First get all sortorders\r\n        if (!cPickorder.pGetPackAndShipOrdersViaWebserviceBln(true, \"\")) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_get_pickorders_failed), \"\", true, true);\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.allPickordersObl == null || cPickorder.allPickordersObl.size() == 0) {\r\n            this.mShowNoOrdersIcon(true);\r\n            return;\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            //Fill and show recycler\r\n            mSetSortorderRecycler(cPickorder.allPickordersObl);\r\n            mShowNoOrdersIcon(false);\r\n        });\r\n\r\n    }\r\n\r\n    private  void mHandleShipOrderSelected() {\r\n\r\n        cResult hulpResult;\r\n\r\n\r\n        //Try to lock the pickorder\r\n\r\n        if (!this.mTryToLockOrderBln()) {\r\n            this.pFillOrders();\r\n            return;\r\n        }\r\n\r\n        //Delete the detail, so we can get them from the webservice\r\n        if (!cPickorder.currentPickOrder.pDeleteDetailsBln()) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_couldnt_delete_details));\r\n            return;\r\n\r\n        }\r\n\r\n        hulpResult = cPickorder.currentPickOrder.pGetShipmentDetailsRst();\r\n        if (!hulpResult.resultBln) {\r\n            this.mStepFailed(hulpResult.messagesStr());\r\n            return;\r\n        }\r\n\r\n        // If everything went well, then start Lines Activity\r\n        cAppExtension.activity.runOnUiThread(this::mShowShipLinesActivity);\r\n\r\n    }\r\n\r\n    private void mSetSearchListener() {\r\n        //make whole view clickable\r\n        this.recyclerSearchView.setOnClickListener(view -> recyclerSearchView.setIconified(false));\r\n\r\n        //query entered\r\n        this.recyclerSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String s) {\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String pvQueryTextStr) {\r\n                mApplyFilter();\r\n                getPickorderAdapter().pSetFilter((pvQueryTextStr));\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetFilterListener() {\r\n        this.imageViewFilter.setOnClickListener(view -> mShowHideBottomSheet(bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_HIDDEN || bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_COLLAPSED));\r\n    }\r\n\r\n    private void mSetSwipeRefreshListener() {\r\n        this.swipeRefreshLayout.setOnRefreshListener(this);\r\n        this.swipeRefreshLayout.setColorSchemeColors(getResources().getColor(R.color.colorAccent), getResources().getColor(R.color.colorActive), getResources().getColor(R.color.colorPrimary));\r\n    }\r\n\r\n    private void mInitBottomSheet() {\r\n\r\n        this.bottomSheetBehavior = BottomSheetBehavior.from(this.constraintFilterOrders);\r\n        this.bottomSheetBehavior.setHideable(true);\r\n        this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);\r\n        this.bottomSheetBehavior.addBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {\r\n            @Override\r\n            public void onStateChanged(@NonNull View pvBottomSheet, int pvNewStateInt) {\r\n                if (pvNewStateInt == BottomSheetBehavior.STATE_COLLAPSED) {\r\n                    mApplyFilter();\r\n                }\r\n                if (pvNewStateInt == BottomSheetBehavior.STATE_HIDDEN) {\r\n                    mApplyFilter();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onSlide(@NonNull View view, float v) {\r\n\r\n            }\r\n        });\r\n\r\n        this.mFillBottomSheet();\r\n    }\r\n\r\n    private void mShowHideBottomSheet(Boolean pvShowBln) {\r\n\r\n        if (pvShowBln) {\r\n            this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n            return;\r\n        }\r\n\r\n        this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);\r\n\r\n    }\r\n\r\n    private void mApplyFilter() {\r\n\r\n        List<cPickorder> filteredPicksObl;\r\n\r\n        this.mShowThatFiltersInUse(cSharedPreferences.userFilterBln());\r\n\r\n        filteredPicksObl = cPickorder.pGetPicksWithFilterFromDatabasObl();\r\n        if (filteredPicksObl.size() == 0) {\r\n            return;\r\n        }\r\n\r\n        this.mSetSortorderRecycler(filteredPicksObl);\r\n    }\r\n\r\n    private void mShowThatFiltersInUse(Boolean pvFiltersInUseBln) {\r\n        if (pvFiltersInUseBln) {\r\n            this.imageViewFilter.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_filter_filled_black_24dp));\r\n        } else {\r\n            this. imageViewFilter.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_filter_black_24dp));\r\n        }\r\n    }\r\n\r\n    private void mFillBottomSheet() {\r\n        cAppExtension.fragmentManager.beginTransaction().replace(R.id.constraintFilterOrders, new FilterOrderLinesFragment()).commit();\r\n    }\r\n\r\n    private void mResetCurrents() {\r\n\r\n        //Reset all current objects\r\n        cPickorder.currentPickOrder = null;\r\n        cPickorderLine.currentPickOrderLine = null;\r\n        cPickorderBarcode.currentPickorderBarcode = null;\r\n        cWorkplace.currentWorkplace = null;\r\n        cShipment.allShipmentsObl = null;\r\n    }\r\n\r\n    private  void mShowNoOrdersIcon(final Boolean pvShowBln) {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n\r\n            cUserInterface.pHideGettingData();\r\n\r\n            if (pvShowBln) {\r\n\r\n                recyclerViewShiporders.setVisibility(View.INVISIBLE);\r\n                FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                NoOrdersFragment fragment = new NoOrdersFragment();\r\n                fragmentTransaction.replace(R.id.container, fragment);\r\n                fragmentTransaction.commit();\r\n                return;\r\n            }\r\n\r\n            recyclerViewShiporders.setVisibility(View.VISIBLE);\r\n\r\n            List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n            for (Fragment fragment : fragments) {\r\n                if (fragment instanceof NoOrdersFragment) {\r\n                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                    fragmentTransaction.remove(fragment);\r\n                    fragmentTransaction.commit();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mSetSortorderRecycler(List<cPickorder> pvPickorderObl) {\r\n\r\n        this.swipeRefreshLayout.setRefreshing(false);\r\n\r\n        if (pvPickorderObl == null || pvPickorderObl.size() == 0) {\r\n            return;\r\n        }\r\n\r\n        for (Fragment fragment : cAppExtension.fragmentManager.getFragments()) {\r\n            if (fragment instanceof NoOrdersFragment) {\r\n                cAppExtension.fragmentManager.beginTransaction().remove(fragment).commit();\r\n            }\r\n        }\r\n\r\n        this.recyclerViewShiporders.setHasFixedSize(false);\r\n        this.recyclerViewShiporders.setAdapter(this.getPickorderAdapter());\r\n        this.recyclerViewShiporders.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n\r\n        this.getPickorderAdapter().pFillData(pvPickorderObl);\r\n    }\r\n\r\n    private  boolean mCheckOrderIsLockableBln(cPickorder pvPickorder) {\r\n\r\n        //If there is no assigned user, then always oke\r\n        if (pvPickorder.getAssignedUserIdStr().isEmpty()) {\r\n            return true;\r\n        }\r\n\r\n        //If you are allowed to unlock busy order, then no problem\r\n        if (cSetting.GENERIC_UNLOCK_BUSY_ORDERS_ALLOWED()) {\r\n            return true;\r\n        }\r\n\r\n        return cUser.currentUser.getUsernameStr().equalsIgnoreCase(pvPickorder.getAssignedUserIdStr());\r\n\r\n\r\n    }\r\n\r\n    private  boolean mTryToLockOrderBln() {\r\n\r\n        cResult hulpResult;\r\n        hulpResult = cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown) {\r\n            mStepFailed(hulpResult.messagesStr());\r\n            return false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if ( hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete ||\r\n             hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n\r\n\r\n            //If we got any comments, show them\r\n            if (cPickorder.currentPickOrder.pFeedbackCommentObl() != null && cPickorder.currentPickOrder.pFeedbackCommentObl().size() > 0) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mStepFailed(String pvErrorMessageStr) {\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, cPickorder.currentPickOrder.getOrderNumberStr(), true, true);\r\n        cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        cPickorder.currentPickOrder = null;\r\n    }\r\n\r\n    private  void mShowCommentsFragment(List<cComment> pvDataObl, String pvTitleStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(cPublicDefinitions.KEY_COMMENTHEADER, pvTitleStr);\r\n\r\n        CommentFragment commentFragment = new CommentFragment(pvDataObl);\r\n        commentFragment.setArguments(bundle);\r\n\r\n        commentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.COMMENTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private  void mShowShipLinesActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final ViewGroup container = cAppExtension.activity.findViewById(R.id.container);\r\n\r\n        Intent intent = new Intent(cAppExtension.context, ShiporderLinesActivity.class);\r\n        View clickedOrder = container.findViewWithTag(cPickorder.currentPickOrder.getOrderNumberStr());\r\n        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new Pair<>(clickedOrder, cPublicDefinitions.VIEW_CHOSEN_ORDER));\r\n        ActivityCompat.startActivity(cAppExtension.context, intent, activityOptions.toBundle());\r\n    }\r\n\r\n    private void mTryToLeaveActivity() {\r\n\r\n        this.mReleaseLicense();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, MenuActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void mReleaseLicense() {\r\n\r\n        if (!cLicense.pReleaseLicenseViaWebserviceBln()) {\r\n            cUserInterface.pShowSnackbarMessage(recyclerViewShiporders, cAppExtension.activity.getString(R.string.message_license_release_error), null, false);\r\n        }\r\n\r\n        cLicense.currentLicenseEnu = cLicense.LicenseEnu.Unknown;\r\n\r\n    }\r\n}\r\n\r\n//End Region Private Methods\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderSelectActivity.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderSelectActivity.java	(date 1622788700906)
@@ -574,12 +574,8 @@
 
         cUserInterface.pCheckAndCloseOpenDialogs();
 
-        final ViewGroup container = cAppExtension.activity.findViewById(R.id.container);
-
         Intent intent = new Intent(cAppExtension.context, ShiporderLinesActivity.class);
-        View clickedOrder = container.findViewWithTag(cPickorder.currentPickOrder.getOrderNumberStr());
-        ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new Pair<>(clickedOrder, cPublicDefinitions.VIEW_CHOSEN_ORDER));
-        ActivityCompat.startActivity(cAppExtension.context, intent, activityOptions.toBundle());
+        startActivity(intent);
     }
 
     private void mTryToLeaveActivity() {
Index: app/src/main/java/SSU_WHS/Basics/Users/cUserAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.Users;\r\n\r\nimport android.text.TextUtils;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cUserAdapter extends RecyclerView.Adapter<cUserAdapter.UserViewHolder> {\r\n\r\n    //Region Public Properties\r\n\r\n    public class UserViewHolder extends RecyclerView.ViewHolder{\r\n        private TextView textViewName;\r\n        private TextView textViewUserName;\r\n        private TextView textViewInitials;\r\n        public LinearLayout userItemLinearLayout;\r\n\r\n        public UserViewHolder(View pvItemView) {\r\n            super(pvItemView);\r\n            this.textViewName = pvItemView.findViewById(R.id.textViewName);\r\n            this.textViewName.setEllipsize(TextUtils.TruncateAt.MARQUEE);\r\n            this.textViewName.setSingleLine(true);\r\n            this.textViewName.setMarqueeRepeatLimit(5);\r\n            this.textViewName.setSelected(true);\r\n            this.textViewUserName = pvItemView.findViewById(R.id.textViewUserName);\r\n            this.textViewInitials = pvItemView.findViewById(R.id.textViewInitials);\r\n            this.userItemLinearLayout = pvItemView.findViewById(R.id.userItemLinearLayout);\r\n        }\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n    private final LayoutInflater LayoutInflaterObject;\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public cUserAdapter() {\r\n        this.LayoutInflaterObject = LayoutInflater.from(cAppExtension.context);\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n    @NonNull\r\n    @Override\r\n    public cUserAdapter.UserViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View itemView = this.LayoutInflaterObject.inflate(R.layout.recycler_user, parent, false);\r\n        return new cUserAdapter.UserViewHolder(itemView);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull cUserAdapter.UserViewHolder holder, int position) {\r\n        if (cUser.allUsersObl != null) {\r\n            final cUser User = cUser.allUsersObl.get(position);\r\n            holder.textViewName.setText(User.getNameStr());\r\n            holder.textViewUserName.setText(User.getUsernameStr());\r\n            holder.textViewInitials.setText(User.getInitialsStr());\r\n            holder.userItemLinearLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    mUserSelected(User);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount () {\r\n        if (cUser.allUsersObl != null)\r\n            return cUser.allUsersObl.size();\r\n        else return 0;\r\n    }\r\n\r\n    private static void mUserSelected(cUser pvUser){\r\n        if (cAppExtension.context instanceof LoginActivity) {\r\n            LoginActivity loginActivity = new LoginActivity();\r\n            loginActivity.pUserSelected(cBarcodeScan.pFakeScan(pvUser.getUsernameStr()),false);\r\n        }\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/Users/cUserAdapter.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/SSU_WHS/Basics/Users/cUserAdapter.java	(date 1622795649470)
@@ -19,10 +19,10 @@
 
     //Region Public Properties
 
-    public class UserViewHolder extends RecyclerView.ViewHolder{
-        private TextView textViewName;
-        private TextView textViewUserName;
-        private TextView textViewInitials;
+    public static class UserViewHolder extends RecyclerView.ViewHolder{
+        private final TextView textViewName;
+        private final TextView textViewUserName;
+        private final TextView textViewInitials;
         public LinearLayout userItemLinearLayout;
 
         public UserViewHolder(View pvItemView) {
@@ -55,22 +55,18 @@
     @Override
     public cUserAdapter.UserViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
         View itemView = this.LayoutInflaterObject.inflate(R.layout.recycler_user, parent, false);
-        return new cUserAdapter.UserViewHolder(itemView);
+        return new UserViewHolder(itemView);
     }
 
     @Override
     public void onBindViewHolder(@NonNull cUserAdapter.UserViewHolder holder, int position) {
         if (cUser.allUsersObl != null) {
-            final cUser User = cUser.allUsersObl.get(position);
+            int safePosition = holder.getAdapterPosition();
+            final cUser User = cUser.allUsersObl.get(safePosition);
             holder.textViewName.setText(User.getNameStr());
             holder.textViewUserName.setText(User.getUsernameStr());
             holder.textViewInitials.setText(User.getInitialsStr());
-            holder.userItemLinearLayout.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    mUserSelected(User);
-                }
-            });
+            holder.userItemLinearLayout.setOnClickListener(v -> mUserSelected(User));
         }
     }
 
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Sort/SortorderSortActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Sort;\r\n\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderLinePackAndShip.cPickorderLinePackAndShip;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTable;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleInfoFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class SortorderSortActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    private static boolean articleScannedLastBln;\r\n    private boolean defaultBarcodeSelectedBln;\r\n\r\n    private List<String> sortingAdviceObl;\r\n\r\n    private int pickCounterMinusHelperInt;\r\n    private int pickCounterPlusHelperInt;\r\n\r\n    private Handler minusHandler;\r\n    private Handler plusHandler;\r\n\r\n    //Region Views\r\n    private ConstraintLayout sortOrderSortContainer;\r\n    private  Toolbar toolbar;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubtext;\r\n    private TextView toolbarSubtext2;\r\n\r\n    private ImageView articleThumbImageView;\r\n    private TextView articleDescriptionText;\r\n    private TextView articleDescription2Text;\r\n    private TextView articleItemText;\r\n    private TextView articleBarcodeText;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private ImageView imageButtonBarcode;\r\n    private ImageView imageButtonNoInputPropertys;\r\n\r\n    private TextView textViewAction;\r\n    private TextView textAdviceLocation;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n    private AppCompatImageButton imageButtonDone;\r\n\r\n    private  CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n\r\n    //End Region Views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_sortorder_sort);\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver,new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        try {\r\n            super.onDestroy();\r\n            LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        this.mActivityInitialize();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver,new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n        if (pvMenuItem.getItemId() == android.R.id.home) {\r\n            this.mShowAcceptFragment();\r\n            return true;\r\n        }\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mShowAcceptFragment();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n\r\n    //Region iICSDefaultActivity Methods\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_sortordersort));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.sortOrderSortContainer = findViewById(R.id.sortOrderSortContainer);\r\n        this.toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n        this.toolbarSubtext2 = findViewById(R.id.toolbarSubtext2);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n        this.textViewAction = findViewById(R.id.textViewAction);\r\n        this.textAdviceLocation = findViewById(R.id.textAdviceLocation);\r\n\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_sort);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n        this.toolbarSubtext2.setText(cPickorderLine.currentPickOrderLine.getSourceNoStr());\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        this.textAdviceLocation.setEllipsize(TextUtils.TruncateAt.MARQUEE);\r\n        this.textAdviceLocation.setSingleLine(true);\r\n        this.textAdviceLocation.setMarqueeRepeatLimit(5);\r\n        this.textAdviceLocation.setSelected(true);\r\n        this.textAdviceLocation.setText(cAppExtension.context.getString(R.string.message_scan_article));\r\n\r\n        this.pickCounterPlusHelperInt = 0;\r\n        this.pickCounterMinusHelperInt = 0;\r\n        this.toolbarSubtext.setText(cPickorder.currentPickOrder.getOrderNumberStr());\r\n\r\n        this.articleDescriptionText.setText(cPickorderLine.currentPickOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cPickorderLine.currentPickOrderLine.getDescription2Str());\r\n\r\n        if (cPickorderLine.currentPickOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        this.articleItemText.setText(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n\r\n        this.quantityText.setText(\"0\");\r\n        this.quantityRequiredText.setText(cText.pIntToStringStr(cPickorderLine.currentPickOrderLine.getQuantityDbl().intValue()));\r\n\r\n        this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n\r\n        this.mEnablePlusMinusAndBarcodeSelectViews();\r\n        this.mShowArticleImage();\r\n        this.mSetAdviceLocation();\r\n        this.mShowBarcodeInfo();\r\n        this.mShowOrHideGenericExtraFields();\r\n\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetArticleImageListener();\r\n        this.mSetImageButtonBarcodeListener();\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n        //Register scan here, so we start things off\r\n        SortorderSortActivity.articleScannedLastBln = false;\r\n\r\n        //No barcodeStr selected, so don't simulate scan\r\n        if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n            return;\r\n        }\r\n\r\n        //Fake a scan\r\n        if (! this.defaultBarcodeSelectedBln){\r\n            this.pHandleScan(cBarcodeScan.pFakeScan(cPickorderBarcode.currentPickorderBarcode.getBarcodeStr()));\r\n        }\r\n    }\r\n\r\n    //End Region iICSDefaultActivity Methods\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        boolean packingTableScannedBln = false;\r\n\r\n        if (Objects.requireNonNull(cBarcodeLayout.pGetBarcodeLayoutByBarcodeObl(pvBarcodeScan.getBarcodeOriginalStr())).size() > 1) {\r\n            if (cRegex.pHasPrefix(pvBarcodeScan.barcodeOriginalStr)) {\r\n                packingTableScannedBln = true;\r\n            }\r\n        }\r\n\r\n        if (!packingTableScannedBln && cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n            this.mHandleArticleScanned(pvBarcodeScan);\r\n            return;\r\n        }\r\n\r\n        this.mHandleSalesOrderOrPackingTableBinScanned(pvBarcodeScan);\r\n    }\r\n\r\n    public  void pAcceptPick() {\r\n        cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n        this.mSortDoneForNow();\r\n    }\r\n\r\n    public void pCancelPick() {\r\n        cPickorderLine.currentPickOrderLine.quantityHandledDbl = (double) 0;\r\n        cPickorderLine.currentPickOrderLine.pCancelIndatabase();\r\n        this.mGoBackToLinesActivity();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private  void mHandleArticleScanned(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        if (cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl())) {\r\n            //You have to scan a pickcart or salesorder after the last article scan\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_scan_packinglocation_or_salesorder), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n            return;\r\n        }\r\n\r\n        //We didn't scan an article yet, so handle it as a \"normal\" scan\r\n        if (!articleScannedLastBln) {\r\n\r\n            if (!this.mFindBarcodeInLineBarcodes(pvBarcodeScan)) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n                return;\r\n            }\r\n\r\n            this.imageButtonDone.setVisibility(View.INVISIBLE);\r\n\r\n            //Succesfull article scanned\r\n            articleScannedLastBln = true;\r\n\r\n            //If we found the barcodeStr, currentbarcode is alreay filled, so make this selected\r\n            this.mBarcodeSelected(cPickorderBarcode.currentPickorderBarcode);\r\n            return;\r\n        }\r\n\r\n        //We last scanned an article, but thats oke\r\n        if (!cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n            this.pHandleScan(pvBarcodeScan);\r\n            return;\r\n        }\r\n\r\n        //You have to scan a pickcart or salesorder after the last article scan\r\n        cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_scan_packinglocation_or_salesorder), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n\r\n    }\r\n\r\n    private  boolean mCheckPackingTableAndSourceNoBln(String pvBarcodeStr) {\r\n\r\n\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl() == null || cPickorder.currentPickOrder.salesOrderPackingTableObl().size() == 0) {\r\n            return true;\r\n        }\r\n\r\n        //Record for Current Sales order\r\n        cSalesOrderPackingTable recordForSalesOrder = null;\r\n\r\n        //Record for Scanned Barcode\r\n        cSalesOrderPackingTable recordForBarcode = null;\r\n\r\n        for (cSalesOrderPackingTable loopRecord : cPickorder.currentPickOrder.salesOrderPackingTableObl()) {\r\n\r\n            if (loopRecord.getSalesorderStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr()))\r\n                recordForSalesOrder = loopRecord;\r\n\r\n            if (loopRecord.getPackingtableStr().equalsIgnoreCase(pvBarcodeStr)) {\r\n                recordForBarcode = loopRecord;\r\n            }\r\n        }\r\n\r\n        //Could not find both, so everything is fine\r\n        if (recordForBarcode == null && recordForSalesOrder == null) {\r\n            return true;\r\n        }\r\n\r\n\r\n        //We found a record for this barcodeStr\r\n        if (recordForBarcode != null) {\r\n\r\n            if (!recordForBarcode.getSalesorderStr().equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr())) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_pickcartbox_already_assigned), \"\", true, true);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //We found a record for this salesorder\r\n        if (recordForSalesOrder != null) {\r\n\r\n            if (!recordForSalesOrder.getPackingtableStr().equalsIgnoreCase(pvBarcodeStr)) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_pickcartbox), recordForSalesOrder.getPackingtableStr(), true, true);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private  boolean mAddSalesOrderPackingTableBln() {\r\n\r\n        cSalesOrderPackingTable salesOrderPackingTable = new cSalesOrderPackingTable(cPickorderLine.currentPickOrderLine.getSourceNoStr(), cPickorderLine.currentPickOrderLine.getProcessingSequenceStr());\r\n\r\n        //If there are no known salesOrderPackingTables then initiaite so we can add later\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl() == null || cPickorder.currentPickOrder.salesOrderPackingTableObl().size() == 0) {\r\n            cSalesOrderPackingTable.allSalesOrderPackingTabelsObl = new ArrayList<>();\r\n        }\r\n\r\n        //if salesOrderPackingTable already exists, then we are done\r\n        if (cPickorder.currentPickOrder.salesOrderPackingTableObl().contains(salesOrderPackingTable)) {\r\n            return true;\r\n        }\r\n\r\n        // Does not exist, so pInsertInDatabase in database\r\n        salesOrderPackingTable.pInsertInDatabaseBln();\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mHandleSalesOrderOrPackingTableBinScanned(cBarcodeScan pvBarcodeScan) {\r\n\r\n        // Check if article is already scanned\r\n        if (!SortorderSortActivity.articleScannedLastBln) {\r\n            // we've scanned a pickCart or a salesOrder, but we need an article\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_scan_article_first), pvBarcodeScan.getBarcodeOriginalStr(), true, true);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonDone.setVisibility(View.VISIBLE);\r\n\r\n        //Strip barcodeStr from regex\r\n        String barcodeWithoutPrefixStr = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n        boolean adviceMatchedBln = false;\r\n\r\n        //We have advice(s) and it is mandatory, so check if we have a correct scan\r\n        if (this.sortingAdviceObl.size() > 0 && cSetting.PICK_SORT_LOCATION_ADVICE_MANDATORY()) {\r\n\r\n            for (String adviceStr : this.sortingAdviceObl) {\r\n                if (adviceStr.equalsIgnoreCase(barcodeWithoutPrefixStr)) {\r\n                    //We have a match, so we are done\r\n                    adviceMatchedBln = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        //We don't have a match check differently\r\n        if (!adviceMatchedBln) {\r\n            //Check if scanned barcodeStr is a SalesOrder or PickCartBox\r\n            boolean isSalesOrderBln = cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.SALESORDER);\r\n            boolean isPackingTableBinBln = cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(), cBarcodeLayout.barcodeLayoutEnu.PACKINGTABLEBIN);\r\n\r\n            //If we scanned a salesorder, then check if it matches the SourceNo\r\n            if (isSalesOrderBln) {\r\n                //If scanned value doesn't match then we are done\r\n                if (!barcodeWithoutPrefixStr.equalsIgnoreCase(cPickorderLine.currentPickOrderLine.getSourceNoStr())) {\r\n                    cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_sourceno), barcodeWithoutPrefixStr, true, true);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            //If we scanned a pickcartbox, then check if it matches the ProcessingSequence if ProcessingSequence is not empty\r\n            if (isPackingTableBinBln && !cPickorderLine.currentPickOrderLine.pGetPackingTableForSourceNoStr().isEmpty()) {\r\n                //If scanned value doesn't match then we are done\r\n                if (!barcodeWithoutPrefixStr.equalsIgnoreCase(cPickorderLine.currentPickOrderLine.pGetPackingTableForSourceNoStr())) {\r\n                    cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.message_wrong_pickcartbox), barcodeWithoutPrefixStr, true, true);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // There are  previous salesorder/pickcaerbox scans, so check if input is correct\r\n            if (!this.mCheckPackingTableAndSourceNoBln(barcodeWithoutPrefixStr)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Set the Processing Sequence\r\n        cPickorderLine.currentPickOrderLine.processingSequenceStr = barcodeWithoutPrefixStr;\r\n\r\n        //try to add SalesOrderPackingtable to database\r\n        if (!this.mAddSalesOrderPackingTableBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_inserting_salesorderpackingtable), barcodeWithoutPrefixStr, true, true);\r\n            cPickorderLine.currentPickOrderLine.processingSequenceStr = \"\";\r\n            return;\r\n        }\r\n\r\n        //try to update ProcessingSequence in database\r\n        if (!cPickorderLine.currentPickOrderLine.pUpdateProcessingSequenceBln(barcodeWithoutPrefixStr)) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_updating_processing_sequence), barcodeWithoutPrefixStr, true, true);\r\n            return;\r\n        }\r\n\r\n        //Set the ProcessingSequence\r\n        cPickorderLine.currentPickOrderLine.processingSequenceStr = barcodeWithoutPrefixStr;\r\n\r\n        // If this is VKO after each piece, then show new instructions\r\n        if (cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.message_scan_article));\r\n            SortorderSortActivity.articleScannedLastBln = false;\r\n        }\r\n\r\n\r\n        //Check if we complete handled this line, if so then handled else only update it\r\n        if (cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl())) {\r\n            //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n            cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n        } else {\r\n            cPickorderLine.currentPickOrderLine.pUpdateSortLineIndatabaseBln();\r\n        }\r\n\r\n        //Check if line is done\r\n        this.mCheckLineDone();\r\n\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if(event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(plusAction, 750);\r\n                }\r\n                if(event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if(plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(plusAction);\r\n                    plusHandler = null;\r\n                    pickCounterPlusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mTryToChangeSortedQuantity(true, false,  cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cPickorderLinePackAndShip.currentPickorderLinePackAndShip.getQuantityCheckedDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, cPickorderLinePackAndShip.currentPickorderLinePackAndShip.getQuantityDbl().intValue());\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if(event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(minusAction, 750);\r\n                }\r\n                if(event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if(minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(minusAction);\r\n                    minusHandler = null;\r\n                    pickCounterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n                mTryToChangeSortedQuantity(false, false,  cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetArticleImageListener() {\r\n        this.articleThumbImageView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowFullArticleFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cPickorderLine.currentPickOrderLine.barcodesObl == null || cPickorderLine.currentPickOrderLine.barcodesObl.size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                mEnablePlusMinusAndBarcodeSelectViews();\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cPickorderLine.currentPickOrderLine.barcodesObl.size() == 1) {\r\n                   pHandleScan(cBarcodeScan.pFakeScan(cPickorderBarcode.currentPickorderBarcode.getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetDoneListener() {\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                if (cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl())) {\r\n                    mSortDone();\r\n                } else {\r\n                    mSortDoneForNow();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mSetAdviceLocation() {\r\n\r\n        String hulpStr;\r\n\r\n        hulpStr = cPickorderLine.currentPickOrderLine.pGetPackingTableForSourceNoStr();\r\n\r\n        if (!hulpStr.isEmpty()) {\r\n            cPickorderLine.currentPickOrderLine.processingSequenceStr = hulpStr;\r\n            this.textAdviceLocation.setText(hulpStr);\r\n            this.sortingAdviceObl = new ArrayList<>();\r\n            return;\r\n        }\r\n\r\n        this.sortingAdviceObl = cPickorderLine.currentPickOrderLine.pGetAdvicedSortLocationsFromWebserviceObl();\r\n\r\n        if ( this.sortingAdviceObl == null ||  this.sortingAdviceObl.size() == 0) {\r\n            this.textAdviceLocation.setText(cAppExtension.activity.getString(R.string.message_no_sorting_location_adviced));\r\n            return;\r\n        }\r\n\r\n        StringBuilder advicelocations = new StringBuilder();\r\n\r\n        for (String advicedLocationStr:this.sortingAdviceObl) {\r\n            advicelocations.append(\" \").append(advicedLocationStr);\r\n        }\r\n\r\n        this.textAdviceLocation.setText(advicelocations.toString());\r\n\r\n    }\r\n\r\n    private  void mSortDone() {\r\n        this.mSendLine();\r\n        this.mGoBackToLinesActivity();\r\n    }\r\n\r\n    private void mSortDoneForNow() {\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.pUpdateSortLineIndatabaseBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_update_line), null);\r\n            return;\r\n        }\r\n\r\n        this.mGoBackToLinesActivity();\r\n    }\r\n\r\n    private  void mGoBackToLinesActivity() {\r\n        Intent intent = new Intent(cAppExtension.context, SortorderLinesActivity.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    public void mHandleQuantityChosen(int pvQuantityDbl) {\r\n        this.mTryToChangeSortedQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n    }\r\n\r\n    private  void mSendLine() {\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.pSortedBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), null);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n        }\r\n\r\n    }\r\n\r\n    private  void mTryToChangeSortedQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        double newQuantityDbl;\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n                newQuantityDbl = pvAmountDbl;\r\n            } else {\r\n                newQuantityDbl = cPickorderLine.currentPickOrderLine.getQuantityHandledDbl() + pvAmountDbl;\r\n            }\r\n\r\n            //Check if we would exceed amount, then show message\r\n            if (newQuantityDbl > cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n                this.mShowOverpickNotAllowed();\r\n                articleScannedLastBln = false;\r\n                return;\r\n            }\r\n\r\n            //Set the new quantityDbl and show in Activity\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = newQuantityDbl;\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityHandledDbl()));\r\n\r\n            //Add or update line barcodeStr\r\n            cPickorderLine.currentPickOrderLine.pAddOrUpdateLineBarcode(pvAmountDbl);\r\n\r\n            //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n            cPickorderLine.currentPickOrderLine.pUpdateSortLineIndatabaseBln();\r\n\r\n            if (cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln() ||\r\n                cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl())) {\r\n                this.textViewAction.setText(cAppExtension.context.getString(R.string.scan_sort_location));\r\n            }\r\n            else {\r\n                this.textViewAction.setText(cAppExtension.context.getString(R.string.scan_article_or_sort_location));\r\n            }\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        //negative\r\n        if (cPickorderLine.currentPickOrderLine.quantityHandledDbl == 0 ) {\r\n            cUserInterface.pDoNope(quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n        if (pvAmountFixedBln) {\r\n            newQuantityDbl = pvAmountDbl;\r\n        }else {\r\n            newQuantityDbl= cPickorderLine.currentPickOrderLine.getQuantityHandledDbl() - pvAmountDbl;\r\n        }\r\n\r\n        if (newQuantityDbl <= 0) {\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = (double) 0;\r\n        }else {\r\n            //Set the new quantityDbl and show in Activity\r\n            cPickorderLine.currentPickOrderLine.quantityHandledDbl = newQuantityDbl;\r\n        }\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cPickorderLine.currentPickOrderLine.getQuantityHandledDbl()));\r\n        this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n\r\n        if (cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln()) {\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.scan_article_or_sort_location));\r\n        }\r\n        else {\r\n            this.textViewAction.setText(cAppExtension.context.getString(R.string.scan_sort_location));\r\n        }\r\n\r\n        //Remove or update line barcodeStr\r\n        cPickorderLine.currentPickOrderLine.pRemoveOrUpdateLineBarcode();\r\n\r\n    }\r\n\r\n    private void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cPickorder.currentPickOrder.isPickWithPictureBln()) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n\r\n        this.articleThumbImageView.setVisibility(View.VISIBLE);\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cPickorderLine.currentPickOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cPickorderLine.currentPickOrderLine.articleImage == null || cPickorderLine.currentPickOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cPickorderLine.currentPickOrderLine.articleImage.imageBitmap());\r\n    }\r\n\r\n    private  void mShowFullArticleFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        ArticleFullViewFragment articleFullViewFragment = new ArticleFullViewFragment();\r\n        articleFullViewFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ARTICLEFULL_TAG);\r\n    }\r\n\r\n    private void mShowAcceptFragment(){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_orderbusy_header),\r\n                                                                                   cAppExtension.activity.getString(R.string.message_orderbusy_text),cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line), false);\r\n        acceptRejectFragment.setCancelable(true);\r\n        runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // show my popup\r\n                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n            }\r\n        });\r\n    }\r\n\r\n    public  void mBarcodeSelected(cPickorderBarcode pvBarcode) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        cPickorderBarcode.currentPickorderBarcode = pvBarcode;\r\n        this.mShowBarcodeInfo();\r\n        this.mTryToChangeSortedQuantity(true, false, cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n    }\r\n\r\n    private  void mShowBarcodeInfo() {\r\n\r\n        if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n            if (cPickorderLine.currentPickOrderLine.barcodesObl.size() == 1) {\r\n                cPickorderBarcode.currentPickorderBarcode = cPickorderLine.currentPickOrderLine.barcodesObl.get(0);\r\n                this.defaultBarcodeSelectedBln = true;\r\n            }\r\n        }\r\n\r\n        if (cPickorderBarcode.currentPickorderBarcode != null) {\r\n            this.articleBarcodeText.setText(cPickorderBarcode.currentPickorderBarcode.getBarcodeAndQuantityStr());\r\n        } else {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.mutiple_barcodes_posible));\r\n        }\r\n    }\r\n\r\n    private  void mShowOrHideGenericExtraFields() {\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = new cArticle(cPickorderLine.currentPickOrderLine.getItemNoStr(), cPickorderLine.currentPickOrderLine.getVariantCodeStr());\r\n\r\n        if ( cPickorderLine.currentPickOrderLine.itemProperyDataObl() == null) {\r\n            this.mHideArticleInfo();\r\n        }\r\n        else{\r\n            this.articleInfoContainer.setVisibility(View.VISIBLE);\r\n\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.articleInfoContainer, new ArticleInfoFragment(cPickorderLine.currentPickOrderLine.itemProperyDataObl()));\r\n            transaction.commit();\r\n        }\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    private  void mEnablePlusMinusAndBarcodeSelectViews() {\r\n\r\n        if (cSetting.PICK_PER_SCAN()) {\r\n            this.imageButtonMinus.setVisibility(View.INVISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.INVISIBLE);\r\n        } else {\r\n            this.imageButtonMinus.setVisibility(View.VISIBLE);\r\n            this.imageButtonPlus.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        if (!cSetting.PICK_SELECTEREN_BARCODE()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private  void mCheckLineDone() {\r\n\r\n        //We scanned a sortlocation\r\n        SortorderSortActivity.articleScannedLastBln = false;\r\n\r\n        //If we didn't complete this line, then show done for now\r\n        if (cPickorderLine.currentPickOrderLine.quantityHandledDbl < cPickorderLine.currentPickOrderLine.getQuantityDbl()) {\r\n            this.imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);\r\n            this.imageButtonDone.setVisibility(View.VISIBLE);\r\n\r\n            // If auto accept is false or  if we have to scan VKO after each piece , then return\r\n            if (!cSetting.PICK_AUTO_ACCEPT() || cPickorder.currentPickOrder.isPickPickPVVKOEachPieceBln() ) {\r\n                return;\r\n            }\r\n\r\n            // We are done for now\r\n            this.mSortDoneForNow();\r\n            return;\r\n        }\r\n\r\n        //We didn complete this line, then show done\r\n        if (!cSetting.PICK_AUTO_ACCEPT()) {\r\n            this.imageButtonDone.setImageResource(R.drawable.ic_doublecheck_black_24dp);\r\n            this.imageButtonDone.setVisibility(View.VISIBLE);\r\n            return;\r\n        }\r\n\r\n        // We are completely done\r\n        this.mSortDone();\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(this.sortOrderSortContainer);\r\n        constraintSetSpace.connect(this.articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(this.sortOrderSortContainer);\r\n\r\n    }\r\n\r\n    private BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context pvContext, Intent pvIntent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = pvIntent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    //Region Number Broadcaster\r\n    Runnable plusAction = new Runnable() {\r\n        @Override public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (pickCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            }\r\n            else if (pickCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            }\r\n            else if (pickCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            }\r\n            else if (pickCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            }\r\n            else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this,milliSecsLng);\r\n        }\r\n    };\r\n\r\n    Runnable minusAction = new Runnable() {\r\n        @Override public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (pickCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            }\r\n            else if (pickCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            }\r\n            else if (pickCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            }\r\n            else if (pickCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            }\r\n            else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long milliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, milliSecsLng);\r\n        this.pickCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long milliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, milliSecsLng);\r\n        this.pickCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    private  void mShowOverpickNotAllowed(){\r\n        this.quantityText.setText(this.quantityRequiredText.getText());\r\n        cUserInterface.pShowSnackbarMessage(this.textViewAction , cAppExtension.context.getString(R.string.number_cannot_be_higher), null, false);\r\n        cUserInterface.pDoNope(this.quantityText, true, true);\r\n        cUserInterface.pDoNope(this.quantityRequiredText, false, false);\r\n    }\r\n\r\n    private  Boolean mFindBarcodeInLineBarcodes(cBarcodeScan pvBarcodeScan) {\r\n\r\n        if (cPickorderLine.currentPickOrderLine.barcodesObl == null || cPickorderLine.currentPickOrderLine.barcodesObl.size() == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (cPickorderBarcode pickorderBarcode : cPickorderLine.currentPickOrderLine.barcodesObl) {\r\n\r\n            if (pickorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                pickorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                cPickorderBarcode.currentPickorderBarcode = pickorderBarcode;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    //End Region Number Broadcaster\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Sort/SortorderSortActivity.java	(revision 5b95aee6430b14009710effbe06972c2d91fcf34)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Sort/SortorderSortActivity.java	(date 1622790707064)
@@ -42,7 +42,6 @@
 import SSU_WHS.Basics.Settings.cSetting;
 import SSU_WHS.General.cPublicDefinitions;
 import SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;
-import SSU_WHS.Picken.PickorderLinePackAndShip.cPickorderLinePackAndShip;
 import SSU_WHS.Picken.PickorderLines.cPickorderLine;
 import SSU_WHS.Picken.Pickorders.cPickorder;
 import SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTable;
@@ -50,7 +49,6 @@
 import nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.ArticleInfoFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;
-import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
 import nl.icsvertex.scansuite.R;
 
 public class SortorderSortActivity extends AppCompatActivity implements iICSDefaultActivity {
@@ -472,7 +470,7 @@
         boolean adviceMatchedBln = false;
 
         //We have advice(s) and it is mandatory, so check if we have a correct scan
-        if (this.sortingAdviceObl.size() > 0 && cSetting.PICK_SORT_LOCATION_ADVICE_MANDATORY()) {
+        if (this.sortingAdviceObl != null &&  this.sortingAdviceObl.size() > 0 && cSetting.PICK_SORT_LOCATION_ADVICE_MANDATORY()) {
 
             for (String adviceStr : this.sortingAdviceObl) {
                 if (adviceStr.equalsIgnoreCase(barcodeWithoutPrefixStr)) {
@@ -557,122 +555,81 @@
     @SuppressLint("ClickableViewAccessibility")
     private void mSetPlusListener() {
 
-        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {
-
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if(event.getAction() == MotionEvent.ACTION_DOWN) {
-                    if (plusHandler != null) return true;
-                    plusHandler = new Handler();
-                    plusHandler.postDelayed(plusAction, 750);
-                }
-                if(event.getAction() == MotionEvent.ACTION_UP) {
-                    if(plusHandler == null) return true;
-                    plusHandler.removeCallbacks(plusAction);
-                    plusHandler = null;
-                    pickCounterPlusHelperInt = 0;
-                }
-                return false;
-            }
-        });
-
-        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                mTryToChangeSortedQuantity(true, false,  cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());
-            }
+        this.imageButtonPlus.setOnTouchListener((v, event) -> {
+            if(event.getAction() == MotionEvent.ACTION_DOWN) {
+                if (plusHandler != null) return true;
+                plusHandler = new Handler();
+                plusHandler.postDelayed(plusAction, 750);
+            }
+            if(event.getAction() == MotionEvent.ACTION_UP) {
+                if(plusHandler == null) return true;
+                plusHandler.removeCallbacks(plusAction);
+                plusHandler = null;
+                pickCounterPlusHelperInt = 0;
+            }
+            return false;
         });
 
-    }
-
-    private void mShowNumberPickerFragment() {
-
-        cUserInterface.pCheckAndCloseOpenDialogs();
+        this.imageButtonPlus.setOnClickListener(view -> mTryToChangeSortedQuantity(true, false,  cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl()));
 
-        Bundle bundle = new Bundle();
-        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cPickorderLinePackAndShip.currentPickorderLinePackAndShip.getQuantityCheckedDbl().intValue());
-        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, cPickorderLinePackAndShip.currentPickorderLinePackAndShip.getQuantityDbl().intValue());
-
-        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();
-        numberpickerFragment.setArguments(bundle);
-
-        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);
     }
 
     @SuppressLint("ClickableViewAccessibility")
     private void mSetMinusListener() {
 
-        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
+        this.imageButtonMinus.setOnTouchListener((v, event) -> {
 
-                if(event.getAction() == MotionEvent.ACTION_DOWN) {
-                    if (minusHandler != null) return true;
-                    minusHandler = new Handler();
-                    minusHandler.postDelayed(minusAction, 750);
-                }
-                if(event.getAction() == MotionEvent.ACTION_UP) {
-                    if(minusHandler == null) return true;
-                    minusHandler.removeCallbacks(minusAction);
-                    minusHandler = null;
-                    pickCounterMinusHelperInt = 0;
-                }
-                return false;
-            }
-
+            if(event.getAction() == MotionEvent.ACTION_DOWN) {
+                if (minusHandler != null) return true;
+                minusHandler = new Handler();
+                minusHandler.postDelayed(minusAction, 750);
+            }
+            if(event.getAction() == MotionEvent.ACTION_UP) {
+                if(minusHandler == null) return true;
+                minusHandler.removeCallbacks(minusAction);
+                minusHandler = null;
+                pickCounterMinusHelperInt = 0;
+            }
+            return false;
         });
 
-        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);
-                mTryToChangeSortedQuantity(false, false,  cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());
-            }
+        this.imageButtonMinus.setOnClickListener(view -> {
+            imageButtonDone.setImageResource(R.drawable.ic_check_black_24dp);
+            mTryToChangeSortedQuantity(false, false,  cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());
         });
     }
 
     private void mSetArticleImageListener() {
-        this.articleThumbImageView.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                mShowFullArticleFragment();
-            }
-        });
+        this.articleThumbImageView.setOnClickListener(view -> mShowFullArticleFragment());
     }
 
     private void mSetImageButtonBarcodeListener() {
-        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View pvView) {
+        this.imageButtonBarcode.setOnClickListener(pvView -> {
 
-                if (cPickorderLine.currentPickOrderLine.barcodesObl == null || cPickorderLine.currentPickOrderLine.barcodesObl.size() == 0) {
-                    return;
-                }
+            if (cPickorderLine.currentPickOrderLine.barcodesObl == null || cPickorderLine.currentPickOrderLine.barcodesObl.size() == 0) {
+                return;
+            }
 
-                mEnablePlusMinusAndBarcodeSelectViews();
+            mEnablePlusMinusAndBarcodeSelectViews();
 
-                //If we only have one barcodeStr, then automatticaly select that barcodeStr
-                if (cPickorderLine.currentPickOrderLine.barcodesObl.size() == 1) {
-                   pHandleScan(cBarcodeScan.pFakeScan(cPickorderBarcode.currentPickorderBarcode.getBarcodeStr()));
-                    return;
-                }
+            //If we only have one barcodeStr, then automatticaly select that barcodeStr
+            if (cPickorderLine.currentPickOrderLine.barcodesObl.size() == 1) {
+               pHandleScan(cBarcodeScan.pFakeScan(cPickorderBarcode.currentPickorderBarcode.getBarcodeStr()));
+                return;
+            }
 
-                mShowBarcodeSelectFragment();
+            mShowBarcodeSelectFragment();
 
-            }
         });
     }
 
     private void mSetDoneListener() {
-        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
+        this.imageButtonDone.setOnClickListener(view -> {
 
-                if (cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl())) {
-                    mSortDone();
-                } else {
-                    mSortDoneForNow();
-                }
+            if (cPickorderLine.currentPickOrderLine.getQuantityHandledDbl().equals(cPickorderLine.currentPickOrderLine.getQuantityDbl())) {
+                mSortDone();
+            } else {
+                mSortDoneForNow();
             }
         });
     }
@@ -864,12 +821,9 @@
         final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_orderbusy_header),
                                                                                    cAppExtension.activity.getString(R.string.message_orderbusy_text),cAppExtension.activity.getString(R.string.message_cancel_line), cAppExtension.activity.getString(R.string.message_accept_line), false);
         acceptRejectFragment.setCancelable(true);
-        runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                // show my popup
-                acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);
-            }
+        runOnUiThread(() -> {
+            // show my popup
+            acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);
         });
     }
 
@@ -982,7 +936,7 @@
 
     }
 
-    private BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {
+    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context pvContext, Intent pvIntent) {
             int numberChosenInt = 0;
