Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    defaultConfig {\r\n        applicationId \"nl.icsvertex.scansuite\"\r\n        minSdkVersion 19\r\n        targetSdkVersion 30\r\n        versionCode 15892\r\n        versionName \"1.5.8.92A\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        android.defaultConfig.vectorDrawables.useSupportLibrary = true\r\n        multiDexEnabled true\r\n\r\n        //for database history\r\n        javaCompileOptions {\r\n            annotationProcessorOptions {\r\n                arguments = [\"room.schemaLocation\": \"$projectDir/schemas\".toString()]\r\n            }\r\n        }\r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    flavorDimensions(\"default\")\r\n    productFlavors {\r\n        normal {\r\n            dimension \"default\"\r\n        }\r\n    }\r\n\r\n    lintOptions {\r\n        checkReleaseBuilds false\r\n        // Or, if you prefer, you can continue to check for errors in release builds,\r\n        // but continue the build even when errors are found:\r\n        abortOnError false\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ndependencies {\r\n\r\n    //Shimmer\r\n    implementation 'com.facebook.shimmer:shimmer:0.1.0@aar'\r\n\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.android.material:material:1.3.0'\r\n    implementation 'androidx.exifinterface:exifinterface:1.3.2'\r\n    implementation 'androidx.preference:preference:1.1.1'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n\r\n    //Firebase\r\n\r\n    implementation 'com.google.firebase:firebase-crashlytics:17.3.1'\r\n    implementation 'com.google.firebase:firebase-analytics:18.0.2'\r\n    implementation platform('com.google.firebase:firebase-bom:26.5.0')\r\n    implementation 'com.google.firebase:firebase-perf'\r\n\r\n\r\n    //Android X\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test:runner:1.3.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.google.code.ksoap2-android:ksoap2-android:3.6.1'\r\n\r\n    // Room components\r\n    implementation 'androidx.room:room-runtime:2.2.6'\r\n    annotationProcessor 'androidx.room:room-compiler:2.2.6'\r\n    androidTestImplementation 'androidx.room:room-testing:2.2.6'\r\n\r\n    // Lifecycle components\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.3.0'\r\n    //noinspection LifecycleAnnotationProcessorWithJava8\r\n    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.3.0'\r\n\r\n    //Images\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n\r\n    //Scanner (device)\r\n    implementation 'com.github.datalogic:datalogic-android-sdk:1.19.1'\r\n\r\n    //Zxing\r\n    implementation 'com.google.zxing:core:3.4.0'\r\n    implementation 'com.google.zxing:android-core:3.3.0'\r\n\r\n    //Circular image\r\n    implementation 'com.mikhaellopez:circularimageview:3.2.0'\r\n    implementation 'com.balysv:material-ripple:1.0.2'\r\n\r\n\r\n    //LeakCanary\r\n//    debugImplementation \"com.squareup.leakcanary:leakcanary-android:2.2\"\r\n}\r\n\r\n\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'com.google.firebase.crashlytics'\r\napply plugin: 'com.google.firebase.firebase-perf'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/build.gradle	(date 1617965665669)
@@ -6,8 +6,8 @@
         applicationId "nl.icsvertex.scansuite"
         minSdkVersion 19
         targetSdkVersion 30
-        versionCode 15892
-        versionName "1.5.8.92A"
+        versionCode 15893
+        versionName "1.5.8.93A"
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
         android.defaultConfig.vectorDrawables.useSupportLibrary = true
         multiDexEnabled true
Index: app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Picken.Pickorders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyRepository;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.Shipment.cShipment;\r\nimport SSU_WHS.Picken.Storement.cStorement;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cPickorderRepository {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    private final iPickorderDao pickorderDao;\r\n    private final iPickorderLineDao pickorderLineDao;\r\n\r\n    private static class PickorderStepHandledParams {\r\n        String userStr;\r\n        String languageStr;\r\n        String branchStr;\r\n        String orderNumberStr;\r\n        String deviceStr;\r\n        String workPlaceStr;\r\n        String workflowStepcodeStr;\r\n        Integer workflowStepInt;\r\n        String cultureStr;\r\n\r\n        PickorderStepHandledParams(String pvUserStr, String pvLanguageStr, String pvBranchStr, String pvOrderNumberStr, String pvDeviceStr, String pvWorkplaceStr, String pvWorkflowStepCodeStr, Integer pvWorkflowStepStr, String pvCultureStr) {\r\n            this.userStr = pvUserStr;\r\n            this.languageStr = pvLanguageStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.deviceStr = pvDeviceStr;\r\n            this.workPlaceStr = pvWorkplaceStr;\r\n            this.workflowStepcodeStr = pvWorkflowStepCodeStr;\r\n            this.workflowStepInt = pvWorkflowStepStr;\r\n            this.cultureStr = pvCultureStr;\r\n        }\r\n    }\r\n\r\n    private static class PickorderUpdateWorkplaceParams {\r\n        String user;\r\n        String branch;\r\n        String ordernumber;\r\n        String workplace;\r\n\r\n        PickorderUpdateWorkplaceParams(String pvUserStr, String pvBranchStr, String pvOrdernumberStr, String pvWorkplaceStr) {\r\n            this.user = pvUserStr;\r\n            this.branch = pvBranchStr;\r\n            this.ordernumber = pvOrdernumberStr;\r\n            this.workplace = pvWorkplaceStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdatePickorderCurrentLocationLocalParams {\r\n        String orderNumberStr;\r\n        String currentLocationStr;\r\n\r\n        UpdatePickorderCurrentLocationLocalParams(String pvOrderNumberStr, String pvCurrentLocationStr) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.currentLocationStr = pvCurrentLocationStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdateSelectedLocalParams {\r\n        String orderNumberStr;\r\n        Boolean selectedBln;\r\n\r\n        UpdateSelectedLocalParams(String pvOrderNumberStr, Boolean pvSelectedBln) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.selectedBln = pvSelectedBln;\r\n        }\r\n    }\r\n\r\n    private static class CreateOrderLocalParams {\r\n        String documentStr;\r\n        Boolean  checkBarcodesBln;\r\n\r\n        CreateOrderLocalParams(String pvDocumentStr, Boolean checkBarcodesBln) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = checkBarcodesBln;\r\n        }\r\n    }\r\n\r\n\r\n    private static class PickorderLocalParams {\r\n        String userNameStr;\r\n        String branchStr;\r\n        Boolean inProgressBln;\r\n        int pickStep;\r\n        String searchTextStr;\r\n        String mainTypeStr;\r\n\r\n\r\n        PickorderLocalParams(String pvUserNameStr, String pvBranchStr, Boolean pvInProgressBln, int pvPickStepInt, String pvSearchTextStr, String pvMainTypeStr) {\r\n            this.userNameStr = pvUserNameStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.inProgressBln = pvInProgressBln;\r\n            this.pickStep = pvPickStepInt;\r\n            this.searchTextStr = pvSearchTextStr;\r\n            this.mainTypeStr = pvMainTypeStr;\r\n        }\r\n    }\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    cPickorderRepository(Application pvApplication) {\r\n        //Region Private Properties\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.pickorderDao = db.pickorderDao();\r\n        this.pickorderLineDao = db.pickorderLineDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public void insert (cPickorderEntity pickorderEntity) {\r\n        new mInsertAsyncTask(pickorderDao).execute(pickorderEntity);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(pickorderDao).execute();\r\n    }\r\n\r\n    public void pAbortOrder() {\r\n        new mAbortOrderAsyncTask(pickorderLineDao).execute();\r\n    }\r\n\r\n    public cWebresult pGetPickordersFromWebserviceWrs(Boolean pvInprogressBln, String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        String mainTypeStr = \"\";\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n\r\n\r\n        switch (cUser.currentUser.currentAuthorisation.getAutorisationEnu()){\r\n\r\n            case PICK:\r\n                break;\r\n\r\n            case PICK_PF:\r\n                mainTypeStr = \"Transfer\";\r\n                break;\r\n\r\n            case PICK_PV:\r\n                mainTypeStr = \"Sales\";\r\n                break;\r\n\r\n            default:\r\n                mainTypeStr = \"\";\r\n                break;\r\n        }\r\n\r\n        pickorderLocalParams = new PickorderLocalParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), pvInprogressBln, 0, pvSearchTextStr, mainTypeStr);\r\n\r\n        try {\r\n            webResultWrs = new mGetPickordersFromWebserviceAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPickorderstPickordersNextStepFromWebserviceWrs(String pvUsernameStr, cWarehouseorder.StepCodeEnu pvStepCodeEnu, String pvSearchTextStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n         int stepCodeInt= 0 ;\r\n\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Sorting) {\r\n            stepCodeInt = 20;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_QualityContol) {\r\n            stepCodeInt = 30;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_PackAndShip) {\r\n            stepCodeInt = 40;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Storage) {\r\n            stepCodeInt = 60;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Finish_Packing) {\r\n            stepCodeInt = 70;\r\n        }\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n        pickorderLocalParams = new PickorderLocalParams(pvUsernameStr, cUser.currentUser.currentBranch.getBranchStr(), false, stepCodeInt, pvSearchTextStr, \"\");\r\n\r\n        try {\r\n            webResultWrs = new mPickordersNextStepFromWebserviceGetAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderEntity> pGetPickordersFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cPickorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder(\"SELECT * FROM Pickorders \");\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n            if (cSharedPreferences.showSingleArticlesBln()) {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 1 \");\r\n            }\r\n            else\r\n            {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 0 \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 1 \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 0 \");\r\n            }\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (PickorderSelectActivity.currentModusEnu == PickorderSelectActivity.ModusEnu.COMBINE) {\r\n            if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                SQLStatementStr.append(\"WHERE SourceDocument <> '95' \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND SourceDocument <> '95' \");\r\n            }\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Ordernumber ASC\");\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new mGetPickordersFromDatabaseWithFilterAsyncTask(pickorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pPickHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickGeneratedHandledViaWebserviceBln(String pvShipBinStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvShipBinStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderGeneratedHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pStoreHandledViaWebserviceBln() {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), \"\", cWarehouseorder.StepCodeEnu.Pick_Storage.toString(), cWarehouseorder.WorkflowPickStepEnu.PickStorage, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pSortHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Sorting.toString(), cWarehouseorder.WorkflowPickStepEnu.PickSorting, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pQCHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_QualityContol.toString(), cWarehouseorder.WorkflowPickStepEnu.PickQualityControl, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pShipHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Pick_PackAndShip.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pFinishSinglePiecesHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Finish_Packing.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickFinishPacking,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentShippedViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentShippedAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentStoredViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentStoredAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public Boolean pPickorderUpdateWorkplaceViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderUpdateWorkplaceParams pickorderUpdateWorkplaceParams;\r\n        pickorderUpdateWorkplaceParams   = new PickorderUpdateWorkplaceParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), pvWorkplaceStr);\r\n\r\n        try {\r\n            webResult = new mPickorderUpdateWorkplaceViaWebserviceAsyncTask().execute(pickorderUpdateWorkplaceParams).get();\r\n            return webResult.getSuccessBln() && webResult.getResultBln();\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pUpdateCurrentLocationViaWebserviceWrs(String pvCurrentLocationStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mUpdateCurrentLocationViaWebserviceAsyncTask().execute(pvCurrentLocationStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public Boolean pPickorderUpdatCurrentLocationInDatabaseBln(String pvCurrentLocationStr) {\r\n\r\n        Integer integerValue;\r\n        UpdatePickorderCurrentLocationLocalParams updatePickorderCurrentLocationLocalParams = new UpdatePickorderCurrentLocationLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), pvCurrentLocationStr);\r\n        try {\r\n            integerValue = new mUpdatePickorderCurrentLocationInDatabaseAsyncTask(pickorderDao).execute(updatePickorderCurrentLocationLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public Boolean pPickorderUpdatIsSelectedInDatabaseBln() {\r\n\r\n        Integer integerValue;\r\n        UpdateSelectedLocalParams updateSelectedLocalParams = new UpdateSelectedLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), cPickorder.currentPickOrder.getIsSelectedBln());\r\n        try {\r\n            integerValue = new mUpdateIsSelectedInDatabaseAsyncTask(pickorderDao).execute(updateSelectedLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public cWebresult pCreatePickOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        CreateOrderLocalParams orderLocalParams = new CreateOrderLocalParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new cPickorderRepository.mCreatePickorderViaWebserviceAsyncTask().execute(orderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //Pick Lines\r\n    public cWebresult pGetLinesFromWebserviceWrs(cWarehouseorder.ActionTypeEnu pvActionTypeEnu) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetAllLinesFromDatabaseObl() {\r\n\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetAllLinesFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetPickorderLinesToSendFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetPickorderLinesToSendFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledForBranchFromDatabaseObl(String pvBranchStr) {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesForBranchAsyncTask(pickorderLineDao).execute(pvBranchStr).get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesBusyFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetBusyLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetHandledLinesOblAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    //Pick quantityDbl's\r\n    public Double pQuantityNotHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityNotHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pQuantityHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetTotalQuantityDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetTotalQuanitityAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (resultDbl== null) {\r\n            resultDbl = (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    //Pick Order details\r\n\r\n    public cWebresult pGetAddressesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderAdressesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetSettingsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderSettingsFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCompositeBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLineBarcodesFromWebservice(cWarehouseorder.ActionTypeEnu pvActionTypeEnu){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderLineBarcodesGetFromWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertysViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertysViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertyValuesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPackagesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderPackagesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Pack and Ship\r\n\r\n\r\n\r\n    public cWebresult pGetPackAndShipLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPackAndShipLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetFinishPackSinglePieceLinesViaWebserviceWrsWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Storage\r\n    public cWebresult pGetStorageLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetStorageLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n    //End Storage\r\n\r\n    public cWebresult pCreateCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mCreateCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddOrderToCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mAddOrderToCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveOrderFromCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveOrderFromCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAsyncTask extends AsyncTask<cPickorderEntity, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cPickorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromWebserviceAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_INPROGRESS;\r\n            l_PropertyInfo3Pin.setValue(params[0].inProgressBln);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr.toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickordersNextStepFromWebserviceGetAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKSTEP;\r\n            l_PropertyInfo3Pin.setValue(params[0].pickStep);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSSEQUELSTEP, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cPickorderEntity>> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n\r\n        mGetPickordersFromDatabaseWithFilterAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredPickorders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mPickorderStepHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LANGUAGEASCULTURE;\r\n                l_PropertyInfo2Pin.setValue(params[0].languageStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo5Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo6Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo7Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPINT;\r\n                l_PropertyInfo8Pin.setValue(params[0].workflowStepInt);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSTEPHANDLED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderGeneratedHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPBINSTR;\r\n                l_PropertyInfo8Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERHANDLEDGENERATED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentShippedAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cShipment.currentShipment.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo5Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGAGENT;\r\n                l_PropertyInfo6Pin.setValue(cShipment.currentShipment.shippingAgent().getShippingAgentStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGSERVICE;\r\n                l_PropertyInfo7Pin.setValue(cShipment.currentShipment.shippingAgentService().getServiceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGOPTIONS;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                SoapObject shippingpackages = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES);\r\n\r\n                int sequencenumberInt = 0;\r\n                String packageTypeToRememberStr = \"\";\r\n                int counterForTypeInt = 0;\r\n\r\n                for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit : cShipment.currentShipment.shippingAgentService().shippingUnitsObl()) {\r\n\r\n                    //If we didn't use this, continue\r\n                    if (shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt() <= 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    //New packageype, so reset sequenceNumber\r\n                    if (!packageTypeToRememberStr.equalsIgnoreCase(shippingAgentServiceShippingUnit.getShippingUnitStr())) {\r\n                        packageTypeToRememberStr = shippingAgentServiceShippingUnit.getShippingUnitStr();\r\n                        sequencenumberInt = 0;\r\n                        counterForTypeInt = 0;\r\n                    }\r\n\r\n                    while (counterForTypeInt < shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt()) {\r\n                        counterForTypeInt += 1;\r\n                        sequencenumberInt += 10;\r\n\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_PACKAGE, packageTypeToRememberStr);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_SEQUENCENUMBER, sequencenumberInt);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_WEIGHTING, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_ITEMCOUNT, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINERTYPE, \"\");\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINER, \"\");\r\n                        shippingpackages.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES;\r\n                l_PropertyInfo9Pin.setValue(shippingpackages);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSHIPPED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentStoredAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cStorement.currentStorement.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_STORAGEBINCODE;\r\n                l_PropertyInfo5Pin.setValue(cStorement.currentStorement.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSTORED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderUpdateWorkplaceViaWebserviceAsyncTask extends AsyncTask<PickorderUpdateWorkplaceParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderUpdateWorkplaceParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].user);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branch);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].ordernumber);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo4Pin.setValue(params[0].workplace);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERUPDATEWORKPLACE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mUpdatePickorderCurrentLocationInDatabaseAsyncTask extends AsyncTask<UpdatePickorderCurrentLocationLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdatePickorderCurrentLocationInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdatePickorderCurrentLocationLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderCurrentLocation(params[0].orderNumberStr, params[0].currentLocationStr);\r\n        }\r\n    }\r\n\r\n    private static class mUpdateIsSelectedInDatabaseAsyncTask extends AsyncTask<UpdateSelectedLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdateIsSelectedInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdateSelectedLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderIsSelected(params[0].orderNumberStr, params[0].selectedBln);\r\n        }\r\n    }\r\n\r\n    private static class mAbortOrderAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mAbortOrderAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Void doInBackground(Void... params) {\r\n            mAsyncTaskDao.abortOrder();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n                l_PropertyInfo3Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPackAndShipLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESPACKANDSHIP, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetStorageLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESSTORAGE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESFINISHSINGLEPIECE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreateCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_CREATEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mAddOrderToCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOADD;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADDORDERTOMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveOrderFromCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOREMOVE;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEORDERFROMMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetAllLinesFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetAllLinesFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getAll();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderLinesToSendFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetPickorderLinesToSendFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getPickorderLineEntitiesToSend();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesForBranchAsyncTask extends AsyncTask<String, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesForBranchAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final String... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineForBranchEntitiesLin(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mGetBusyLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetBusyLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getBusyPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetHandledLinesOblAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetHandledLinesOblAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getHandledPickorderLineEntities();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityNotHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityNotHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getQuantityNotHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getNumberHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetTotalQuanitityAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetTotalQuanitityAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getTotalQuantityDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderAdressesFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERADDRESSES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderSettingsFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SETTINGTYPE;\r\n            l_PropertyInfo4Pin.setValue(\"Pick_PackAndShip\");\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTSETTINGSGET, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderPackagesFromWebserviceTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult =  cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSHIPPACKAGES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString().toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSEORDERCOMPOSITEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderLineBarcodesGetFromWebserviceAsyncTask extends AsyncTask <String, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n            l_PropertyInfo3Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mUpdateCurrentLocationViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_CURRENTLOCATION;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_UPDATECURRENTORDERLOCATION, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreatePickorderViaWebserviceAsyncTask extends AsyncTask<CreateOrderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(CreateOrderLocalParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.PF.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(date 1617964993102)
@@ -2176,6 +2176,8 @@
         }
     }
 
+
+
     //End Region Private Methods
 
 }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"nl.icsvertex.scansuite\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n\r\n    <application\r\n        android:name=\"ICS.cAppExtension\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"false\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        android:largeHeap=\"true\">\r\n        <provider\r\n            android:name=\".cGenericFileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n        <activity\r\n            android:name=\".Activities.General.MainDefaultActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.MenuActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.General.LoginActivity\"\r\n\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".Activities.General.BarcodeInfoActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.LoginActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderPickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLineItemPropertyInputActvity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Pick.CreatePickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderLinesGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderPickGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSortActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n        <activity android:name=\".Activities.Sort.SortorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShipLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.QualityControl.QualityControlLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.QualityControl.PickorderQCActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.CreateInventoryActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryArticleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Receive.CreateReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.CreateIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMASLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveOrderReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Returns.ReturnorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.CreateReturnActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnArticleDetailActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Move.MoveorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.CreateMoveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesPlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveMISinglepieceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveorderLinesPlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Packaging.PackagingActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.CreatePackAndShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSingleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipMultiActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n\r\n        <meta-data\r\n            android:name=\"io.fabric.ApiKey\"\r\n            android:value=\"0a3a15057e61fb1e84d5024bd01b5657d9a4c76e\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/AndroidManifest.xml	(date 1617965228194)
@@ -533,9 +533,6 @@
                 android:name="android.support.PARENT_ACTIVITY"
                 android:value="nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity" />
         </activity>
-
-
-
         <meta-data
             android:name="io.fabric.ApiKey"
             android:value="0a3a15057e61fb1e84d5024bd01b5657d9a4c76e" />
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.General;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.app.AppCompatDelegate;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\n\r\n\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Environments.cEnvironment;\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cPermissions;\r\nimport ICS.Utils.cPower;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Branches.cBranch;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcode;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisation;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplate;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroup;\r\nimport SSU_WHS.Basics.Scanners.cScanner;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentService;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentShipMethod;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Translations.cTranslation;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.ScannerLogon.cScannerLogon;\r\nimport SSU_WHS.Webservice.cWebservice;\r\n\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoConnectionFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.DateTimeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.HomeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.LanguageFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Support.SupportFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class MainDefaultActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //region views\r\n    private  ImageView imageHome;\r\n    private  Toolbar Toolbar;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private  FrameLayout mainFramelayout;\r\n    private  DrawerLayout menuMainDrawer;\r\n    private  NavigationView mainmenuNavigation;\r\n\r\n\r\n    //End region views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\r\n        super.onCreate(savedInstanceState);\r\n\r\n        this.setContentView(R.layout.activity_main);\r\n\r\n        // Standard methods to initialize the Activity\r\n        this.mActivityInitialize();\r\n\r\n        //check permissions first\r\n        cPermissions.checkPermissions();\r\n\r\n        //set environment from preferences/by QR code\r\n        this.mSetEnviroment();\r\n\r\n        //Try to set the serialnumber\r\n        this.mSetSerialNumberIfPossible();\r\n\r\n        //Set darmode\r\n        this.pChangeDarkModus();\r\n\r\n         //set Crashlytics, otherwise Firebase wont work\r\n        FirebaseAnalytics.getInstance(this);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cPower.pRegisterPowerConnectReceiver();\r\n        cPower.pRegisterPowerLevelChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cPower.pUnregisterConnectPowerReceiver();\r\n        cPower.pUnregisterPowerLevelChangedReceiver();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int pvRequestCodeInt, int pvResultCodeInt, Intent data) {\r\n\r\n        super.onActivityResult(pvRequestCodeInt, pvResultCodeInt, data);\r\n        if (pvRequestCodeInt == cPublicDefinitions.CHANGELANGUAGE_REQUESTCODE) {\r\n            //we've changed the language, or not, who cares, but go back to language\r\n            this.setTitle(R.string.screentitle_language);\r\n            this.toolbarTitle.setText(R.string.screentitle_language);\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.mainFramelayout, new LanguageFragment());\r\n            transaction.commit();\r\n        }\r\n\r\n        //internet set?\r\n        if (pvRequestCodeInt == cPublicDefinitions.ACTIVITY_WIFI_SETTINGS) {\r\n\r\n            if (!cConnection.isInternetConnectedBln()) {\r\n                cUserInterface.pCheckAndCloseOpenDialogs();\r\n                final NoConnectionFragment noConnectionFragment = new NoConnectionFragment();\r\n                noConnectionFragment.setCancelable(true);\r\n                noConnectionFragment.show(((MainDefaultActivity) cAppExtension.context).getSupportFragmentManager(), \"NOCONNECTION\");\r\n                return;\r\n            }\r\n            try {\r\n                this.pLetsGetThisPartyStartedOrNot();\r\n            } catch (ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        //Set App Extensions\r\n        this.mSetAppExtensions();\r\n\r\n        //Find all views in Activity\r\n        this.mFindViews();\r\n\r\n        // Show and set toolbar\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_main));\r\n\r\n        // Don't do shit\r\n        this.mFieldsInitialize();\r\n\r\n        // Set event listeners\r\n        this.mSetListeners();\r\n\r\n        // Init screen\r\n        this.mInitScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.Toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.imageHome = findViewById(R.id.imageHome);\r\n\r\n        this.mainFramelayout = findViewById(R.id.mainFramelayout);\r\n        this.menuMainDrawer = findViewById(R.id.menuMainDrawer);\r\n        this.mainmenuNavigation = findViewById(R.id.mainMenuNavigation);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        this.Toolbar.showOverflowMenu();\r\n\r\n        setSupportActionBar(this.Toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_black_24dp);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHomeListener();\r\n        this.mSetMenuListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n    public void pLetsGetThisPartyStartedOrNot() throws ExecutionException {\r\n\r\n        // If scanner had different interface version then web service, then stop\r\n        if (!cWebservice.pWebserviceIsAvailableAndRightVersionBln()) {\r\n\r\n            cAppExtension.activity.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mShowHomeFragment();\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // If we already have everything we need, then next fragment\r\n        if (this.mAllBasicsAvailableBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n\r\n        // Get all basic data via webservice, then next fragment\r\n        if (this.mGetBasicDataBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n    }\r\n\r\n    public void pChangeDarkModus() {\r\n                if (cSharedPreferences.getDarkModusBln()) {\r\n                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\r\n                    return;\r\n                }\r\n\r\n                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\r\n    }\r\n\r\n    public  void pSetChosenEnvironment() {\r\n\r\n        Fragment FragmentFrg = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n        if (FragmentFrg != null) {\r\n            DialogFragment DialogFragmentDfr = (DialogFragment) FragmentFrg;\r\n            DialogFragmentDfr.dismiss();\r\n        }\r\n\r\n        toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        cUserInterface.pShowSnackbarMessage(mainFramelayout, cAppExtension.context.getString(R.string.environment_set_to_parameter1, cEnvironment.currentEnvironment.getDescriptionStr()), R.raw.goodsound, false );\r\n\r\n    }\r\n\r\n    public void pPasswordCancelled() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    public  void pPasswordSuccess(){\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private boolean mAllBasicsAvailableBln() {\r\n        return cScannerLogon.scannerLoggedOnBln &&\r\n                cUser.usersAvailableBln &&\r\n                cBarcodeLayout.barcodeLayoutsAvailableBln &&\r\n                cSetting.settingsAvailableBln &&\r\n                cBranch.BranchesAvailableBln &&\r\n                cShippingAgent.shippingAgentsAvailableBln &&\r\n                cShippingAgentService.shippingAgentServicesAvailableBln &&\r\n                cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln &&\r\n                cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln &&\r\n                cItemProperty.itemPropertiesAvaliableBln &&\r\n                cPropertyGroup.propertyGroupsAvailableBln &&\r\n                cCompositeBarcode.compositeBarcodesAvailableBln &&\r\n                cScanner.scannersAvailableBln &&\r\n                cCustomAuthorisation.customAutorisationsAvailableBln &&\r\n                cTranslation.translationsAvailableBln &&\r\n                cStockOwner.stockOwnersAvailableBln;\r\n    }\r\n\r\n    private boolean mGetBasicDataBln() throws ExecutionException {\r\n\r\n        if (!cScannerLogon.pScannerLogonViaWebserviceBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cScannerLogon.currentScannerLogon.pScannerVersionCheckBln(mainFramelayout)){\r\n            return  false;\r\n        }\r\n\r\n        if (!cSetting.pGetSettingsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBranch.pGetBranchesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cUser.pGetUsersViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBarcodeLayout.pGetBarcodeLayoutsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cItemProperty.pGetItemPropertiesViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){\r\n            return false;\r\n        }\r\n\r\n        if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cCompositeBarcode.pGetCompositeBarcodesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!mGetshippingInfoViawebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cScanner.pGetScannersViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cCustomAuthorisation.pGetCustomAutorisationsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)){\r\n            return false;\r\n        }\r\n\r\n        if (!cTranslation.pGetTranslationsViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        return  mAllBasicsAvailableBln();\r\n\r\n    }\r\n\r\n    private boolean mGetshippingInfoViawebserviceBln() throws ExecutionException {\r\n\r\n        cShippingAgent.pGetShippingAgentsViaWebservice(true);\r\n        if (!cShippingAgent.shippingAgentsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentService.pGetShippingAgentServicesViaWebservice(true);\r\n        if (!cShippingAgentService.shippingAgentServicesAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentServiceShippingUnit.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        if (!cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentShipMethod.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        return cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln;\r\n    }\r\n\r\n    public  void pSetAddedEnvironment() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    private void mSetEnviroment(){\r\n        cEnvironment.pSetEnvironment();\r\n        if (cEnvironment.currentEnvironment != null) {\r\n            toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        }\r\n    }\r\n\r\n    private void mShowHomeFragment() {\r\n        this.imageHome.setVisibility(View.GONE);\r\n        this.toolbarTitle.setText(R.string.screentitle_main);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        FragmentTransaction transaction =  getSupportFragmentManager().beginTransaction();\r\n        transaction.replace(R.id.mainFramelayout, new HomeFragment());\r\n        transaction.commit();\r\n    }\r\n\r\n    private  void mShowEnvironmentFragment() {\r\n        final EnvironmentFragment environmentFragment = new EnvironmentFragment();\r\n        environmentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n    //Region Listeners\r\n    private void mSetHomeListener() {\r\n        this.imageHome.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowHomeFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void mSetMenuListener() {\r\n        this.mainmenuNavigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n                Fragment selectedFragment = null;\r\n                switch (menuItem.getItemId()) {\r\n\r\n                    case R.id.action_home:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n\r\n                    case R.id.action_settings:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        toolbarTitle.setText(R.string.screentitle_settings);\r\n                        toolbarImage.setImageResource(R.drawable.ic_settings);\r\n                        break;\r\n\r\n                    case R.id.action_support:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new SupportFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_support);\r\n                        toolbarImage.setImageResource(R.drawable.ic_support);\r\n                        break;\r\n\r\n                    case R.id.action_language:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new LanguageFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_language);\r\n                        toolbarImage.setImageResource(R.drawable.ic_language);\r\n                        break;\r\n\r\n                    case R.id.action_datetime:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new DateTimeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_datetime);\r\n                        toolbarImage.setImageResource(R.drawable.ic_calendar);\r\n                        break;\r\n                    case R.id.action_environments:\r\n                        cUserInterface.pShowpasswordDialog(cAppExtension.context.getString(R.string.password_header_default) ,cAppExtension.context.getString(R.string.dialog_password_settings_text),false);\r\n                        break;\r\n\r\n                    case R.id.action_proglove:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        mShowPairGlove();\r\n                        return true;\r\n\r\n                    default:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n                }\r\n\r\n                if (selectedFragment != null) {\r\n                    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n                    transaction.replace(R.id.mainFramelayout, selectedFragment);\r\n                    transaction.commit();\r\n                }\r\n\r\n                // deselect everything\r\n                int size = mainmenuNavigation.getMenu().size();\r\n                for (int i = 0; i < size; i++) {\r\n                    mainmenuNavigation.getMenu().getItem(i).setChecked(false);\r\n                }\r\n\r\n                // set item as selected to persist highlight\r\n                menuItem.setChecked(true);\r\n                // close drawer when item is tapped\r\n                menuMainDrawer.closeDrawers();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //endregion Listeners\r\n\r\n    //region Event handlers\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            this.menuMainDrawer.openDrawer(GravityCompat.START);\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void mStartLoginActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, LoginActivity.class);\r\n        cAppExtension.context.startActivity(intent);\r\n    }\r\n\r\n    private void mSetSerialNumberIfPossible(){\r\n\r\n        if (!cSharedPreferences.getSerialNumerStr().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && !cDeviceInfo.getSerialnumberStr().isEmpty()) {\r\n            cSharedPreferences.setSerialNumerStr(cDeviceInfo.getSerialnumberStr());\r\n        }\r\n\r\n    }\r\n\r\n    private void mShowPairGlove() {\r\n        Intent i = new Intent();\r\n        i.setAction(cPublicDefinitions.PROGLOVE_CONNECT_ACTION);\r\n        cAppExtension.context.sendBroadcast(i);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(date 1617964993247)
@@ -364,9 +364,9 @@
             return false;
         }
 
-        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
-            return false;
-        }
+//        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
+//            return false;
+//        }
 
         if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {
             return  false;
Index: app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ICS.Utils.Scanning;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.BarcodeInfoActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.CreateIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveMISinglepieceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipMultiActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSingleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.CreateReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.CreateReturnActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderShipActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddEnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BranchFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.DatePickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SearchArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SetBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PasswordFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ReasonFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.CreateInventoryActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\n\r\npublic class cBarcodeScan {\r\n\r\n    private static String currentActivityContextStr = \"\";\r\n\r\n    public static class BarcodeType {\r\n\r\n        public static final int Unknown = 0;\r\n        public static final int EAN8 = 1;\r\n        public static final int EAN13 = 2;\r\n    }\r\n\r\n    private String barcodeFormattedStr;\r\n    public String getBarcodeFormattedStr() {\r\n        return barcodeFormattedStr;\r\n    }\r\n\r\n    public String barcodeOriginalStr;\r\n    public String getBarcodeOriginalStr() {\r\n        return barcodeOriginalStr;\r\n    }\r\n\r\n    public String barcodeTypeStr;\r\n    public String getBarcodeTypeStr() {\r\n        return barcodeTypeStr;\r\n    }\r\n\r\n    private   Boolean containsCrlf = false;\r\n    public Boolean getContainsCrlfBln() {\r\n        return containsCrlf;\r\n    }\r\n\r\n    public cBarcodeScan(){\r\n\r\n    }\r\n\r\n    private static IntentFilter BarcodeIntentFilter;\r\n    private static void getBarcodeIntentFilter() {\r\n        if (BarcodeIntentFilter == null) {\r\n            BarcodeIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static IntentFilter BarcodeFragmentIntentFilter;\r\n    private static void getBarcodeFragmentIntentFilter() {\r\n        if (BarcodeFragmentIntentFilter == null) {\r\n            BarcodeFragmentIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeFragmentIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeFragmentIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeReceiver;\r\n    private static void getBarcodeReceiver() {\r\n        if (BarcodeReceiver == null) {\r\n            BarcodeReceiver = new BroadcastReceiver(){\r\n                @Override\r\n                public void onReceive(Context pvContext, Intent pvIntent) {\r\n\r\n                    if (pvContext != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(pvIntent);\r\n\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    //Login\r\n                    if (cAppExtension.activity instanceof LoginActivity) {\r\n                        LoginActivity loginActivity = (LoginActivity)cAppExtension.activity;\r\n                        loginActivity.pHandleScan(barcodeScan);\r\n                       }\r\n\r\n                    //BarcodeInfo\r\n                    if (cAppExtension.activity instanceof BarcodeInfoActivity) {\r\n                        BarcodeInfoActivity barcodeInfoActivity = (BarcodeInfoActivity)cAppExtension.activity;\r\n                        barcodeInfoActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Pick\r\n                    if (cAppExtension.activity instanceof PickorderSelectActivity){\r\n                        PickorderSelectActivity pickorderSelectActivity = (PickorderSelectActivity)cAppExtension.activity;\r\n                        pickorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                        pickorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                        pickorderLinesGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n                        PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                        pickorderPickActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n                        PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n                        pickorderPickGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Sort\r\n                    if (cAppExtension.activity instanceof SortorderSelectActivity){\r\n                        SortorderSelectActivity sortorderSelectActivity = (SortorderSelectActivity)cAppExtension.activity;\r\n                        sortorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderLinesActivity){\r\n                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                        sortorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderSortActivity){\r\n                        SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n                        sortorderSortActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Ship\r\n                    if (cAppExtension.activity instanceof ShiporderSelectActivity){\r\n                        ShiporderSelectActivity shiporderSelectActivity = (ShiporderSelectActivity)cAppExtension.activity;\r\n                        shiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderLinesActivity){\r\n                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                        shiporderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderShipActivity){\r\n                        ShiporderShipActivity shiporderShipActivity = (ShiporderShipActivity)cAppExtension.activity;\r\n                        shiporderShipActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Finish Single Pieces\r\n                    if (cAppExtension.activity instanceof FinishShiporderSelectActivity){\r\n                        FinishShiporderSelectActivity finishShiporderSelectActivity = (FinishShiporderSelectActivity)cAppExtension.activity;\r\n                        finishShiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof FinishShipLinesActivity){\r\n                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                        finishShipLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //QC\r\n                    if (cAppExtension.activity instanceof QualityControlLinesActivity){\r\n                        QualityControlLinesActivity qualityControlLinesActivity = (QualityControlLinesActivity)cAppExtension.activity;\r\n                        qualityControlLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderQCActivity){\r\n                        PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n                        pickorderQCActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Inventory\r\n                    if (cAppExtension.activity instanceof CreateInventoryActivity) {\r\n                        CreateInventoryActivity createInventoryActivity = (CreateInventoryActivity)cAppExtension.activity;\r\n                        createInventoryActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderSelectActivity){\r\n                        InventoryorderSelectActivity inventoryorderSelectActivity = (InventoryorderSelectActivity)cAppExtension.activity;\r\n                        inventoryorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinsActivity){\r\n                        InventoryorderBinsActivity inventoryorderBinsActivity = (InventoryorderBinsActivity)cAppExtension.activity;\r\n                        inventoryorderBinsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinActivity){\r\n                        InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n                        inventoryorderBinActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n                        InventoryArticleActivity inventoryArticleDetailActivity = (InventoryArticleActivity)cAppExtension.activity;\r\n                        inventoryArticleDetailActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n\r\n                    //Intake\r\n                    if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){\r\n                        IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;\r\n                        intakeAndReceiveSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReceiveActivity){\r\n                        CreateReceiveActivity createReceiveActivity = (CreateReceiveActivity)cAppExtension.activity;\r\n                        createReceiveActivity.pHandleScan(barcodeScan,false,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateIntakeActivity){\r\n                        CreateIntakeActivity createIntakeActivity = (CreateIntakeActivity)cAppExtension.activity;\r\n                        createIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveLinesActivity){\r\n                        ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                        receiveLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n                        ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n                        receiveOrderReceiveActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n                        IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n                        intakeorderMATLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n                        IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n                        intakeorderMASLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n                        IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n                        IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeGeneratedActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    //Return\r\n                    if (cAppExtension.activity instanceof ReturnorderSelectActivity){\r\n                        ReturnorderSelectActivity returnorderSelectActivity = (ReturnorderSelectActivity)cAppExtension.activity;\r\n                        returnorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                        ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                        returnorderDocumentsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                        ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                        returnorderDocumentActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReturnActivity) {\r\n                        CreateReturnActivity createReturnActivity = (CreateReturnActivity)cAppExtension.activity;\r\n                        createReturnActivity.pHandleScan(barcodeScan,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                        ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                        returnArticleDetailActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Move\r\n                    if (cAppExtension.activity instanceof MoveorderSelectActivity){\r\n                        MoveorderSelectActivity moveorderSelectActivity = (MoveorderSelectActivity)cAppExtension.activity;\r\n                        moveorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateMoveActivity){\r\n                        CreateMoveActivity createMoveActivity = (CreateMoveActivity)cAppExtension.activity;\r\n                        createMoveActivity.pHandleScan(barcodeScan, false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n                        MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n                        moveLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n                        MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n                        moveLinesTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n                        MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n                        moveLineTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n                        MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n                        moveLinesPlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n                        MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n                        moveLinePlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLineTakeActivity){\r\n                        MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n                        moveLineTakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceActivity){\r\n                        MoveLinePlaceActivity moveLinePlaceActivity = (MoveLinePlaceActivity)cAppExtension.activity;\r\n                        moveLinePlaceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveMISinglepieceActivity){\r\n                        MoveMISinglepieceActivity moveMISinglepieceActivity = (MoveMISinglepieceActivity)cAppExtension.activity;\r\n                        moveMISinglepieceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity){\r\n                        MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveorderLinesPlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity){\r\n                        MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveLinePlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipSingleActivity){\r\n                        PackAndShipSingleActivity packAndShipSingleActivity = (PackAndShipSingleActivity)cAppExtension.activity;\r\n                        packAndShipSingleActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipMultiActivity){\r\n                        PackAndShipMultiActivity packAndShipMultiActivity = (PackAndShipMultiActivity)cAppExtension.activity;\r\n                        packAndShipMultiActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderSelectActivity){\r\n                        StoreorderSelectActivity storeorderSelectActivity = (StoreorderSelectActivity)cAppExtension.activity;\r\n                        storeorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderLinesActivity){\r\n                        StoreorderLinesActivity storeorderLinesActivity = (StoreorderLinesActivity)cAppExtension.activity;\r\n                        storeorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeFragmentReceiver;\r\n    private static void getBarcodeFragmentReceiver() {\r\n        if (BarcodeFragmentReceiver == null) {\r\n            BarcodeFragmentReceiver = new BroadcastReceiver(){\r\n\r\n                @Override\r\n                public void onReceive(Context context, Intent intent) {\r\n\r\n                    if (context != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(intent);\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    if (cAppExtension.dialogFragment instanceof BranchFragment) {\r\n                        BranchFragment branchFragment = (BranchFragment)cAppExtension.dialogFragment;\r\n                        branchFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof StepDoneFragment) {\r\n                        StepDoneFragment stepDoneFragment = (StepDoneFragment)cAppExtension.dialogFragment;\r\n                        stepDoneFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof WorkplaceFragment) {\r\n                        WorkplaceFragment workplaceFragment = (WorkplaceFragment)cAppExtension.dialogFragment;\r\n                        workplaceFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof CurrentLocationFragment) {\r\n                        CurrentLocationFragment currentLocationFragment = (CurrentLocationFragment)cAppExtension.dialogFragment;\r\n                        currentLocationFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof ArticleFullViewFragment) {\r\n                        ArticleFullViewFragment articleFullViewFragment = (ArticleFullViewFragment)cAppExtension.dialogFragment;\r\n                        articleFullViewFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof EnvironmentFragment) {\r\n                        EnvironmentFragment environmentFragment = (EnvironmentFragment)cAppExtension.dialogFragment;\r\n                        environmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddEnvironmentFragment) {\r\n                        AddEnvironmentFragment addEnvironmentFragment = (AddEnvironmentFragment)cAppExtension.dialogFragment;\r\n                        addEnvironmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddBinFragment) {\r\n                        AddBinFragment addBinFragment = (AddBinFragment)cAppExtension.dialogFragment;\r\n                        addBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof SetBinFragment) {\r\n                        SetBinFragment setBinFragment = (SetBinFragment)cAppExtension.dialogFragment;\r\n                        setBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddArticleFragment) {\r\n                        AddArticleFragment addArticleFragment = (AddArticleFragment)cAppExtension.dialogFragment;\r\n                        addArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanArticleFragment) {\r\n                        ScanArticleFragment scanArticleFragment = (ScanArticleFragment)cAppExtension.dialogFragment;\r\n                        scanArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n                    if (cAppExtension.dialogFragment instanceof SearchArticleFragment) {\r\n                        SearchArticleFragment searchArticleFragment = (SearchArticleFragment)cAppExtension.dialogFragment;\r\n                        searchArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanBinFragment) {\r\n                        ScanBinFragment scanBinFragment = (ScanBinFragment)cAppExtension.dialogFragment;\r\n                        scanBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof PasswordFragment) {\r\n                        PasswordFragment passwordFragment = (PasswordFragment)cAppExtension.dialogFragment;\r\n                        passwordFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ReasonFragment) {\r\n                        ReasonFragment reasonFragment = (ReasonFragment)cAppExtension.dialogFragment;\r\n                        reasonFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment  instanceof ItemPropertyTextInputFragment){\r\n                        ItemPropertyTextInputFragment itemPropertyTextInputFragment = (ItemPropertyTextInputFragment)cAppExtension.dialogFragment;\r\n                        itemPropertyTextInputFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment  instanceof DatePickerFragment){\r\n                        DatePickerFragment datePickerFragment = (DatePickerFragment)cAppExtension.dialogFragment;\r\n                        datePickerFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public static void pRegisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeIntentFilter();\r\n        cBarcodeScan.getBarcodeReceiver();\r\n\r\n        //Prevent multiple receivers on same context\r\n        if (cBarcodeScan.currentActivityContextStr.equalsIgnoreCase(cAppExtension.context.getClass().getSimpleName())) {\r\n             return;\r\n        }\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeReceiver,BarcodeIntentFilter);\r\n        cBarcodeScan.currentActivityContextStr  = cAppExtension.context.getClass().getSimpleName();\r\n\r\n\r\n\r\n    }\r\n\r\n    public static void pRegisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeFragmentIntentFilter();\r\n        cBarcodeScan.getBarcodeFragmentReceiver();\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeFragmentReceiver,BarcodeFragmentIntentFilter);\r\n\r\n    }\r\n\r\n    public static void pUnregisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n         cAppExtension.context.unregisterReceiver(BarcodeReceiver);\r\n            cBarcodeScan.currentActivityContextStr = \"\";\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void pUnregisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n            cAppExtension.context.unregisterReceiver(BarcodeFragmentReceiver);\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static cBarcodeScan pFakeScan(String pvBarcodeStr) {\r\n        cBarcodeScan result = new cBarcodeScan();\r\n        result.barcodeOriginalStr = pvBarcodeStr;\r\n        result.barcodeFormattedStr = pvBarcodeStr;\r\n        result.barcodeTypeStr = cText.pIntToStringStr( BarcodeType.Unknown);\r\n        return  result;\r\n    }\r\n\r\n    private static cBarcodeScan mGetBarcode(Intent pvIntent) {\r\n\r\n        cBarcodeScan resultBarcodeScan;\r\n\r\n        Bundle extras = pvIntent.getExtras();\r\n        String returnBarcodeStr;\r\n        String scannedBarcodeStr = \"\";\r\n        String barcodeTypeStr = \"\";\r\n\r\n\r\n        if (extras != null) {\r\n\r\n            //so who is sending us this?\r\n            if (Objects.requireNonNull(pvIntent.getAction()).equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_TC55_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODE);\r\n                String honeywellBarcodeType = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODETYPE);\r\n                barcodeTypeStr = cBarcodeScanDefinitions.pGetHoneyWellBarcodeTypeStr(honeywellBarcodeType);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        assert scannedBarcodeStr != null;\r\n\r\n        scannedBarcodeStr = mCleanBarcodeStr(scannedBarcodeStr);\r\n        returnBarcodeStr =  mCleanBarcodeStr(scannedBarcodeStr) ;\r\n\r\n        //If it's an EAN barcodeStr cut off checkdigit\r\n        assert barcodeTypeStr != null;\r\n        if (barcodeTypeStr.toUpperCase().contains(\"EAN\") ) {\r\n\r\n            if (returnBarcodeStr.length() == 13) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,12);\r\n            }\r\n\r\n            if (returnBarcodeStr.length() == 8) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,8);\r\n            }\r\n        }\r\n\r\n        if (barcodeTypeStr.contains(\"GS1\")) {\r\n            barcodeTypeStr = \"GS1-128\";\r\n        }\r\n\r\n        resultBarcodeScan = new cBarcodeScan();\r\n        resultBarcodeScan.barcodeOriginalStr = scannedBarcodeStr;\r\n        resultBarcodeScan.barcodeFormattedStr = returnBarcodeStr;\r\n        resultBarcodeScan.barcodeTypeStr = barcodeTypeStr;\r\n        resultBarcodeScan.containsCrlf = scannedBarcodeStr.contains(\"\\\\n\");\r\n\r\n\r\n\r\n        return resultBarcodeScan;\r\n    }\r\n\r\n    private static String mCleanBarcodeStr(String pvDirtyBarcodeStr) {\r\n        return  pvDirtyBarcodeStr.replaceAll(\"([\\\\r\\\\n\\\\t])\",\"\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(date 1617965281029)
@@ -280,7 +280,6 @@
                         return;
                     }
 
-
                     //Intake
                     if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){
                         IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;
Index: app/src/main/java/SSU_WHS/General/cDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.General;\r\n\r\npublic class cDatabase {\r\n    //region Tables\r\n\r\n    public static final String TABLENAME_USERS = \"Users\";\r\n    public static final String TABLENAME_SETTINGS = \"Settings\";\r\n    public static final String TABLENAME_SCANNERLOGON = \"ScannerLogon\";\r\n    public static final String TABLENAME_BARCODELAYOUTS = \"BarcodeLayouts\";\r\n    public static final String TABLENAME_BINITEM = \"BinItem\";\r\n    public static final String TABLENAME_TRANSLATION = \"Translations\";\r\n    public static final String TABLENAME_WORKPLACE = \"Workplaces\";\r\n    public static final String TABLENAME_SCANNERS = \"Scanners\";\r\n    public static final String TABLENAME_BRANCH = \"Branches\";\r\n    public static final String TABLENAME_BRANCHBIN = \"BranchBin\";\r\n    public static final String TABLENAME_ITEMPROPERTY = \"ItemProperties\";\r\n    public static final String TABLENAME_LABELTEMPLATE  =  \"Labeltemplate\";\r\n    public static final String TABLENAME_PROPERTYGROUP = \"PropertyGroup\";\r\n    public static final String TABLENAME_PROPERTYGROUPPROPERTY = \"PropertyGroupProperty\";\r\n    public static final String TABLENAME_COMPOSITEBARCODE = \"CompositeBarcode\";\r\n    public static final String TABLENAME_COMPOSITEBARCODEPROPERTY = \"CompositeBarcodeProperty\";\r\n    public static final String TABLENAME_PICKORDERBARCODE = \"PickorderBarcode\";\r\n    public static final String TABLENAME_PICKORDERCOMPOSITEBARCODE = \"PickorderCompositeBarcode\";\r\n    public static final String TABLENAME_PICKORDERLINEBARCODE = \"PickorderLineBarcode\";\r\n    public static final String TABLENAME_ARTICLEIMAGE = \"ArticleImage\";\r\n    public static final String TABLENAME_ARTICLE = \"Article\" ;\r\n    public static final String TABLENAME_ARTICLEBARCODE = \"ArticleBarcode\" ;\r\n    public static final String TABLENAME_ARTICLESTOCK = \"ArticleStock\";\r\n    public static final String TABLENAME_COMMENT = \"Comment\";\r\n    public static final String TABLENAME_AUTHORISATIONS = \"Authorisations\";\r\n    public static final String TABLENAME_SALESORDERPACKINGTABLE = \"SalesOrderPackingTable\";\r\n\r\n    public static final String TABLENAME_PICKORDERLINES = \"Pickorderlines\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTY = \"PickorderlineProperty\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTYVALUE = \"PickorderlinePropertyValue\";\r\n    public static final String TABLENAME_PICKORDERSETTING = \"PickorderSetting\";\r\n    public static final String TABLENAME_PICKORDERADDRESS = \"PickorderAddress\";\r\n    public static final String TABLENAME_SHIPPINGAGENTS = \"ShippingAgents\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICES = \"ShippingAgentServices\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPPINGUNITS = \"ShippingAgentServiceShippingUnits\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPMETHODS = \"ShippingAgentServiceShipMethods\";\r\n    public static final String TABLENAME_PICKORDERSHIPPACKAGES = \"PickorderShipPackages\";\r\n    public static final String TABLENAME_PICKORDERLINEPACKANDSHIP = \"PickorderLinePackAndShip\";\r\n    public static final String TABLENAME_PICKORDERLINEFINISHSINGLEPIECE = \"PickorderLineFinishSinglePiece\";\r\n\r\n    public static final String TABLENAME_INVENTORYORDER = \"InventoryOrder\";\r\n    public static final String TABLENAME_INVENTORYORDERBIN = \"InventoryOrderBin\";\r\n    public static final String TABLENAME_INVENTORYORDERLINE = \"InventoryOrderLines\";\r\n    public static final String TABLENAME_INVENTORYORDERBARCODE = \"InventoryOrderBarcodes\";\r\n    public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = \"InventoryOrderLineBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINES  = \"IntakeLinesMAT\";\r\n    public static final String TABLENAME_INTAKEORDER  = \"IntakeOrders\";\r\n    public static final String TABLENAME_INTAKEORDERBARCODE  = \"IntakeOrderBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINEBARCODE  = \"IntakeOrderMATLineBarcodes\";\r\n    public static final String TABLENAME_MOVEORDER = \"MoveOrder\";\r\n    public static final String TABLENAME_MOVEORDERLINE = \"MoveOrderLine\";\r\n    public static final String TABLENAME_MOVEORDERLINEBARCODE = \"MoveOrderLineBarcode\";\r\n    public static final String TABLENAME_MOVEORDERBARCODE = \"MoveOrdeBarcode\";\r\n    public static final String TABLENAME_RETURNORDER = \"Returnorder\";\r\n    public static final String TABLENAME_RETURNORDERLINE = \"ReturnorderLine\";\r\n    public static final String TABLENAME_RETURNORDERLINEBARCODE = \"ReturnorderLineBarcode\";\r\n    public static final String TABLENAME_RETURNORDERBARCODE = \"ReturnorderBarcode\";\r\n    public static final String TABLENAME_RETURNORDERDOCUMENT = \"ReturnorderDocument\";\r\n    public static final String TABLENAME_BRANCHREASON = \"BranchReason\";\r\n    public static final String TABLENAME_RECEIVELINES  = \"ReceiveLines\";\r\n    public static final String TABLENAME_PACKAGING = \"Packaging\";\r\n    public static final String TABLENAME_CUSTOMAUTHORISATIONS = \"CustomAuthorisations\";\r\n    public static final String TABLENAME_IDENTIFIERWITHDESTINATION  = \"IdentifierWithDestination\";\r\n    public static final String TABLENAME_PACKANDSHIPORDER = \"PackAndSHipOrder\";\r\n    public static final String TABLENAME_PACKANDSHIPORDERLINE = \"PackAndShipOrderLine\";\r\n    public static final String TABLENAME_PACKANDSHIPSETTING = \"PackAndShipSetting\";\r\n    public static final String TABLENAME_PACKANDSHIPBARCODE = \"PackAndShipBarcode\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPMENT = \"PackAndShipShipment\";\r\n    public static final String TABLENAME_PACKANDSHIPADDRESS = \"PackAndShipAddress\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINGMETHOD = \"PackAndShipShippingMethod\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINPACKAGE= \"PackAndShipShippingPackage\";\r\n    public static final String TABLENAME_STOCKOWNER= \"StockOwner\";\r\n    public static final String TABLENAME_AUTHORIZEDSTOCKOWNER= \"AutorizedStockOwner\";\r\n\r\n\r\n    //endregion Tables\r\n\r\n    //region localtables\r\n    public static final String TABLENAME_ENVIRONMENTS = \"Environments\";\r\n    //endregion localtables\r\n\r\n\r\n    //region A\r\n    public static final String ACTIONTYPECODE_NAMESTR = \"ActionTypeCode\";\r\n    public static final String ACTUALSHIPPINGAGENTCODE_NAMESTR = \"ActualShippingAgentCode\";\r\n    public static final String ACTUEALSHIPPINGAGENTSERVICECODE_NAMESTR = \"ActualShippingAgentServiceCode\";\r\n    public static final String ASSIGNEDUSERID_NAMESTR = \"AssignedUserId\";\r\n    public static final String AUTHORISATION_NAMESTR = \"Autorisatie\";\r\n    public static final String ADDRESCODE_NAMESTR = \"Adrescode\";\r\n    public static final String ADDRESSCODE_NAMESTR = \"AddressCode\";\r\n    public static final String ADDRESSNAME_NAMESTR = \"AddressName\";\r\n    public static final String ADDRESSTYPE_NAMESTR = \"AddressType\";\r\n    public static final String ADDRESSNAMEREMARK_NAMESTR = \"AddressNameRemark\";\r\n    public static final String ADDRES_NAMESTR = \"Adres\";\r\n    public static final String ADDRESS_NAMESTR = \"Address\";\r\n    public static final String ADDRESSREMARK_NAMESTR = \"AddressRemark\";\r\n    public static final String ADDRESSADDITION_NAMESTR = \"Adrestoevoeging\";\r\n    public static final String ADDRESSNUMBER_NAMESTR = \"Huisnummer\";\r\n    public static final String ADDRESSNUMBERADDITION_NAMESTR = \"Huisnummertoevoeging\";\r\n    public static final String AUTHORISATIONBASE_NAMESTR = \"Autorisatie_basis\";\r\n    public static final String AREA_NAMESTR = \"Area\";\r\n    //endregion A\r\n\r\n    //region B\r\n    public static final String BARCODE_NAMESTR = \"Barcode\";\r\n    public static final String BARCODELAYOUT_NAMESTR = \"Barcodelayout\";\r\n    public static final String BARCODETYPE_NAMESTR = \"BarCodeType\";\r\n\r\n    public static final String BINCODE_NAMESTR = \"BinCode\";\r\n    public static final String BINCODEHANDLED_NAMESTR = \"BinCodeHandled\";\r\n    public static final String BINCODENL_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String BINMANDATORY_NAMESTR = \"BinMandatory\";\r\n    public static final String BINTYPE_NAMESTR = \"BinType\";\r\n    public static final String BRANCH_NAMESTR = \"Vestiging\";\r\n    public static final String BRANCHTYPE_NAMESTR = \"Vestigingtype\";\r\n    public static final String BRANCHNAME_NAMESTR = \"Name\";\r\n    public static final String BILLINGADDRESSCODE_NAMESTR = \"BillingAddressCode\";\r\n    //endregion B\r\n\r\n    //region C\r\n    public static final String COMPOSITEBARCODE_NAMESTR = \"CompositeBarcode\";\r\n    public static final String COMMENTLINENO_NAMESTR = \"CommentLineNo\";\r\n    public static final String CURRENTLOCATION_NAMESTR = \"CurrentLocation\";\r\n    public static final String COMMENT_NAMESTR = \"Comment\";\r\n    public static final String COMMENTCODE_NAMESTR = \"CommentCode\";\r\n    public static final String COMMENTTEXT_NAMESTR = \"CommentText\";\r\n    public static final String COMPONENT10_NAMESTR = \"Component10\";\r\n    public static final String CURRENTUSERID_NAMESTR = \"CurrentUserId\";\r\n    public static final String CITY_NAMESTR = \"City\";\r\n    public static final String CITYNL_NAMESTR = \"Plaats\";\r\n    public static final String COUNTRY_NAMESTR = \"Country\";\r\n    public static final String COUNTRYNL_NAMESTR = \"Land\";\r\n    public static final String CONTAINER_NAMESTR = \"Container\";\r\n    public static final String CONTACTNAME_NAMESTR = \"ContactName\";\r\n    public static final String CONTACTPERSON_NAMESTR = \"Contactpersoon\";\r\n    public static final String CONTAINERTYPE_DUTCH_NAMESTR = \"Containersoort\";\r\n    //endregion C\r\n\r\n    //region D\r\n    public static final String DATATIMESTAMP_NAMESTR = \"DataTimestamp\";\r\n    public static final String DESCRIPTION_DUTCH_NAMESTR = \"Omschrijving\";\r\n    public static final String DESCRIPTION_NAMESTR = \"Description\";\r\n    public static final String DESCRIPTION2_NAMESTR = \"Description2\";\r\n    public static final String DESTINATION_NAMESTR = \"Destination\";\r\n    public static final String DESTINATIONNO_NAMESTR = \"DestinationNo\";\r\n    public static final String DOCUMENT_NAMESTR = \"Document\";\r\n    public static final String DOCUMENTTYPE_NAMESTR = \"DocumentType\";\r\n    public static final String DOCUMENT2_NAMESTR = \"Document2\";\r\n    public static final String DOCUMENTTYPE2_NAMESTR = \"DocumentType2\";\r\n    public static final String DEFAULTWEIGHTINGRAMS_NAMESTR = \"DefaultWeightInG\";\r\n    public static final String DEFAULTVALUE_NAMESTR = \"DefaultValue\";\r\n    public static final String DELIVERYADDRESSTYPE_NAMESTR = \"DeliveryAddressType\";\r\n    public static final String DELIVERYADDRESSCODE_NAMESTR = \"DeliveryAddressCode\";\r\n    //endregion D\r\n\r\n\r\n    //region E\r\n    public static final String EXTERNALREFERENCE_NAMESTR = \"ExternalReference\";\r\n    public static final String ENUMERATIONVALUES_NAMESTR = \"EnumerationValues\";\r\n\r\n    public static final String ENVIRONMENT_DEFAULT = \"IsDefault\";\r\n    public static final String ENVIRONMENT_NAME = \"Name\";\r\n    public static final String ENVIRONMENT_DESCRIPTION = \"Description\";\r\n    public static final String ENVIRONMENT_WEBSERVICEURL = \"Webserviceurl\";\r\n\r\n    public static final String EXTRAFIELD1_NAMESTR = \"ExtraField1\";\r\n    public static final String EXTRAFIELD2_NAMESTR = \"ExtraField2\";\r\n    public static final String EXTRAFIELD3_NAMESTR = \"ExtraField3\";\r\n    public static final String EXTRAFIELD4_NAMESTR = \"ExtraField4\";\r\n    public static final String EXTRAFIELD5_NAMESTR = \"ExtraField5\";\r\n    public static final String EXTRAFIELD6_NAMESTR = \"ExtraField6\";\r\n    public static final String EXTRAFIELD7_NAMESTR = \"ExtraField7\";\r\n    public static final String EXTRAFIELD8_NAMESTR = \"ExtraField8\";\r\n    public static final String EMAIL_NAMESTR = \"Email\";\r\n    public static final String EMBALLAGE_NAMESTR = \"Emballage\";\r\n    //endregion E\r\n\r\n    //region F\r\n    public static final String FIELD_NAMESTR = \"Field\";\r\n    public static final String FIELDIDENTIFIER_NAMESTR = \"Field_identifier\";\r\n    public static final String FIELDTYPE_NAMESTR = \"Field_type\";\r\n    public static final String FILTERFIELD_NAMESTR = \"Filter_veld\";\r\n    public static final String FILTERVALUE_NAMESTR = \"Filter_waarde\";\r\n    //endregion F\r\n\r\n    //Region G\r\n    public static final String GENERATED_NAMESTR = \"Generated\";\r\n    //End Region G\r\n\r\n    //region H\r\n    public static final String HANDLEDTIMESTAMP_NAMESTR = \"HandledTimestamp\";\r\n    public static final String HANDLEDTIMESTAMPTAKENOTEXPORTED_NAMESTR = \"HandledTimestamp_take_not_exported\";\r\n    public static final String HOUSENUMBER_NAMESTR = \"HouseNumber\";\r\n    public static final String HOUSENUMBERCOMPLEMENTED_NAMESTR = \"HouseNumberComplemented\";\r\n    public static final String HOUSENUMBEREXTENSION_NAMESTR = \"HouseNumberExtension\";\r\n    public static final String HOUSENUMBEREXTENSIONCOMPLEMENTED_NAMESTR = \"HouseNumberExtensionComplemented\";\r\n    //endregion H\r\n\r\n\r\n    //Region I\r\n    public static final String IDENTIFIER_NAMESTR = \"Identifier\";\r\n    public static final String INFOKEY_NAMESTR = \"InfoKey\";\r\n    public static final String INFOVALUE_NAMESTR = \"InfoValue\";\r\n    public static final String IMAGE_NAMESTR = \"Image\";\r\n    public static final String INTERFACERESULTMETHOD_NAMESTR = \"Interface_result_method\";\r\n    public static final String ISPARTOFMULTILINEORDER_NAMESTR = \"IsPartOfMultiLineOrder\";\r\n    public static final String ISUNIQUEBARCODE_NAMESTR = \"IsUniqueBarcode\";\r\n    public static final String ISUNIQUE_NAMESTR = \"IsUnique\";\r\n    public static final String ITEMINFOCODE_NAMESTR = \"ItemInfoCode\";\r\n    public static final String ITEMNO_NAMESTR = \"ItemNo\";\r\n    public static final String ITEMTYPE_NAMESTR = \"Itemsoort\";\r\n\r\n    public static final String IMAGEBASE64_NAMESTR = \"Image_base64\";\r\n    public static final String INV_AUTOCLOSE_BIN_NAMESTR = \"Inv_auto_close_bin\";\r\n    public static final String INV_PRECOUNT_NAMESTR = \"Inv_precount\";\r\n    public static final String INV_AMOUNT_MANUAL_NAMESTR = \"Inv_Amount_manual\";\r\n    public static final String INV_BARCODECHECK_NAMESTR = \"Inv_barcode_check\";\r\n    public static final String INV_ADD_EXTRA_BIN_NAMESTR = \"Inv_add_extra_bin\";\r\n\r\n    public static final String INVENTORYWITHPICTURE_NAMESTR = \"Inv_with_picture\";\r\n    public static final String INVENTORYWITHPICTURE_AUTO_OPEN_NAMESTR = \"Inv_with_picture_auto_open\";\r\n    public static final String INVENTORYWITHPICTURE_PREFETCH_NAMESTR = \"Inv_with_picture_prefetch\";\r\n\r\n    public static final String ISINPUT_NAMESTR = \"IsInput\";\r\n    public static final String ISREQUIRED_NAMESTR = \"Isrequired\";\r\n    public static final String ISPROCESSINGORPARKED_NAMESTR = \"IsProcessingOrParked\";\r\n\r\n\r\n\r\n    //endregion I\r\n\r\n    //region L\r\n    public static final String LANGUAGEDUTCH_NAMESTR = \"Taal\";\r\n    public static final String LABELCODE_NAMESTR = \"Labelcode\";\r\n    public static final String LAYOUT_NAMESTR = \"Layout\";\r\n    public static final String LICENSE_NAMESTR = \"License\";\r\n    public static final String LICENSE_NL_NAMESTR = \"Licentie\";\r\n    public static final String LINE_NAMESTR = \"Line\";\r\n    public static final String LINES_NAMESTR = \"Lines\";\r\n    public static final String LINENO_NAMESTR = \"LineNo\";\r\n    public static final String LINENOTAKE_NAMESTR = \"LineNoTake\";\r\n    public static final String LOCALSTATUS_NAMESTR = \"LocalStatus\";\r\n    public static final String LOCAL_QUANTITYTAKEN_NAMESTR = \"LocalQuantityTaken\";\r\n    public static final String LOCAL_QUANTITYPLACED_NAMESTR = \"LocalQuantityPlaced\";\r\n    //endregion L\r\n\r\n    //region M\r\n    public static final String MOVEDEFAULTBIN_NAMESTR = \"Move_default_bin\";\r\n    public static final String PICKDEFAULTSTORAGEBIN = \"Pick_default_storage_bin\";\r\n\r\n\r\n\r\n    public static final String MOVEAMOUNTMANUAL_NAMESTR = \"Move_Amount_manual\";\r\n    public static final String MOVEBARCODECHECK_NAMESTR = \"Move_Barcode_check\";\r\n    public static final String MOVEVALIDATESTOCK_NAMESTR = \"Move_validate_stock\";\r\n    public static final String MOVEVALIDATESTOCKENFORCE_NAMESTR = \"Move_validate_stock_enforce\";\r\n    public static final String MOVE_MT_TAKEAMOUNTMANUAL_NAMESTR = \"Move_MT_take_amount_manual\";\r\n    public static final String MOVE_MT_TAKEAUTOITEM_NAMESTR = \"Move_MT_take_auto_item\";\r\n    public static final String MOVE_MT_TAKEAUTOITEMCONTAINERONCE_NAMESTR = \"Move_MT_take_auto_item_container_once\";\r\n    public static final String MOVE_MT_TAKEALLOWEND_NAMESTR = \"Move_MT_take_allow_end\";\r\n    public static final String MOVE_MT_TAKEIGNOREUNDERTAKE_NAMESTR = \"Move_MT_take_ignore_undertake\";\r\n    public static final String MOVE_MT_TAKEAUTOACCEPTSINGLEPIECE_NAMESTR = \"Move_MT_take_auto_accept_single_piece\";\r\n    public static final String MOVE_MT_PLACEAMOUNTMANUAL_NAMESTR = \"Move_MT_place_amount_manual\";\r\n    public static final String MOVE_MT_PLACEAUTOITEM_NAMESTR = \"Move_MT_place_auto_item\";\r\n    public static final String MOVE_AUTOACCEPTATREQUESTED_NAMESTR = \"Move_auto_accept_at_requested\";\r\n    public static final String MOVE_NOEXTRABINS_NAMESTR = \"Move_no_extra_bins\";\r\n    public static final String MOVE_NOEXTRAITEMS_NAMESTR = \"Move_no_extra_items\";\r\n    public static final String MOVE_NOEXTRAPIECES_NAMESTR = \"Move_no_extra_pieces\";\r\n    public static final String MOVEWITHPICTURE_NAMESTR = \"Move_with_picture\";\r\n    public static final String MOVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Move_with_picture_auto_open\";\r\n    public static final String MOVEWITHPICTURE_PREFETCH_NAMESTR = \"Move_with_picture_prefetch\";\r\n    //endregion M\r\n\r\n    //region N\r\n    public static final String NAMEDUTCH_NAMESTR = \"Naam\";\r\n    public static final String NAMEADDITION_NAMESTR = \"Naamtoevoeging\";\r\n    public static final String NAMESHORT_NAMESTR = \"Naam_kort\";\r\n\r\n\r\n    public static final String NUMBEROFBINS_NAMESTR = \"Aantal_bins\";\r\n    //endregion N\r\n\r\n    //region O\r\n    public static final String ORDERDUTCH_NAMESTR = \"Volgorde\";\r\n    public static final String OMSCHRIJVING_NAMESTR = \"Omschrijving\";\r\n    public static final String ORDERNUMBER_NAMESTR = \"Opdrachtnummer\";\r\n    public static final String ORDERTYPE_NAMESTR = \"Opdrachttype\";\r\n    public static final String ORIGINDUTCH_NAMESTR = \"Herkomstcode\";\r\n    public static final String ORIGINKEYDUTCH_NAMESTR = \"Herkomstsleutel\";\r\n    //endregion O\r\n\r\n    //region P\r\n\r\n    public static final String PACKAGECONTAINER_NAMESTR = \"PackageContainer\";\r\n    public static final String PACKAGECONTAINERTYPE_NAMESTR = \"PackageContainersoort\";\r\n    public static final String PACKAGEITEMCOUNT_NAMESTR = \"PackageItemCount\";\r\n    public static final String PACKAGEWEIGHTING_NAMESTR = \"PackageWeightInG\";\r\n    public static final String PACKAGETYPE_NAMESTR = \"PackageType\";\r\n    public static final String PACKAGESEQUENCENUMBER_NAMESTR = \"PackageSequenceNumber\";\r\n    public static final String PACKINGTABLE_NAMESTR = \"Packingtable\";\r\n    public static final String PHONE_NAMESTR = \"PhoneNumber\";\r\n    public static final String PHONENL_NAMESTR = \"Telefoon\";\r\n    public static final String PICKSALESASKWORKPLACE_NAMESTR = \"Pick_Sales_ask_workplace\";\r\n    public static final String PICKTRANSFERASKWORKPLACE_NAMESTR = \"Pick_Transfer_ask_workplace\";\r\n    public static final String PICKAUTONEXT_NAMESTR = \"Pick_Auto_next\";\r\n    public static final String PICKBARCODECHECK_NAMESTR = \"Pick_Barcode_check\";\r\n    public static final String PICKPICKPVVKKOEACHPIECE_NAMESTR = \"Pick_Pick_PV_VKO_each_piece\";\r\n    public static final String PICKPICKTOCONTAINER_NAMESTR = \"Pick_Pick_to_container\";\r\n    public static final String PICKPICKTOCONTAINERTYPE_NAMESTR = \"Pick_Pick_to_container_type\";\r\n    public static final String PICKPRINTADDRESSLABEL_NAMESTR = \"Pick_Print_adreslabel\";\r\n    public static final String PICKPRINTCONTENTLABEL_NAMESTR = \"Pick_Print_contentlabel\";\r\n    public static final String PICKWITHPICTURE_NAMESTR = \"Pick_with_picture\";\r\n    public static final String PICKWITHPICTURE_AUTO_OPEN_NAMESTR = \"Pick_with_picture_auto_open\";\r\n    public static final String PICKWITHPICTURE_PREFETCH_NAMESTR = \"Pick_with_picture_prefetch\";\r\n    public static final String PICKACTIVITYBINREQUIRED_NAMESTR = \"Pick_Activity_bin_required\";\r\n    public static final String PICKQCCHECKCOUNT_NAMESTR = \"Pick_Qc_check_count\";\r\n\r\n    public static final String POSITIONSTART_NAMESTR = \"Position_start\";\r\n    public static final String POSITIONEND_NAMESTR = \"Position_end\";\r\n\r\n    public  static final String PRIORITY_NAMESTR = \"Priority\";\r\n\r\n    public static final String PRICE_NAMESTR = \"Price\";\r\n    public static final String PRINTDOCUMENTS_NAMESTR = \"PrintDocuments\";\r\n    public static final String PROCESSINGSEQUENCE_NAMESTR = \"ProcessingSequence\";\r\n    public static final String PROPERTY_NAMESTR = \"Property\";\r\n    public static final String PROPERTYCODE_NAMESTR = \"Propertycode\";\r\n    public static final String PROPERTYDUTCH_NAMESTR = \"Propertie\";\r\n    public static final String PROPERTYSDUTCH_NAMESTR = \"Properties\";\r\n    public static final String PROPERTYGROUP_NAMESTR = \"Propertiegroep\";\r\n    public static final String ADDRESSES_NAMESTR = \"Addresses\";\r\n    public static final String SHIPPINGMETHODS_NAMESTR = \"ShippingMethods\";\r\n    public static final String COMPOSITEBARCODESPLITTED_NAMESTR = \"Composite_barcode\";\r\n    public static final String COMPOSITEBARCODETYPE_NAMESTR = \"Compositebarcode_type\";\r\n    public static final String FIELDSEPERATOR_NAMESTR = \"Field_separator\";\r\n    public static final String LAYOUTREGEX_NAMESTR = \"Layout_regex\";\r\n    public static final String LAYOUTTYPE_NAMESTR = \"Layout_type\";\r\n\r\n\r\n    public static final String PICKORDERLINEBARCODE_LINENO = \"LineNo\";\r\n    public static final String PICKORDERLINEBARCODE_BARCODE = \"Barcode\";\r\n    public static final String PICKORDERLINEBARCODE_QUANTITY = \"Quantity\";\r\n    public static final String PICKORDERLINEBARCODE_ISMANUAL = \"IsManual\";\r\n    //endregion P\r\n\r\n    //region Q\r\n    public static final String QUANTITY_NAMESTR = \"Quantity\";\r\n\r\n    public static final String QUANTITYAVAILABLE_NAMESTR = \"Voorraad_beschikbaar\";\r\n    public static final String QUANTITYHANDLED_NAMESTR = \"QuantityHandled\";\r\n    public static final String QUANTITYHANDLEDALLSCANNERS_NAMESTR = \"QuantityHandledAllScanners\";\r\n    public static final String QUANTITYHANDLEDSUM_NAMESTR = \"QuantityHandledSum\";\r\n    public static final String QUANTITYPERUNITOFMEASURE_NAMESTR = \"QtyPerUnitOfMeasure\";\r\n    public static final String QUANTITYREJECTED_NAMESTR = \"QuantityRejected\";\r\n    public static final String QUANTITYCHECKED_NAMESTR = \"QuantityChecked\";\r\n    public static final String QUANTITYTOTAL_NAMESTR = \"QuantityTotal\";\r\n    public static final String QUANTITYTAKEN_NAMESTR = \"QuantityTaken\";\r\n    public static final String QUANTITYHANDLEDTAKE_NAMESTR = \"QuantityHandled_take\";\r\n    public static final String QUANTITYTAKE_NAMESTR = \"Quantity_take\";\r\n    public static final String QUANTITYTAKENOTEXPORTED_NAMESTR = \"QuantityHandled_take_not_exported\";\r\n    public static final String QUANTITYTAKEEXPORTED_NAMESTR = \"QuantityHandled_take_exported\";\r\n    //endregion Q\r\n\r\n    //region R\r\n    public static final String RECEIVEDEFAULTBIN_NAMESTR = \"Receive_default_bin\";\r\n    public static final String REGION_NAMESTR = \"Regio\";\r\n    public static final String REJECTPICK_NAMESTR = \"RejectPick\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGINTAKE_NAMESTR = \"Receive_intake_eo_packaging_intake\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGSHIPPED_NAMESTR = \"Receive_intake_eo_packaging_shipped\";\r\n\r\n    public static final String RECEIVEWITHPICTURE_NAMESTR = \"Receive_with_picture\";\r\n    public static final String RECEIVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Receive_with_picture_auto_open\";\r\n    public static final String RECEIVEWITHPICTURE_PREFETCH_NAMESTR = \"Receive_with_picture_prefetch\";\r\n    public static final String REQUESTENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDSTARTDATETIME_NAMESTR = \"RequestedStartDateTime\";\r\n    public static final String REMEMBERVALUE_NAMESTR = \"RememberValue\";\r\n    public static final String RETURNDEFAULTBIN_NAMESTR = \"Retour_default_bin\";\r\n\r\n    public static final String RECEIVEDDATETIME_NAMESTR = \"ReceivedDateTime\";\r\n    public static final String RECEIVEEXPORTPART_NAMESTR = \"Receive_export_part\";\r\n    public static final String RECEIVE_AMOUNT_MANUAL_NAMESTR = \"Receive_Amount_manual\";\r\n    public static final String RECEIVEAMOUNTMANUAL_EO_NAMESTR = \"Receive_Amount_manual_eo\";\r\n    public static final String RECEIVEBARCODECHECK_NAMESTR = \"Receive_Barcode_check\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATREQUESTED_NAMESTR = \"Receive_store_auto_accept_at_requested\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATNEWITEM_NAMESTR = \"Receive_store_auto_accept_at_new_item\";\r\n    public static final String RECEIVESTOREAUTOACCEPTVALIDATIONMESSAGE_NAMESTR = \"Receive_store_auto_accept_validation_message\";\r\n    public static final String RECEIVENOEXTRABINS_NAMESTR = \"Receive_no_extra_bins\";\r\n    public static final String RECEIVENOEXTRAITEMS_NAMESTR = \"Receive_no_extra_items\";\r\n    public static final String RECEIVENOEXTRAPIECES_NAMESTR = \"Receive_no_extra_pieces\";\r\n    public static final String RECEIVEMATAUTOSPLITINCOMPLETELINE_NAMESTR = \"Receive_mat_auto_split_incomplete_line\";\r\n\r\n    public static final String RETOURREDEN_NAMESTR = \"Retourreden\";\r\n    public static final String RETOURAMAOUNTMANUAL_NAMESTR = \"Retour_Amount_manual\";\r\n    public static final String RETOURBARCODECHECK_NAMESTR = \"Retour_Barcode_check\";\r\n    public static final String RETOURMULTIDOCUMENT_NAMESTR = \"Retour_multi_document\";\r\n    public static final String RETOURORDERBINNOCHECK_NAMESTR = \"Retour_Order_bin_no_check\";\r\n\r\n\r\n    public static final String REASON_NAMESTR = \"Reason\";\r\n    public static final String REASONNL_NAMESTR = \"Reden\";\r\n    public static final String RETURN_NAMESTR = \"Return\";\r\n    public static final String RETURNEXTERNAL_NAMESTR = \"ReturnExternal\";\r\n\r\n    public static final String RETOURWITHPICTURE_NAMESTR = \"Retour_with_picture\";\r\n    public static final String RETURNADDRESSCODE_NAMESTR = \"ReturnAddressCode\";\r\n    public static final String RETURNSENDERADDRESSCODE_NAMESTR = \"ReturnSenderAddressCode\";\r\n    public static final String RETURNSHIPPINGADDRESSCODE_NAMESTR = \"ReturnShippingAddressCode\";\r\n    //endregion R\r\n\r\n    //region S\r\n    public static final String SALESORDER_NAMESTR = \"Salesorder\";\r\n    public static final String SCANNER_NAMESTR = \"Scanner\";\r\n    public static final String SENDERADDRESSCODE_NAMESTR = \"SenderAddressCode\";\r\n\r\n    public static final String SEQUENCENOHANDLED_NAMESTR = \"SequenceNoHandled\";\r\n    public static final String SETTINGCODE_NAMESTR = \"SettingCode\";\r\n    public static final String SETTINGVALUE_NAMESTR = \"SettingValue\";\r\n    public static final String SETTING_NAMESTR = \"Instelling\";\r\n    public static final String SINGLEARTICLEORDERS_NAMESTR = \"SingleArticleOrders\";\r\n    public static final String STATUS_NAMESTR = \"Status\";\r\n    public static final String STATUSSHIPPING_NAMESTR = \"StatusShipping\";\r\n    public static final String STATUSPACKING_NAMESTR = \"StatusPacking\";\r\n    public static final String STATUSPRINTATSTART_NAMESTR = \"StatusPrintAtStart\";\r\n    public static final String STOCKOWNER_NAMESTR = \"StockOwner\";\r\n    public static final String SORTORDER_NAMESTR = \"Volgorde\";\r\n    public static final String SORTING_NAMESTR = \"Sortering\";\r\n    public static final String SOURCEDOCUMENT_NAMESTR = \"SourceDocument\";\r\n    public static final String SOURCENO_NAMESTR = \"SourceNo\";\r\n    public static final String SORTINGSEQUENCENO_NAMESTR = \"SortingSequenceNo\";\r\n    public static final String SORTINGSEQUENCENOPLACE_NAMESTR = \"SortingSequenceNo_place\";\r\n    public static final String STORAGEBINCODE_NAMESTR = \"StorageBinCode\";\r\n    public static final String STOREBINCODE_NAMESTR = \"StoreBinCode\";\r\n    public static final String STORESOURCEORDER_NAMESTR = \"StoreSourceOpdracht\";\r\n    public static final String STREETNL_NAMESTR = \"Straat\";\r\n    public static final String STREET_NAMESTR = \"Street\";\r\n    public static final String STREETCOMPLEMENTERD_NAMESTR = \"StreetComplemented\";\r\n    public static final String SEQUENCE_NAMESTR = \"Order\";\r\n    public static final String SHIPPINGAGENT_NAMESTR = \"Expediteur\";\r\n    public static final String SHIPPINGLABELS_NAMESTR = \"ShippingLabels\";\r\n    public static final String SERVICE_NAMESTR = \"Service\";\r\n    public static final String SHIPPINGUNIT_NAMESTR = \"Verzendeenheid\";\r\n    public static final String SHIPPINGMETHOD_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGMETHODCODE_NAMESTR = \"ShippingMethodCode\";\r\n    public static final String SHIPPINGMETHODVALUE_NAMESTR = \"ShippingMethodValue\";\r\n    public static final String SHIPPINGUNITQUANTITYUSED_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGAGENTCODE_NAMESTR = \"ShippingAgentCode\";\r\n    public static final String SHIPPINGAGENTSERVICECODE_NAMESTR = \"ShippingAgentServiceCode\";\r\n    public static final String SHIPPINGADDRESSCODE_NAMESTR = \"ShippingAddressCode\";\r\n    public static final String SHIPPINGADDRESSTYPE_NAMESTR = \"ShippingAddressType\";\r\n\r\n    public static final String SHOWONTERMINAL_NAMESTR = \"ShowOnTerminal\";\r\n    public static final String SOURCETYPE_NAMESTR = \"SourceType\";\r\n    public static final String SORTINGSEQUENCENOTAKE_NAMESTR = \"SortingSequenceNo_take\";\r\n    public static final String STRIPTHIS_NAMESTR = \"Strip_this\";\r\n    //endregion S\r\n\r\n    //region T\r\n    public static final String TAKENTIMESTAMP_NAMESTR = \"TakenTimestamp\";\r\n    public static final String TEMPLATE_NAMESTR = \"Template\";\r\n    public static final String TEXTDUTCH_NAMESTR = \"Tekst\";\r\n    public static final String TRANSLATIONDUTCH_NAMESTR = \"Vertaling\";\r\n    //endregion T\r\n\r\n\r\n    //region U\r\n    public static final String USEFORSTORAGE_NAMESTR = \"UseForStorage\";\r\n    public static final String USEFORRETURNSALES_NAMESTR = \"UseForReturnSales\";\r\n    public static final String UNIQUNESS_NAMESTR = \"Uniqueness\";\r\n    public static final String UNITOFMEASURE_NAMESTR = \"UnitOfMeasure\";\r\n    public static final String USERNAME_NAMESTR = \"Gebruikersnaam\";\r\n    //endregion U\r\n\r\n    //region V\r\n    public static final String VALUE_NAMESTR = \"Value\";\r\n    public static final String VALUENL_NAMESTR = \"Waarde\";\r\n    public static final String VALUEHANDLED_NAMESTR = \"ValueHandled\";\r\n    public static final String VARIANTCODE_NAMESTR = \"VariantCode\";\r\n    public static final String VENDORITEMNO_NAMESTR = \"VendorItemNo\";\r\n    public static final String VENDORITEMDESCRIPTION_NAMESTR = \"VendorItemDescription\";\r\n    public static final String VALUETYPE_NAMESTR = \"ValueType\";\r\n    public static final String VERZENDLABEL_STATUS_NAMESTR = \"Verzendlabel_status\";\r\n\r\n\r\n    //endregion V\r\n\r\n    //region W\r\n    public static final String WAREHOUSELOCATION_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String WEBSERVICETIMEOUTERPINS_NAMESTR = \"Webservice_timeout_erp_in_s\";\r\n    public static final String WORKPLACE_NAMESTR = \"Workplace\";\r\n    public static final String WORKPLACE_DUTCH_NAMESTR = \"Werkplek\";\r\n    //endregion W\r\n\r\n    //region Z\r\n    public static final String ZIPCODENL_NAMESTR = \"Postcode\";\r\n    public static final String ZIPCODE_NAMESTR = \"Zipcode\";\r\n    public static final String ZONE_NAMESTR = \"Zone\";\r\n\r\n\r\n\r\n    //endregion Z\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/General/cDatabase.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/SSU_WHS/General/cDatabase.java	(date 1617964993290)
@@ -46,6 +46,8 @@
     public static final String TABLENAME_INVENTORYORDER = "InventoryOrder";
     public static final String TABLENAME_INVENTORYORDERBIN = "InventoryOrderBin";
     public static final String TABLENAME_INVENTORYORDERLINE = "InventoryOrderLines";
+    public static final String TABLENAME_INVENTORYORDERLINEPROPERTY = "InventoryorderlineProperty";
+    public static final String TABLENAME_INVENTORYORDERLINEPROPERTYVALUE = "InventoryorderlinePropertyValue";
     public static final String TABLENAME_INVENTORYORDERBARCODE = "InventoryOrderBarcodes";
     public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = "InventoryOrderLineBarcodes";
     public static final String TABLENAME_INTAKEORDERMATLINES  = "IntakeLinesMAT";
Index: app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.General;\r\n\r\nimport android.content.Context;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.RoomDatabase;\r\n\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageEntity;\r\nimport SSU_WHS.Basics.ArticleImages.iArticleImageDao;\r\nimport SSU_WHS.Basics.Authorisations.cAuthorisationEntity;\r\nimport SSU_WHS.Basics.Authorisations.iAuthorisationDao;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwnerEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayoutEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.iBarcodeLayoutDao;\r\nimport SSU_WHS.Basics.Branches.cBranchEntity;\r\nimport SSU_WHS.Basics.Branches.iBranchDao;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcodeEntity;\r\nimport SSU_WHS.Basics.CompositeBarcode.iCompositeBarcodeDao;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.cCompositeBarcodePropertyEntity;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.iCompositeBarcodePropertyDao;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisationEntity;\r\nimport SSU_WHS.Basics.CustomAuthorisations.iCustomAuthorisationDao;\r\nimport SSU_WHS.Basics.ItemProperty.cItemPropertyEntity;\r\nimport SSU_WHS.Basics.ItemProperty.iItemPropertyDao;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplateEntity;\r\nimport SSU_WHS.Basics.LabelTemplate.iLabelTemplateDao;\r\nimport SSU_WHS.Basics.Packaging.cPackagingEntity;\r\nimport SSU_WHS.Basics.Packaging.iPackagingDao;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroupEntity;\r\nimport SSU_WHS.Basics.PropertyGroup.iPropertyGroupDao;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.cPropertyGroupPropertyEntity;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.iPropertyGroupPropertyDao;\r\nimport SSU_WHS.Basics.Scanners.cScannerEntity;\r\nimport SSU_WHS.Basics.Scanners.iScannerDao;\r\nimport SSU_WHS.Basics.Settings.cSettingsEntity;\r\nimport SSU_WHS.Basics.Settings.iSettingsDao;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnitEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.iShippingAgentServiceShippingUnitDao;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentServiceEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServices.iShippingAgentServiceDao;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgentEntity;\r\nimport SSU_WHS.Basics.ShippingAgents.iShippingAgentDao;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentServiceShipMethodEntity;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.iShippingAgentServiceShipMethodDao;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwnerEntity;\r\nimport SSU_WHS.Basics.StockOwner.iStockOwnerDao;\r\nimport SSU_WHS.Basics.Translations.cTranslationEntity;\r\nimport SSU_WHS.Basics.Translations.iTranslationDao;\r\nimport SSU_WHS.Basics.Users.cUserEntity;\r\nimport SSU_WHS.Basics.Users.iUserDao;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceEntity;\r\nimport SSU_WHS.Basics.Workplaces.iWorkplaceDao;\r\nimport SSU_WHS.General.Comments.cCommentEntity;\r\nimport SSU_WHS.General.Comments.iCommentDao;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.iIntakeorderBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.cIntakeorderMATLineBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.iIntakeorderMATLineBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLineEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.iIntakeorderMATLineDao;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorderEntity;\r\nimport SSU_WHS.Intake.Intakeorders.iIntakeorderDao;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorderEntity;\r\nimport SSU_WHS.Inventory.InventoryOrders.iInventoryorderDao;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.iInventoryorderBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.iInventoryorderLineBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.iInventoryorderLineDao;\r\nimport SSU_WHS.Move.Moveorders.cMoveorderEntity;\r\nimport SSU_WHS.Move.Moveorders.iMoveorderDao;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderBarcodes.iMoveorderBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.iMoveorderLineBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLineEntity;\r\nimport SSU_WHS.Move.MoveorderLines.iMoveorderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.cPackAndShipAddressEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.iPackAndShipAddressDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.cPackAndShipBarcodeEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.iPackAndShipBarcodeDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.cPackAndShipOrderLineEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.iPackAndShipOrderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrderEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.iPackAndShipOrderDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.cPackAndShipSettingEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.iPackAndShipSettingDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.cPackAndShipShipmentEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.iPackAndShipShipmentDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.cPackAndShipShippingMethodEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.iPackAndShipShippingMethodDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.cPackAndShipShippingPackageEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.iPackAndShipShippingPackageDao;\r\nimport SSU_WHS.Picken.FinishSinglePieceLine.cPickorderLineFinishSinglePieceEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.cPickorderAddressEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.iPickorderAddressDao;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderBarcodes.iPickorderBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.iPickorderCompositeBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.iPickorderLineBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLinePackAndShip.cPickorderLinePackAndShipEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.iPickorderLinePropertyDao;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.iPickorderLinePropertyValueDao;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.PickorderSetting.cPickorderSettingEntity;\r\nimport SSU_WHS.Picken.PickorderSetting.iPickorderSettingDao;\r\nimport SSU_WHS.Picken.PickorderShipPackages.cPickorderShipPackageEntity;\r\nimport SSU_WHS.Picken.PickorderShipPackages.iPickorderShipPackageDao;\r\nimport SSU_WHS.Picken.Pickorders.cPickorderEntity;\r\nimport SSU_WHS.Picken.Pickorders.iPickorderDao;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTableEntity;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.iSalesOrderPackingTableDao;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLineEntity;\r\nimport SSU_WHS.Receive.ReceiveLines.iReceiveorderLineDao;\r\nimport SSU_WHS.Return.ReturnOrder.cReturnorderEntity;\r\nimport SSU_WHS.Return.ReturnOrder.iReturnorderDao;\r\nimport SSU_WHS.Return.ReturnorderBarcode.cReturnorderBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderBarcode.iReturnorderBarcodeDao;\r\nimport SSU_WHS.Return.ReturnorderDocument.cReturnorderDocumentEntity;\r\nimport SSU_WHS.Return.ReturnorderDocument.iReturnorderDocumentDao;\r\nimport SSU_WHS.Return.ReturnorderLine.cReturnorderLineEntity;\r\nimport SSU_WHS.Return.ReturnorderLine.iReturnorderLineDao;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.cReturnorderLineBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.iReturnorderLineBarcodeDao;\r\nimport SSU_WHS.ScannerLogon.cScannerLogonEntity;\r\nimport SSU_WHS.ScannerLogon.iScannerLogonDao;\r\n\r\n@Database(entities = {\r\n        cScannerLogonEntity.class,\r\n        cWorkplaceEntity.class,\r\n        cBarcodeLayoutEntity.class,\r\n        cAuthorisationEntity.class,\r\n        cUserEntity.class,\r\n        cBranchEntity.class,\r\n        cSettingsEntity.class,\r\n        cPickorderEntity.class,\r\n        cPickorderLineEntity.class,\r\n        cPickorderLineBarcodeEntity.class,\r\n        cPickorderLinePropertyEntity.class,\r\n        cPickorderLinePropertyValueEntity.class,\r\n        cArticleImageEntity.class,\r\n        cPickorderBarcodeEntity.class,\r\n        cPickorderCompositeBarcodeEntity.class,\r\n        cCommentEntity.class,\r\n        cSalesOrderPackingTableEntity.class,\r\n        cPickorderAddressEntity.class,\r\n        cShippingAgentEntity.class,\r\n        cShippingAgentServiceEntity.class,\r\n        cShippingAgentServiceShippingUnitEntity.class,\r\n        cShippingAgentServiceShipMethodEntity.class,\r\n        cPickorderShipPackageEntity.class,\r\n        cPickorderLineFinishSinglePieceEntity.class,\r\n        cPickorderSettingEntity.class,\r\n        cItemPropertyEntity.class,\r\n        cPropertyGroupEntity.class,\r\n        cPropertyGroupPropertyEntity.class,\r\n        cPickorderLinePackAndShipEntity.class,\r\n        cInventoryorderEntity.class,\r\n        cInventoryorderBinEntity.class,\r\n        cInventoryorderLineEntity.class,\r\n        cInventoryorderBarcodeEntity.class,\r\n        cInventoryorderLineBarcodeEntity.class,\r\n        cIntakeorderEntity.class,\r\n        cIntakeorderMATLineEntity.class,\r\n        cIntakeorderBarcodeEntity.class,\r\n        cIntakeorderMATLineBarcodeEntity.class,\r\n        cReturnorderEntity.class,\r\n        cReturnorderBarcodeEntity.class,\r\n        cReturnorderDocumentEntity.class,\r\n        cReturnorderLineEntity.class,\r\n        cReturnorderLineBarcodeEntity.class,\r\n        cReceiveorderLineEntity.class,\r\n        cMoveorderEntity.class,\r\n        cMoveorderLineEntity.class,\r\n        cMoveorderBarcodeEntity.class,\r\n        cMoveorderLineBarcodeEntity.class,\r\n        cPackagingEntity.class,\r\n        cScannerEntity.class,\r\n        cCustomAuthorisationEntity.class,\r\n        cTranslationEntity.class,\r\n        cCompositeBarcodeEntity.class,\r\n        cCompositeBarcodePropertyEntity.class,\r\n        cPackAndShipOrderEntity.class,\r\n        cPackAndShipOrderLineEntity.class,\r\n        cPackAndShipBarcodeEntity.class,\r\n        cPackAndShipShipmentEntity.class,\r\n        cPackAndShipAddressEntity.class,\r\n        cPackAndShipSettingEntity.class,\r\n        cPackAndShipShippingMethodEntity.class,\r\n        cPackAndShipShippingPackageEntity.class,\r\n        cStockOwnerEntity.class,\r\n        cAuthorizedStockOwnerEntity.class,\r\n        cLabelTemplateEntity.class,\r\n        },version = 150)\r\n\r\n\r\npublic abstract class acScanSuiteDatabase extends RoomDatabase {\r\n    public abstract iScannerLogonDao scannerLogonDao();\r\n    public abstract iSettingsDao settingsDao();\r\n    public abstract iBarcodeLayoutDao barcodeLayoutDao();\r\n    public abstract iAuthorisationDao authorisationDao();\r\n    public abstract iScannerDao scannerDao();\r\n    public abstract iWorkplaceDao workplaceDao();\r\n    public abstract iBranchDao branchDao();\r\n    public abstract iUserDao userDao();\r\n    public abstract iPickorderDao pickorderDao();\r\n    public abstract iPickorderLineDao pickorderLineDao();\r\n    public abstract iPickorderLineBarcodeDao pickorderLineBarcodeDao();\r\n    public abstract iPickorderLinePropertyDao pickorderLinePropertyDao();\r\n    public abstract iPickorderLinePropertyValueDao pickorderLinePropertyValueDao();\r\n    public abstract iArticleImageDao articleImageDao();\r\n    public abstract iPickorderBarcodeDao pickorderBarcodeDao();\r\n    public abstract iPickorderCompositeBarcodeDao pickorderCompositeBarcodeDao();\r\n    public abstract iCommentDao commentDao();\r\n    public abstract iSalesOrderPackingTableDao salesOrderPackingTableDao();\r\n    public abstract iPickorderAddressDao pickorderAddressDao();\r\n    public abstract iPickorderSettingDao pickorderSettingDao();\r\n    public abstract iShippingAgentDao shippingAgentDao();\r\n    public abstract iShippingAgentServiceDao shippingAgentServiceDao();\r\n    public abstract iShippingAgentServiceShippingUnitDao shippingAgentServiceShippingUnitDao();\r\n    public abstract iShippingAgentServiceShipMethodDao shippingAgentServiceShipMethodDao();\r\n    public abstract iPickorderShipPackageDao pickorderShipPackageDao();\r\n    public abstract iItemPropertyDao itemPropertyDao();\r\n    public abstract iPropertyGroupDao propertyGroupDao();\r\n    public abstract iPropertyGroupPropertyDao propertyGroupPropertyDao();\r\n    public abstract iCompositeBarcodeDao compositeBarcodeDao();\r\n    public abstract iCompositeBarcodePropertyDao compositeBarcodePropertyDao();\r\n    public abstract iInventoryorderDao inventoryorderDao();\r\n    public abstract iInventoryorderBinDao inventoryorderBinDao();\r\n    public abstract iInventoryorderLineDao inventoryorderLineDao();\r\n    public abstract iInventoryorderBarcodeDao inventoryorderBarcodeDao();\r\n    public abstract iInventoryorderLineBarcodeDao inventoryorderLineBarcodeDao();\r\n    public abstract iIntakeorderMATLineDao intakeorderMATLineDao();\r\n    public abstract iIntakeorderDao intakeorderDao();\r\n    public abstract iIntakeorderBarcodeDao intakeorderBarcodeDao();\r\n    public abstract iIntakeorderMATLineBarcodeDao intakeorderMATLineBarcodeDao();\r\n    public abstract iReturnorderDao returnorderDao();\r\n    public abstract iReturnorderDocumentDao returnorderDocumentDao();\r\n    public abstract iReturnorderLineDao returnorderLineDao();\r\n    public abstract iReturnorderBarcodeDao returnorderBarcodeDao();\r\n    public abstract iReturnorderLineBarcodeDao returnorderLineBarcodeDao();\r\n    public abstract iReceiveorderLineDao receiveorderLineDao();\r\n    public  abstract iMoveorderDao moveorderDao();\r\n    public  abstract iMoveorderLineDao moveorderLineDao();\r\n    public  abstract iMoveorderLineBarcodeDao moveorderLineBarcodeDao();\r\n    public  abstract iMoveorderBarcodeDao moveorderBarcodeDao();\r\n    public  abstract iPackagingDao packagingDao();\r\n    public  abstract iCustomAuthorisationDao customAuthorisationDao();\r\n    public  abstract iTranslationDao translationDao();\r\n    public  abstract iPackAndShipOrderDao packAndShipOrderDao();\r\n    public  abstract iPackAndShipOrderLineDao packAndShipOrderLineDao();\r\n    public  abstract iPackAndShipSettingDao packAndShipSettingDao();\r\n    public  abstract iPackAndShipBarcodeDao packAndShipBarcodeDao();\r\n    public  abstract iPackAndShipShipmentDao packAndShipShipmentDao();\r\n    public  abstract iPackAndShipAddressDao packAndShipAddressDao();\r\n    public  abstract iPackAndShipShippingMethodDao packAndShipShippingMethodDao();\r\n    public  abstract iPackAndShipShippingPackageDao packAndShipShippingPackageDao();\r\n    public  abstract iStockOwnerDao stockOwnerDao();\r\n    public  abstract iLabelTemplateDao labelTemplateDao();\r\n\r\n    private static acScanSuiteDatabase INSTANCE;\r\n\r\n    public static acScanSuiteDatabase pGetDatabase(final Context context) {\r\n        if (INSTANCE == null) {\r\n            synchronized (acScanSuiteDatabase.class) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(), acScanSuiteDatabase.class, \"SSU_WHS\").fallbackToDestructiveMigration().build();\r\n                }\r\n            }\r\n        }\r\n        return INSTANCE;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(date 1617965361064)
@@ -200,7 +200,7 @@
         cStockOwnerEntity.class,
         cAuthorizedStockOwnerEntity.class,
         cLabelTemplateEntity.class,
-        },version = 150)
+        },version = 152)
 
 
 public abstract class acScanSuiteDatabase extends RoomDatabase {
Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDateAndTime;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cInventoryorderRepository {\r\n    //Region Public Properties\r\n    private final iInventoryorderDao inventoryorderDao;\r\n    private final iInventoryorderBinDao inventoryorderBinDao;\r\n\r\n    private static class InventoryCreateParams {\r\n        String documentStr;\r\n        boolean checkBarcodesBln;\r\n\r\n        InventoryCreateParams(String pvDocumentStr, boolean pvCheckBarcodesBln ) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = pvCheckBarcodesBln;\r\n        }\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    cInventoryorderRepository(Application pvApplication) {\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.inventoryorderDao = db.inventoryorderDao();\r\n        this.inventoryorderBinDao = db.inventoryorderBinDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Order\r\n\r\n    public void insert (cInventoryorderEntity inventoryorderEntity) {\r\n        new mInsertAsyncTask(inventoryorderDao).execute(inventoryorderEntity);\r\n    }\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryOrderEntities) {\r\n        new mInsertAllAsyncTask(inventoryorderDao).execute(pvInventoryOrderEntities);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(inventoryorderDao).execute();\r\n    }\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        InventoryCreateParams inventoryCreateParams = new InventoryCreateParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        try {\r\n            webResultWrs = new mCreateInventoryOrderViaWebserviceAsyncTask().execute(inventoryCreateParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetInventoryordersFromWebserviceAsyncTask().execute(pvSearchTextStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cInventoryorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder( \"SELECT * FROM \" + cDatabase.TABLENAME_INVENTORYORDER);\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) \");\r\n            }\r\n        }\r\n\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Opdrachtnummer ASC\");\r\n\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new cInventoryorderRepository.mGetInventoriesFromDatabaseWithFilterAsyncTask(inventoryorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pHandledViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderHandledViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Lines\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderAddLineViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region BINS\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPossibleBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinAddViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinCloseViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinNotDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinTotalFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new pGetInventoryorderBinTotalFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    //Region Items\r\n\r\n    public cWebresult pAddUnkownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderUnknownItemAddViaWebserviceAsyncTask().execute(pvBarcodeScan).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderERPItemAddViaWebserviceAsyncTask().execute(pvArticleBarcode).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Line Barcodes\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLineBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Barcodes\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Comments\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Endregion Public Methods\r\n\r\n    //Region Orders\r\n    private static class mInsertAsyncTask extends AsyncTask<cInventoryorderEntity, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cInventoryorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAllAsyncTask extends AsyncTask<List<cInventoryorderEntity>, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @SafeVarargs\r\n        @Override\r\n        protected final Void doInBackground(final List<cInventoryorderEntity>... params) {\r\n            mAsyncTaskDao.insertAll(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mCreateInventoryOrderViaWebserviceAsyncTask extends AsyncTask<InventoryCreateParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(InventoryCreateParams... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.IVS.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_INVENTORYBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                new cWebresult();\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryordersFromWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            try {\r\n                new cWebresult();\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoriesFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cInventoryorderEntity>> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mGetInventoriesFromDatabaseWithFilterAsyncTask(iInventoryorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cInventoryorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredInventoryOrders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderHandledViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(cWarehouseorder.WorkflowInventoryStepEnu.InventoryHandled);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYHANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Lines\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetLineBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderAddLineViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo6Pin.setValue(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo7Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo8Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region BINS\r\n    private static class mGetBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPossibleBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERPOSSIBLEBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinNotDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinNotDone();\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinDone();\r\n        }\r\n    }\r\n\r\n    private static class pGetInventoryorderBinTotalFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        pGetInventoryorderBinTotalFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinTotal();\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinAddViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODE;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADD_BIN, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinCloseViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo4Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo5Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBINCLOSE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Items\r\n    private static class mInventoryorderUnknownItemAddViaWebserviceAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cBarcodeScan... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(\"UNKNOWN\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorder.currentInventoryOrder.getUnknownVariantCounterInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeOriginalStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(cText.pStringToIntegerInt(params[0].getBarcodeTypeStr()));\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(false);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(1);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(\"???\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderERPItemAddViaWebserviceAsyncTask extends AsyncTask<cArticleBarcode, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cArticleBarcode... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cArticle.currentArticle.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cArticle.currentArticle.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(params[0].getBarcodeTypeInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(params[0].isUniqueBarcodeBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].getQuantityPerUnitOfMeasureDbl());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(params[0].getUnitOfMeasureStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Barcodes\r\n    private static class mGetBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Comments\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(date 1617964993193)
@@ -29,6 +29,8 @@
 import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
 import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;
 import SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;
+import SSU_WHS.Picken.Pickorders.cPickorder;
+import SSU_WHS.Picken.Pickorders.cPickorderRepository;
 import SSU_WHS.Webservice.cWebresult;
 import SSU_WHS.Webservice.cWebserviceDefinitions;
 import nl.icsvertex.scansuite.R;
@@ -439,6 +441,41 @@
         return webResultWrs;
     }
 
+    //Region Propertys
+    public cWebresult pGetLinePropertysViaWebserviceWrs() {
+
+        List<String> resultObl = new ArrayList<>();
+        cWebresult webResultWrs = new cWebresult();
+
+        try {
+            webResultWrs = new cInventoryorderRepository.mGetPropertysViaWebserviceAsyncTask().execute().get();
+        } catch (ExecutionException | InterruptedException e) {
+            webResultWrs.setResultBln(false);
+            webResultWrs.setSuccessBln(false);
+            resultObl.add(e.getLocalizedMessage());
+            webResultWrs.setResultObl(resultObl);
+            e.printStackTrace();
+        }
+        return webResultWrs;
+    }
+
+    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {
+
+        List<String> resultObl = new ArrayList<>();
+        cWebresult webResultWrs = new cWebresult();
+
+        try {
+            webResultWrs = new cInventoryorderRepository.mGetPropertyValuesViaWebserviceAsyncTask().execute().get();
+        } catch (ExecutionException | InterruptedException e) {
+            webResultWrs.setResultBln(false);
+            webResultWrs.setSuccessBln(false);
+            resultObl.add(e.getLocalizedMessage());
+            webResultWrs.setResultObl(resultObl);
+            e.printStackTrace();
+        }
+        return webResultWrs;
+    }
+
     //Endregion Public Methods
 
     //Region Orders
@@ -1142,4 +1179,68 @@
         }
     }
 
+    //Region Properties
+    //Region Propertys
+    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
+        @Override
+        protected cWebresult doInBackground(String... params) {
+            cWebresult webresult = new cWebresult();
+            try {
+                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
+
+                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
+                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
+                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
+                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
+
+                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
+                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
+                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
+                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
+
+                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
+                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
+                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
+                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
+
+                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);
+            } catch (JSONException e) {
+                webresult.setSuccessBln(false);
+                webresult.setResultBln(false);
+            }
+            return webresult;
+        }
+    }
+
+    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
+        @Override
+        protected cWebresult doInBackground(String... params) {
+            cWebresult webresult = new cWebresult();
+            try {
+                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
+
+                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
+                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
+                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
+                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
+
+                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
+                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
+                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
+                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
+
+                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
+                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
+                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
+                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
+
+                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);
+            } catch (JSONException e) {
+                webresult.setSuccessBln(false);
+                webresult.setResultBln(false);
+            }
+            return webresult;
+        }
+    }
+
 }
Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class cInventoryorder {\r\n\r\n    private final String orderNumberStr;\r\n    public String getOrderNumberStr() {\r\n        return orderNumberStr;\r\n    }\r\n\r\n    private final String orderTypeStr;\r\n    public String getOrderTypeStr() {\r\n        return orderTypeStr;\r\n    }\r\n\r\n    private final int numberOfBinsInt;\r\n    public int getNumberOfBinsInt() {\r\n        return numberOfBinsInt;\r\n    }\r\n\r\n    private final String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {\r\n        return assignedUserIdStr;\r\n    }\r\n\r\n    private final String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {\r\n        return currentUserIdStr;\r\n    }\r\n\r\n    private String stockownerStr;\r\n    public String getStockownerStr() {\r\n        return stockownerStr;\r\n    }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() {\r\n        return statusInt;\r\n    }\r\n\r\n    private final boolean invAmountManualBln;\r\n    public boolean isInvAmountManualBln() {\r\n        return invAmountManualBln;\r\n    }\r\n\r\n    private final boolean invBarcodeCheckBln;\r\n    public boolean isInvBarcodeCheckBln() {\r\n        return invBarcodeCheckBln;\r\n    }\r\n\r\n    private final boolean invAddExtraBinBln;\r\n    public boolean isInvAddExtraBinBln() {\r\n        return invAddExtraBinBln;\r\n    }\r\n\r\n    private final String externalReferenceStr;\r\n    public String getExternalReferenceStr() {\r\n        return externalReferenceStr;\r\n    }\r\n\r\n    private final int sourceDocumentInt;\r\n    private int getSourceDocumentInt() { return sourceDocumentInt; }\r\n\r\n    private final String documentStr;\r\n    public String getDocumentStr() {\r\n        return documentStr;\r\n    }\r\n\r\n    private final boolean inventoryWithPictureBln;\r\n    public boolean isInventoryWithPictureBln() {\r\n        return inventoryWithPictureBln;\r\n    }\r\n\r\n    private final boolean inventoryWithPicturePrefetchBln;\r\n    private boolean isInventoryWithPicturePrefetchBln() {\r\n        return inventoryWithPicturePrefetchBln;\r\n    }\r\n\r\n    public Boolean isGeneratedBln() {\r\n        return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n    }\r\n\r\n    public int unknownVariantCounterInt = 0;\r\n    public int getUnknownVariantCounterInt() {\r\n        return unknownVariantCounterInt;\r\n    }\r\n\r\n    private final cInventoryorderEntity inventoryorderEntity;\r\n\r\n    private cInventoryorderViewModel getInventoryorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n    }\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    public List<cComment> commentsObl() {\r\n        return cComment.allCommentsObl;\r\n    }\r\n    public List<cInventoryorderBarcode> barcodesObl () {return  cInventoryorderBarcode.allInventoryorderBarcodesObl;}\r\n    private List<cInventoryorderLine> linesObl() {return  cInventoryorderLine.allLinesObl;}\r\n    private List<cArticleImage> imagesObl()  {\r\n        return  cArticleImage.allImages;\r\n    }\r\n\r\n    private static List<cInventoryorder> allCachedOrdersObl;\r\n    public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){\r\n\r\n        if (pvRefreshBln) {\r\n             cInventoryorder.allCachedOrdersObl = null;\r\n        }\r\n\r\n        if (cInventoryorder.allCachedOrdersObl != null) {\r\n            return  cInventoryorder.allCachedOrdersObl;\r\n        }\r\n\r\n        cInventoryorder.allCachedOrdersObl  = new ArrayList<>();\r\n\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        List<cInventoryorderEntity> hulpObl  =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), false);\r\n\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpObl) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            cInventoryorder.allCachedOrdersObl.add(inventoryorder);\r\n        }\r\n\r\n        return  cInventoryorder.allCachedOrdersObl;\r\n\r\n\r\n    }\r\n\r\n    private static List<String> binsObl;\r\n\r\n    public static cInventoryorder currentInventoryOrder;\r\n\r\n    //Region Public Properties\r\n\r\n    //Region Constructor\r\n\r\n    public cInventoryorder(JSONObject pvJsonObject) {\r\n\r\n        this.inventoryorderEntity = new cInventoryorderEntity(pvJsonObject);\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr()) ;\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n    }\r\n\r\n    public cInventoryorder(cInventoryorderEntity pvInventoryorderEntity) {\r\n\r\n        this.inventoryorderEntity = pvInventoryorderEntity;\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt =  cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr());\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Orders\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderViewModel().insert(this.inventoryorderEntity);\r\n        return true;\r\n    }\r\n\r\n    public static Boolean pCreateInventoryOrderViaWebserviceBln(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        cWebresult WebResult;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(WebResult.getResultDtt().get(0));\r\n                inventoryorder.pInsertInDatabaseBln();\r\n                cInventoryorder.currentInventoryOrder = inventoryorder;\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS);\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static boolean pGetInventoryOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorder.mTruncateTable();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            List<cInventoryorderEntity> insertObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(jsonObject);\r\n                insertObl.add(inventoryorder.inventoryorderEntity);\r\n            }\r\n\r\n            //Batch insert in database\r\n            cInventoryorder.mInsertAllInDatabase(insertObl);\r\n\r\n            //Make sure memory is filled\r\n            cInventoryorder.allInventoryOrdersObl(true);\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS);\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n            ignoreBusyBln = true;\r\n        }\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(),\r\n                this.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvStepCodeEnu.toString(),\r\n                pvWorkFlowStepInt,\r\n                ignoreBusyBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() > 0 && ! Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getUsernameStr())) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln()&& Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        cWebresult Webresult;\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvStepCodeEnu.toString(), pvWorkFlowStepInt);\r\n\r\n        return Webresult.getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n    public void pDeleteDetails() {\r\n        cInventoryorderLine.pTruncateTableBln();\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorderBarcode.pTruncateTableBln();\r\n        cInventoryorderLineBarcode.pTruncateTableBln();\r\n    }\r\n\r\n    public cResult pOrderHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n\r\n        cWebresult webresult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        webresult =  inventoryorderViewModel.pHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n\r\n    }\r\n\r\n    public static List<cInventoryorder> pGetInventoriesWithFilterFromDatabasObl() {\r\n\r\n        List<cInventoryorder> resultObl = new ArrayList<>();\r\n        List<cInventoryorderEntity> hulpResultObl;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        hulpResultObl =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpResultObl ) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            resultObl.add(inventoryorder);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public  boolean pCheckBarcodeWithLineBarcodesBln(cBarcodeScan pvBarcodeScan){\r\n\r\n        //If scanned value matches the current barcodeStr, then we have a match\r\n        if (pvBarcodeScan.getBarcodeOriginalStr().equalsIgnoreCase(cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr()) ||\r\n            pvBarcodeScan.getBarcodeFormattedStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeWithoutCheckDigitStr()) ) {\r\n            //We have a match, so leave\r\n            return  true;\r\n        }\r\n\r\n        //Check if this is a barcodeStr we already know\r\n        cInventoryorderBarcode inventoryorderBarcode = cInventoryorder.currentInventoryOrder.pGetOrderBarcode(pvBarcodeScan);\r\n\r\n        //We scanned a barcodeStr unknown to the order\r\n        if (inventoryorderBarcode == null) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr for a different article\r\n        if (!inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) ||\r\n            ! inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLine.currentInventoryOrderLine.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode = inventoryorderLineBarcode;\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        //Scanned barcodeStr is correct, but we need to create a line barcodeStr\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode =  cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(inventoryorderBarcode.getBarcodeStr(),inventoryorderBarcode.getQuantityPerUnitOfMeasureDbl(), true);\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n        return  true;\r\n\r\n    }\r\n\r\n    private static  void mTruncateTable() {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.deleteAll();\r\n    }\r\n\r\n    //End Region Orders\r\n\r\n    //Region Lines\r\n\r\n    public boolean pGetLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderLine.allLinesObl = null;\r\n            cInventoryorderLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n\r\n        WebResult = getInventoryorderViewModel().pGetLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderLine.allLinesObl == null) {\r\n                cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderLineEntity> importObl = new ArrayList<>();\r\n            List<cInventoryorderLine> objectObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cInventoryorderLine inventoryorderLine = new cInventoryorderLine(jsonObject);\r\n\r\n                if (inventoryorderLine.getQuantityHandledAllScannersDbl() > inventoryorderLine.getQuantityDbl()) {\r\n                    inventoryorderLine.quantityHandledDbl = inventoryorderLine.getQuantityHandledAllScannersDbl();\r\n                }\r\n\r\n\r\n                importObl.add(inventoryorderLine.inventoryorderLineEntity);\r\n                objectObl.add((inventoryorderLine));\r\n\r\n                if (! inventoryorderLine.getHandeledTimeStampStr().isEmpty()) {\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin  =   cInventoryorder.currentInventoryOrder.pGetBin(inventoryorderLine.getBinCodeStr());\r\n                    if ( cInventoryorderBin.currentInventoryOrderBin == null) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                        cInventoryorderBin.currentInventoryOrderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.InventoryDone;\r\n                    }\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin.pUpdateStatusAndTimeStampInDatabase();\r\n                    cInventoryorderBin.currentInventoryOrderBin = null;\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderLine.pInsertAllInDatabase(objectObl,importObl);\r\n\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddLineBln() {\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pAddLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderLine.currentInventoryOrderLine= new cInventoryorderLine(WebResult.getResultDtt().get(0));\r\n                cInventoryorderLine.currentInventoryOrderLine.pInsertInDatabaseBln();\r\n                cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr(),cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl(), false);\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public List<cInventoryorderLine> pGetLinesForBinObl(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderLine> resultObl = new ArrayList<>();\r\n        for (cInventoryorderLine inventoryorderLine : cInventoryorder.currentInventoryOrder.linesObl()) {\r\n            if (inventoryorderLine.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                resultObl.add((inventoryorderLine));\r\n            }\r\n        }\r\n\r\n        if (resultObl.size() > 1) {\r\n            Collections.reverse(resultObl);\r\n        }\r\n\r\n        return resultObl;\r\n    }\r\n\r\n    public Double pGetTotalItemCountDbl() {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetTotalCountDbl();\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetItemCountForBinDbl(String pvBincodeStr) {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetCountForBinCodeDbl(pvBincodeStr);\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public cInventoryorderLine pGetLineForArticleAndBin() {\r\n\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            //Check if BIN matches current BIN\r\n            if (! inventoryorderLine.getBinCodeStr().equalsIgnoreCase(   cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr())) {\r\n                continue;\r\n            }\r\n\r\n            //Check if item matches scanned item\r\n            if (inventoryorderLine.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) &&\r\n                    inventoryorderLine.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n                return  inventoryorderLine;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pGetOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all bins for current order, if webservice error then stop\r\n        if (!this.mGetBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.pGetLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_lines_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.mGetPossibleBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_possible_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!this.pGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all barcodes\r\n        if (!this.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all inventorylinebarcodes\r\n        if (!this.mGetLineBarcodesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all article images, only if neccesary\r\n        if (!this.mGetArticleImagesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    private cInventoryorderLine mGetLineWithLineNo(Long pvLineNoLng) {\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            if (cText.pIntToStringStr(inventoryorderLine.getLineNoInt()).equalsIgnoreCase(cText.pLongToStringStr(pvLineNoLng))) {\r\n                return  inventoryorderLine;\r\n            }\r\n\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Lines\r\n\r\n    //Region BINS\r\n\r\n    private boolean mGetBinsViaWebserviceBln() {\r\n\r\n        cInventoryorderBin.allInventoryorderBinsObl = null;\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorder.binsObl = new ArrayList<>();\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            List<cInventoryorderBinEntity> insertObl = new ArrayList<>();\r\n            List<cInventoryorderBin> closedBinsObl = new ArrayList<>();\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n\r\n                insertObl.add(inventoryorderBin.inventoryorderBinEntity);\r\n\r\n                if (inventoryorderBin.getStatusInt() ==  cWarehouseorder.InventoryBinStatusEnu.InventoryDoneOnServer && !cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                    closedBinsObl.add(inventoryorderBin);\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderBin.pInsertAllInDatabase(insertObl);\r\n\r\n            //Close all BINS in database after they got inserted\r\n            for (cInventoryorderBin inventoryorderBin : closedBinsObl) {\r\n                inventoryorderBin.pCloseBln(false);\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetPossibleBinsViaWebserviceBln() {\r\n\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetPossibleBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n\r\n                if (cInventoryorder.binsObl.contains(inventoryorderBin.getBinCodeStr())) {\r\n                    continue;\r\n                }\r\n\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n                inventoryorderBin.pInsertInDatabaseBln();\r\n                inventoryorderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.New;\r\n                inventoryorderBin.pUpdateStatusAndTimeStampInDatabase();\r\n\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsNotDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsNotDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsTotalFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsTotalFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public cInventoryorderBin pGetBin(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderBin> hulpObl;\r\n\r\n        hulpObl = this.pGetBinsTotalFromDatabasObl();\r\n\r\n        if (hulpObl == null || hulpObl.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        for (cInventoryorderBin inventoryorderBin : hulpObl) {\r\n            if (inventoryorderBin.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                return  inventoryorderBin;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cInventoryorderBin pAddInventoryBin(cBranchBin pvBranchBin) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddBinViaWebserviceWrs(pvBranchBin.getBinCodeStr());\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBin InventoryorderBin = new cInventoryorderBin(WebResult.getResultDtt().get(0));\r\n                InventoryorderBin.pInsertInDatabaseBln();\r\n                return  InventoryorderBin;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  null;\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    //End Region BINS\r\n\r\n    //Region Barcodes\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderBarcode.allInventoryorderBarcodesObl = null;\r\n            cInventoryorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pGetBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln() ){\r\n\r\n            if (cInventoryorderBarcode.allInventoryorderBarcodesObl == null) {\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderBarcodeEntity> inventoryorderEntities = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject :WebResult.getResultDtt() ) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(jsonObject);\r\n                inventoryorderEntities.add(inventoryorderBarcode.inventoryorderBarcodeEntity);\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl.add(inventoryorderBarcode);\r\n            }\r\n\r\n            cInventoryorderBarcode.pInsertAllInDatabase(inventoryorderEntities);\r\n            return true;\r\n        }\r\n\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddUnkownBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cInventoryorder.currentInventoryOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(WebResult.getResultDtt().get(0));\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if (cArticle.currentArticle == null) {\r\n            return false;\r\n        }\r\n\r\n        //Get barcodes for this article\r\n        if (!cArticle.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        //Search for the scanned barcodeStr in the article barcodes\r\n        cArticleBarcode matchedArticleBarcode = null;\r\n        for (cArticleBarcode articleBarcode : cArticle.currentArticle.barcodesObl) {\r\n            if (articleBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    articleBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                matchedArticleBarcode = articleBarcode;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //We didn't find a match, so no use in adding the line\r\n        if (matchedArticleBarcode == null) {\r\n            return  false;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddERPItemViaWebserviceWrs(matchedArticleBarcode);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            for (cArticleBarcode articleBarcode :  cArticle.currentArticle.barcodesObl) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(articleBarcode);\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n\r\n                if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                        inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                    cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Barcodes\r\n\r\n    //Region Line Barcode\r\n\r\n    private boolean mGetLineBarcodesViaWebserviceBln() {\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = null;\r\n            cInventoryorderLineBarcode.pTruncateTableBln();\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pGetLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<cInventoryorderLineBarcodeEntity> insertObl = new ArrayList<>();\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode(jsonObject);\r\n                insertObl.add((inventoryorderLineBarcode.inventoryorderLineBarcodeEntity));\r\n\r\n                //Search for line that belongs to this barcodeStr\r\n                cInventoryorderLine inventoryorderLine = cInventoryorder.currentInventoryOrder.mGetLineWithLineNo(inventoryorderLineBarcode.getLineNoLng());\r\n\r\n                //If we can't find it, skip this\r\n                if (inventoryorderLine == null) {\r\n                    continue;\r\n                }\r\n\r\n                //Add barcodeStr to line\r\n                inventoryorderLine.pAddLineBarcode(inventoryorderLineBarcode.getBarcodeStr(),inventoryorderLineBarcode.getQuantityhandledDbl(), false);\r\n\r\n            }\r\n\r\n            cInventoryorderLineBarcode.pInsertAllInDatabase(insertObl);\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Line Barcode\r\n\r\n    //Region Barcode\r\n\r\n    public cInventoryorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderBarcode inventoryorderBarcode : this.barcodesObl()) {\r\n\r\n            if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr())) {\r\n                return  inventoryorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Barcode\r\n\r\n    //Region Images\r\n\r\n    private boolean mGetArticleImagesViaWebserviceBln() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()  || !cInventoryorder.currentInventoryOrder.isInventoryWithPicturePrefetchBln()) {\r\n            return  true;\r\n        }\r\n\r\n\r\n            cArticleImage.allImages = null;\r\n            cArticleImage.pTruncateTableBln();\r\n\r\n\r\n        if (this.imagesObl()  != null) {\r\n            return  true;\r\n        }\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  false;\r\n        }\r\n\r\n        List<String> itemNoAndVariantCodeObl;\r\n        itemNoAndVariantCodeObl = new ArrayList<>();\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n            String itemNoAndVariantCodeStr = inventoryorderLine.getItemNoStr() + \";\" + inventoryorderLine.getVariantCodeStr();\r\n\r\n            if (!itemNoAndVariantCodeObl.contains(itemNoAndVariantCodeStr)) {\r\n                itemNoAndVariantCodeObl.add(itemNoAndVariantCodeStr);\r\n            }\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        WebResult =  articleImageViewModel.pGetArticleImagesFromWebserviceWrs(itemNoAndVariantCodeObl);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            cArticleImage.allImages = new ArrayList<>();\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cArticleImage articleImage = new cArticleImage(jsonObject);\r\n\r\n                if ( !cArticleImage.allImages.contains(articleImage)) {\r\n                    articleImage.pInsertInDatabaseBln();\r\n                    cArticleImage.allImages.add((articleImage));\r\n                }\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEIMAGESMULTIPLE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    //End Region Images\r\n\r\n    //Region Comments\r\n\r\n    public boolean pGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n        cWebresult webresult;\r\n        webresult = getInventoryorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln()&& webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            List<JSONObject> myList = webresult.getResultDtt();\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (cInventoryorder.currentInventoryOrder.commentsObl() == null || cInventoryorder.currentInventoryOrder.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    private static  void mInsertAllInDatabase(List<cInventoryorderEntity> pvInventoryOrderEntityObl ) {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.insertAll (pvInventoryOrderEntityObl);\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n        for (JSONObject jsonObject : pvResultDtt) {\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //End Region Comments\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(date 1617965427985)
@@ -2,10 +2,12 @@
 
 import androidx.lifecycle.ViewModelProvider;
 
+import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.LinkedHashMap;
 import java.util.List;
 
 import ICS.Utils.Scanning.cBarcodeScan;
@@ -20,6 +22,8 @@
 import SSU_WHS.Basics.ArticleImages.cArticleImage;
 import SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;
 import SSU_WHS.Basics.BranchBin.cBranchBin;
+import SSU_WHS.Basics.PropertyGroup.cPropertyGroup;
+import SSU_WHS.Basics.PropertyGroup.cPropertyGroupViewModel;
 import SSU_WHS.Basics.Users.cUser;
 import SSU_WHS.General.Comments.cComment;
 import SSU_WHS.General.Warehouseorder.cWarehouseorder;
@@ -33,6 +37,7 @@
 import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
 import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
 import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;
+import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValue;
 import SSU_WHS.Webservice.cWebresult;
 import SSU_WHS.Webservice.cWebserviceDefinitions;
 import nl.icsvertex.scansuite.R;
@@ -122,6 +127,7 @@
         return unknownVariantCounterInt;
     }
 
+    public  LinkedHashMap<Integer, List<JSONObject>>  itemProperyDataObl;
     private final cInventoryorderEntity inventoryorderEntity;
 
     private cInventoryorderViewModel getInventoryorderViewModel() {
Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.lifecycle.AndroidViewModel;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Webservice.cWebresult;\r\n\r\npublic class cInventoryorderViewModel extends AndroidViewModel {\r\n    //Region Public Properties\r\n    private cInventoryorderRepository Repository;\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderViewModel(Application pvApplication) {\r\n        super(pvApplication);\r\n        this.Repository = new cInventoryorderRepository(pvApplication);\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n    public void insert(cInventoryorderEntity pvInventoryorderEntity) {this.Repository.insert(pvInventoryorderEntity);}\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryorderEntities) {this.Repository.insertAll(pvInventoryorderEntities);}\r\n\r\n    public void deleteAll() {this.Repository.deleteAll();}\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {return this.Repository.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);}\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {return this.Repository.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);}\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesWithFilterFromDatabaseObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {return this.Repository.pGetInventoriesFromDatabaseWithFilterObl(pvCurrentUserStr, pvUseFiltersBln);}\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pAddBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pCloseBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pAddUnknownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {return this.Repository.pAddUnkownItemViaWebserviceWrs(pvBarcodeScan);}\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {return this.Repository.pAddERPItemViaWebserviceWrs(pvArticleBarcode);}\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {return this.Repository.pAddLineViaWebserviceWrs();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsNotDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinNotDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsTotalFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinTotalFromDatabaseObl();}\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs( ) {return this.Repository.pGetLinesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs( ) {return this.Repository.pGetBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs( ) {return this.Repository.pGetPossibleBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetCommentsFromWebserviceWrs() {return this.Repository.pGetCommentsFromWebservice(); }\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {return this.Repository.pGetBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {return this.Repository.pGetLineBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(date 1617964993222)
@@ -66,4 +66,8 @@
 
     public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}
 
+    public cWebresult pGetLinePropertysViaWebserviceWrs() {return this.Repository.pGetLinePropertysViaWebserviceWrs(); }
+
+    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {return this.Repository.pGetLinePropertyValuesViaWebserviceWrs(); }
+
 }
Index: app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617964993173)
+++ app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617964993173)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/inventoryorderlineItemPropertyInputContainer"
+    tools:context=".Activities.Inventory.InventoryorderLineItemPropertyInputActvity"
+    style="@style/defaultScreen"
+    android:background="@color/colorBart">
+    <include layout="@layout/toolbar_default" />
+    <include layout="@layout/default_articleinfo_compact"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_margin="@dimen/default_margin"
+        app:layout_constraintTop_toBottomOf="@id/toolbar"
+        />
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/itemPropertyRecyclerview"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_margin="@dimen/default_margin"
+        android:scrollbars="vertical"
+        app:layout_constraintTop_toBottomOf="@id/articleInfoCompactContainer"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintBottom_toTopOf="@id/imageButtonDone"
+        />
+    <androidx.appcompat.widget.AppCompatImageButton
+        android:id="@+id/imageButtonDone"
+        style="@style/smallButton"
+        app:srcCompat="@drawable/ic_check_black_24dp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        />
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Inventory;\r\n\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.InputType;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class InventoryArticleActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    //End Region Public Properties\r\n\r\n    //Region Private\r\n\r\n    private  ConstraintLayout inventoryArticleDetailContainer;\r\n\r\n    private Toolbar toolbar;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n    private  TextView articleDescriptionText;\r\n    private  TextView articleDescription2Text;\r\n    private  TextView articleItemText;\r\n    private  TextView articleBarcodeText;\r\n    private  ImageView articleThumbImageView;\r\n\r\n    private TextView binText;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n\r\n    private  int inventoryCounterMinusHelperInt;\r\n    private  int inventoryCounterPlusHelperInt;\r\n    private  Handler minusHandler;\r\n    private  Handler plusHandler;\r\n\r\n    private  ImageView imageButtonDone;\r\n    private  ImageButton imageButtonBarcode;\r\n    private ImageView imageButtonNoInputPropertys;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public InventoryArticleActivity() {\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_inventoryarticle);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n            super.onPause();\r\n\r\n            if (cAppExtension.activity instanceof  InventoryArticleActivity) {\r\n                cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            }\r\n             LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_intakeactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n\r\n//        invalidateOptionsMenu();\r\n\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(true);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mStartInventoryBINActivity();\r\n                return true;\r\n\r\n            case R.id.item_print_item:\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.message_scan_article));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.inventoryArticleDetailContainer = findViewById(R.id.inventoryArticleDetailContainer);\r\n\r\n        this.toolbar =  findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.binText = findViewById(R.id.binText);\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_inventory);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        String subTitleStr = cInventoryorder.currentInventoryOrder.getOrderNumberStr();\r\n        this.toolbarSubTitle.setText(subTitleStr);\r\n        this.toolbarSubTitle.setSelected(true);\r\n\r\n        setSupportActionBar(this.toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInvAmountManualBln()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        this.inventoryCounterPlusHelperInt = 0;\r\n        this. inventoryCounterMinusHelperInt = 0;\r\n\r\n        this.articleDescriptionText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n        this.articleItemText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());\r\n\r\n        this.binText.setText(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n\r\n        this.mShowQuantityInfo();\r\n        this.mShowArticleImage();\r\n        this.mShowBarcodeInfo();\r\n        this.mHideArticleInfo();\r\n\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n       this.mSetDoneListener();\r\n\r\n        if (cSetting.INV_AMOUNT_MANUAL()) {\r\n            this.mSetNumberListener();\r\n            this.mSetImageButtonBarcodeListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(final cBarcodeScan pvBarcodeScan){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        //Only ARTICLE scans are allowed\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n            mDoUnknownScan(cAppExtension.context.getString(R.string.error_article_scan_mandatory));\r\n            return;\r\n        }\r\n\r\n        //Check if the scanned value belongs to this line\r\n        if (! cInventoryorder.currentInventoryOrder.pCheckBarcodeWithLineBarcodesBln(pvBarcodeScan)) {\r\n\r\n            //Keep the scan, so BIN activity can handle it\r\n            InventoryorderBinActivity.barcodeScanToHandle = pvBarcodeScan;\r\n\r\n            //Close this activity, we are done with the current article\r\n            this.mHandleDone();\r\n           return;\r\n        }\r\n\r\n        this.mShowBarcodeInfo();\r\n\r\n        //Try to raise quantityDbl\r\n        this.mTryToChangeInventoryQuantity(true, false,cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() );\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mTryToChangeInventoryQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n\r\n                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),\r\n                                                                          cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );\r\n\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n            } else {\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;\r\n            }\r\n\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n            return;\r\n        }\r\n\r\n        //negative\r\n\r\n        //Check if value already is zero\r\n        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {\r\n\r\n            //If we have a decimal, correct it to zero\r\n            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {\r\n                pvAmountDbl = 0;\r\n                pvAmountFixedBln = true;\r\n\r\n            } else {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (pvAmountDbl < 0) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n        if (pvAmountFixedBln) {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n        }else {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;\r\n        }\r\n\r\n        //Change quantityDbl in activity\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n    }\r\n\r\n    private  void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cInventoryorderLine.currentInventoryOrderLine.articleImage == null || cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap());\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo() {\r\n\r\n        this.quantityText.setImeOptions(EditorInfo.IME_ACTION_DONE);\r\n        this.quantityText.setSelectAllOnFocus(true);\r\n        this.quantityText.requestFocus();\r\n        this.quantityText.setSingleLine();\r\n        this.quantityText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_TEXT_VARIATION_NORMAL);\r\n        this.quantityText.setCursorVisible(false);\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n        this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (!cSetting.INV_AMOUNT_MANUAL()) {\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n            cUserInterface.pDoNope(this.quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() > 1) {\r\n\r\n            //Try to switch to another barcode for the same article, so the user doesn't have to manually\r\n            cInventoryorderBarcode inventoryorderBarcode = cInventoryorderBarcode.getSingleQuantityBarcodeForItemAndVariant(cInventoryorderBarcode.currentInventoryOrderBarcode);\r\n            if (inventoryorderBarcode != null) {\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n            }\r\n            else\r\n            {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n\r\n    private  void mHandleDone() {\r\n\r\n        //Try to save the line to the database\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pSaveLineViaWebserviceBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_line_save_failed),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        //Change quantityDbl handled in database\r\n        cInventoryorderLine.currentInventoryOrderLine.pUpdateQuantityInDatabase();\r\n\r\n        cUserInterface.pHideGettingData();\r\n        this.mResetCurrents();\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    private void mDoUnknownScan(String pvErrorMessageStr) {\r\n        cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer,pvErrorMessageStr,null,true);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(this.inventoryArticleDetailContainer);\r\n        constraintSetSpace.connect(this.articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(this.inventoryArticleDetailContainer);\r\n\r\n    }\r\n\r\n    private  void mShowBarcodeInfo(){\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode != null) {\r\n            this.articleBarcodeText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getUnitOfMeasureInfoStr());\r\n        } else {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.message_unknown_barcode));\r\n        }\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl() == null || cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 1) {\r\n                    pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLine.currentInventoryOrderLine.barcodesObl().get(0).getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEFRAGMENT_LIST_TAG);\r\n    }\r\n\r\n    private void mStartInventoryBINActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        InventoryorderBinActivity.busyBln = false;\r\n\r\n        final Intent intent = new Intent(cAppExtension.context, InventoryorderBinActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n            cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mResetCurrents(){\r\n        cInventoryorderLine.currentInventoryOrderLine = null;\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = null;\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode = null;\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityHandledDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,99999);\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    inventoryCounterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n                mTryToChangeInventoryQuantity(true, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    inventoryCounterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n                mTryToChangeInventoryQuantity(false, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mSetDoneListener(){\r\n\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mHandleDone();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n        this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n    }\r\n\r\n    //End Region Private Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(date 1617965495040)
@@ -48,6 +48,9 @@
 import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
 import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
 import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
+import SSU_WHS.Picken.PickorderLines.cPickorderLine;
+import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
+import nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;
 import nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;
@@ -358,6 +361,9 @@
            return;
         }
 
+
+
+
         this.mShowBarcodeInfo();
 
         //Try to raise quantityDbl
@@ -761,5 +767,6 @@
         this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);
     }
 
+
     //End Region Private Methods
 }
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch	(date 1617964988832)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch	(date 1617964988832)
@@ -0,0 +1,2329 @@
+Index: app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package SSU_WHS.Picken.Pickorders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\nimport org.ksoap2.serialization.SoapObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyRepository;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.Shipment.cShipment;\r\nimport SSU_WHS.Picken.Storement.cStorement;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cPickorderRepository {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    private final iPickorderDao pickorderDao;\r\n    private final iPickorderLineDao pickorderLineDao;\r\n\r\n    private static class PickorderStepHandledParams {\r\n        String userStr;\r\n        String languageStr;\r\n        String branchStr;\r\n        String orderNumberStr;\r\n        String deviceStr;\r\n        String workPlaceStr;\r\n        String workflowStepcodeStr;\r\n        Integer workflowStepInt;\r\n        String cultureStr;\r\n\r\n        PickorderStepHandledParams(String pvUserStr, String pvLanguageStr, String pvBranchStr, String pvOrderNumberStr, String pvDeviceStr, String pvWorkplaceStr, String pvWorkflowStepCodeStr, Integer pvWorkflowStepStr, String pvCultureStr) {\r\n            this.userStr = pvUserStr;\r\n            this.languageStr = pvLanguageStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.deviceStr = pvDeviceStr;\r\n            this.workPlaceStr = pvWorkplaceStr;\r\n            this.workflowStepcodeStr = pvWorkflowStepCodeStr;\r\n            this.workflowStepInt = pvWorkflowStepStr;\r\n            this.cultureStr = pvCultureStr;\r\n        }\r\n    }\r\n\r\n    private static class PickorderUpdateWorkplaceParams {\r\n        String user;\r\n        String branch;\r\n        String ordernumber;\r\n        String workplace;\r\n\r\n        PickorderUpdateWorkplaceParams(String pvUserStr, String pvBranchStr, String pvOrdernumberStr, String pvWorkplaceStr) {\r\n            this.user = pvUserStr;\r\n            this.branch = pvBranchStr;\r\n            this.ordernumber = pvOrdernumberStr;\r\n            this.workplace = pvWorkplaceStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdatePickorderCurrentLocationLocalParams {\r\n        String orderNumberStr;\r\n        String currentLocationStr;\r\n\r\n        UpdatePickorderCurrentLocationLocalParams(String pvOrderNumberStr, String pvCurrentLocationStr) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.currentLocationStr = pvCurrentLocationStr;\r\n        }\r\n    }\r\n\r\n    private static class UpdateSelectedLocalParams {\r\n        String orderNumberStr;\r\n        Boolean selectedBln;\r\n\r\n        UpdateSelectedLocalParams(String pvOrderNumberStr, Boolean pvSelectedBln) {\r\n            this.orderNumberStr = pvOrderNumberStr;\r\n            this.selectedBln = pvSelectedBln;\r\n        }\r\n    }\r\n\r\n    private static class CreateOrderLocalParams {\r\n        String documentStr;\r\n        Boolean  checkBarcodesBln;\r\n\r\n        CreateOrderLocalParams(String pvDocumentStr, Boolean checkBarcodesBln) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = checkBarcodesBln;\r\n        }\r\n    }\r\n\r\n\r\n    private static class PickorderLocalParams {\r\n        String userNameStr;\r\n        String branchStr;\r\n        Boolean inProgressBln;\r\n        int pickStep;\r\n        String searchTextStr;\r\n        String mainTypeStr;\r\n\r\n\r\n        PickorderLocalParams(String pvUserNameStr, String pvBranchStr, Boolean pvInProgressBln, int pvPickStepInt, String pvSearchTextStr, String pvMainTypeStr) {\r\n            this.userNameStr = pvUserNameStr;\r\n            this.branchStr = pvBranchStr;\r\n            this.inProgressBln = pvInProgressBln;\r\n            this.pickStep = pvPickStepInt;\r\n            this.searchTextStr = pvSearchTextStr;\r\n            this.mainTypeStr = pvMainTypeStr;\r\n        }\r\n    }\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    cPickorderRepository(Application pvApplication) {\r\n        //Region Private Properties\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.pickorderDao = db.pickorderDao();\r\n        this.pickorderLineDao = db.pickorderLineDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public void insert (cPickorderEntity pickorderEntity) {\r\n        new mInsertAsyncTask(pickorderDao).execute(pickorderEntity);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(pickorderDao).execute();\r\n    }\r\n\r\n    public void pAbortOrder() {\r\n        new mAbortOrderAsyncTask(pickorderLineDao).execute();\r\n    }\r\n\r\n    public cWebresult pGetPickordersFromWebserviceWrs(Boolean pvInprogressBln, String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        String mainTypeStr = \"\";\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n\r\n\r\n        switch (cUser.currentUser.currentAuthorisation.getAutorisationEnu()){\r\n\r\n            case PICK:\r\n                break;\r\n\r\n            case PICK_PF:\r\n                mainTypeStr = \"Transfer\";\r\n                break;\r\n\r\n            case PICK_PV:\r\n                mainTypeStr = \"Sales\";\r\n                break;\r\n\r\n            default:\r\n                mainTypeStr = \"\";\r\n                break;\r\n        }\r\n\r\n        pickorderLocalParams = new PickorderLocalParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), pvInprogressBln, 0, pvSearchTextStr, mainTypeStr);\r\n\r\n        try {\r\n            webResultWrs = new mGetPickordersFromWebserviceAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPickorderstPickordersNextStepFromWebserviceWrs(String pvUsernameStr, cWarehouseorder.StepCodeEnu pvStepCodeEnu, String pvSearchTextStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n         int stepCodeInt= 0 ;\r\n\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Sorting) {\r\n            stepCodeInt = 20;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_QualityContol) {\r\n            stepCodeInt = 30;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_PackAndShip) {\r\n            stepCodeInt = 40;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Pick_Storage) {\r\n            stepCodeInt = 60;\r\n        }\r\n        if (pvStepCodeEnu == cWarehouseorder.StepCodeEnu.Finish_Packing) {\r\n            stepCodeInt = 70;\r\n        }\r\n\r\n        PickorderLocalParams pickorderLocalParams;\r\n        pickorderLocalParams = new PickorderLocalParams(pvUsernameStr, cUser.currentUser.currentBranch.getBranchStr(), false, stepCodeInt, pvSearchTextStr, \"\");\r\n\r\n        try {\r\n            webResultWrs = new mPickordersNextStepFromWebserviceGetAsyncTask().execute(pickorderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderEntity> pGetPickordersFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cPickorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder(\"SELECT * FROM Pickorders \");\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\"OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\"WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n            if (cSharedPreferences.showSingleArticlesBln()) {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 1 \");\r\n            }\r\n            else\r\n            {\r\n                SQLStatementStr.append(\" AND SingleArticleOrders = 0 \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 1 \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) = 0 \");\r\n            }\r\n        }\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (PickorderSelectActivity.currentModusEnu == PickorderSelectActivity.ModusEnu.COMBINE) {\r\n            if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                SQLStatementStr.append(\"WHERE SourceDocument <> '95' \");\r\n            }\r\n            else {\r\n                SQLStatementStr.append(\" AND SourceDocument <> '95' \");\r\n            }\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Ordernumber ASC\");\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new mGetPickordersFromDatabaseWithFilterAsyncTask(pickorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pPickHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickGeneratedHandledViaWebserviceBln(String pvShipBinStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvShipBinStr, cWarehouseorder.StepCodeEnu.Pick_Picking.toString(), cWarehouseorder.WorkflowPickStepEnu.PickPicking, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderGeneratedHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pStoreHandledViaWebserviceBln() {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), \"\", cWarehouseorder.StepCodeEnu.Pick_Storage.toString(), cWarehouseorder.WorkflowPickStepEnu.PickStorage, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pSortHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_Sorting.toString(), cWarehouseorder.WorkflowPickStepEnu.PickSorting, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pQCHandledViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(), \"\", cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvWorkplaceStr, cWarehouseorder.StepCodeEnu.Pick_QualityContol.toString(), cWarehouseorder.WorkflowPickStepEnu.PickQualityControl, \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pShipHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Pick_PackAndShip.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pFinishSinglePiecesHandledViaWebserviceWrs(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderStepHandledParams pickorderStepHandledParams;\r\n        pickorderStepHandledParams = new PickorderStepHandledParams(cUser.currentUser.getUsernameStr(),\r\n                \"\",\r\n                cUser.currentUser.currentBranch.getBranchStr(),\r\n                cPickorder.currentPickOrder.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvWorkplaceStr,\r\n                cWarehouseorder.StepCodeEnu.Finish_Packing.toString(),\r\n                cWarehouseorder.WorkflowPickStepEnu.PickFinishPacking,\r\n                \"\");\r\n\r\n        try {\r\n\r\n            webResult = new mPickorderStepHandledAsyncTask().execute(pickorderStepHandledParams).get();\r\n            return  webResult;\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentShippedViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentShippedAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public cWebresult pPickorderSourceDocumentStoredViaWebserviceWrs() {\r\n\r\n        cWebresult webResult;\r\n\r\n        try {\r\n            webResult = new mPickorderSourceDocumentStoredAsyncTask().execute().get();\r\n            if (!webResult.getSuccessBln() || !webResult.getResultBln()) {\r\n                return  webResult;\r\n            }\r\n\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  null;\r\n\r\n        }\r\n        return  webResult;\r\n    }\r\n\r\n    public Boolean pPickorderUpdateWorkplaceViaWebserviceBln(String pvWorkplaceStr) {\r\n\r\n        cWebresult webResult;\r\n\r\n        PickorderUpdateWorkplaceParams pickorderUpdateWorkplaceParams;\r\n        pickorderUpdateWorkplaceParams   = new PickorderUpdateWorkplaceParams(cUser.currentUser.getUsernameStr(), cUser.currentUser.currentBranch.getBranchStr(), cPickorder.currentPickOrder.getOrderNumberStr(), pvWorkplaceStr);\r\n\r\n        try {\r\n            webResult = new mPickorderUpdateWorkplaceViaWebserviceAsyncTask().execute(pickorderUpdateWorkplaceParams).get();\r\n            return webResult.getSuccessBln() && webResult.getResultBln();\r\n        }\r\n\r\n        catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n\r\n        }\r\n    }\r\n\r\n    public cWebresult pUpdateCurrentLocationViaWebserviceWrs(String pvCurrentLocationStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mUpdateCurrentLocationViaWebserviceAsyncTask().execute(pvCurrentLocationStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public Boolean pPickorderUpdatCurrentLocationInDatabaseBln(String pvCurrentLocationStr) {\r\n\r\n        Integer integerValue;\r\n        UpdatePickorderCurrentLocationLocalParams updatePickorderCurrentLocationLocalParams = new UpdatePickorderCurrentLocationLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), pvCurrentLocationStr);\r\n        try {\r\n            integerValue = new mUpdatePickorderCurrentLocationInDatabaseAsyncTask(pickorderDao).execute(updatePickorderCurrentLocationLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public Boolean pPickorderUpdatIsSelectedInDatabaseBln() {\r\n\r\n        Integer integerValue;\r\n        UpdateSelectedLocalParams updateSelectedLocalParams = new UpdateSelectedLocalParams(cPickorder.currentPickOrder.getOrderNumberStr(), cPickorder.currentPickOrder.getIsSelectedBln());\r\n        try {\r\n            integerValue = new mUpdateIsSelectedInDatabaseAsyncTask(pickorderDao).execute(updateSelectedLocalParams).get();\r\n            return integerValue != 0;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public cWebresult pCreatePickOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        CreateOrderLocalParams orderLocalParams = new CreateOrderLocalParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new cPickorderRepository.mCreatePickorderViaWebserviceAsyncTask().execute(orderLocalParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //Pick Lines\r\n    public cWebresult pGetLinesFromWebserviceWrs(cWarehouseorder.ActionTypeEnu pvActionTypeEnu) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetAllLinesFromDatabaseObl() {\r\n\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetAllLinesFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetPickorderLinesToSendFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetPickorderLinesToSendFromDatabaseAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesNotHandledForBranchFromDatabaseObl(String pvBranchStr) {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetNotHandledLinesForBranchAsyncTask(pickorderLineDao).execute(pvBranchStr).get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesBusyFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetBusyLinesAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    public List<cPickorderLineEntity> pGetLinesHandledFromDatabaseObl() {\r\n        List<cPickorderLineEntity> resultObl = null;\r\n        try {\r\n            resultObl = new mGetHandledLinesOblAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultObl;\r\n    }\r\n\r\n    //Pick quantityDbl's\r\n    public Double pQuantityNotHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityNotHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pQuantityHandledDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetQuantityHandledAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetTotalQuantityDbl() {\r\n        Double resultDbl = 0.0;\r\n        try {\r\n            resultDbl = new mGetTotalQuanitityAsyncTask(pickorderLineDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (resultDbl== null) {\r\n            resultDbl = (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    //Pick Order details\r\n\r\n    public cWebresult pGetAddressesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderAdressesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetSettingsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderSettingsFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCompositeBarcodesFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLineBarcodesFromWebservice(cWarehouseorder.ActionTypeEnu pvActionTypeEnu){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mPickorderLineBarcodesGetFromWebserviceAsyncTask().execute(pvActionTypeEnu.toString()).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertysViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertysViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPropertyValuesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPackagesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPickorderPackagesFromWebserviceTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Pack and Ship\r\n\r\n\r\n\r\n    public cWebresult pGetPackAndShipLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPackAndShipLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetFinishPackSinglePieceLinesViaWebserviceWrsWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Storage\r\n    public cWebresult pGetStorageLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetStorageLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n    //End Storage\r\n\r\n    public cWebresult pCreateCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mCreateCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddOrderToCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mAddOrderToCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveOrderFromCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveOrderFromCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pRemoveCombinedPickViaWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mRemoveCombinedPickViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAsyncTask extends AsyncTask<cPickorderEntity, Void, Void> {\r\n        private final iPickorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iPickorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cPickorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromWebserviceAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_INPROGRESS;\r\n            l_PropertyInfo3Pin.setValue(params[0].inProgressBln);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr.toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickordersNextStepFromWebserviceGetAsyncTask extends AsyncTask<PickorderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final PickorderLocalParams... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(params[0].userNameStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKSTEP;\r\n            l_PropertyInfo3Pin.setValue(params[0].pickStep);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0].searchTextStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n            l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_MAINTYPE;\r\n            l_PropertyInfo5Pin.setValue(params[0].mainTypeStr);\r\n            l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n            try {\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSSEQUELSTEP, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickordersFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cPickorderEntity>> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n\r\n        mGetPickordersFromDatabaseWithFilterAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredPickorders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mPickorderStepHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LANGUAGEASCULTURE;\r\n                l_PropertyInfo2Pin.setValue(params[0].languageStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo3Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo4Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo5Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo6Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo7Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPINT;\r\n                l_PropertyInfo8Pin.setValue(params[0].workflowStepInt);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSTEPHANDLED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderGeneratedHandledAsyncTask extends AsyncTask<PickorderStepHandledParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderStepHandledParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].userStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branchStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].orderNumberStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(params[0].deviceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(params[0].workflowStepcodeStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPBINSTR;\r\n                l_PropertyInfo8Pin.setValue(params[0].workPlaceStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].cultureStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERHANDLEDGENERATED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentShippedAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cShipment.currentShipment.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo5Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGAGENT;\r\n                l_PropertyInfo6Pin.setValue(cShipment.currentShipment.shippingAgent().getShippingAgentStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGSERVICE;\r\n                l_PropertyInfo7Pin.setValue(cShipment.currentShipment.shippingAgentService().getServiceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGOPTIONS;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                SoapObject shippingpackages = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES);\r\n\r\n                int sequencenumberInt = 0;\r\n                String packageTypeToRememberStr = \"\";\r\n                int counterForTypeInt = 0;\r\n\r\n                for (cShippingAgentServiceShippingUnit shippingAgentServiceShippingUnit : cShipment.currentShipment.shippingAgentService().shippingUnitsObl()) {\r\n\r\n                    //If we didn't use this, continue\r\n                    if (shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt() <= 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    //New packageype, so reset sequenceNumber\r\n                    if (!packageTypeToRememberStr.equalsIgnoreCase(shippingAgentServiceShippingUnit.getShippingUnitStr())) {\r\n                        packageTypeToRememberStr = shippingAgentServiceShippingUnit.getShippingUnitStr();\r\n                        sequencenumberInt = 0;\r\n                        counterForTypeInt = 0;\r\n                    }\r\n\r\n                    while (counterForTypeInt < shippingAgentServiceShippingUnit.getShippingUnitQuantityUsedInt()) {\r\n                        counterForTypeInt += 1;\r\n                        sequencenumberInt += 10;\r\n\r\n                        SoapObject soapObject = new SoapObject(cWebservice.WEBSERVICE_NAMESPACE, cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_PACKAGE, packageTypeToRememberStr);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_SEQUENCENUMBER, sequencenumberInt);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_WEIGHTING, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_ITEMCOUNT, 0);\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINERTYPE, \"\");\r\n                        soapObject.addProperty(cWebserviceDefinitions.WEBPROPERTY_INTERFACESHIPPINGPACKAGE_CONTAINER, \"\");\r\n                        shippingpackages.addSoapObject(soapObject);\r\n                    }\r\n                }\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_SHIPPINGPACKAGES;\r\n                l_PropertyInfo9Pin.setValue(shippingpackages);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSHIPPED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderSourceDocumentStoredAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SOURCENO;\r\n                l_PropertyInfo4Pin.setValue(cStorement.currentStorement.getSourceNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_STORAGEBINCODE;\r\n                l_PropertyInfo5Pin.setValue(cStorement.currentStorement.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERSOURCEDOCUMENTSTORED, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderUpdateWorkplaceViaWebserviceAsyncTask extends AsyncTask<PickorderUpdateWorkplaceParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(PickorderUpdateWorkplaceParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(params[0].user);\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(params[0].branch);\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(params[0].ordernumber);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKPLACE;\r\n                l_PropertyInfo4Pin.setValue(params[0].workplace);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERUPDATEWORKPLACE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mUpdatePickorderCurrentLocationInDatabaseAsyncTask extends AsyncTask<UpdatePickorderCurrentLocationLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdatePickorderCurrentLocationInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdatePickorderCurrentLocationLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderCurrentLocation(params[0].orderNumberStr, params[0].currentLocationStr);\r\n        }\r\n    }\r\n\r\n    private static class mUpdateIsSelectedInDatabaseAsyncTask extends AsyncTask<UpdateSelectedLocalParams, Void, Integer> {\r\n        private iPickorderDao mAsyncTaskDao;\r\n        mUpdateIsSelectedInDatabaseAsyncTask(iPickorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Integer doInBackground(UpdateSelectedLocalParams... params) {\r\n            return mAsyncTaskDao.updatePickorderIsSelected(params[0].orderNumberStr, params[0].selectedBln);\r\n        }\r\n    }\r\n\r\n    private static class mAbortOrderAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mAbortOrderAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Void doInBackground(Void... params) {\r\n            mAsyncTaskDao.abortOrder();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n                l_PropertyInfo3Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPackAndShipLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESPACKANDSHIP, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetStorageLinesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESSTORAGE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetFinishPackSinglePieceLinesViaWebserviceWrsAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINESFINISHSINGLEPIECE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreateCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_CREATEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mAddOrderToCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOADD;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADDORDERTOMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveOrderFromCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERMERGED;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBERTOREMOVE;\r\n                l_PropertyInfo4Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEORDERFROMMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mRemoveCombinedPickViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentCombinedPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_REMOVEMERGEDPICKORDER, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetAllLinesFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetAllLinesFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getAll();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderLinesToSendFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetPickorderLinesToSendFromDatabaseAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getPickorderLineEntitiesToSend();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetNotHandledLinesForBranchAsyncTask extends AsyncTask<String, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetNotHandledLinesForBranchAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final String... params) {\r\n            return mAsyncTaskDao.getNotHandledPickorderLineForBranchEntitiesLin(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mGetBusyLinesAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetBusyLinesAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getBusyPickorderLineEntitiesLin();\r\n        }\r\n    }\r\n\r\n    private static class mGetHandledLinesOblAsyncTask extends AsyncTask<Void, Void, List<cPickorderLineEntity>> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetHandledLinesOblAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cPickorderLineEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getHandledPickorderLineEntities();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityNotHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityNotHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getQuantityNotHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetQuantityHandledAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n        mGetQuantityHandledAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getNumberHandledDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetTotalQuanitityAsyncTask extends AsyncTask<Void, Void, Double> {\r\n        private iPickorderLineDao mAsyncTaskDao;\r\n\r\n        mGetTotalQuanitityAsyncTask(iPickorderLineDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected Double doInBackground(Void... params) {\r\n            return mAsyncTaskDao.getTotalQuantityDbl();\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderAdressesFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERADDRESSES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderSettingsFromWebserviceTask extends AsyncTask<List<String>, Void, cWebresult> {\r\n        @SafeVarargs\r\n        @Override\r\n        protected final cWebresult doInBackground(final List<String>... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SETTINGTYPE;\r\n            l_PropertyInfo4Pin.setValue(\"Pick_PackAndShip\");\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n\r\n            try {\r\n                webResult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTSETTINGSGET, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPickorderPackagesFromWebserviceTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params) {\r\n            cWebresult webResult = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try {\r\n                webResult =  cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERSHIPPACKAGES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webResult.setResultBln(false);\r\n                webResult.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return webResult;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderCompsoiteBarcodesGetFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n            l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString().toUpperCase());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSEORDERCOMPOSITEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mPickorderLineBarcodesGetFromWebserviceAsyncTask extends AsyncTask <String, Void, cWebresult>{\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n            l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ACTIONTYPECODE;\r\n            l_PropertyInfo3Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERLINEBARCODES, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;\r\n                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.PICKEN.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mUpdateCurrentLocationViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cPickorder.currentPickOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_CURRENTLOCATION;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_UPDATECURRENTORDERLOCATION, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mCreatePickorderViaWebserviceAsyncTask extends AsyncTask<CreateOrderLocalParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(CreateOrderLocalParams... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.PF.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_PICKBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_PICKORDERCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/SSU_WHS/Picken/Pickorders/cPickorderRepository.java	(date 1617285222079)
+@@ -2176,6 +2176,8 @@
+         }
+     }
+ 
++
++
+     //End Region Private Methods
+ 
+ }
+Index: .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch
+===================================================================
+--- .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
+@@ -1,17 +0,0 @@
+-Index: app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java
+-IDEA additional info:
+-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+-<+>package SSU_WHS.Basics.Branches;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwner;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.BranchReason.cBranchReason;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceViewModel;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\n\r\npublic class cBranch {\r\n\r\n    //Region Public Properties\r\n    private String branchStr;\r\n    public String getBranchStr() {\r\n        return branchStr;\r\n    }\r\n\r\n    private String branchTypeStr;\r\n    public String getBranchTypeStr() {\r\n        return branchTypeStr;\r\n    }\r\n\r\n    private String branchNameStr;\r\n    public String getBranchNameStr() {\r\n        return branchNameStr;\r\n    }\r\n\r\n    private boolean binMandatoryBln;\r\n    public  boolean isBinMandatoryBln() {return  binMandatoryBln;}\r\n\r\n    private String returnDefaultBinStr;\r\n    public String getReturnDefaultBinStr(){\r\n        return   returnDefaultBinStr;\r\n    }\r\n\r\n    private String receiveDefaultBinStr;\r\n    public String getReceiveDefaultBinStr(){\r\n        return   receiveDefaultBinStr;\r\n    }\r\n\r\n    private String pickDefaultStorageBinStr;\r\n    public String getPickDefaultStorageBinStr(){\r\n        return pickDefaultStorageBinStr;\r\n    }\r\n\r\n    private String moveDefaultBinStr;\r\n    public String getMoveDefaultBinStr(){\r\n        return   moveDefaultBinStr;\r\n    }\r\n\r\n    private cBranchEntity branchEntity;\r\n\r\n    public ArrayList<cWorkplace>  workplacesObl() {\r\n        return  cWorkplace.allWorkplacesObl;\r\n\r\n    }\r\n    public ArrayList<cBranchBin>  binsObl;\r\n    public ArrayList<cBranchReason>  returnReasonObl;\r\n    public ArrayList<cStockOwner> stockOwnerObl;\r\n\r\n    private cBranchViewModel getBranchViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n    }\r\n\r\n\r\n    public static List<cBranch> allBranchesObl;\r\n    public  List<cBranchBin> receiveBinsObl;\r\n    public  List<cBranchBin> shipBinsObl;\r\n\r\n    public  static  boolean BranchesAvailableBln;\r\n\r\n       public enum brachTypeEnum {\r\n        INTRANSIT,\r\n        STORE,\r\n        UNKNOWN,\r\n        WAREHOUSE\r\n    }\r\n    //end region Public Propties\r\n\r\n    //Region Constructor\r\n    public cBranch(JSONObject pvJsonObject) {\r\n        this.branchEntity = new cBranchEntity(pvJsonObject);\r\n        this.branchStr = branchEntity.getBranchStr();\r\n        this.branchTypeStr = branchEntity.getBranchtypeStr();\r\n        this.branchNameStr = branchEntity.getBranchnameStr();\r\n        this.returnDefaultBinStr = branchEntity.getReturndefaultbinStr();\r\n        this.receiveDefaultBinStr = branchEntity.getReceivedefaultbinStr();\r\n        this.moveDefaultBinStr = branchEntity.getMovedefaultbinStr();\r\n        this.pickDefaultStorageBinStr = branchEntity.getPickDefaultStorageBinStr();\r\n        this.binMandatoryBln = cText.pStringToBooleanBln(branchEntity.getBinmandatoryStr(),false) ;\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public static boolean pGetBranchesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cBranch.allBranchesObl = null;\r\n            cBranch.pTruncateTableBln();\r\n        }\r\n\r\n        if (cBranch.allBranchesObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        cBranchViewModel branchViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n        WebResult =  branchViewModel.pGetBranchesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranch branch = new cBranch(jsonObject);\r\n                branch.pInsertInDatabaseBln();\r\n            }\r\n\r\n            cBranch.BranchesAvailableBln = true;\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean pGetReceiveBinsViaWebserviceBln() {\r\n\r\n        if (this.receiveBinsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetReceiveBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            this.receiveBinsObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                this.receiveBinsObl.add(branchBin);\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pGetShipBinsViaWebserviceBln() {\r\n\r\n        if (this.shipBinsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetShipBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            this.shipBinsObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                this.shipBinsObl.add(branchBin);\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getBranchViewModel().insert(this.branchEntity);\r\n\r\n        if (cBranch.allBranchesObl == null){\r\n            cBranch.allBranchesObl = new ArrayList<>();\r\n        }\r\n        cBranch.allBranchesObl .add(this);\r\n\r\n        return true;\r\n    }\r\n\r\n    public static cBranch pGetBranchByCode(String pvBranchStr){\r\n        if(cBranch.allBranchesObl == null || cBranch.allBranchesObl.size() == 0){\r\n            return null;\r\n        }\r\n\r\n        for (cBranch branch :  cBranch.allBranchesObl )\r\n        {\r\n            if(branch.branchStr.equalsIgnoreCase(pvBranchStr)){\r\n                return  branch;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static cBranch pGetUserBranchByCode(String pvBranchStr){\r\n        if(cUser.currentUser == null || cUser.currentUser.branchesObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cBranch branch :  cUser.currentUser.branchesObl)\r\n        {\r\n            if(branch.branchStr.equalsIgnoreCase(pvBranchStr)){\r\n                return  branch;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public cBranchBin pGetBinByCode(String pvBinCodeStr){\r\n\r\n        //Search for the BIN in the cache\r\n        if (this.binsObl != null && this.binsObl.size() > 0 ) {\r\n            for (cBranchBin branchBin : this.binsObl) {\r\n                if (branchBin.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr)) {\r\n                    return  branchBin;\r\n                }\r\n            }\r\n        }\r\n\r\n        return   this.mGetBinViaWebservice(pvBinCodeStr);\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cBranchViewModel branchViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n        branchViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public boolean pGetWorkplacesBln(boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cWorkplace.allWorkplacesObl = null;\r\n        }\r\n\r\n        if (this.workplacesObl() != null){\r\n            return  true;\r\n        }\r\n\r\n        cWorkplace.pTruncateTableBln();\r\n        cWorkplace.allWorkplacesObl = null;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cWorkplaceViewModel  workplaceViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cWorkplaceViewModel.class);\r\n        WebResult =  workplaceViewModel.pGetWorkplacesFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n            if( cWorkplace.allWorkplacesObl == null) {\r\n                cWorkplace.allWorkplacesObl =  new ArrayList<>();\r\n            }\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cWorkplace workplace = new cWorkplace(jsonObject);\r\n                workplace.pInsertInDatabaseBln();\r\n            }\r\n\r\n            return  true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean pGetReasonBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln){\r\n            this.returnReasonObl = null;\r\n            this.returnReasonObl = new ArrayList<>();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetReasonFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            if (this.returnReasonObl == null){\r\n                this.returnReasonObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cBranchReason branchReason = new cBranchReason(jsonObject);\r\n                if(branchReason.isReturn()) {\r\n                    this.returnReasonObl.add(branchReason);\r\n                }\r\n            }\r\n            return  true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n    public boolean pGetAuthorizedStockOwnerBln(Boolean pvRefreshBln) {\r\n        if (pvRefreshBln){\r\n            this.stockOwnerObl = null;\r\n            this.stockOwnerObl = new ArrayList<>();\r\n        }\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetAuthorizedStockOwnerFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            if (this.stockOwnerObl == null){\r\n                this.stockOwnerObl = new ArrayList<>();\r\n            }\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cAuthorizedStockOwner authorizedStockOwner = new cAuthorizedStockOwner(jsonObject);\r\n                cStockOwner stockOwner = cStockOwner.pGetStockOwnerByCodeStr(authorizedStockOwner.getStockownerStr());\r\n                    this.stockOwnerObl.add(stockOwner);\r\n                    \r\n            }\r\n            return  true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static cBranch pGetBranchByDescriptionStr(String pvScannedBranchStr){\r\n\r\n        if (cBranch.allBranchesObl == null || cBranch.allBranchesObl.size() == 0 ) {\r\n            return  null;\r\n        }\r\n\r\n        for (cBranch branch : cBranch.allBranchesObl) {\r\n\r\n            if (branch.getBranchNameStr().equalsIgnoreCase(pvScannedBranchStr)) {\r\n                return branch;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cBranchReason pGetReasonByName(String pvReasonStr){\r\n        if(cUser.currentUser.currentBranch.returnReasonObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cBranchReason branchReason : cUser.currentUser.currentBranch.returnReasonObl)\r\n        {\r\n            if(branchReason.getReasonStr().equalsIgnoreCase(pvReasonStr)){\r\n                return  branchReason;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private cBranchBin mGetBinViaWebservice(String pvBinCodeStr) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetBinFromWebserviceWrs(pvBinCodeStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            if (WebResult.getResultDtt() != null && WebResult.getResultDtt().size() == 1) {\r\n                cBranchBin branchBin = new cBranchBin(WebResult.getResultDtt().get(0));\r\n                if (this.binsObl == null) {\r\n                    this.binsObl = new ArrayList<>();\r\n                }\r\n\r\n                this.binsObl.add(branchBin);\r\n                return  branchBin;\r\n            }\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSELOCATIONS);\r\n        }\r\n        return  null;\r\n    }\r\n    //End Region Private Methods\r\n}\r\n
+-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+-<+>UTF-8
+-===================================================================
+---- app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java	(revision 1c0b4132251ab66a445d9938c4b6f21c38dbfcd0)
+-+++ app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java	(date 1614154486419)
+-@@ -83,6 +83,7 @@
+-     public  List<cBranchBin> receiveBinsObl;
+-     public  List<cBranchBin> shipBinsObl;
+- 
+-+    
+-     public  static  boolean BranchesAvailableBln;
+- 
+-        public enum brachTypeEnum {
+Index: .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml
+===================================================================
+--- .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ .idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37__Default_Changelist_.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
+@@ -1,4 +0,0 @@
+-<changelist name="Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]" date="1615451853475" recycled="true" deleted="true">
+-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11-3-2021_09_37_[Default_Changelist]/shelved.patch" />
+-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11-3-2021 09:37 [Default Changelist]" />
+-</changelist>
+\ No newline at end of file
+Index: app/src/main/AndroidManifest.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"nl.icsvertex.scansuite\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <uses-feature android:name=\"android.hardware.camera\" />\r\n\r\n    <application\r\n        android:name=\"ICS.cAppExtension\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"false\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        android:largeHeap=\"true\">\r\n        <provider\r\n            android:name=\".cGenericFileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n        <activity\r\n            android:name=\".Activities.General.MainDefaultActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.MenuActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.General.LoginActivity\"\r\n\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".Activities.General.BarcodeInfoActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.General.LoginActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MainDefaultActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderPickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Pick.PickorderLineItemPropertyInputActvity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Pick.CreatePickActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderLinesGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Pick.PickorderPickGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSortActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n        <activity android:name=\".Activities.Sort.SortorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Sort.SortorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Store.StoreorderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.Ship.ShiporderShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShiporderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.FinishShip.FinishShipLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\"/>\r\n\r\n        <activity android:name=\".Activities.QualityControl.QualityControlLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.QualityControl.PickorderQCActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.CreateInventoryActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinsActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity android:name=\".Activities.Inventory.InventoryArticleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Inventory.InventoryorderBinActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n        <activity\r\n            android:name=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Receive.CreateReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.CreateIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeorderMASLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Intake.IntakeOrderIntakeGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Intake.IntakeorderMATLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Receive.ReceiveOrderReceiveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:parentActivityName=\".Activities.Receive.ReceiveLinesActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Returns.ReturnorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.CreateReturnActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentsActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnorderDocumentActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Returns.ReturnArticleDetailActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Move.MoveorderSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.CreateMoveActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLineTakeMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinesPlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceMTActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveMISinglepieceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveorderLinesPlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.Move.MoveLinePlaceGeneratedActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity\" />\r\n        </activity>\r\n\r\n        <activity android:name=\".Activities.Packaging.PackagingActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSelectActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.General.MenuActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.CreatePackAndShipActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipSingleActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n        <activity android:name=\".Activities.PackAndShip.PackAndShipMultiActivity\"\r\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <meta-data\r\n                android:name=\"android.support.PARENT_ACTIVITY\"\r\n                android:value=\"nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity\" />\r\n        </activity>\r\n\r\n\r\n\r\n        <meta-data\r\n            android:name=\"io.fabric.ApiKey\"\r\n            android:value=\"0a3a15057e61fb1e84d5024bd01b5657d9a4c76e\" />\r\n    </application>\r\n\r\n</manifest>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/AndroidManifest.xml	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/AndroidManifest.xml	(date 1617289926784)
+@@ -248,6 +248,12 @@
+             android:screenOrientation="portrait"
+             android:windowSoftInputMode="adjustPan">
+         </activity>
++        <activity android:name=".Activities.Inventory.InventoryorderLineItemPropertyInputActvity"
++            android:configChanges="keyboardHidden|orientation|screenSize"
++            android:parentActivityName=".Activities.Inventory.InventoryArticleActivity"
++            android:screenOrientation="portrait"
++            android:windowSoftInputMode="adjustPan">
++        </activity>
+         <activity
+             android:name=".Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity"
+             android:configChanges="keyboardHidden|orientation|screenSize"
+@@ -533,9 +539,6 @@
+                 android:name="android.support.PARENT_ACTIVITY"
+                 android:value="nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSelectActivity" />
+         </activity>
+-
+-
+-
+         <meta-data
+             android:name="io.fabric.ApiKey"
+             android:value="0a3a15057e61fb1e84d5024bd01b5657d9a4c76e" />
+Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java	(date 1617290613930)
++++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryorderLineItemPropertyInputActvity.java	(date 1617290613930)
+@@ -0,0 +1,509 @@
++package nl.icsvertex.scansuite.Activities.Inventory;
++
++
++import android.content.BroadcastReceiver;
++import android.content.Context;
++import android.content.Intent;
++import android.content.IntentFilter;
++import android.os.Bundle;
++import android.view.MenuItem;
++import android.view.View;
++import android.widget.ImageView;
++import android.widget.TextView;
++
++import androidx.appcompat.app.ActionBar;
++import androidx.appcompat.app.AppCompatActivity;
++import androidx.appcompat.widget.AppCompatImageButton;
++import androidx.appcompat.widget.Toolbar;
++import androidx.localbroadcastmanager.content.LocalBroadcastManager;
++import androidx.recyclerview.widget.LinearLayoutManager;
++import androidx.recyclerview.widget.RecyclerView;
++
++import java.util.ArrayList;
++import java.util.Collections;
++import java.util.List;
++
++import ICS.Interfaces.iICSDefaultActivity;
++import ICS.Utils.Scanning.cBarcodeScan;
++import ICS.Utils.cConnection;
++import ICS.Utils.cRegex;
++import ICS.Utils.cResult;
++import ICS.Utils.cText;
++import ICS.Utils.cUserInterface;
++import ICS.cAppExtension;
++import SSU_WHS.General.cPublicDefinitions;
++import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
++import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
++import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValueInputAdapter;
++import nl.icsvertex.scansuite.Fragments.Dialogs.ItemPropertyTextInputFragment;
++import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
++import nl.icsvertex.scansuite.R;
++
++public class InventoryorderLineItemPropertyInputActvity extends AppCompatActivity implements iICSDefaultActivity {
++
++   //Region Private Properties
++   private  ImageView toolbarImage;
++   private  TextView toolbarTitle;
++
++   private AppCompatImageButton imageButtonNoInputPropertys;
++   private TextView articleDescriptionCompactText;
++   private TextView articleDescription2CompactText;
++   private TextView articleItemCompactText;
++   private TextView articleBarcodeCompactText;
++   private TextView quantityCompactText;
++
++    private  RecyclerView itemPropertyRecyclerview;
++    private AppCompatImageButton imageButtonDone;
++
++    private  List<cInventoryorderLinePropertyValue> localItemPropertyValueObl (){
++
++        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
++
++        if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl() != null && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl() .size() > 0 ) {
++            resultObl = cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyValuesObl();
++
++            if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().get(0).getItemProperty().getUniqueBln()) {
++                Collections.sort(resultObl);
++                Collections.reverse(resultObl);
++            }
++
++            return resultObl;
++        }
++
++
++        for (cInventoryorderLineProperty inputInventoryorderLineProperty : cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl()) {
++            resultObl.add(new cInventoryorderLinePropertyValue(inputInventoryorderLineProperty));
++        }
++
++        return resultObl;
++
++    }
++
++    public double getQuantityHandledDbl(){
++
++        double quantityDbl = 0;
++
++        if (this.localItemPropertyValueObl() == null || this.localItemPropertyValueObl().size() == 0) {
++            return quantityDbl;
++        }
++
++        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.localItemPropertyValueObl() ) {
++            quantityDbl += inventoryorderLinePropertyValue.getQuantityDbl();
++        }
++
++        return  quantityDbl;
++
++    }
++
++
++
++    private cInventoryorderLinePropertyValueInputAdapter inventoryorderLinePropertyValueInputAdapter;
++    private cInventoryorderLinePropertyValueInputAdapter getInventoryorderLinePropertyValueInputAdapter (){
++        if (this.inventoryorderLinePropertyValueInputAdapter == null) {
++            this.inventoryorderLinePropertyValueInputAdapter = new cInventoryorderLinePropertyValueInputAdapter();
++        }
++
++        return  inventoryorderLinePropertyValueInputAdapter;
++    }
++
++    //End Region Private Properties
++
++
++    //Region Constructor
++    public InventoryorderLineItemPropertyInputActvity() {
++
++    }
++
++
++    //End Region Constructor
++
++    //Region Default Methods
++
++    @Override
++    protected void onCreate(Bundle pvSavedInstanceState) {
++        super.onCreate(pvSavedInstanceState);
++        setContentView(R.layout.activity_inventoryorderlineitemproperty_input);
++        this.mActivityInitialize();
++    }
++
++    @Override
++    protected void onPostCreate(Bundle savedInstanceState) {
++        super.onPostCreate(savedInstanceState);
++
++        //Set listeners here, so click listeners only work after activity is shown
++        this.mSetListeners();
++    }
++
++    @Override
++    protected void onResume() {
++        super.onResume();
++        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));
++        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());
++        cConnection.pRegisterWifiChangedReceiver();
++        cUserInterface.pEnableScanner();
++    }
++
++    @Override
++    protected void onPause() {
++        try {
++            LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);
++            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());
++            cConnection.pUnregisterWifiChangedReceiver();
++        } catch (Exception e) {
++            e.printStackTrace();
++        }
++        super.onPause();
++    }
++
++    @Override
++    protected void onDestroy() {
++        super.onDestroy();
++        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);
++    }
++
++    @Override
++    protected void onStop() {
++        super.onStop();
++        finish();
++    }
++
++    @Override
++    public boolean onOptionsItemSelected(MenuItem item) {
++
++        if (item.getItemId() == android.R.id.home) {
++            this.mGoBackToArticleActivity(true);
++            return true;
++        }
++
++        return super.onOptionsItemSelected(item);
++
++    }
++
++    @Override
++    public void onBackPressed() {
++        mGoBackToArticleActivity(true);
++    }
++
++    //End Region Default Methods
++
++    //Region iICSDefaultFragment methods
++
++    @Override
++    public void mActivityInitialize() {
++
++        this.mSetAppExtensions();
++
++        this.mFindViews();
++
++        this.mSetToolbar(getResources().getString(R.string.screentitle_itemproperty_input));
++
++        this.mFieldsInitialize();
++
++        this.mInitScreen();
++
++        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());
++    }
++
++    @Override
++    public void mSetAppExtensions() {
++        cAppExtension.context = this;
++        cAppExtension.fragmentActivity  = this;
++        cAppExtension.activity = this;
++        cAppExtension.fragmentManager  = getSupportFragmentManager();
++    }
++
++    @Override
++    public void mFindViews() {
++
++            this.toolbarImage = findViewById(R.id.toolbarImage);
++            this.toolbarTitle = findViewById(R.id.toolbarTitle);
++
++            this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);
++            this.articleDescriptionCompactText = findViewById(R.id.articleDescriptionCompactText);
++            this.articleDescription2CompactText = findViewById(R.id.articleDescription2CompactText);
++            this.articleItemCompactText = findViewById(R.id.articleItemCompactText);
++            this.articleBarcodeCompactText = findViewById(R.id.articleBarcodeCompactText);
++            this.quantityCompactText = findViewById(R.id.quantityCompactText);
++            this.itemPropertyRecyclerview = findViewById(R.id.itemPropertyRecyclerview);
++            this.imageButtonDone = findViewById(R.id.imageButtonDone);
++    }
++
++    @Override
++    public void mSetToolbar(String pvScreenTitleStr) {
++
++        this.toolbarImage.setImageResource(R.drawable.ic_info);
++        this.toolbarTitle.setText(pvScreenTitleStr);
++        this.toolbarTitle.setSelected(true);
++
++        Toolbar toolbar = findViewById(R.id.toolbar);
++        setSupportActionBar(toolbar);
++        ActionBar actionBar = getSupportActionBar();
++        if (actionBar != null) {
++            actionBar.setDisplayHomeAsUpEnabled(true);
++        }
++    }
++
++    @Override
++    public void mFieldsInitialize() {
++        this.mSetItemPropertyValueRecycler();
++        this.mSetArticleInfo();
++        this.mSetQuantityText();
++        this.mShowHideOKButton();
++
++
++
++    }
++
++    @Override
++    public void mSetListeners() {
++        this.mSetHeaderListener();
++        this.mSetCloseListener();
++    }
++
++    @Override
++    public void mInitScreen() {
++
++    }
++
++    //End Regioni ICSDefaultFragment methods
++
++    //Region Public Methods
++
++    public void pHandleScan(cBarcodeScan pvBarcodeScan) {
++
++        if (cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().size() == 1) {
++            cInventoryorderLineProperty.currentInventoryorderLineProperty = cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().get(0);
++
++            if (cInventoryorderLineProperty.currentInventoryorderLineProperty.getItemProperty()== null ) {
++                cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_property_unknown),"",true, true);
++                return;
++            }
++
++
++            if (!cRegex.pCheckRegexBln( cInventoryorderLineProperty.currentInventoryorderLineProperty.getItemProperty().getLayoutStr(),pvBarcodeScan.getBarcodeOriginalStr())) {
++                cUserInterface.pShowSnackbarMessage(this.itemPropertyRecyclerview,cAppExtension.activity.getString(R.string.message_unknown_barcode_for_this_line),R.raw.badsound, true);
++                return;
++            }
++
++
++            //Check unique values if needed
++            cResult hulpRst = cInventoryorderLineProperty.currentInventoryorderLineProperty.pCheckScanForUniquePropertyRst(pvBarcodeScan.getBarcodeOriginalStr());
++            if (!hulpRst.resultBln) {
++                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),"",true, true);
++                return;
++            }
++
++            cInventoryorderLineProperty.currentInventoryorderLineProperty.pValueAdded(pvBarcodeScan.getBarcodeOriginalStr());
++            cUserInterface.pShowSnackbarMessage(this.itemPropertyRecyclerview, pvBarcodeScan.getBarcodeOriginalStr() + " "  + cAppExtension.activity.getString(R.string.addedorhandled),R.raw.headsupsound,false);
++            this.pTryToChangeCountedQuantity(true,false,1);
++            this.pRefreshActivity();
++        }
++    }
++
++    public void pHandled() {
++        InventoryArticleActivity.handledViaPropertysBln = true;
++        this.mGoBackToArticleActivity(false);
++    }
++
++    public void pRefreshActivity(){
++        this.mSetItemPropertyValueRecycler();
++        this.mSetQuantityText();
++        this.mShowHideOKButton();
++    }
++
++    public void pDeleteValueFromRecyler() {
++        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.remove(cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue);
++        cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = null;
++    }
++
++    public void pShowNumericInputFragment() {
++        mShowNumberPickerFragment();
++    }
++
++    public void pShowTextInputFragment() {
++        mShowTextInputFragment();
++    }
++
++    //End Region Public Methods
++
++    //Region Private Methods
++
++    private void mSetCloseListener() {
++        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {
++            @Override
++            public void onClick(View view) {
++               pHandled();
++            }
++        });
++    }
++
++    private void mSetHeaderListener() {
++
++        this.toolbarTitle.setOnClickListener(new View.OnClickListener() {
++            @Override
++            public void onClick(View view) {
++                mScrollToBottom();
++            }
++        });
++
++        this.toolbarTitle.setOnLongClickListener(new View.OnLongClickListener() {
++            @Override
++            public boolean onLongClick(View view) {
++                mScrollToTop();
++                return true;
++            }
++        });
++    }
++
++    private void mScrollToTop() {
++        this.itemPropertyRecyclerview.smoothScrollToPosition(0);
++    }
++
++    private void mScrollToBottom() {
++        if (this.getInventoryorderLinePropertyValueInputAdapter()!= null) {
++            if (this.getInventoryorderLinePropertyValueInputAdapter().getItemCount() > 0) {
++                this.itemPropertyRecyclerview.smoothScrollToPosition(this.getInventoryorderLinePropertyValueInputAdapter().getItemCount() -1 );
++            }
++        }
++    }
++
++    private void mSetItemPropertyValueRecycler() {
++        this.itemPropertyRecyclerview.setHasFixedSize(false);
++        this.itemPropertyRecyclerview.setAdapter(this.getInventoryorderLinePropertyValueInputAdapter());
++        this.itemPropertyRecyclerview.setLayoutManager(new LinearLayoutManager(cAppExtension.context));
++        this.getInventoryorderLinePropertyValueInputAdapter().pFillData(this.localItemPropertyValueObl());
++    }
++
++    private void mSetArticleInfo(){
++        this.articleDescriptionCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());
++        this.articleDescription2CompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());
++        this.articleItemCompactText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());
++        this.articleBarcodeCompactText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeAndQuantityStr());
++        this.imageButtonNoInputPropertys.setVisibility(View.GONE);
++
++    }
++
++    private  void mSetQuantityText() {
++        this.quantityCompactText.setText( cText.pDoubleToStringStr(this.getQuantityHandledDbl()));
++    }
++
++    private  void mShowHideOKButton() {
++
++        if (this.getQuantityHandledDbl() == 0) {
++            this.imageButtonDone.setVisibility(View.INVISIBLE);
++            return;
++        }
++
++        this.imageButtonDone.setVisibility(View.VISIBLE);
++
++    }
++
++
++    public   void pTryToChangeCountedQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {
++
++        if (pvIsPositiveBln) {
++
++            //Determine the new amount
++            if (pvAmountFixedBln) {
++
++                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),
++                        cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );
++
++                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;
++                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;
++            } else {
++                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;
++                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;
++            }
++
++            return;
++        }
++
++        //negative
++
++        //Check if value already is zero
++        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {
++
++            //If we have a decimal, correct it to zero
++            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {
++                pvAmountDbl = 0;
++                pvAmountFixedBln = true;
++
++            } else {
++                cUserInterface.pDoNope(this.quantityCompactText, true, true);
++                return;
++            }
++        }
++
++        if (pvAmountDbl < 0) {
++            cUserInterface.pDoNope(this.quantityCompactText, true, true);
++            return;
++        }
++
++        //Determine the new amount
++        if (pvAmountFixedBln) {
++            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;
++            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;
++        }else {
++            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;
++            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;
++        }
++
++    }
++
++    private void mShowNumberPickerFragment() {
++
++        cUserInterface.pCheckAndCloseOpenDialogs();
++
++        Bundle bundle = new Bundle();
++        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, (int) cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.getQuantityDbl());
++
++
++
++        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY, 99999);
++        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();
++        numberpickerFragment.setArguments(bundle);
++        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERFRAGMENT_TAG);
++    }
++
++    private void mShowTextInputFragment() {
++        cUserInterface.pCheckAndCloseOpenDialogs();
++        ItemPropertyTextInputFragment itemPropertyTextInputFragment = new ItemPropertyTextInputFragment();
++        itemPropertyTextInputFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ITEMPROPERTYINPUTTEXTFRAGMENT_TAG);
++    }
++
++    private  void mGoBackToArticleActivity(Boolean pvCancelledBln) {
++
++        Intent intent = new Intent(cAppExtension.context, InventoryArticleActivity.class);
++        InventoryArticleActivity.cancelledViaPropertysBln = pvCancelledBln;
++        cAppExtension.activity.startActivity(intent);
++        cAppExtension.activity.finish();
++    }
++
++    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {
++        @Override
++        public void onReceive(Context context, Intent intent) {
++            int numberChosenInt = 0;
++            Bundle extras = intent.getExtras();
++
++            if (extras != null) {
++                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);
++            }
++            mHandleQuantityChosen(numberChosenInt);
++        }
++    };
++
++    private void mHandleQuantityChosen(double pvQuantityDbl) {
++        this.pTryToChangeCountedQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);
++        this.pRefreshActivity();
++    }
++
++
++
++
++
++    //End Region Private Methods
++}
+Index: app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617287800334)
++++ app/src/main/res/layout/activity_inventoryorderlineitemproperty_input.xml	(date 1617287800334)
+@@ -0,0 +1,34 @@
++<?xml version="1.0" encoding="utf-8"?>
++<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
++    xmlns:app="http://schemas.android.com/apk/res-auto"
++    xmlns:tools="http://schemas.android.com/tools"
++    android:id="@+id/inventoryorderlineItemPropertyInputContainer"
++    tools:context=".Activities.Inventory.InventoryorderLineItemPropertyInputActvity"
++    style="@style/defaultScreen"
++    android:background="@color/colorBart">
++    <include layout="@layout/toolbar_default" />
++    <include layout="@layout/default_articleinfo_compact"
++        android:layout_width="match_parent"
++        android:layout_height="0dp"
++        android:layout_margin="@dimen/default_margin"
++        app:layout_constraintTop_toBottomOf="@id/toolbar"
++        />
++    <androidx.recyclerview.widget.RecyclerView
++        android:id="@+id/itemPropertyRecyclerview"
++        android:layout_width="match_parent"
++        android:layout_height="0dp"
++        android:layout_margin="@dimen/default_margin"
++        android:scrollbars="vertical"
++        app:layout_constraintTop_toBottomOf="@id/articleInfoCompactContainer"
++        app:layout_constraintEnd_toEndOf="parent"
++        app:layout_constraintStart_toStartOf="parent"
++        app:layout_constraintBottom_toTopOf="@id/imageButtonDone"
++        />
++    <androidx.appcompat.widget.AppCompatImageButton
++        android:id="@+id/imageButtonDone"
++        style="@style/smallButton"
++        app:srcCompat="@drawable/ic_check_black_24dp"
++        app:layout_constraintEnd_toEndOf="parent"
++        app:layout_constraintBottom_toBottomOf="parent"
++        />
++</androidx.constraintlayout.widget.ConstraintLayout>
+\ No newline at end of file
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\nimport android.os.AsyncTask;\r\n\r\nimport androidx.sqlite.db.SimpleSQLiteQuery;\r\nimport androidx.sqlite.db.SupportSQLiteQuery;\r\n\r\nimport org.json.JSONException;\r\nimport org.ksoap2.serialization.PropertyInfo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDateAndTime;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.acScanSuiteDatabase;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.cText.pAddSingleQuotesStr;\r\n\r\npublic class cInventoryorderRepository {\r\n    //Region Public Properties\r\n    private final iInventoryorderDao inventoryorderDao;\r\n    private final iInventoryorderBinDao inventoryorderBinDao;\r\n\r\n    private static class InventoryCreateParams {\r\n        String documentStr;\r\n        boolean checkBarcodesBln;\r\n\r\n        InventoryCreateParams(String pvDocumentStr, boolean pvCheckBarcodesBln ) {\r\n            this.documentStr = pvDocumentStr;\r\n            this.checkBarcodesBln = pvCheckBarcodesBln;\r\n        }\r\n    }\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n\r\n    //Region Constructor\r\n    cInventoryorderRepository(Application pvApplication) {\r\n        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);\r\n        this.inventoryorderDao = db.inventoryorderDao();\r\n        this.inventoryorderBinDao = db.inventoryorderBinDao();\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Order\r\n\r\n    public void insert (cInventoryorderEntity inventoryorderEntity) {\r\n        new mInsertAsyncTask(inventoryorderDao).execute(inventoryorderEntity);\r\n    }\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryOrderEntities) {\r\n        new mInsertAllAsyncTask(inventoryorderDao).execute(pvInventoryOrderEntities);\r\n    }\r\n\r\n    public void deleteAll () {\r\n        new mDeleteAllAsyncTask(inventoryorderDao).execute();\r\n    }\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        InventoryCreateParams inventoryCreateParams = new InventoryCreateParams(pvDocumentStr,pvCheckBarcodesBln);\r\n\r\n        try {\r\n            webResultWrs = new mCreateInventoryOrderViaWebserviceAsyncTask().execute(inventoryCreateParams).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetInventoryordersFromWebserviceAsyncTask().execute(pvSearchTextStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesFromDatabaseWithFilterObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {\r\n\r\n        List<cInventoryorderEntity> ResultObl = null;\r\n        StringBuilder SQLStatementStr;\r\n        int i;\r\n\r\n        SQLStatementStr = new StringBuilder( \"SELECT * FROM \" + cDatabase.TABLENAME_INVENTORYORDER);\r\n        if (pvUseFiltersBln) {\r\n//            TTT\r\n            if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE 1=1 \");\r\n            }\r\n//            TTF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != '' \");\r\n            }\r\n//            TFT\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  AssignedUserId = '' \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" OR  CurrentUserId = '' \");\r\n            }\r\n//            FTT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            TFF\r\n            else if (cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n                SQLStatementStr.append(\" OR CurrentUserId = \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" \");\r\n            }\r\n//            FTF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId != \").append(pAddSingleQuotesStr(pvCurrentUserStr.toUpperCase())).append(\" AND  AssignedUserId != '' \");\r\n            }\r\n//            FFT\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = '' AND CurrentUserId = ''\");\r\n            }\r\n//            FFF\r\n            else if (!cSharedPreferences.showAssignedToMeBln() && !cSharedPreferences.showAssignedToOthersBln() && !cSharedPreferences.showNotAssignedBln()) {\r\n                SQLStatementStr.append(\" WHERE AssignedUserId = 'HELEMAALNIEMAND' \");\r\n            }\r\n\r\n            if (cSharedPreferences.showProcessedWaitBln()) {\r\n                SQLStatementStr.append(\" AND (IsProcessingOrParked) \");\r\n            }\r\n        }\r\n\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n\r\n            if (!cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().isEmpty()) {\r\n                String[] splitFields =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFilterfieldStr().split(\"\\\\|\");\r\n                String[] splitValues =    cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getFiltervalueStr().split(\"\\\\|\");\r\n\r\n                if (splitFields.length == splitValues.length) {\r\n\r\n\r\n                    for (i = 0; i < splitFields.length; i++) {\r\n                        if (!SQLStatementStr.toString().toUpperCase().contains(\"WHERE\")) {\r\n                            SQLStatementStr.append(\" WHERE \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                        else {\r\n                            SQLStatementStr.append(\" AND \").append(splitFields[i]).append(\" = \").append(cText.pAddSingleQuotesStr(splitValues[i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        SQLStatementStr.append(\" ORDER BY Priority, Opdrachtnummer ASC\");\r\n\r\n\r\n        try {\r\n            SupportSQLiteQuery query = new SimpleSQLiteQuery(SQLStatementStr.toString());\r\n            ResultObl = new cInventoryorderRepository.mGetInventoriesFromDatabaseWithFilterAsyncTask(inventoryorderDao).execute(query).get();\r\n\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public cWebresult pHandledViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderHandledViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Lines\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderAddLineViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLinesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region BINS\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetPossibleBinsViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinAddViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderBinCloseViaWebserviceAsyncTask().execute(pvBinCodeStr).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinNotDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinDoneFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new mGetInventoryorderBinDoneFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBinEntity> pGetInventoryorderBinTotalFromDatabaseObl() {\r\n        List<cInventoryorderBinEntity> ResultObl = null;\r\n        try {\r\n            ResultObl = new pGetInventoryorderBinTotalFromDatabaseAsyncTask(inventoryorderBinDao).execute().get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ResultObl;\r\n    }\r\n\r\n    //Region Items\r\n\r\n    public cWebresult pAddUnkownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderUnknownItemAddViaWebserviceAsyncTask().execute(pvBarcodeScan).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mInventoryorderERPItemAddViaWebserviceAsyncTask().execute(pvArticleBarcode).get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Line Barcodes\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetLineBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Barcodes\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {\r\n\r\n        List<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetBarcodesViaWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Region Comments\r\n\r\n    public cWebresult pGetCommentsFromWebservice(){\r\n        ArrayList<String> resultObl = new ArrayList<>();\r\n        cWebresult webResultWrs = new cWebresult();\r\n\r\n        try {\r\n            webResultWrs = new mGetCommentsFromWebserviceAsyncTask().execute().get();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            webResultWrs.setResultBln(false);\r\n            webResultWrs.setSuccessBln(false);\r\n            resultObl.add(e.getLocalizedMessage());\r\n            webResultWrs.setResultObl(resultObl);\r\n            e.printStackTrace();\r\n        }\r\n        return webResultWrs;\r\n    }\r\n\r\n    //Endregion Public Methods\r\n\r\n    //Region Orders\r\n    private static class mInsertAsyncTask extends AsyncTask<cInventoryorderEntity, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final cInventoryorderEntity... params) {\r\n            mAsyncTaskDao.insert(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mInsertAllAsyncTask extends AsyncTask<List<cInventoryorderEntity>, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mInsertAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n\r\n        @SafeVarargs\r\n        @Override\r\n        protected final Void doInBackground(final List<cInventoryorderEntity>... params) {\r\n            mAsyncTaskDao.insertAll(params[0]);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mDeleteAllAsyncTask extends AsyncTask<Void, Void, Void> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mDeleteAllAsyncTask(iInventoryorderDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected Void doInBackground(final Void... params) {\r\n            mAsyncTaskDao.deleteAll();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static class mCreateInventoryOrderViaWebserviceAsyncTask extends AsyncTask<InventoryCreateParams, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(InventoryCreateParams... params) {\r\n            cWebresult l_WebresultWrs = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_STOCKOWNER;\r\n                if (cUser.currentUser.currentStockOwner != null){\r\n                    l_PropertyInfo3Pin.setValue(cUser.currentUser.currentStockOwner.getStockownerStr());\r\n                } else {\r\n                    l_PropertyInfo3Pin.setValue(\"\");\r\n                }\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOW;\r\n                l_PropertyInfo4Pin.setValue(cWarehouseorder.WorkflowEnu.IVS.toString());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_DOCUMENT;\r\n                l_PropertyInfo5Pin.setValue(params[0].documentStr);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_EXTERNALREFERENCE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_INVENTORYBARCODECHECK;\r\n                l_PropertyInfo7Pin.setValue(params[0].checkBarcodesBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ADMINISTRATION;\r\n                l_PropertyInfo8Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                new cWebresult();\r\n                l_WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYCREATE, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                l_WebresultWrs.setSuccessBln(false);\r\n                l_WebresultWrs.setResultBln(false);\r\n            }\r\n            return l_WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryordersFromWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final String... params) {\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUNGLISH;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n            l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SEARCHTEXT;\r\n            l_PropertyInfo4Pin.setValue(params[0]);\r\n            l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n            try {\r\n                new cWebresult();\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoriesFromDatabaseWithFilterAsyncTask extends AsyncTask<SupportSQLiteQuery, Void, List<cInventoryorderEntity>> {\r\n        private final iInventoryorderDao mAsyncTaskDao;\r\n\r\n        mGetInventoriesFromDatabaseWithFilterAsyncTask(iInventoryorderDao dao) { mAsyncTaskDao = dao; }\r\n        @Override\r\n        protected List<cInventoryorderEntity> doInBackground(final SupportSQLiteQuery... params) {\r\n            return mAsyncTaskDao.getFilteredInventoryOrders(params[0]);\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderHandledViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo4Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_WORKFLOWSTEPCODESTR;\r\n                l_PropertyInfo5Pin.setValue(cWarehouseorder.WorkflowInventoryStepEnu.InventoryHandled);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_CULTURE;\r\n                l_PropertyInfo6Pin.setValue(\"\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYHANDLED, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Lines\r\n    private static class mGetLinesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetLineBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNER;\r\n                l_PropertyInfo3Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderAddLineViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo6Pin.setValue(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo7Pin.setValue(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_SCANNERID;\r\n                l_PropertyInfo8Pin.setValue(cDeviceInfo.getSerialnumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region BINS\r\n    private static class mGetBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetPossibleBinsViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERPOSSIBLEBINS, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinNotDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinNotDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinNotDone();\r\n        }\r\n    }\r\n\r\n    private static class mGetInventoryorderBinDoneFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        mGetInventoryorderBinDoneFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinDone();\r\n        }\r\n    }\r\n\r\n    private static class pGetInventoryorderBinTotalFromDatabaseAsyncTask extends AsyncTask<Void, Void, List<cInventoryorderBinEntity>> {\r\n        private final iInventoryorderBinDao mAsyncTaskDao;\r\n        pGetInventoryorderBinTotalFromDatabaseAsyncTask(iInventoryorderBinDao dao) {\r\n            mAsyncTaskDao = dao;\r\n        }\r\n        @Override\r\n        protected List<cInventoryorderBinEntity> doInBackground(final Void... params) {\r\n            return mAsyncTaskDao.getInventoryorderBinTotal();\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinAddViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr().toUpperCase());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODE;\r\n                l_PropertyInfo4Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_ADD_BIN, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderBinCloseViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(String... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_HANDLEDTIMESTAMP;\r\n                l_PropertyInfo4Pin.setValue(cDateAndTime.pGetCurrentDateTimeForWebserviceStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_BINCODETINY;\r\n                l_PropertyInfo5Pin.setValue(params[0]);\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBINCLOSE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Items\r\n    private static class mInventoryorderUnknownItemAddViaWebserviceAsyncTask extends AsyncTask<cBarcodeScan, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cBarcodeScan... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(\"UNKNOWN\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cInventoryorder.currentInventoryOrder.getUnknownVariantCounterInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeOriginalStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(cText.pStringToIntegerInt(params[0].getBarcodeTypeStr()));\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(false);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(1);\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(\"???\");\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    private static class mInventoryorderERPItemAddViaWebserviceAsyncTask extends AsyncTask<cArticleBarcode, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(cArticleBarcode... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_USERNAMEDUTCH;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.getUsernameStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();\r\n                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo3Pin);\r\n\r\n                PropertyInfo l_PropertyInfo4Pin = new PropertyInfo();\r\n                l_PropertyInfo4Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMNO;\r\n                l_PropertyInfo4Pin.setValue(cArticle.currentArticle.getItemNoStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo4Pin);\r\n\r\n                PropertyInfo l_PropertyInfo5Pin = new PropertyInfo();\r\n                l_PropertyInfo5Pin.name = cWebserviceDefinitions.WEBPROPERTY_VARIANTCODETINY;\r\n                l_PropertyInfo5Pin.setValue(cArticle.currentArticle.getVariantCodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo5Pin);\r\n\r\n                PropertyInfo l_PropertyInfo6Pin = new PropertyInfo();\r\n                l_PropertyInfo6Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODE;\r\n                l_PropertyInfo6Pin.setValue(params[0].getBarcodeStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo6Pin);\r\n\r\n                PropertyInfo l_PropertyInfo7Pin = new PropertyInfo();\r\n                l_PropertyInfo7Pin.name = cWebserviceDefinitions.WEBPROPERTY_BARCODETYPE;\r\n                l_PropertyInfo7Pin.setValue(params[0].getBarcodeTypeInt());\r\n                l_PropertyInfoObl.add(l_PropertyInfo7Pin);\r\n\r\n                PropertyInfo l_PropertyInfo8Pin = new PropertyInfo();\r\n                l_PropertyInfo8Pin.name = cWebserviceDefinitions.WEBPROPERTY_ISUNIQUEBARCODE;\r\n                l_PropertyInfo8Pin.setValue(params[0].isUniqueBarcodeBln);\r\n                l_PropertyInfoObl.add(l_PropertyInfo8Pin);\r\n\r\n                PropertyInfo l_PropertyInfo9Pin = new PropertyInfo();\r\n                l_PropertyInfo9Pin.name = cWebserviceDefinitions.WEBPROPERTY_QUANTITYPERUNITOFMEASURE;\r\n                l_PropertyInfo9Pin.setValue(params[0].getQuantityPerUnitOfMeasureDbl());\r\n                l_PropertyInfoObl.add(l_PropertyInfo9Pin);\r\n\r\n                PropertyInfo l_PropertyInfo10Pin = new PropertyInfo();\r\n                l_PropertyInfo10Pin.name = cWebserviceDefinitions.WEBPROPERTY_UNITOFMEASURE;\r\n                l_PropertyInfo10Pin.setValue(params[0].getUnitOfMeasureStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo10Pin);\r\n\r\n                PropertyInfo l_PropertyInfo11Pin = new PropertyInfo();\r\n                l_PropertyInfo11Pin.name = cWebserviceDefinitions.WEBPROPERTY_ITEMTYPE;\r\n                l_PropertyInfo11Pin.setValue(cText.pIntToStringStr(cWarehouseorder.ItemTypeEnu.Item));\r\n                l_PropertyInfoObl.add(l_PropertyInfo11Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Barcodes\r\n    private static class mGetBarcodesViaWebserviceAsyncTask extends AsyncTask<Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(Void... params) {\r\n            cWebresult webresult = new cWebresult();\r\n            try {\r\n                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n                l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n                l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n                l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n                new cWebresult();\r\n                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES, l_PropertyInfoObl);\r\n\r\n            } catch (JSONException e) {\r\n                webresult.setSuccessBln(false);\r\n                webresult.setResultBln(false);\r\n            }\r\n            return webresult;\r\n        }\r\n    }\r\n\r\n    //Region Comments\r\n    private static class mGetCommentsFromWebserviceAsyncTask extends AsyncTask <Void, Void, cWebresult> {\r\n        @Override\r\n        protected cWebresult doInBackground(final Void... params){\r\n            cWebresult WebresultWrs = new cWebresult();\r\n\r\n            List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();\r\n\r\n            PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();\r\n            l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;\r\n            l_PropertyInfo1Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo1Pin);\r\n\r\n            PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();\r\n            l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;\r\n            l_PropertyInfo2Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());\r\n            l_PropertyInfoObl.add(l_PropertyInfo2Pin);\r\n\r\n            try{\r\n                WebresultWrs = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS, l_PropertyInfoObl);\r\n            } catch (JSONException e) {\r\n                WebresultWrs.setResultBln(false);\r\n                WebresultWrs.setSuccessBln(false);\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return WebresultWrs;\r\n        }\r\n    }\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderRepository.java	(date 1617285222001)
+@@ -29,6 +29,8 @@
+ import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
+ import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;
+ import SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;
++import SSU_WHS.Picken.Pickorders.cPickorder;
++import SSU_WHS.Picken.Pickorders.cPickorderRepository;
+ import SSU_WHS.Webservice.cWebresult;
+ import SSU_WHS.Webservice.cWebserviceDefinitions;
+ import nl.icsvertex.scansuite.R;
+@@ -439,6 +441,41 @@
+         return webResultWrs;
+     }
+ 
++    //Region Propertys
++    public cWebresult pGetLinePropertysViaWebserviceWrs() {
++
++        List<String> resultObl = new ArrayList<>();
++        cWebresult webResultWrs = new cWebresult();
++
++        try {
++            webResultWrs = new cInventoryorderRepository.mGetPropertysViaWebserviceAsyncTask().execute().get();
++        } catch (ExecutionException | InterruptedException e) {
++            webResultWrs.setResultBln(false);
++            webResultWrs.setSuccessBln(false);
++            resultObl.add(e.getLocalizedMessage());
++            webResultWrs.setResultObl(resultObl);
++            e.printStackTrace();
++        }
++        return webResultWrs;
++    }
++
++    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {
++
++        List<String> resultObl = new ArrayList<>();
++        cWebresult webResultWrs = new cWebresult();
++
++        try {
++            webResultWrs = new cInventoryorderRepository.mGetPropertyValuesViaWebserviceAsyncTask().execute().get();
++        } catch (ExecutionException | InterruptedException e) {
++            webResultWrs.setResultBln(false);
++            webResultWrs.setSuccessBln(false);
++            resultObl.add(e.getLocalizedMessage());
++            webResultWrs.setResultObl(resultObl);
++            e.printStackTrace();
++        }
++        return webResultWrs;
++    }
++
+     //Endregion Public Methods
+ 
+     //Region Orders
+@@ -1142,4 +1179,68 @@
+         }
+     }
+ 
++    //Region Properties
++    //Region Propertys
++    private static class mGetPropertysViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
++        @Override
++        protected cWebresult doInBackground(String... params) {
++            cWebresult webresult = new cWebresult();
++            try {
++                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
++
++                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
++                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
++                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
++                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
++
++                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
++                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
++                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
++                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
++
++                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
++                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
++                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
++                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
++
++                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET, l_PropertyInfoObl);
++            } catch (JSONException e) {
++                webresult.setSuccessBln(false);
++                webresult.setResultBln(false);
++            }
++            return webresult;
++        }
++    }
++
++    private static class mGetPropertyValuesViaWebserviceAsyncTask extends AsyncTask<String, Void, cWebresult> {
++        @Override
++        protected cWebresult doInBackground(String... params) {
++            cWebresult webresult = new cWebresult();
++            try {
++                List<PropertyInfo> l_PropertyInfoObl = new ArrayList<>();
++
++                PropertyInfo l_PropertyInfo1Pin = new PropertyInfo();
++                l_PropertyInfo1Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERTYPE;
++                l_PropertyInfo1Pin.setValue(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString());
++                l_PropertyInfoObl.add(l_PropertyInfo1Pin);
++
++                PropertyInfo l_PropertyInfo2Pin = new PropertyInfo();
++                l_PropertyInfo2Pin.name = cWebserviceDefinitions.WEBPROPERTY_LOCATION_NL;
++                l_PropertyInfo2Pin.setValue(cUser.currentUser.currentBranch.getBranchStr());
++                l_PropertyInfoObl.add(l_PropertyInfo2Pin);
++
++                PropertyInfo l_PropertyInfo3Pin = new PropertyInfo();
++                l_PropertyInfo3Pin.name = cWebserviceDefinitions.WEBPROPERTY_ORDERNUMBER;
++                l_PropertyInfo3Pin.setValue(cInventoryorder.currentInventoryOrder.getOrderNumberStr());
++                l_PropertyInfoObl.add(l_PropertyInfo3Pin);
++
++                webresult = cWebresult.pGetwebresultWrs(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET, l_PropertyInfoObl);
++            } catch (JSONException e) {
++                webresult.setSuccessBln(false);
++                webresult.setResultBln(false);
++            }
++            return webresult;
++        }
++    }
++
+ }
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class cInventoryorder {\r\n\r\n    private final String orderNumberStr;\r\n    public String getOrderNumberStr() {\r\n        return orderNumberStr;\r\n    }\r\n\r\n    private final String orderTypeStr;\r\n    public String getOrderTypeStr() {\r\n        return orderTypeStr;\r\n    }\r\n\r\n    private final int numberOfBinsInt;\r\n    public int getNumberOfBinsInt() {\r\n        return numberOfBinsInt;\r\n    }\r\n\r\n    private final String assignedUserIdStr;\r\n    public String getAssignedUserIdStr() {\r\n        return assignedUserIdStr;\r\n    }\r\n\r\n    private final String currentUserIdStr;\r\n    public String getCurrentUserIdStr() {\r\n        return currentUserIdStr;\r\n    }\r\n\r\n    private String stockownerStr;\r\n    public String getStockownerStr() {\r\n        return stockownerStr;\r\n    }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() {\r\n        return statusInt;\r\n    }\r\n\r\n    private final boolean invAmountManualBln;\r\n    public boolean isInvAmountManualBln() {\r\n        return invAmountManualBln;\r\n    }\r\n\r\n    private final boolean invBarcodeCheckBln;\r\n    public boolean isInvBarcodeCheckBln() {\r\n        return invBarcodeCheckBln;\r\n    }\r\n\r\n    private final boolean invAddExtraBinBln;\r\n    public boolean isInvAddExtraBinBln() {\r\n        return invAddExtraBinBln;\r\n    }\r\n\r\n    private final String externalReferenceStr;\r\n    public String getExternalReferenceStr() {\r\n        return externalReferenceStr;\r\n    }\r\n\r\n    private final int sourceDocumentInt;\r\n    private int getSourceDocumentInt() { return sourceDocumentInt; }\r\n\r\n    private final String documentStr;\r\n    public String getDocumentStr() {\r\n        return documentStr;\r\n    }\r\n\r\n    private final boolean inventoryWithPictureBln;\r\n    public boolean isInventoryWithPictureBln() {\r\n        return inventoryWithPictureBln;\r\n    }\r\n\r\n    private final boolean inventoryWithPicturePrefetchBln;\r\n    private boolean isInventoryWithPicturePrefetchBln() {\r\n        return inventoryWithPicturePrefetchBln;\r\n    }\r\n\r\n    public Boolean isGeneratedBln() {\r\n        return this.getSourceDocumentInt() == cWarehouseorder.SourceDocumentTypeEnu.Generated;\r\n    }\r\n\r\n    public int unknownVariantCounterInt = 0;\r\n    public int getUnknownVariantCounterInt() {\r\n        return unknownVariantCounterInt;\r\n    }\r\n\r\n    private final cInventoryorderEntity inventoryorderEntity;\r\n\r\n    private cInventoryorderViewModel getInventoryorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n    }\r\n\r\n    private cWarehouseorderViewModel getWarehouseorderViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cWarehouseorderViewModel.class);\r\n    }\r\n\r\n    public List<cComment> commentsObl() {\r\n        return cComment.allCommentsObl;\r\n    }\r\n    public List<cInventoryorderBarcode> barcodesObl () {return  cInventoryorderBarcode.allInventoryorderBarcodesObl;}\r\n    private List<cInventoryorderLine> linesObl() {return  cInventoryorderLine.allLinesObl;}\r\n    private List<cArticleImage> imagesObl()  {\r\n        return  cArticleImage.allImages;\r\n    }\r\n\r\n    private static List<cInventoryorder> allCachedOrdersObl;\r\n    public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){\r\n\r\n        if (pvRefreshBln) {\r\n             cInventoryorder.allCachedOrdersObl = null;\r\n        }\r\n\r\n        if (cInventoryorder.allCachedOrdersObl != null) {\r\n            return  cInventoryorder.allCachedOrdersObl;\r\n        }\r\n\r\n        cInventoryorder.allCachedOrdersObl  = new ArrayList<>();\r\n\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        List<cInventoryorderEntity> hulpObl  =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), false);\r\n\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpObl) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            cInventoryorder.allCachedOrdersObl.add(inventoryorder);\r\n        }\r\n\r\n        return  cInventoryorder.allCachedOrdersObl;\r\n\r\n\r\n    }\r\n\r\n    private static List<String> binsObl;\r\n\r\n    public static cInventoryorder currentInventoryOrder;\r\n\r\n    //Region Public Properties\r\n\r\n    //Region Constructor\r\n\r\n    public cInventoryorder(JSONObject pvJsonObject) {\r\n\r\n        this.inventoryorderEntity = new cInventoryorderEntity(pvJsonObject);\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr()) ;\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n    }\r\n\r\n    public cInventoryorder(cInventoryorderEntity pvInventoryorderEntity) {\r\n\r\n        this.inventoryorderEntity = pvInventoryorderEntity;\r\n        this.orderNumberStr = this.inventoryorderEntity.getOrdernumberStr();\r\n        this.orderTypeStr = this.inventoryorderEntity.getOrderTypeStr();\r\n        this.numberOfBinsInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getNumberofBinsStr());\r\n        this.assignedUserIdStr = this.inventoryorderEntity.getAssignedUserIdStr();\r\n        this.currentUserIdStr = this.inventoryorderEntity.getCurrentUserIdStr();\r\n        this.stockownerStr = this.inventoryorderEntity.getStockOwnerStr();\r\n        this.statusInt = cText.pStringToIntegerInt(this.inventoryorderEntity.getStatusStr());\r\n\r\n        this.invAmountManualBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAmountManualStr(), false);\r\n        this.invBarcodeCheckBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvBarcodeCheckStr(), false);\r\n        this.invAddExtraBinBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInvAddExtraBinStr(), false);\r\n\r\n        this.externalReferenceStr = this.inventoryorderEntity.getExternalReferenceStr();\r\n\r\n        this.sourceDocumentInt =  cText.pStringToIntegerInt(this.inventoryorderEntity.getSourceDocumentStr());\r\n        this.documentStr = this.inventoryorderEntity.getDocumentStr();\r\n\r\n        this.inventoryWithPictureBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPictureStr(),false) ;\r\n        this.inventoryWithPicturePrefetchBln = cText.pStringToBooleanBln(this.inventoryorderEntity.getInventoryWithPicturePrefetchStr(),false) ;\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    //Region Orders\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderViewModel().insert(this.inventoryorderEntity);\r\n        return true;\r\n    }\r\n\r\n    public static Boolean pCreateInventoryOrderViaWebserviceBln(String pvDocumentStr, boolean pvCheckBarcodesBln) {\r\n\r\n        cWebresult WebResult;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);\r\n\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()) {\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(WebResult.getResultDtt().get(0));\r\n                inventoryorder.pInsertInDatabaseBln();\r\n                cInventoryorder.currentInventoryOrder = inventoryorder;\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETPICKORDERS);\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static boolean pGetInventoryOrdersViaWebserviceBln(Boolean pvRefreshBln, String pvSearchTextStr) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorder.mTruncateTable();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        WebResult = inventoryorderViewModel.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            List<cInventoryorderEntity> insertObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorder inventoryorder = new cInventoryorder(jsonObject);\r\n                insertObl.add(inventoryorder.inventoryorderEntity);\r\n            }\r\n\r\n            //Batch insert in database\r\n            cInventoryorder.mInsertAllInDatabase(insertObl);\r\n\r\n            //Make sure memory is filled\r\n            cInventoryorder.allInventoryOrdersObl(true);\r\n            return true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERS);\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public cResult pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        //Initialise result\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult Webresult;\r\n        boolean ignoreBusyBln = false;\r\n\r\n        if (this.getStatusInt() > 10 && cUser.currentUser.getUsernameStr().equalsIgnoreCase(this.getCurrentUserIdStr())) {\r\n            ignoreBusyBln = true;\r\n        }\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockWarehouseopdrachtViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(),\r\n                this.getOrderNumberStr(),\r\n                cDeviceInfo.getSerialnumberStr(),\r\n                pvStepCodeEnu.toString(),\r\n                pvWorkFlowStepInt,\r\n                ignoreBusyBln);\r\n\r\n        //No result, so something really went wrong\r\n        if (Webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (Webresult.getSuccessBln() && Webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!Webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_lock_order));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() >= 2 && Webresult.getResultObl().get(0).equalsIgnoreCase(\"invalid_user_not_assigned\")) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_meant_for_other_user)) + \" \" + Webresult.getResultObl().get(1));\r\n            return result;\r\n        }\r\n\r\n        //Check if this activity is meant for a different user\r\n        if (!Webresult.getResultBln() && Webresult.getResultLng() <= 0 && Webresult.getResultObl() != null &&\r\n                Webresult.getResultObl().size() > 0 && ! Webresult.getResultObl().get(0).equalsIgnoreCase(cUser.currentUser.getUsernameStr())) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString((R.string.message_another_user_already_started)) + \" \" + Webresult.getResultObl().get(0));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!Webresult.getResultBln()&& Webresult.getResultLng() > 0) {\r\n\r\n            //Try to convert result long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(Webresult.getResultLng().intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_will_be_deleted)));\r\n            }\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.order_cant_be_started)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(Webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public boolean pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu pvStepCodeEnu, int pvWorkFlowStepInt) {\r\n\r\n        cWebresult Webresult;\r\n\r\n        Webresult = this.getWarehouseorderViewModel().pLockReleaseWarehouseorderViaWebserviceWrs(cWarehouseorder.OrderTypeEnu.INVENTARISATIE.toString(), this.getOrderNumberStr(), cDeviceInfo.getSerialnumberStr(), pvStepCodeEnu.toString(), pvWorkFlowStepInt);\r\n\r\n        return Webresult.getSuccessBln() && Webresult.getResultBln();\r\n    }\r\n\r\n    public void pDeleteDetails() {\r\n        cInventoryorderLine.pTruncateTableBln();\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorderBarcode.pTruncateTableBln();\r\n        cInventoryorderLineBarcode.pTruncateTableBln();\r\n    }\r\n\r\n    public cResult pOrderHandledViaWebserviceRst() {\r\n\r\n        cResult result;\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n\r\n        cWebresult webresult;\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        webresult =  inventoryorderViewModel.pHandledViaWebserviceWrs();\r\n\r\n        //No result, so something really went wrong\r\n        if (webresult == null) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        //Everything was fine, so we are done\r\n        if (webresult.getSuccessBln() && webresult.getResultBln()) {\r\n            result.resultBln = true;\r\n            return result;\r\n        }\r\n\r\n        //Something really went wrong\r\n        if (!webresult.getSuccessBln()) {\r\n            result.resultBln = false;\r\n            result.activityActionEnu = cWarehouseorder.ActivityActionEnu.Unknown;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_couldnt_handle_step));\r\n            return result;\r\n        }\r\n\r\n        // We got a succesfull response, but we need to do something with this activity\r\n        if (!webresult.getResultBln() && webresult.getResultLng() > 0 ) {\r\n\r\n            Long actionLng = 0L;\r\n\r\n            if (webresult.getResultLng() < 10 ) {\r\n                actionLng = webresult.getResultLng();\r\n            }\r\n\r\n            if (webresult.getResultLng() > 100) {\r\n                actionLng  = webresult.getResultLng()/100;\r\n            }\r\n\r\n            //Try to convert action long to action enumerate\r\n            cWarehouseorder.ActivityActionEnu activityActionEnu = cWarehouseorder.pGetActivityActionEnu(actionLng.intValue());\r\n\r\n            result.resultBln = false;\r\n            result.activityActionEnu = activityActionEnu;\r\n\r\n            if (result.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold) {\r\n                result.pAddErrorMessage(cAppExtension.context.getString((R.string.hold_the_order)));\r\n            }\r\n\r\n            cInventoryorder.currentInventoryOrder.mGetCommentsViaWebError(webresult.getResultDtt());\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n\r\n\r\n    }\r\n\r\n    public static List<cInventoryorder> pGetInventoriesWithFilterFromDatabasObl() {\r\n\r\n        List<cInventoryorder> resultObl = new ArrayList<>();\r\n        List<cInventoryorderEntity> hulpResultObl;\r\n\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        hulpResultObl =  inventoryorderViewModel.pGetInventoriesWithFilterFromDatabaseObl(cUser.currentUser.getUsernameStr(), cSharedPreferences.userFilterBln());\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderEntity inventoryorderEntity : hulpResultObl ) {\r\n            cInventoryorder inventoryorder = new cInventoryorder(inventoryorderEntity);\r\n            resultObl.add(inventoryorder);\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    public  boolean pCheckBarcodeWithLineBarcodesBln(cBarcodeScan pvBarcodeScan){\r\n\r\n        //If scanned value matches the current barcodeStr, then we have a match\r\n        if (pvBarcodeScan.getBarcodeOriginalStr().equalsIgnoreCase(cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr()) ||\r\n            pvBarcodeScan.getBarcodeFormattedStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeWithoutCheckDigitStr()) ) {\r\n            //We have a match, so leave\r\n            return  true;\r\n        }\r\n\r\n        //Check if this is a barcodeStr we already know\r\n        cInventoryorderBarcode inventoryorderBarcode = cInventoryorder.currentInventoryOrder.pGetOrderBarcode(pvBarcodeScan);\r\n\r\n        //We scanned a barcodeStr unknown to the order\r\n        if (inventoryorderBarcode == null) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr for a different article\r\n        if (!inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) ||\r\n            ! inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n            return false;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLine.currentInventoryOrderLine.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode = inventoryorderLineBarcode;\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n\r\n        //Scanned barcodeStr is correct, but we need to create a line barcodeStr\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode =  cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(inventoryorderBarcode.getBarcodeStr(),inventoryorderBarcode.getQuantityPerUnitOfMeasureDbl(), true);\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n        return  true;\r\n\r\n    }\r\n\r\n    private static  void mTruncateTable() {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.deleteAll();\r\n    }\r\n\r\n    //End Region Orders\r\n\r\n    //Region Lines\r\n\r\n    public boolean pGetLinesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderLine.allLinesObl = null;\r\n            cInventoryorderLine.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n\r\n        WebResult = getInventoryorderViewModel().pGetLinesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderLine.allLinesObl == null) {\r\n                cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderLineEntity> importObl = new ArrayList<>();\r\n            List<cInventoryorderLine> objectObl = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cInventoryorderLine inventoryorderLine = new cInventoryorderLine(jsonObject);\r\n\r\n                if (inventoryorderLine.getQuantityHandledAllScannersDbl() > inventoryorderLine.getQuantityDbl()) {\r\n                    inventoryorderLine.quantityHandledDbl = inventoryorderLine.getQuantityHandledAllScannersDbl();\r\n                }\r\n\r\n\r\n                importObl.add(inventoryorderLine.inventoryorderLineEntity);\r\n                objectObl.add((inventoryorderLine));\r\n\r\n                if (! inventoryorderLine.getHandeledTimeStampStr().isEmpty()) {\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin  =   cInventoryorder.currentInventoryOrder.pGetBin(inventoryorderLine.getBinCodeStr());\r\n                    if ( cInventoryorderBin.currentInventoryOrderBin == null) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                        cInventoryorderBin.currentInventoryOrderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.InventoryDone;\r\n                    }\r\n\r\n                    cInventoryorderBin.currentInventoryOrderBin.pUpdateStatusAndTimeStampInDatabase();\r\n                    cInventoryorderBin.currentInventoryOrderBin = null;\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderLine.pInsertAllInDatabase(objectObl,importObl);\r\n\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINES);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddLineBln() {\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pAddLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderLine.currentInventoryOrderLine= new cInventoryorderLine(WebResult.getResultDtt().get(0));\r\n                cInventoryorderLine.currentInventoryOrderLine.pInsertInDatabaseBln();\r\n                cInventoryorderLine.currentInventoryOrderLine.pAddLineBarcode(cInventoryorderBarcode.currentInventoryOrderBarcode.getBarcodeStr(),cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl(), false);\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public List<cInventoryorderLine> pGetLinesForBinObl(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderLine> resultObl = new ArrayList<>();\r\n        for (cInventoryorderLine inventoryorderLine : cInventoryorder.currentInventoryOrder.linesObl()) {\r\n            if (inventoryorderLine.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                resultObl.add((inventoryorderLine));\r\n            }\r\n        }\r\n\r\n        if (resultObl.size() > 1) {\r\n            Collections.reverse(resultObl);\r\n        }\r\n\r\n        return resultObl;\r\n    }\r\n\r\n    public Double pGetTotalItemCountDbl() {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetTotalCountDbl();\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public Double pGetItemCountForBinDbl(String pvBincodeStr) {\r\n\r\n        Double resultDbl;\r\n\r\n        cInventoryorderLineViewModel inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        resultDbl = inventoryorderLineViewModel.pGetCountForBinCodeDbl(pvBincodeStr);\r\n        if (resultDbl == null ) {\r\n            return (double) 0;\r\n        }\r\n\r\n        return resultDbl;\r\n    }\r\n\r\n    public cInventoryorderLine pGetLineForArticleAndBin() {\r\n\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            //Check if BIN matches current BIN\r\n            if (! inventoryorderLine.getBinCodeStr().equalsIgnoreCase(   cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr())) {\r\n                continue;\r\n            }\r\n\r\n            //Check if item matches scanned item\r\n            if (inventoryorderLine.getItemNoStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getItemNoStr()) &&\r\n                    inventoryorderLine.getVariantCodeStr().equalsIgnoreCase(cInventoryorderBarcode.currentInventoryOrderBarcode.getVariantCodeStr())) {\r\n                return  inventoryorderLine;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pGetOrderDetailsRst(){\r\n\r\n        cResult result;\r\n\r\n        result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        //Get all bins for current order, if webservice error then stop\r\n        if (!this.mGetBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.pGetLinesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_lines_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all linesInt for current order, if size = 0 or webservice error then stop\r\n        if (!this.mGetPossibleBinsViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_possible_bins_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all comments\r\n        if (!this.pGetCommentsViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_comments_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all barcodes\r\n        if (!this.pGetBarcodesViaWebserviceBln(true)) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        //Get all inventorylinebarcodes\r\n        if (!this.mGetLineBarcodesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_barcodes_failed));\r\n            return result;\r\n        }\r\n\r\n        // Get all article images, only if neccesary\r\n        if (!this.mGetArticleImagesViaWebserviceBln()) {\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));\r\n            return result;\r\n        }\r\n\r\n        return  result;\r\n    }\r\n\r\n    private cInventoryorderLine mGetLineWithLineNo(Long pvLineNoLng) {\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n\r\n            if (cText.pIntToStringStr(inventoryorderLine.getLineNoInt()).equalsIgnoreCase(cText.pLongToStringStr(pvLineNoLng))) {\r\n                return  inventoryorderLine;\r\n            }\r\n\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Lines\r\n\r\n    //Region BINS\r\n\r\n    private boolean mGetBinsViaWebserviceBln() {\r\n\r\n        cInventoryorderBin.allInventoryorderBinsObl = null;\r\n        cInventoryorderBin.pTruncateTableBln();\r\n        cInventoryorder.binsObl = new ArrayList<>();\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            List<cInventoryorderBinEntity> insertObl = new ArrayList<>();\r\n            List<cInventoryorderBin> closedBinsObl = new ArrayList<>();\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n\r\n                insertObl.add(inventoryorderBin.inventoryorderBinEntity);\r\n\r\n                if (inventoryorderBin.getStatusInt() ==  cWarehouseorder.InventoryBinStatusEnu.InventoryDoneOnServer && !cInventoryorder.currentInventoryOrder.isGeneratedBln()) {\r\n                    closedBinsObl.add(inventoryorderBin);\r\n                }\r\n\r\n            }\r\n\r\n            cInventoryorderBin.pInsertAllInDatabase(insertObl);\r\n\r\n            //Close all BINS in database after they got inserted\r\n            for (cInventoryorderBin inventoryorderBin : closedBinsObl) {\r\n                inventoryorderBin.pCloseBln(false);\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private boolean mGetPossibleBinsViaWebserviceBln() {\r\n\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult = getInventoryorderViewModel().pGetPossibleBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()) {\r\n\r\n            if (cInventoryorderBin.allInventoryorderBinsObl == null) {\r\n                cInventoryorderBin.allInventoryorderBinsObl = new ArrayList<>();\r\n            }\r\n\r\n            for ( JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n\r\n                cInventoryorderBin inventoryorderBin = new cInventoryorderBin(jsonObject);\r\n\r\n                if (cInventoryorder.binsObl.contains(inventoryorderBin.getBinCodeStr())) {\r\n                    continue;\r\n                }\r\n\r\n                cInventoryorder.binsObl.add(inventoryorderBin.getBinCodeStr());\r\n                inventoryorderBin.pInsertInDatabaseBln();\r\n                inventoryorderBin.statusInt = cWarehouseorder.InventoryBinStatusEnu.New;\r\n                inventoryorderBin.pUpdateStatusAndTimeStampInDatabase();\r\n\r\n            }\r\n\r\n            return  true;\r\n\r\n        } else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBINS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsNotDoneFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsNotDoneFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public List<cInventoryorderBin> pGetBinsTotalFromDatabasObl() {\r\n\r\n        List<cInventoryorderBin> resultObl = new ArrayList<>();\r\n        List<cInventoryorderBinEntity> hulpResultObl;\r\n\r\n        hulpResultObl =  getInventoryorderViewModel().pGetBinsTotalFromDatabaseObl();\r\n        if (hulpResultObl == null || hulpResultObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        for (cInventoryorderBinEntity inventoryorderBinEntity : hulpResultObl ) {\r\n            cInventoryorderBin inventoryorderBin = new cInventoryorderBin(inventoryorderBinEntity);\r\n            resultObl.add(inventoryorderBin);\r\n        }\r\n        return  resultObl;\r\n    }\r\n\r\n    public cInventoryorderBin pGetBin(String pvBincodeStr) {\r\n\r\n        List<cInventoryorderBin> hulpObl;\r\n\r\n        hulpObl = this.pGetBinsTotalFromDatabasObl();\r\n\r\n        if (hulpObl == null || hulpObl.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        for (cInventoryorderBin inventoryorderBin : hulpObl) {\r\n            if (inventoryorderBin.getBinCodeStr().equalsIgnoreCase(pvBincodeStr)) {\r\n                return  inventoryorderBin;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cInventoryorderBin pAddInventoryBin(cBranchBin pvBranchBin) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddBinViaWebserviceWrs(pvBranchBin.getBinCodeStr());\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBin InventoryorderBin = new cInventoryorderBin(WebResult.getResultDtt().get(0));\r\n                InventoryorderBin.pInsertInDatabaseBln();\r\n                return  InventoryorderBin;\r\n            }\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  null;\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    //End Region BINS\r\n\r\n    //Region Barcodes\r\n\r\n    public boolean pGetBarcodesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cInventoryorderBarcode.allInventoryorderBarcodesObl = null;\r\n            cInventoryorderBarcode.pTruncateTableBln();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pGetBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln() ){\r\n\r\n            if (cInventoryorderBarcode.allInventoryorderBarcodesObl == null) {\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            List<cInventoryorderBarcodeEntity> inventoryorderEntities = new ArrayList<>();\r\n\r\n            for (JSONObject jsonObject :WebResult.getResultDtt() ) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(jsonObject);\r\n                inventoryorderEntities.add(inventoryorderBarcode.inventoryorderBarcodeEntity);\r\n                cInventoryorderBarcode.allInventoryorderBarcodesObl.add(inventoryorderBarcode);\r\n            }\r\n\r\n            cInventoryorderBarcode.pInsertAllInDatabase(inventoryorderEntities);\r\n            return true;\r\n        }\r\n\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERBARCODES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pAddUnkownBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cInventoryorder.currentInventoryOrder.unknownVariantCounterInt += 1;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderViewModel().pAddUnknownItemViaWebserviceWrs(pvBarcodeScan);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln() ){\r\n\r\n            if (WebResult.getResultDtt().size() == 1) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(WebResult.getResultDtt().get(0));\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                return  true;\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_RECEIVEITEMVARIANTCREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    public boolean pAddERPBarcodeBln(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        //Get article info via the web service\r\n        cArticle.currentArticle  = cArticle.pGetArticleByBarcodeViaWebservice(pvBarcodeScan);\r\n\r\n        //We failed to get the article\r\n        if (cArticle.currentArticle == null) {\r\n            return false;\r\n        }\r\n\r\n        //Get barcodes for this article\r\n        if (!cArticle.currentArticle.pGetBarcodesViaWebserviceBln(pvBarcodeScan)) {\r\n            return false;\r\n        }\r\n\r\n        //Search for the scanned barcodeStr in the article barcodes\r\n        cArticleBarcode matchedArticleBarcode = null;\r\n        for (cArticleBarcode articleBarcode : cArticle.currentArticle.barcodesObl) {\r\n            if (articleBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                    articleBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                matchedArticleBarcode = articleBarcode;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //We didn't find a match, so no use in adding the line\r\n        if (matchedArticleBarcode == null) {\r\n            return  false;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  getInventoryorderViewModel().pAddERPItemViaWebserviceWrs(matchedArticleBarcode);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            for (cArticleBarcode articleBarcode :  cArticle.currentArticle.barcodesObl) {\r\n                cInventoryorderBarcode inventoryorderBarcode = new cInventoryorderBarcode(articleBarcode);\r\n                inventoryorderBarcode.pInsertInDatabaseBln();\r\n\r\n                if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                        inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                    cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYBARCODECREATE);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Barcodes\r\n\r\n    //Region Line Barcode\r\n\r\n    private boolean mGetLineBarcodesViaWebserviceBln() {\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = null;\r\n            cInventoryorderLineBarcode.pTruncateTableBln();\r\n\r\n        cWebresult WebResult =  getInventoryorderViewModel().pGetLineBarcodesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<cInventoryorderLineBarcodeEntity> insertObl = new ArrayList<>();\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode(jsonObject);\r\n                insertObl.add((inventoryorderLineBarcode.inventoryorderLineBarcodeEntity));\r\n\r\n                //Search for line that belongs to this barcodeStr\r\n                cInventoryorderLine inventoryorderLine = cInventoryorder.currentInventoryOrder.mGetLineWithLineNo(inventoryorderLineBarcode.getLineNoLng());\r\n\r\n                //If we can't find it, skip this\r\n                if (inventoryorderLine == null) {\r\n                    continue;\r\n                }\r\n\r\n                //Add barcodeStr to line\r\n                inventoryorderLine.pAddLineBarcode(inventoryorderLineBarcode.getBarcodeStr(),inventoryorderLineBarcode.getQuantityhandledDbl(), false);\r\n\r\n            }\r\n\r\n            cInventoryorderLineBarcode.pInsertAllInDatabase(insertObl);\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERLINEBARCODES);\r\n            return  false;\r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    //End Region Line Barcode\r\n\r\n    //Region Barcode\r\n\r\n    public cInventoryorderBarcode pGetOrderBarcode(cBarcodeScan pvBarcodescan) {\r\n\r\n        if (this.barcodesObl() == null || this.barcodesObl().size() == 0)  {\r\n            return  null;\r\n        }\r\n\r\n        for (cInventoryorderBarcode inventoryorderBarcode : this.barcodesObl()) {\r\n\r\n            if (inventoryorderBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodescan.getBarcodeOriginalStr()) ||\r\n                    inventoryorderBarcode.getBarcodeWithoutCheckDigitStr().equalsIgnoreCase(pvBarcodescan.getBarcodeFormattedStr())) {\r\n                return  inventoryorderBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n\r\n    }\r\n\r\n    //End Region Barcode\r\n\r\n    //Region Images\r\n\r\n    private boolean mGetArticleImagesViaWebserviceBln() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()  || !cInventoryorder.currentInventoryOrder.isInventoryWithPicturePrefetchBln()) {\r\n            return  true;\r\n        }\r\n\r\n\r\n            cArticleImage.allImages = null;\r\n            cArticleImage.pTruncateTableBln();\r\n\r\n\r\n        if (this.imagesObl()  != null) {\r\n            return  true;\r\n        }\r\n\r\n        if (this.linesObl() == null || this.linesObl().size() == 0) {\r\n            return  false;\r\n        }\r\n\r\n        List<String> itemNoAndVariantCodeObl;\r\n        itemNoAndVariantCodeObl = new ArrayList<>();\r\n\r\n        for (cInventoryorderLine inventoryorderLine : this.linesObl()) {\r\n            String itemNoAndVariantCodeStr = inventoryorderLine.getItemNoStr() + \";\" + inventoryorderLine.getVariantCodeStr();\r\n\r\n            if (!itemNoAndVariantCodeObl.contains(itemNoAndVariantCodeStr)) {\r\n                itemNoAndVariantCodeObl.add(itemNoAndVariantCodeStr);\r\n            }\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        WebResult =  articleImageViewModel.pGetArticleImagesFromWebserviceWrs(itemNoAndVariantCodeObl);\r\n        if (WebResult.getResultBln()&& WebResult.getSuccessBln()){\r\n\r\n            cArticleImage.allImages = new ArrayList<>();\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cArticleImage articleImage = new cArticleImage(jsonObject);\r\n\r\n                if ( !cArticleImage.allImages.contains(articleImage)) {\r\n                    articleImage.pInsertInDatabaseBln();\r\n                    cArticleImage.allImages.add((articleImage));\r\n                }\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETARTICLEIMAGESMULTIPLE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    //End Region Images\r\n\r\n    //Region Comments\r\n\r\n    public boolean pGetCommentsViaWebserviceBln(Boolean pvRefeshBln) {\r\n\r\n        if (pvRefeshBln) {\r\n            cComment.allCommentsObl = null;\r\n            cComment.pTruncateTableBln();\r\n            cComment.commentsShownBln = false;\r\n        }\r\n\r\n        cWebresult webresult;\r\n        webresult = getInventoryorderViewModel().pGetCommentsFromWebserviceWrs();\r\n        if (webresult.getResultBln()&& webresult.getSuccessBln()) {\r\n\r\n            cComment.allCommentsObl = new ArrayList<>();\r\n\r\n            List<JSONObject> myList = webresult.getResultDtt();\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n                cComment comment = new cComment(jsonObject);\r\n                comment.pInsertInDatabaseBln();\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETINVENTORYORDERCOMMENTS);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public List<cComment> pFeedbackCommentObl(){\r\n\r\n        if (cInventoryorder.currentInventoryOrder.commentsObl() == null || cInventoryorder.currentInventoryOrder.commentsObl().size() == 0) {\r\n            return  null;\r\n        }\r\n\r\n        return cComment.pGetCommentsForTypeObl(cWarehouseorder.CommentTypeEnu.FEEDBACK);\r\n\r\n    }\r\n\r\n    private static  void mInsertAllInDatabase(List<cInventoryorderEntity> pvInventoryOrderEntityObl ) {\r\n        cInventoryorderViewModel inventoryorderViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderViewModel.class);\r\n        inventoryorderViewModel.insertAll (pvInventoryOrderEntityObl);\r\n    }\r\n\r\n    private void mGetCommentsViaWebError(List<JSONObject> pvResultDtt) {\r\n\r\n        cComment.allCommentsObl = new ArrayList<>();\r\n        for (JSONObject jsonObject : pvResultDtt) {\r\n            cComment comment = new cComment(jsonObject);\r\n            comment.pInsertInDatabaseBln();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //End Region Comments\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorder.java	(date 1617287546910)
+@@ -2,10 +2,12 @@
+ 
+ import androidx.lifecycle.ViewModelProvider;
+ 
++import org.json.JSONException;
+ import org.json.JSONObject;
+ 
+ import java.util.ArrayList;
+ import java.util.Collections;
++import java.util.LinkedHashMap;
+ import java.util.List;
+ 
+ import ICS.Utils.Scanning.cBarcodeScan;
+@@ -20,10 +22,13 @@
+ import SSU_WHS.Basics.ArticleImages.cArticleImage;
+ import SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;
+ import SSU_WHS.Basics.BranchBin.cBranchBin;
++import SSU_WHS.Basics.PropertyGroup.cPropertyGroup;
++import SSU_WHS.Basics.PropertyGroup.cPropertyGroupViewModel;
+ import SSU_WHS.Basics.Users.cUser;
+ import SSU_WHS.General.Comments.cComment;
+ import SSU_WHS.General.Warehouseorder.cWarehouseorder;
+ import SSU_WHS.General.Warehouseorder.cWarehouseorderViewModel;
++import SSU_WHS.General.cDatabase;
+ import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
+ import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;
+ import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
+@@ -33,6 +38,10 @@
+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineViewModel;
++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLineProperty;
++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValue;
+ import SSU_WHS.Webservice.cWebresult;
+ import SSU_WHS.Webservice.cWebserviceDefinitions;
+ import nl.icsvertex.scansuite.R;
+@@ -122,6 +131,7 @@
+         return unknownVariantCounterInt;
+     }
+ 
++    public  LinkedHashMap<Integer, List<JSONObject>>  itemProperyDataObl;
+     private final cInventoryorderEntity inventoryorderEntity;
+ 
+     private cInventoryorderViewModel getInventoryorderViewModel() {
+@@ -140,6 +150,7 @@
+     private List<cArticleImage> imagesObl()  {
+         return  cArticleImage.allImages;
+     }
++    public List<cInventoryorderLineProperty> linePropertysObl() { return  cInventoryorderLineProperty.allLinePropertysObl; }
+ 
+     private static List<cInventoryorder> allCachedOrdersObl;
+     public static List<cInventoryorder> allInventoryOrdersObl(Boolean pvRefreshBln ){
+@@ -736,6 +747,20 @@
+             result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_article_images_failed));
+             return result;
+         }
++
++        // Get all propertys, if webservice error then stop
++        if (!this.mGetLinePropertysViaWebserviceBln( )) {
++            result.resultBln = false;
++            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_propertys_failed));
++            return result;
++        }
++
++        // Get all property values, if webservice error then stop
++        if (!this.mGetLinePropertyValuesViaWebserviceBln( )) {
++            result.resultBln = false;
++            result.pAddErrorMessage(cAppExtension.context.getString(R.string.error_get_line_property_values_failed));
++            return result;
++        }
+ 
+         return  result;
+     }
+@@ -1236,6 +1261,52 @@
+ 
+     }
+ 
++    //Properties
++    private boolean mGetLinePropertysViaWebserviceBln() {
++
++        cInventoryorderLineProperty.allLinePropertysObl = null;
++        cInventoryorderLineProperty.pTruncateTableBln();
++
++        cWebresult WebResult;
++        WebResult =  this.getInventoryorderViewModel().pGetLinePropertysViaWebserviceWrs();
++        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
++
++            for (JSONObject jsonObject : WebResult.getResultDtt()) {
++                cInventoryorderLineProperty inventoryorderLineProperty = new cInventoryorderLineProperty(jsonObject);
++                inventoryorderLineProperty.pInsertInDatabaseBln();
++            }
++
++            return  true;
++        }
++        else {
++            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIESGET);
++            return  false;
++        }
++    }
++
++    private boolean mGetLinePropertyValuesViaWebserviceBln() {
++
++
++        cPickorderLinePropertyValue.allLinePropertysValuesObl = null;
++        cPickorderLinePropertyValue.pTruncateTableBln();
++
++        cWebresult WebResult;
++        WebResult =  this.getInventoryorderViewModel().pGetLinePropertyValuesViaWebserviceWrs();
++        if (WebResult.getResultBln() && WebResult.getSuccessBln()){
++
++            for (JSONObject jsonObject : WebResult.getResultDtt()) {
++                cInventoryorderLinePropertyValue inventoryorderLinePropertyValue = new cInventoryorderLinePropertyValue(jsonObject);
++                inventoryorderLinePropertyValue.pInsertInDatabaseBln();
++            }
++
++            return  true;
++        }
++        else {
++            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_WAREHOUSEOPDRACHTLINEITEMPROPERTIEVALUESGET);
++            return  false;
++        }
++    }
++
+     //End Region Comments
+ 
+ }
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package SSU_WHS.Inventory.InventoryOrders;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.lifecycle.AndroidViewModel;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport SSU_WHS.Basics.ArticleBarcode.cArticleBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Webservice.cWebresult;\r\n\r\npublic class cInventoryorderViewModel extends AndroidViewModel {\r\n    //Region Public Properties\r\n    private cInventoryorderRepository Repository;\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderViewModel(Application pvApplication) {\r\n        super(pvApplication);\r\n        this.Repository = new cInventoryorderRepository(pvApplication);\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n    public void insert(cInventoryorderEntity pvInventoryorderEntity) {this.Repository.insert(pvInventoryorderEntity);}\r\n\r\n    public void insertAll(List<cInventoryorderEntity>  pvInventoryorderEntities) {this.Repository.insertAll(pvInventoryorderEntities);}\r\n\r\n    public void deleteAll() {this.Repository.deleteAll();}\r\n\r\n    public cWebresult pCreateInventoryOrderViaWebserviceWrs(String pvDocumentStr, boolean pvCheckBarcodesBln) {return this.Repository.pCreateInventoryOrderViaWebserviceWrs(pvDocumentStr, pvCheckBarcodesBln);}\r\n\r\n    public cWebresult pGetInventoryordersFromWebserviceWrs(String pvSearchTextStr) {return this.Repository.pGetInventoryordersFromWebserviceWrs(pvSearchTextStr);}\r\n\r\n    public List<cInventoryorderEntity> pGetInventoriesWithFilterFromDatabaseObl(String pvCurrentUserStr, Boolean pvUseFiltersBln) {return this.Repository.pGetInventoriesFromDatabaseWithFilterObl(pvCurrentUserStr, pvUseFiltersBln);}\r\n\r\n    public cWebresult pAddBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pAddBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pCloseBinViaWebserviceWrs(String pvBinCodeStr) {return this.Repository.pCloseBinViaWebserviceWrs(pvBinCodeStr);}\r\n\r\n    public cWebresult pAddUnknownItemViaWebserviceWrs(cBarcodeScan pvBarcodeScan) {return this.Repository.pAddUnkownItemViaWebserviceWrs(pvBarcodeScan);}\r\n\r\n    public cWebresult pAddERPItemViaWebserviceWrs(cArticleBarcode pvArticleBarcode) {return this.Repository.pAddERPItemViaWebserviceWrs(pvArticleBarcode);}\r\n\r\n    public cWebresult pAddLineViaWebserviceWrs() {return this.Repository.pAddLineViaWebserviceWrs();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsNotDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinNotDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsDoneFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinDoneFromDatabaseObl();}\r\n\r\n    public List<cInventoryorderBinEntity> pGetBinsTotalFromDatabaseObl(){return  this.Repository.pGetInventoryorderBinTotalFromDatabaseObl();}\r\n\r\n    public cWebresult pGetLinesFromWebserviceWrs( ) {return this.Repository.pGetLinesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetBinsFromWebserviceWrs( ) {return this.Repository.pGetBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetPossibleBinsFromWebserviceWrs( ) {return this.Repository.pGetPossibleBinsFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetCommentsFromWebserviceWrs() {return this.Repository.pGetCommentsFromWebservice(); }\r\n\r\n    public cWebresult pGetBarcodesFromWebserviceWrs() {return this.Repository.pGetBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pGetLineBarcodesFromWebserviceWrs() {return this.Repository.pGetLineBarcodesFromWebserviceWrs();}\r\n\r\n    public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryOrders/cInventoryorderViewModel.java	(date 1617285222046)
+@@ -66,4 +66,8 @@
+ 
+     public cWebresult pHandledViaWebserviceWrs(){return this.Repository.pHandledViaWebserviceWrs();}
+ 
++    public cWebresult pGetLinePropertysViaWebserviceWrs() {return this.Repository.pGetLinePropertysViaWebserviceWrs(); }
++
++    public cWebresult pGetLinePropertyValuesViaWebserviceWrs() {return this.Repository.pGetLinePropertyValuesViaWebserviceWrs(); }
++
+ }
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package SSU_WHS.Inventory.InventoryorderLines;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImage;\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageViewModel;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class cInventoryorderLine {\r\n\r\n    public cInventoryorderLineEntity inventoryorderLineEntity;\r\n\r\n    public static List<cInventoryorderLine> allLinesObl;\r\n    public static cInventoryorderLine currentInventoryOrderLine;\r\n\r\n    public List<cInventoryorderBarcode> barcodesObl(){\r\n\r\n        List<cInventoryorderBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cInventoryorder.currentInventoryOrder.barcodesObl() == null || cInventoryorder.currentInventoryOrder.barcodesObl().size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        //Loop through all barcodes, and if item matches add it to the list\r\n        for (cInventoryorderBarcode inventoryorderBarcode : cInventoryorder.currentInventoryOrder.barcodesObl()) {\r\n                        if (inventoryorderBarcode.getItemNoStr().equalsIgnoreCase(this.getItemNoStr()) &&\r\n                            inventoryorderBarcode.getVariantCodeStr().equalsIgnoreCase(this.getVariantCodeStr())) {\r\n                resultObl.add(inventoryorderBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n\r\n    }\r\n    public List<cInventoryorderLineBarcode> lineBarcodesObl(){\r\n\r\n        List<cInventoryorderLineBarcode> resultObl = new ArrayList<>();\r\n\r\n        if (cInventoryorderLineBarcode.allLineBarcodesObl == null || cInventoryorderLineBarcode.allLineBarcodesObl.size() == 0) {\r\n            return  resultObl;\r\n        }\r\n\r\n        //Loop through all barcodes, and if item matches add it to the list\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : cInventoryorderLineBarcode.allLineBarcodesObl) {\r\n            if (cText.pLongToStringStr(inventoryorderLineBarcode.getLineNoLng()).equalsIgnoreCase(cText.pIntToStringStr(this.getLineNoInt()))) {\r\n                resultObl.add(inventoryorderLineBarcode);\r\n            }\r\n        }\r\n\r\n        return  resultObl;\r\n    }\r\n\r\n    private cInventoryorderLineViewModel getInventoryorderLineViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n    }\r\n\r\n    //Region Public Properties\r\n    private final int lineNoInt;\r\n    public int getLineNoInt() {\r\n        return lineNoInt;\r\n    }\r\n\r\n    private final String itemNoStr;\r\n    public String getItemNoStr() {\r\n        return itemNoStr;\r\n    }\r\n\r\n    private final String variantCodeStr;\r\n    public String getVariantCodeStr() {\r\n        return variantCodeStr;\r\n    }\r\n\r\n    private final String descriptionStr;\r\n    public String getDescriptionStr() {\r\n        return descriptionStr;\r\n    }\r\n\r\n    private final String description2Str;\r\n    public String getDescription2Str() {\r\n        return description2Str;\r\n    }\r\n\r\n    private final String binCodeStr;\r\n    public String getBinCodeStr() {\r\n        return binCodeStr;\r\n    }\r\n\r\n    private final Double quantityDbl;\r\n    public Double getQuantityDbl() {\r\n        return quantityDbl;\r\n    }\r\n\r\n    private final String vendorItemNoStr;\r\n    public String getVendorItemNoStr() { return vendorItemNoStr; }\r\n\r\n    private final String vendorItemDescriptionStr;\r\n    public String getVendorItemDescriptionStr() { return vendorItemDescriptionStr; }\r\n\r\n    private final int statusInt;\r\n    public int getStatusInt() { return statusInt; }\r\n\r\n    private final String handeledTimeStampStr;\r\n    public String getHandeledTimeStampStr() { return handeledTimeStampStr; }\r\n\r\n    public Double quantityHandledDbl;\r\n    public Double getQuantityHandledDbl() { return quantityHandledDbl; }\r\n\r\n    private final Double quantityHandledAllScannersDbl;\r\n    public Double getQuantityHandledAllScannersDbl() { return quantityHandledAllScannersDbl; }\r\n\r\n    public String getItemNoAndVariantCodeStr(){\r\n        return  this.getItemNoStr() + \"~\"  + this.getVariantCodeStr();\r\n    }\r\n\r\n    public cArticleImage articleImage;\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Constructor\r\n    public cInventoryorderLine(JSONObject pvJsonObject) {\r\n        this.inventoryorderLineEntity = new cInventoryorderLineEntity(pvJsonObject);\r\n        this.lineNoInt = this.inventoryorderLineEntity.getLineNoInt();\r\n        this.itemNoStr = this.inventoryorderLineEntity.getItemNoStr();\r\n        this.variantCodeStr = this.inventoryorderLineEntity.getVariantCodeStr();\r\n        this.descriptionStr = this.inventoryorderLineEntity.getDescriptionStr();\r\n        this.description2Str = this.inventoryorderLineEntity.getDescription2Str();\r\n        this.binCodeStr = this.inventoryorderLineEntity.getBincodeStr();\r\n        this.quantityDbl = this.inventoryorderLineEntity.getQuantityDbl();\r\n        this.vendorItemNoStr = this.inventoryorderLineEntity.getVendorItemNoStr();\r\n        this.vendorItemDescriptionStr = this.inventoryorderLineEntity.getVendorItemDescriptionStr();\r\n        this.statusInt = this.inventoryorderLineEntity.getStatusInt();\r\n        this.handeledTimeStampStr = this.inventoryorderLineEntity.getHandledtimestampStr();\r\n        this.quantityHandledDbl = this.inventoryorderLineEntity.getQuantityHandledDbl();\r\n        this.quantityHandledAllScannersDbl = this.inventoryorderLineEntity.getQuantityHandledAllScannersDbl();\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        getInventoryorderLineViewModel().insert(this.inventoryorderLineEntity);\r\n\r\n        if (cInventoryorderLine.allLinesObl == null){\r\n            cInventoryorderLine.allLinesObl = new ArrayList<>();\r\n        }\r\n        cInventoryorderLine.allLinesObl.add(this);\r\n        return  true;\r\n    }\r\n\r\n    public static void pInsertAllInDatabase(List<cInventoryorderLine> pvInventoryOrderLinesObl, List<cInventoryorderLineEntity> pvInventoryOrderLineEntityObl ) {\r\n\r\n        cInventoryorderLine.allLinesObl.addAll(pvInventoryOrderLinesObl);\r\n        cInventoryorderLineViewModel  inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        inventoryorderLineViewModel.insertAll (pvInventoryOrderLineEntityObl);\r\n\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cInventoryorderLineViewModel  inventoryorderLineViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLineViewModel.class);\r\n        inventoryorderLineViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public cInventoryorderLineBarcode pAddLineBarcode(String pvBarcodeStr, Double pvQuantityDbl, boolean pvSkipQuantityBln) {\r\n\r\n        cInventoryorderLineBarcode inventoryorderLineBarcode = new cInventoryorderLineBarcode((long) this.getLineNoInt(),pvBarcodeStr,pvQuantityDbl);\r\n\r\n        if (pvSkipQuantityBln){\r\n            inventoryorderLineBarcode.quantityHandledDbl = 0;\r\n        }\r\n\r\n        if (cInventoryorderLineBarcode.allLineBarcodesObl == null){\r\n            cInventoryorderLineBarcode.allLineBarcodesObl = new ArrayList<>();\r\n        }\r\n\r\n        cInventoryorderLineBarcode.allLineBarcodesObl.add(inventoryorderLineBarcode);\r\n\r\n        return  inventoryorderLineBarcode;\r\n    }\r\n\r\n    public boolean pGetArticleImageBln(){\r\n\r\n        if (this.articleImage != null) {\r\n            return  true;\r\n        }\r\n\r\n        this.articleImage = cArticleImage.pGetArticleImageByItemNoAndVariantCode(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (this.articleImage != null){\r\n            return  true;\r\n        }\r\n\r\n        cWebresult Webresult;\r\n\r\n        cArticleImageViewModel articleImageViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cArticleImageViewModel.class);\r\n        Webresult = articleImageViewModel.pGetArticleImageFromWebserviceWrs(this.getItemNoStr(),this.getVariantCodeStr());\r\n        if (!Webresult.getSuccessBln() || !Webresult.getResultBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (Webresult.getResultDtt().size() == 1) {\r\n            cArticleImage articleImage = new cArticleImage(Webresult.getResultDtt().get(0));\r\n            articleImage.pInsertInDatabaseBln();\r\n            this.articleImage = articleImage;\r\n            return true;\r\n        }\r\n\r\n\r\n        return  false;\r\n\r\n    }\r\n\r\n    public boolean pSaveLineViaWebserviceBln (){\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderLineViewModel().pSaveLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n                return  true;\r\n            }\r\n        else {\r\n            cInventoryorder.currentInventoryOrder.unknownVariantCounterInt -= 1;\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINESAVE);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public void pUpdateQuantityInDatabase(){\r\n        getInventoryorderLineViewModel().pUpdateQuantity();\r\n    }\r\n\r\n    public cInventoryorderLineBarcode pGetLineBarcodeByScannedBarcode(cBarcodeScan pvBarcodeScan) {\r\n\r\n\r\n        if (this.lineBarcodesObl().size() == 0) {\r\n            this.quantityHandledDbl = 0.0;\r\n        }\r\n\r\n        //We scanned a barcodeStr that belongs to the current article, so check if we already have a line barcodeStr\r\n        for (cInventoryorderLineBarcode inventoryorderLineBarcode : this.lineBarcodesObl()) {\r\n\r\n            //We have a match, so set the current line\r\n            if (inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeOriginalStr()) ||\r\n                inventoryorderLineBarcode.getBarcodeStr().equalsIgnoreCase(pvBarcodeScan.getBarcodeFormattedStr())) {\r\n                return inventoryorderLineBarcode;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cResult pResetRst(){\r\n\r\n        //nit the result\r\n        cResult result = new cResult();\r\n        result.resultBln = true;\r\n\r\n        cWebresult WebResult;\r\n\r\n        WebResult =  getInventoryorderLineViewModel().pResetLineViaWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            for (cInventoryorderLineBarcode inventoryorderLineBarcode : this.lineBarcodesObl()) {\r\n                inventoryorderLineBarcode.pDeleteFromDatabaseBln();\r\n            }\r\n\r\n            //Reset this line\r\n            this.quantityHandledDbl = 0.0;\r\n            this.pUpdateQuantityInDatabase();\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_INVENTORYLINERESET);\r\n            result.resultBln = false;\r\n            result.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_reset_line_via_webservice_failed));\r\n        }\r\n        return  result;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderLines/cInventoryorderLine.java	(date 1617289072199)
+@@ -17,6 +17,11 @@
+ import SSU_WHS.Inventory.InventoryOrders.cInventoryorder;
+ import SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;
+ import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLineProperty;
++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValue;
++import SSU_WHS.Picken.Pickorders.cPickorder;
+ import SSU_WHS.Webservice.cWebresult;
+ import SSU_WHS.Webservice.cWebserviceDefinitions;
+ import nl.icsvertex.scansuite.R;
+@@ -127,6 +132,10 @@
+         return  this.getItemNoStr() + "~"  + this.getVariantCodeStr();
+     }
+ 
++    public  boolean hasPropertysBln() {
++        return this.inventoryorderLinePropertyObl().size() != 0;
++    }
++
+     public cArticleImage articleImage;
+ 
+     //End Region Public Properties
+@@ -193,6 +202,59 @@
+         return  inventoryorderLineBarcode;
+     }
+ 
++    private  List<cInventoryorderLineProperty> inventoryorderLinePropertyCachedObl;
++    private List<cInventoryorderLineProperty> inventoryorderLinePropertyObl() {
++
++        if (this.inventoryorderLinePropertyCachedObl != null) {
++            return  this.inventoryorderLinePropertyCachedObl;
++        }
++
++        this. inventoryorderLinePropertyCachedObl = new ArrayList<>();
++
++        if (cInventoryorder.currentInventoryOrder.linePropertysObl() == null || cInventoryorder.currentInventoryOrder.linePropertysObl().size() == 0) {
++            return  this.inventoryorderLinePropertyCachedObl;
++        }
++
++        for (cInventoryorderLineProperty inventoryorderLineProperty :cInventoryorder.currentInventoryOrder.linePropertysObl() ) {
++            if (inventoryorderLineProperty.getLineNoInt().equals(this.getLineNoInt())) {
++                this.inventoryorderLinePropertyCachedObl.add(inventoryorderLineProperty);
++            }
++        }
++
++        return  this.inventoryorderLinePropertyCachedObl;
++
++    }
++
++    public List<cInventoryorderLineProperty> inventoryorderLinePropertyInputObl() {
++
++        List<cInventoryorderLineProperty> resultObl = new ArrayList<>();
++
++        if (this.inventoryorderLinePropertyObl() == null || this.inventoryorderLinePropertyObl().size() == 0) {
++            return  resultObl;
++        }
++
++        for (cInventoryorderLineProperty inventoryorderLineProperty :this.inventoryorderLinePropertyObl()) {
++            if (inventoryorderLineProperty.getIsInputBln() &&  inventoryorderLineProperty.getIsRequiredBln()) {
++                resultObl.add(inventoryorderLineProperty);
++            }
++        }
++
++        return  resultObl;
++    }
++
++    public  List<cInventoryorderLinePropertyValue> inventoryorderLinePropertyValuesObl() {
++
++        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
++
++        for (cInventoryorderLineProperty inputInventoryorderLineProperty : this.inventoryorderLinePropertyInputObl()) {
++            resultObl.addAll(inputInventoryorderLineProperty.propertyValueObl());
++        }
++
++        return  resultObl;
++
++    }
++
++
+     public boolean pGetArticleImageBln(){
+ 
+         if (this.articleImage != null) {
+Index: app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package nl.icsvertex.scansuite.Activities.General;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.app.AppCompatDelegate;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\n\r\n\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Environments.cEnvironment;\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cPermissions;\r\nimport ICS.Utils.cPower;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Branches.cBranch;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcode;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisation;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplate;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroup;\r\nimport SSU_WHS.Basics.Scanners.cScanner;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentService;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentShipMethod;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Translations.cTranslation;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.ScannerLogon.cScannerLogon;\r\nimport SSU_WHS.Webservice.cWebservice;\r\n\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoConnectionFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.DateTimeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.HomeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.LanguageFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Support.SupportFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class MainDefaultActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //region views\r\n    private  ImageView imageHome;\r\n    private  Toolbar Toolbar;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private  FrameLayout mainFramelayout;\r\n    private  DrawerLayout menuMainDrawer;\r\n    private  NavigationView mainmenuNavigation;\r\n\r\n\r\n    //End region views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\r\n        super.onCreate(savedInstanceState);\r\n\r\n        this.setContentView(R.layout.activity_main);\r\n\r\n        // Standard methods to initialize the Activity\r\n        this.mActivityInitialize();\r\n\r\n        //check permissions first\r\n        cPermissions.checkPermissions();\r\n\r\n        //set environment from preferences/by QR code\r\n        this.mSetEnviroment();\r\n\r\n        //Try to set the serialnumber\r\n        this.mSetSerialNumberIfPossible();\r\n\r\n        //Set darmode\r\n        this.pChangeDarkModus();\r\n\r\n         //set Crashlytics, otherwise Firebase wont work\r\n        FirebaseAnalytics.getInstance(this);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cPower.pRegisterPowerConnectReceiver();\r\n        cPower.pRegisterPowerLevelChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cPower.pUnregisterConnectPowerReceiver();\r\n        cPower.pUnregisterPowerLevelChangedReceiver();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int pvRequestCodeInt, int pvResultCodeInt, Intent data) {\r\n\r\n        super.onActivityResult(pvRequestCodeInt, pvResultCodeInt, data);\r\n        if (pvRequestCodeInt == cPublicDefinitions.CHANGELANGUAGE_REQUESTCODE) {\r\n            //we've changed the language, or not, who cares, but go back to language\r\n            this.setTitle(R.string.screentitle_language);\r\n            this.toolbarTitle.setText(R.string.screentitle_language);\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.mainFramelayout, new LanguageFragment());\r\n            transaction.commit();\r\n        }\r\n\r\n        //internet set?\r\n        if (pvRequestCodeInt == cPublicDefinitions.ACTIVITY_WIFI_SETTINGS) {\r\n\r\n            if (!cConnection.isInternetConnectedBln()) {\r\n                cUserInterface.pCheckAndCloseOpenDialogs();\r\n                final NoConnectionFragment noConnectionFragment = new NoConnectionFragment();\r\n                noConnectionFragment.setCancelable(true);\r\n                noConnectionFragment.show(((MainDefaultActivity) cAppExtension.context).getSupportFragmentManager(), \"NOCONNECTION\");\r\n                return;\r\n            }\r\n            try {\r\n                this.pLetsGetThisPartyStartedOrNot();\r\n            } catch (ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        //Set App Extensions\r\n        this.mSetAppExtensions();\r\n\r\n        //Find all views in Activity\r\n        this.mFindViews();\r\n\r\n        // Show and set toolbar\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_main));\r\n\r\n        // Don't do shit\r\n        this.mFieldsInitialize();\r\n\r\n        // Set event listeners\r\n        this.mSetListeners();\r\n\r\n        // Init screen\r\n        this.mInitScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.Toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.imageHome = findViewById(R.id.imageHome);\r\n\r\n        this.mainFramelayout = findViewById(R.id.mainFramelayout);\r\n        this.menuMainDrawer = findViewById(R.id.menuMainDrawer);\r\n        this.mainmenuNavigation = findViewById(R.id.mainMenuNavigation);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        this.Toolbar.showOverflowMenu();\r\n\r\n        setSupportActionBar(this.Toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_black_24dp);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHomeListener();\r\n        this.mSetMenuListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n    public void pLetsGetThisPartyStartedOrNot() throws ExecutionException {\r\n\r\n        // If scanner had different interface version then web service, then stop\r\n        if (!cWebservice.pWebserviceIsAvailableAndRightVersionBln()) {\r\n\r\n            cAppExtension.activity.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mShowHomeFragment();\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // If we already have everything we need, then next fragment\r\n        if (this.mAllBasicsAvailableBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n\r\n        // Get all basic data via webservice, then next fragment\r\n        if (this.mGetBasicDataBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n    }\r\n\r\n    public void pChangeDarkModus() {\r\n                if (cSharedPreferences.getDarkModusBln()) {\r\n                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\r\n                    return;\r\n                }\r\n\r\n                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\r\n    }\r\n\r\n    public  void pSetChosenEnvironment() {\r\n\r\n        Fragment FragmentFrg = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n        if (FragmentFrg != null) {\r\n            DialogFragment DialogFragmentDfr = (DialogFragment) FragmentFrg;\r\n            DialogFragmentDfr.dismiss();\r\n        }\r\n\r\n        toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        cUserInterface.pShowSnackbarMessage(mainFramelayout, cAppExtension.context.getString(R.string.environment_set_to_parameter1, cEnvironment.currentEnvironment.getDescriptionStr()), R.raw.goodsound, false );\r\n\r\n    }\r\n\r\n    public void pPasswordCancelled() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    public  void pPasswordSuccess(){\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private boolean mAllBasicsAvailableBln() {\r\n        return cScannerLogon.scannerLoggedOnBln &&\r\n                cUser.usersAvailableBln &&\r\n                cBarcodeLayout.barcodeLayoutsAvailableBln &&\r\n                cSetting.settingsAvailableBln &&\r\n                cBranch.BranchesAvailableBln &&\r\n                cShippingAgent.shippingAgentsAvailableBln &&\r\n                cShippingAgentService.shippingAgentServicesAvailableBln &&\r\n                cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln &&\r\n                cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln &&\r\n                cItemProperty.itemPropertiesAvaliableBln &&\r\n                cPropertyGroup.propertyGroupsAvailableBln &&\r\n                cCompositeBarcode.compositeBarcodesAvailableBln &&\r\n                cScanner.scannersAvailableBln &&\r\n                cCustomAuthorisation.customAutorisationsAvailableBln &&\r\n                cTranslation.translationsAvailableBln &&\r\n                cStockOwner.stockOwnersAvailableBln;\r\n    }\r\n\r\n    private boolean mGetBasicDataBln() throws ExecutionException {\r\n\r\n        if (!cScannerLogon.pScannerLogonViaWebserviceBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cScannerLogon.currentScannerLogon.pScannerVersionCheckBln(mainFramelayout)){\r\n            return  false;\r\n        }\r\n\r\n        if (!cSetting.pGetSettingsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBranch.pGetBranchesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cUser.pGetUsersViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBarcodeLayout.pGetBarcodeLayoutsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cItemProperty.pGetItemPropertiesViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){\r\n            return false;\r\n        }\r\n\r\n        if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cCompositeBarcode.pGetCompositeBarcodesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!mGetshippingInfoViawebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cScanner.pGetScannersViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cCustomAuthorisation.pGetCustomAutorisationsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)){\r\n            return false;\r\n        }\r\n\r\n        if (!cTranslation.pGetTranslationsViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        return  mAllBasicsAvailableBln();\r\n\r\n    }\r\n\r\n    private boolean mGetshippingInfoViawebserviceBln() throws ExecutionException {\r\n\r\n        cShippingAgent.pGetShippingAgentsViaWebservice(true);\r\n        if (!cShippingAgent.shippingAgentsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentService.pGetShippingAgentServicesViaWebservice(true);\r\n        if (!cShippingAgentService.shippingAgentServicesAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentServiceShippingUnit.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        if (!cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentShipMethod.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        return cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln;\r\n    }\r\n\r\n    public  void pSetAddedEnvironment() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    private void mSetEnviroment(){\r\n        cEnvironment.pSetEnvironment();\r\n        if (cEnvironment.currentEnvironment != null) {\r\n            toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        }\r\n    }\r\n\r\n    private void mShowHomeFragment() {\r\n        this.imageHome.setVisibility(View.GONE);\r\n        this.toolbarTitle.setText(R.string.screentitle_main);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        FragmentTransaction transaction =  getSupportFragmentManager().beginTransaction();\r\n        transaction.replace(R.id.mainFramelayout, new HomeFragment());\r\n        transaction.commit();\r\n    }\r\n\r\n    private  void mShowEnvironmentFragment() {\r\n        final EnvironmentFragment environmentFragment = new EnvironmentFragment();\r\n        environmentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n    }\r\n\r\n\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n    //Region Listeners\r\n    private void mSetHomeListener() {\r\n        this.imageHome.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowHomeFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private void mSetMenuListener() {\r\n        this.mainmenuNavigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n                Fragment selectedFragment = null;\r\n                switch (menuItem.getItemId()) {\r\n\r\n                    case R.id.action_home:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n\r\n                    case R.id.action_settings:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        toolbarTitle.setText(R.string.screentitle_settings);\r\n                        toolbarImage.setImageResource(R.drawable.ic_settings);\r\n                        break;\r\n\r\n                    case R.id.action_support:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new SupportFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_support);\r\n                        toolbarImage.setImageResource(R.drawable.ic_support);\r\n                        break;\r\n\r\n                    case R.id.action_language:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new LanguageFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_language);\r\n                        toolbarImage.setImageResource(R.drawable.ic_language);\r\n                        break;\r\n\r\n                    case R.id.action_datetime:\r\n                        imageHome.setVisibility(View.VISIBLE);\r\n                        selectedFragment = new DateTimeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_datetime);\r\n                        toolbarImage.setImageResource(R.drawable.ic_calendar);\r\n                        break;\r\n                    case R.id.action_environments:\r\n                        cUserInterface.pShowpasswordDialog(cAppExtension.context.getString(R.string.password_header_default) ,cAppExtension.context.getString(R.string.dialog_password_settings_text),false);\r\n                        break;\r\n\r\n                    case R.id.action_proglove:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        mShowPairGlove();\r\n                        return true;\r\n\r\n                    default:\r\n                        imageHome.setVisibility(View.GONE);\r\n                        selectedFragment = new HomeFragment();\r\n                        toolbarTitle.setText(R.string.screentitle_main);\r\n                        toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                        break;\r\n                }\r\n\r\n                if (selectedFragment != null) {\r\n                    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n                    transaction.replace(R.id.mainFramelayout, selectedFragment);\r\n                    transaction.commit();\r\n                }\r\n\r\n                // deselect everything\r\n                int size = mainmenuNavigation.getMenu().size();\r\n                for (int i = 0; i < size; i++) {\r\n                    mainmenuNavigation.getMenu().getItem(i).setChecked(false);\r\n                }\r\n\r\n                // set item as selected to persist highlight\r\n                menuItem.setChecked(true);\r\n                // close drawer when item is tapped\r\n                menuMainDrawer.closeDrawers();\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //endregion Listeners\r\n\r\n    //region Event handlers\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            this.menuMainDrawer.openDrawer(GravityCompat.START);\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void mStartLoginActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, LoginActivity.class);\r\n        cAppExtension.context.startActivity(intent);\r\n    }\r\n\r\n    private void mSetSerialNumberIfPossible(){\r\n\r\n        if (!cSharedPreferences.getSerialNumerStr().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && !cDeviceInfo.getSerialnumberStr().isEmpty()) {\r\n            cSharedPreferences.setSerialNumerStr(cDeviceInfo.getSerialnumberStr());\r\n        }\r\n\r\n    }\r\n\r\n    private void mShowPairGlove() {\r\n        Intent i = new Intent();\r\n        i.setAction(cPublicDefinitions.PROGLOVE_CONNECT_ACTION);\r\n        cAppExtension.context.sendBroadcast(i);\r\n    }\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(date 1617286717208)
+@@ -364,9 +364,9 @@
+             return false;
+         }
+ 
+-        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
+-            return false;
+-        }
++//        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){
++//            return false;
++//        }
+ 
+         if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {
+             return  false;
+Index: app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package ICS.Utils.Scanning;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.Objects;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.cAppExtension;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShipLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.FinishShip.FinishShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.BarcodeInfoActivity;\r\nimport nl.icsvertex.scansuite.Activities.General.LoginActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.CreateIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLineTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesPlaceMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveLinesTakeMTActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveMISinglepieceActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderLinesPlaceGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Move.MoveorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipMultiActivity;\r\nimport nl.icsvertex.scansuite.Activities.PackAndShip.PackAndShipSingleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickGeneratedActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.PickorderQCActivity;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.CreateReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.IntakeAndReceive.IntakeAndReceiveSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderBinsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Receive.ReceiveOrderReceiveActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.CreateReturnActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderDocumentsActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderShipActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderSortActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderSelectActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AddEnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ArticleFullViewFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BranchFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanArticleFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SetBinFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PasswordFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ReasonFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.CreateInventoryActivity;\r\nimport nl.icsvertex.scansuite.Activities.Inventory.InventoryArticleActivity;\r\nimport nl.icsvertex.scansuite.Activities.Returns.ReturnArticleDetailActivity;\r\n\r\npublic class cBarcodeScan {\r\n\r\n    private static String currentActivityContextStr = \"\";\r\n\r\n    public static class BarcodeType {\r\n\r\n        public static final int Unknown = 0;\r\n        public static final int EAN8 = 1;\r\n        public static final int EAN13 = 2;\r\n    }\r\n\r\n    private String barcodeFormattedStr;\r\n    public String getBarcodeFormattedStr() {\r\n        return barcodeFormattedStr;\r\n    }\r\n\r\n    public String barcodeOriginalStr;\r\n    public String getBarcodeOriginalStr() {\r\n        return barcodeOriginalStr;\r\n    }\r\n\r\n    public String barcodeTypeStr;\r\n    public String getBarcodeTypeStr() {\r\n        return barcodeTypeStr;\r\n    }\r\n\r\n    private   Boolean containsCrlf = false;\r\n    public Boolean getContainsCrlfBln() {\r\n        return containsCrlf;\r\n    }\r\n\r\n    public cBarcodeScan(){\r\n\r\n    }\r\n\r\n    private static IntentFilter BarcodeIntentFilter;\r\n    private static void getBarcodeIntentFilter() {\r\n        if (BarcodeIntentFilter == null) {\r\n            BarcodeIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static IntentFilter BarcodeFragmentIntentFilter;\r\n    private static void getBarcodeFragmentIntentFilter() {\r\n        if (BarcodeFragmentIntentFilter == null) {\r\n            BarcodeFragmentIntentFilter = new IntentFilter();\r\n            for (String barcodeActionStr : cBarcodeScanDefinitions.getBarcodeActions()) {\r\n                BarcodeFragmentIntentFilter.addAction(barcodeActionStr);\r\n            }\r\n            for (String barcodeCategorieStr : cBarcodeScanDefinitions.getBarcodeCategories()) {\r\n                BarcodeFragmentIntentFilter.addCategory(barcodeCategorieStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeReceiver;\r\n    private static void getBarcodeReceiver() {\r\n        if (BarcodeReceiver == null) {\r\n            BarcodeReceiver = new BroadcastReceiver(){\r\n                @Override\r\n                public void onReceive(Context pvContext, Intent pvIntent) {\r\n\r\n                    if (pvContext != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(pvIntent);\r\n\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    //Login\r\n                    if (cAppExtension.activity instanceof LoginActivity) {\r\n                        LoginActivity loginActivity = (LoginActivity)cAppExtension.activity;\r\n                        loginActivity.pHandleScan(barcodeScan);\r\n                       }\r\n\r\n                    //BarcodeInfo\r\n                    if (cAppExtension.activity instanceof BarcodeInfoActivity) {\r\n                        BarcodeInfoActivity barcodeInfoActivity = (BarcodeInfoActivity)cAppExtension.activity;\r\n                        barcodeInfoActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Pick\r\n                    if (cAppExtension.activity instanceof PickorderSelectActivity){\r\n                        PickorderSelectActivity pickorderSelectActivity = (PickorderSelectActivity)cAppExtension.activity;\r\n                        pickorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesActivity) {\r\n                        PickorderLinesActivity pickorderLinesActivity = (PickorderLinesActivity)cAppExtension.activity;\r\n                        pickorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLinesGeneratedActivity) {\r\n                        PickorderLinesGeneratedActivity pickorderLinesGeneratedActivity = (PickorderLinesGeneratedActivity)cAppExtension.activity;\r\n                        pickorderLinesGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickActivity) {\r\n                        PickorderPickActivity pickorderPickActivity = (PickorderPickActivity)cAppExtension.activity;\r\n                        pickorderPickActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderPickGeneratedActivity) {\r\n                        PickorderPickGeneratedActivity pickorderPickGeneratedActivity = (PickorderPickGeneratedActivity)cAppExtension.activity;\r\n                        pickorderPickGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Sort\r\n                    if (cAppExtension.activity instanceof SortorderSelectActivity){\r\n                        SortorderSelectActivity sortorderSelectActivity = (SortorderSelectActivity)cAppExtension.activity;\r\n                        sortorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderLinesActivity){\r\n                        SortorderLinesActivity sortorderLinesActivity = (SortorderLinesActivity)cAppExtension.activity;\r\n                        sortorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof SortorderSortActivity){\r\n                        SortorderSortActivity sortorderSortActivity = (SortorderSortActivity)cAppExtension.activity;\r\n                        sortorderSortActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Ship\r\n                    if (cAppExtension.activity instanceof ShiporderSelectActivity){\r\n                        ShiporderSelectActivity shiporderSelectActivity = (ShiporderSelectActivity)cAppExtension.activity;\r\n                        shiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderLinesActivity){\r\n                        ShiporderLinesActivity shiporderLinesActivity = (ShiporderLinesActivity)cAppExtension.activity;\r\n                        shiporderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ShiporderShipActivity){\r\n                        ShiporderShipActivity shiporderShipActivity = (ShiporderShipActivity)cAppExtension.activity;\r\n                        shiporderShipActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Finish Single Pieces\r\n                    if (cAppExtension.activity instanceof FinishShiporderSelectActivity){\r\n                        FinishShiporderSelectActivity finishShiporderSelectActivity = (FinishShiporderSelectActivity)cAppExtension.activity;\r\n                        finishShiporderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof FinishShipLinesActivity){\r\n                        FinishShipLinesActivity finishShipLinesActivity = (FinishShipLinesActivity)cAppExtension.activity;\r\n                        finishShipLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //QC\r\n                    if (cAppExtension.activity instanceof QualityControlLinesActivity){\r\n                        QualityControlLinesActivity qualityControlLinesActivity = (QualityControlLinesActivity)cAppExtension.activity;\r\n                        qualityControlLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderQCActivity){\r\n                        PickorderQCActivity pickorderQCActivity = (PickorderQCActivity)cAppExtension.activity;\r\n                        pickorderQCActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Inventory\r\n                    if (cAppExtension.activity instanceof CreateInventoryActivity) {\r\n                        CreateInventoryActivity createInventoryActivity = (CreateInventoryActivity)cAppExtension.activity;\r\n                        createInventoryActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderSelectActivity){\r\n                        InventoryorderSelectActivity inventoryorderSelectActivity = (InventoryorderSelectActivity)cAppExtension.activity;\r\n                        inventoryorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinsActivity){\r\n                        InventoryorderBinsActivity inventoryorderBinsActivity = (InventoryorderBinsActivity)cAppExtension.activity;\r\n                        inventoryorderBinsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof InventoryorderBinActivity){\r\n                        InventoryorderBinActivity inventoryorderBinActivity = (InventoryorderBinActivity)cAppExtension.activity;\r\n                        inventoryorderBinActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n                    if (cAppExtension.activity instanceof InventoryArticleActivity) {\r\n                        InventoryArticleActivity inventoryArticleDetailActivity = (InventoryArticleActivity)cAppExtension.activity;\r\n                        inventoryArticleDetailActivity.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n\r\n                    //Intake\r\n                    if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){\r\n                        IntakeAndReceiveSelectActivity intakeAndReceiveSelectActivity = (IntakeAndReceiveSelectActivity)cAppExtension.activity;\r\n                        intakeAndReceiveSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReceiveActivity){\r\n                        CreateReceiveActivity createReceiveActivity = (CreateReceiveActivity)cAppExtension.activity;\r\n                        createReceiveActivity.pHandleScan(barcodeScan,false,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateIntakeActivity){\r\n                        CreateIntakeActivity createIntakeActivity = (CreateIntakeActivity)cAppExtension.activity;\r\n                        createIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveLinesActivity){\r\n                        ReceiveLinesActivity receiveLinesActivity = (ReceiveLinesActivity)cAppExtension.activity;\r\n                        receiveLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReceiveOrderReceiveActivity){\r\n                        ReceiveOrderReceiveActivity receiveOrderReceiveActivity = (ReceiveOrderReceiveActivity)cAppExtension.activity;\r\n                        receiveOrderReceiveActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMATLinesActivity){\r\n                        IntakeorderMATLinesActivity intakeorderMATLinesActivity = (IntakeorderMATLinesActivity)cAppExtension.activity;\r\n                        intakeorderMATLinesActivity.pHandleScan(barcodeScan,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeorderMASLinesActivity){\r\n                        IntakeorderMASLinesActivity intakeorderMASLinesActivity = (IntakeorderMASLinesActivity)cAppExtension.activity;\r\n                        intakeorderMASLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeActivity){\r\n                        IntakeOrderIntakeActivity intakeOrderIntakeActivity = (IntakeOrderIntakeActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof IntakeOrderIntakeGeneratedActivity){\r\n                        IntakeOrderIntakeGeneratedActivity intakeOrderIntakeGeneratedActivity = (IntakeOrderIntakeGeneratedActivity)cAppExtension.activity;\r\n                        intakeOrderIntakeGeneratedActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    //Return\r\n                    if (cAppExtension.activity instanceof ReturnorderSelectActivity){\r\n                        ReturnorderSelectActivity returnorderSelectActivity = (ReturnorderSelectActivity)cAppExtension.activity;\r\n                        returnorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentsActivity){\r\n                        ReturnorderDocumentsActivity returnorderDocumentsActivity = (ReturnorderDocumentsActivity)cAppExtension.activity;\r\n                        returnorderDocumentsActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnorderDocumentActivity){\r\n                        ReturnorderDocumentActivity returnorderDocumentActivity = (ReturnorderDocumentActivity)cAppExtension.activity;\r\n                        returnorderDocumentActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateReturnActivity) {\r\n                        CreateReturnActivity createReturnActivity = (CreateReturnActivity)cAppExtension.activity;\r\n                        createReturnActivity.pHandleScan(barcodeScan,false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof ReturnArticleDetailActivity) {\r\n                        ReturnArticleDetailActivity returnArticleDetailActivity = (ReturnArticleDetailActivity)cAppExtension.activity;\r\n                        returnArticleDetailActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    //Move\r\n                    if (cAppExtension.activity instanceof MoveorderSelectActivity){\r\n                        MoveorderSelectActivity moveorderSelectActivity = (MoveorderSelectActivity)cAppExtension.activity;\r\n                        moveorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof CreateMoveActivity){\r\n                        CreateMoveActivity createMoveActivity = (CreateMoveActivity)cAppExtension.activity;\r\n                        createMoveActivity.pHandleScan(barcodeScan, false,false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesActivity) {\r\n                        MoveLinesActivity moveLinesActivity = (MoveLinesActivity)cAppExtension.activity;\r\n                        moveLinesActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesTakeMTActivity) {\r\n                        MoveLinesTakeMTActivity moveLinesTakeMTActivity = (MoveLinesTakeMTActivity)cAppExtension.activity;\r\n                        moveLinesTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n                    if (cAppExtension.activity instanceof MoveLineTakeMTActivity) {\r\n                        MoveLineTakeMTActivity moveLineTakeMTActivity = (MoveLineTakeMTActivity)cAppExtension.activity;\r\n                        moveLineTakeMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinesPlaceMTActivity) {\r\n                        MoveLinesPlaceMTActivity moveLinesPlaceMTActivity = (MoveLinesPlaceMTActivity)cAppExtension.activity;\r\n                        moveLinesPlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceMTActivity) {\r\n                        MoveLinePlaceMTActivity moveLinePlaceMTActivity = (MoveLinePlaceMTActivity)cAppExtension.activity;\r\n                        moveLinePlaceMTActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLineTakeActivity){\r\n                        MoveLineTakeActivity moveLineTakeActivity = (MoveLineTakeActivity)cAppExtension.activity;\r\n                        moveLineTakeActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceActivity){\r\n                        MoveLinePlaceActivity moveLinePlaceActivity = (MoveLinePlaceActivity)cAppExtension.activity;\r\n                        moveLinePlaceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveMISinglepieceActivity){\r\n                        MoveMISinglepieceActivity moveMISinglepieceActivity = (MoveMISinglepieceActivity)cAppExtension.activity;\r\n                        moveMISinglepieceActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveorderLinesPlaceGeneratedActivity){\r\n                        MoveorderLinesPlaceGeneratedActivity moveorderLinesPlaceGeneratedActivity = (MoveorderLinesPlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveorderLinesPlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof MoveLinePlaceGeneratedActivity){\r\n                        MoveLinePlaceGeneratedActivity moveLinePlaceGeneratedActivity = (MoveLinePlaceGeneratedActivity)cAppExtension.activity;\r\n                        moveLinePlaceGeneratedActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipSingleActivity){\r\n                        PackAndShipSingleActivity packAndShipSingleActivity = (PackAndShipSingleActivity)cAppExtension.activity;\r\n                        packAndShipSingleActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PackAndShipMultiActivity){\r\n                        PackAndShipMultiActivity packAndShipMultiActivity = (PackAndShipMultiActivity)cAppExtension.activity;\r\n                        packAndShipMultiActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderSelectActivity){\r\n                        StoreorderSelectActivity storeorderSelectActivity = (StoreorderSelectActivity)cAppExtension.activity;\r\n                        storeorderSelectActivity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof StoreorderLinesActivity){\r\n                        StoreorderLinesActivity storeorderLinesActivity = (StoreorderLinesActivity)cAppExtension.activity;\r\n                        storeorderLinesActivity.pHandleScan(barcodeScan, false);\r\n                    }\r\n\r\n                    if (cAppExtension.activity instanceof PickorderLineItemPropertyInputActvity) {\r\n                        PickorderLineItemPropertyInputActvity pickorderLineItemPropertyInputActvity = (PickorderLineItemPropertyInputActvity)cAppExtension.activity;\r\n                        pickorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static BroadcastReceiver BarcodeFragmentReceiver;\r\n    private static void getBarcodeFragmentReceiver() {\r\n        if (BarcodeFragmentReceiver == null) {\r\n            BarcodeFragmentReceiver = new BroadcastReceiver(){\r\n\r\n                @Override\r\n                public void onReceive(Context context, Intent intent) {\r\n\r\n                    if (context != cAppExtension.context) {\r\n                        return;\r\n                    }\r\n\r\n                    //Fill a barcodeStr scan object\r\n                    cBarcodeScan barcodeScan = ICS.Utils.Scanning.cBarcodeScan.mGetBarcode(intent);\r\n                    FirebaseCrashlytics.getInstance().setCustomKey(\"LastScannedBarcode\", barcodeScan.getBarcodeOriginalStr());\r\n\r\n                    if (cAppExtension.dialogFragment instanceof BranchFragment) {\r\n                        BranchFragment branchFragment = (BranchFragment)cAppExtension.dialogFragment;\r\n                        branchFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof StepDoneFragment) {\r\n                        StepDoneFragment stepDoneFragment = (StepDoneFragment)cAppExtension.dialogFragment;\r\n                        stepDoneFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof WorkplaceFragment) {\r\n                        WorkplaceFragment workplaceFragment = (WorkplaceFragment)cAppExtension.dialogFragment;\r\n                        workplaceFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof CurrentLocationFragment) {\r\n                        CurrentLocationFragment currentLocationFragment = (CurrentLocationFragment)cAppExtension.dialogFragment;\r\n                        currentLocationFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if(cAppExtension.dialogFragment instanceof ArticleFullViewFragment) {\r\n                        ArticleFullViewFragment articleFullViewFragment = (ArticleFullViewFragment)cAppExtension.dialogFragment;\r\n                        articleFullViewFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof EnvironmentFragment) {\r\n                        EnvironmentFragment environmentFragment = (EnvironmentFragment)cAppExtension.dialogFragment;\r\n                        environmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddEnvironmentFragment) {\r\n                        AddEnvironmentFragment addEnvironmentFragment = (AddEnvironmentFragment)cAppExtension.dialogFragment;\r\n                        addEnvironmentFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddBinFragment) {\r\n                        AddBinFragment addBinFragment = (AddBinFragment)cAppExtension.dialogFragment;\r\n                        addBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof SetBinFragment) {\r\n                        SetBinFragment setBinFragment = (SetBinFragment)cAppExtension.dialogFragment;\r\n                        setBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof AddArticleFragment) {\r\n                        AddArticleFragment addArticleFragment = (AddArticleFragment)cAppExtension.dialogFragment;\r\n                        addArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanArticleFragment) {\r\n                        ScanArticleFragment scanArticleFragment = (ScanArticleFragment)cAppExtension.dialogFragment;\r\n                        scanArticleFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ScanBinFragment) {\r\n                        ScanBinFragment scanBinFragment = (ScanBinFragment)cAppExtension.dialogFragment;\r\n                        scanBinFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof PasswordFragment) {\r\n                        PasswordFragment passwordFragment = (PasswordFragment)cAppExtension.dialogFragment;\r\n                        passwordFragment.pHandleScan(barcodeScan);\r\n                        return;\r\n                    }\r\n\r\n                    if (cAppExtension.dialogFragment instanceof ReasonFragment) {\r\n                        ReasonFragment reasonFragment = (ReasonFragment)cAppExtension.dialogFragment;\r\n                        reasonFragment.pHandleScan(barcodeScan);\r\n                    }\r\n\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public static void pRegisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeFragmentReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeIntentFilter();\r\n        cBarcodeScan.getBarcodeReceiver();\r\n\r\n        //Prevent multiple receivers on same context\r\n        if (cBarcodeScan.currentActivityContextStr.equalsIgnoreCase(cAppExtension.context.getClass().getSimpleName())) {\r\n             return;\r\n        }\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeReceiver,BarcodeIntentFilter);\r\n        cBarcodeScan.currentActivityContextStr  = cAppExtension.context.getClass().getSimpleName();\r\n\r\n\r\n\r\n    }\r\n\r\n    public static void pRegisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pRegisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        //Turn off other receiver\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(pvClassNameStr);\r\n\r\n        //Initialise this receiver\r\n        cBarcodeScan.getBarcodeFragmentIntentFilter();\r\n        cBarcodeScan.getBarcodeFragmentReceiver();\r\n\r\n        //Attach receiver to context\r\n        cAppExtension.context.registerReceiver(BarcodeFragmentReceiver,BarcodeFragmentIntentFilter);\r\n\r\n    }\r\n\r\n    public static void pUnregisterBarcodeReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n         cAppExtension.context.unregisterReceiver(BarcodeReceiver);\r\n            cBarcodeScan.currentActivityContextStr = \"\";\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void pUnregisterBarcodeFragmentReceiver(String pvClassNameStr){\r\n\r\n        Log.i(\"ICS\",\"pUnregisterBarcodeFragmentReceiver: \" +   pvClassNameStr);\r\n\r\n        try {\r\n            cAppExtension.context.unregisterReceiver(BarcodeFragmentReceiver);\r\n        } catch(IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static cBarcodeScan pFakeScan(String pvBarcodeStr) {\r\n        cBarcodeScan result = new cBarcodeScan();\r\n        result.barcodeOriginalStr = pvBarcodeStr;\r\n        result.barcodeFormattedStr = pvBarcodeStr;\r\n        result.barcodeTypeStr = cText.pIntToStringStr( BarcodeType.Unknown);\r\n        return  result;\r\n    }\r\n\r\n    private static cBarcodeScan mGetBarcode(Intent pvIntent) {\r\n\r\n        cBarcodeScan resultBarcodeScan;\r\n\r\n        Bundle extras = pvIntent.getExtras();\r\n        String returnBarcodeStr;\r\n        String scannedBarcodeStr = \"\";\r\n        String barcodeTypeStr = \"\";\r\n\r\n\r\n        if (extras != null) {\r\n\r\n            //so who is sending us this?\r\n            if (Objects.requireNonNull(pvIntent.getAction()).equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_DATALOGIC_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_ZEBRA_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_TC55_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_TC55_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODE);\r\n                barcodeTypeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_PROGLOVE_EXTRABARCODETYPE);\r\n            }\r\n\r\n            if (pvIntent.getAction().equalsIgnoreCase(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_ACTION)) {\r\n                scannedBarcodeStr = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODE);\r\n                String honeywellBarcodeType = extras.getString(cBarcodeScanDefinitions.BARCODEINTENT_HONEYWELL_EXTRABARCODETYPE);\r\n                barcodeTypeStr = cBarcodeScanDefinitions.pGetHoneyWellBarcodeTypeStr(honeywellBarcodeType);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        assert scannedBarcodeStr != null;\r\n\r\n        scannedBarcodeStr = mCleanBarcodeStr(scannedBarcodeStr);\r\n        returnBarcodeStr =  mCleanBarcodeStr(scannedBarcodeStr) ;\r\n\r\n        //If it's an EAN barcodeStr cut off checkdigit\r\n        assert barcodeTypeStr != null;\r\n        if (barcodeTypeStr.toUpperCase().contains(\"EAN\") ) {\r\n\r\n            if (returnBarcodeStr.length() == 13) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,12);\r\n            }\r\n\r\n            if (returnBarcodeStr.length() == 8) {\r\n                returnBarcodeStr = returnBarcodeStr.substring(0,8);\r\n            }\r\n        }\r\n\r\n        if (barcodeTypeStr.contains(\"GS1\")) {\r\n            barcodeTypeStr = \"GS1-128\";\r\n        }\r\n\r\n        resultBarcodeScan = new cBarcodeScan();\r\n        resultBarcodeScan.barcodeOriginalStr = scannedBarcodeStr;\r\n        resultBarcodeScan.barcodeFormattedStr = returnBarcodeStr;\r\n        resultBarcodeScan.barcodeTypeStr = barcodeTypeStr;\r\n        resultBarcodeScan.containsCrlf = scannedBarcodeStr.contains(\"\\\\n\");\r\n\r\n\r\n\r\n        return resultBarcodeScan;\r\n    }\r\n\r\n    private static String mCleanBarcodeStr(String pvDirtyBarcodeStr) {\r\n        return  pvDirtyBarcodeStr.replaceAll(\"([\\\\r\\\\n\\\\t])\",\"\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/ICS/Utils/Scanning/cBarcodeScan.java	(date 1617290036800)
+@@ -22,6 +22,7 @@
+ import nl.icsvertex.scansuite.Activities.Intake.IntakeOrderIntakeGeneratedActivity;
+ import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMASLinesActivity;
+ import nl.icsvertex.scansuite.Activities.Intake.IntakeorderMATLinesActivity;
++import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderLineItemPropertyInputActvity;
+ import nl.icsvertex.scansuite.Activities.Move.CreateMoveActivity;
+ import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceActivity;
+ import nl.icsvertex.scansuite.Activities.Move.MoveLinePlaceGeneratedActivity;
+@@ -276,7 +277,11 @@
+                         inventoryArticleDetailActivity.pHandleScan(barcodeScan);
+                         return;
+                     }
+-
++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
++                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity)cAppExtension.activity;
++                        inventoryorderLineItemPropertyInputActvity.pHandleScan(barcodeScan);
++                        return;
++                    }
+ 
+                     //Intake
+                     if (cAppExtension.activity instanceof IntakeAndReceiveSelectActivity){
+Index: app/src/main/java/SSU_WHS/General/cDatabase.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package SSU_WHS.General;\r\n\r\npublic class cDatabase {\r\n    //region Tables\r\n\r\n    public static final String TABLENAME_USERS = \"Users\";\r\n    public static final String TABLENAME_SETTINGS = \"Settings\";\r\n    public static final String TABLENAME_SCANNERLOGON = \"ScannerLogon\";\r\n    public static final String TABLENAME_BARCODELAYOUTS = \"BarcodeLayouts\";\r\n    public static final String TABLENAME_BINITEM = \"BinItem\";\r\n    public static final String TABLENAME_TRANSLATION = \"Translations\";\r\n    public static final String TABLENAME_WORKPLACE = \"Workplaces\";\r\n    public static final String TABLENAME_SCANNERS = \"Scanners\";\r\n    public static final String TABLENAME_BRANCH = \"Branches\";\r\n    public static final String TABLENAME_BRANCHBIN = \"BranchBin\";\r\n    public static final String TABLENAME_ITEMPROPERTY = \"ItemProperties\";\r\n    public static final String TABLENAME_LABELTEMPLATE  =  \"Labeltemplate\";\r\n    public static final String TABLENAME_PROPERTYGROUP = \"PropertyGroup\";\r\n    public static final String TABLENAME_PROPERTYGROUPPROPERTY = \"PropertyGroupProperty\";\r\n    public static final String TABLENAME_COMPOSITEBARCODE = \"CompositeBarcode\";\r\n    public static final String TABLENAME_COMPOSITEBARCODEPROPERTY = \"CompositeBarcodeProperty\";\r\n    public static final String TABLENAME_PICKORDERBARCODE = \"PickorderBarcode\";\r\n    public static final String TABLENAME_PICKORDERCOMPOSITEBARCODE = \"PickorderCompositeBarcode\";\r\n    public static final String TABLENAME_PICKORDERLINEBARCODE = \"PickorderLineBarcode\";\r\n    public static final String TABLENAME_ARTICLEIMAGE = \"ArticleImage\";\r\n    public static final String TABLENAME_ARTICLE = \"Article\" ;\r\n    public static final String TABLENAME_ARTICLEBARCODE = \"ArticleBarcode\" ;\r\n    public static final String TABLENAME_ARTICLESTOCK = \"ArticleStock\";\r\n    public static final String TABLENAME_COMMENT = \"Comment\";\r\n    public static final String TABLENAME_AUTHORISATIONS = \"Authorisations\";\r\n    public static final String TABLENAME_SALESORDERPACKINGTABLE = \"SalesOrderPackingTable\";\r\n\r\n    public static final String TABLENAME_PICKORDERLINES = \"Pickorderlines\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTY = \"PickorderlineProperty\";\r\n    public static final String TABLENAME_PICKORDERLINEPROPERTYVALUE = \"PickorderlinePropertyValue\";\r\n    public static final String TABLENAME_PICKORDERSETTING = \"PickorderSetting\";\r\n    public static final String TABLENAME_PICKORDERADDRESS = \"PickorderAddress\";\r\n    public static final String TABLENAME_SHIPPINGAGENTS = \"ShippingAgents\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICES = \"ShippingAgentServices\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPPINGUNITS = \"ShippingAgentServiceShippingUnits\";\r\n    public static final String TABLENAME_SHIPPINGAGENTSERVICESHIPMETHODS = \"ShippingAgentServiceShipMethods\";\r\n    public static final String TABLENAME_PICKORDERSHIPPACKAGES = \"PickorderShipPackages\";\r\n    public static final String TABLENAME_PICKORDERLINEPACKANDSHIP = \"PickorderLinePackAndShip\";\r\n    public static final String TABLENAME_PICKORDERLINEFINISHSINGLEPIECE = \"PickorderLineFinishSinglePiece\";\r\n\r\n    public static final String TABLENAME_INVENTORYORDER = \"InventoryOrder\";\r\n    public static final String TABLENAME_INVENTORYORDERBIN = \"InventoryOrderBin\";\r\n    public static final String TABLENAME_INVENTORYORDERLINE = \"InventoryOrderLines\";\r\n    public static final String TABLENAME_INVENTORYORDERBARCODE = \"InventoryOrderBarcodes\";\r\n    public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = \"InventoryOrderLineBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINES  = \"IntakeLinesMAT\";\r\n    public static final String TABLENAME_INTAKEORDER  = \"IntakeOrders\";\r\n    public static final String TABLENAME_INTAKEORDERBARCODE  = \"IntakeOrderBarcodes\";\r\n    public static final String TABLENAME_INTAKEORDERMATLINEBARCODE  = \"IntakeOrderMATLineBarcodes\";\r\n    public static final String TABLENAME_MOVEORDER = \"MoveOrder\";\r\n    public static final String TABLENAME_MOVEORDERLINE = \"MoveOrderLine\";\r\n    public static final String TABLENAME_MOVEORDERLINEBARCODE = \"MoveOrderLineBarcode\";\r\n    public static final String TABLENAME_MOVEORDERBARCODE = \"MoveOrdeBarcode\";\r\n    public static final String TABLENAME_RETURNORDER = \"Returnorder\";\r\n    public static final String TABLENAME_RETURNORDERLINE = \"ReturnorderLine\";\r\n    public static final String TABLENAME_RETURNORDERLINEBARCODE = \"ReturnorderLineBarcode\";\r\n    public static final String TABLENAME_RETURNORDERBARCODE = \"ReturnorderBarcode\";\r\n    public static final String TABLENAME_RETURNORDERDOCUMENT = \"ReturnorderDocument\";\r\n    public static final String TABLENAME_BRANCHREASON = \"BranchReason\";\r\n    public static final String TABLENAME_RECEIVELINES  = \"ReceiveLines\";\r\n    public static final String TABLENAME_PACKAGING = \"Packaging\";\r\n    public static final String TABLENAME_CUSTOMAUTHORISATIONS = \"CustomAuthorisations\";\r\n    public static final String TABLENAME_IDENTIFIERWITHDESTINATION  = \"IdentifierWithDestination\";\r\n    public static final String TABLENAME_PACKANDSHIPORDER = \"PackAndSHipOrder\";\r\n    public static final String TABLENAME_PACKANDSHIPORDERLINE = \"PackAndShipOrderLine\";\r\n    public static final String TABLENAME_PACKANDSHIPSETTING = \"PackAndShipSetting\";\r\n    public static final String TABLENAME_PACKANDSHIPBARCODE = \"PackAndShipBarcode\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPMENT = \"PackAndShipShipment\";\r\n    public static final String TABLENAME_PACKANDSHIPADDRESS = \"PackAndShipAddress\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINGMETHOD = \"PackAndShipShippingMethod\";\r\n    public static final String TABLENAME_PACKANDSHIPSHIPPINPACKAGE= \"PackAndShipShippingPackage\";\r\n    public static final String TABLENAME_STOCKOWNER= \"StockOwner\";\r\n    public static final String TABLENAME_AUTHORIZEDSTOCKOWNER= \"AutorizedStockOwner\";\r\n\r\n\r\n    //endregion Tables\r\n\r\n    //region localtables\r\n    public static final String TABLENAME_ENVIRONMENTS = \"Environments\";\r\n    //endregion localtables\r\n\r\n\r\n    //region A\r\n    public static final String ACTIONTYPECODE_NAMESTR = \"ActionTypeCode\";\r\n    public static final String ACTUALSHIPPINGAGENTCODE_NAMESTR = \"ActualShippingAgentCode\";\r\n    public static final String ACTUEALSHIPPINGAGENTSERVICECODE_NAMESTR = \"ActualShippingAgentServiceCode\";\r\n    public static final String ASSIGNEDUSERID_NAMESTR = \"AssignedUserId\";\r\n    public static final String AUTHORISATION_NAMESTR = \"Autorisatie\";\r\n    public static final String ADDRESCODE_NAMESTR = \"Adrescode\";\r\n    public static final String ADDRESSCODE_NAMESTR = \"AddressCode\";\r\n    public static final String ADDRESSNAME_NAMESTR = \"AddressName\";\r\n    public static final String ADDRESSTYPE_NAMESTR = \"AddressType\";\r\n    public static final String ADDRESSNAMEREMARK_NAMESTR = \"AddressNameRemark\";\r\n    public static final String ADDRES_NAMESTR = \"Adres\";\r\n    public static final String ADDRESS_NAMESTR = \"Address\";\r\n    public static final String ADDRESSREMARK_NAMESTR = \"AddressRemark\";\r\n    public static final String ADDRESSADDITION_NAMESTR = \"Adrestoevoeging\";\r\n    public static final String ADDRESSNUMBER_NAMESTR = \"Huisnummer\";\r\n    public static final String ADDRESSNUMBERADDITION_NAMESTR = \"Huisnummertoevoeging\";\r\n    public static final String AUTHORISATIONBASE_NAMESTR = \"Autorisatie_basis\";\r\n    public static final String AREA_NAMESTR = \"Area\";\r\n    //endregion A\r\n\r\n    //region B\r\n    public static final String BARCODE_NAMESTR = \"Barcode\";\r\n    public static final String BARCODELAYOUT_NAMESTR = \"Barcodelayout\";\r\n    public static final String BARCODETYPE_NAMESTR = \"BarCodeType\";\r\n\r\n    public static final String BINCODE_NAMESTR = \"BinCode\";\r\n    public static final String BINCODEHANDLED_NAMESTR = \"BinCodeHandled\";\r\n    public static final String BINCODENL_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String BINMANDATORY_NAMESTR = \"BinMandatory\";\r\n    public static final String BINTYPE_NAMESTR = \"BinType\";\r\n    public static final String BRANCH_NAMESTR = \"Vestiging\";\r\n    public static final String BRANCHTYPE_NAMESTR = \"Vestigingtype\";\r\n    public static final String BRANCHNAME_NAMESTR = \"Name\";\r\n    public static final String BILLINGADDRESSCODE_NAMESTR = \"BillingAddressCode\";\r\n    //endregion B\r\n\r\n    //region C\r\n    public static final String COMPOSITEBARCODE_NAMESTR = \"CompositeBarcode\";\r\n    public static final String COMMENTLINENO_NAMESTR = \"CommentLineNo\";\r\n    public static final String CURRENTLOCATION_NAMESTR = \"CurrentLocation\";\r\n    public static final String COMMENT_NAMESTR = \"Comment\";\r\n    public static final String COMMENTCODE_NAMESTR = \"CommentCode\";\r\n    public static final String COMMENTTEXT_NAMESTR = \"CommentText\";\r\n    public static final String COMPONENT10_NAMESTR = \"Component10\";\r\n    public static final String CURRENTUSERID_NAMESTR = \"CurrentUserId\";\r\n    public static final String CITY_NAMESTR = \"City\";\r\n    public static final String CITYNL_NAMESTR = \"Plaats\";\r\n    public static final String COUNTRY_NAMESTR = \"Country\";\r\n    public static final String COUNTRYNL_NAMESTR = \"Land\";\r\n    public static final String CONTAINER_NAMESTR = \"Container\";\r\n    public static final String CONTACTNAME_NAMESTR = \"ContactName\";\r\n    public static final String CONTACTPERSON_NAMESTR = \"Contactpersoon\";\r\n    public static final String CONTAINERTYPE_DUTCH_NAMESTR = \"Containersoort\";\r\n    //endregion C\r\n\r\n    //region D\r\n    public static final String DATATIMESTAMP_NAMESTR = \"DataTimestamp\";\r\n    public static final String DESCRIPTION_DUTCH_NAMESTR = \"Omschrijving\";\r\n    public static final String DESCRIPTION_NAMESTR = \"Description\";\r\n    public static final String DESCRIPTION2_NAMESTR = \"Description2\";\r\n    public static final String DESTINATION_NAMESTR = \"Destination\";\r\n    public static final String DESTINATIONNO_NAMESTR = \"DestinationNo\";\r\n    public static final String DOCUMENT_NAMESTR = \"Document\";\r\n    public static final String DOCUMENTTYPE_NAMESTR = \"DocumentType\";\r\n    public static final String DOCUMENT2_NAMESTR = \"Document2\";\r\n    public static final String DOCUMENTTYPE2_NAMESTR = \"DocumentType2\";\r\n    public static final String DEFAULTWEIGHTINGRAMS_NAMESTR = \"DefaultWeightInG\";\r\n    public static final String DEFAULTVALUE_NAMESTR = \"DefaultValue\";\r\n    public static final String DELIVERYADDRESSTYPE_NAMESTR = \"DeliveryAddressType\";\r\n    public static final String DELIVERYADDRESSCODE_NAMESTR = \"DeliveryAddressCode\";\r\n    //endregion D\r\n\r\n\r\n    //region E\r\n    public static final String EXTERNALREFERENCE_NAMESTR = \"ExternalReference\";\r\n    public static final String ENUMERATIONVALUES_NAMESTR = \"EnumerationValues\";\r\n\r\n    public static final String ENVIRONMENT_DEFAULT = \"IsDefault\";\r\n    public static final String ENVIRONMENT_NAME = \"Name\";\r\n    public static final String ENVIRONMENT_DESCRIPTION = \"Description\";\r\n    public static final String ENVIRONMENT_WEBSERVICEURL = \"Webserviceurl\";\r\n\r\n    public static final String EXTRAFIELD1_NAMESTR = \"ExtraField1\";\r\n    public static final String EXTRAFIELD2_NAMESTR = \"ExtraField2\";\r\n    public static final String EXTRAFIELD3_NAMESTR = \"ExtraField3\";\r\n    public static final String EXTRAFIELD4_NAMESTR = \"ExtraField4\";\r\n    public static final String EXTRAFIELD5_NAMESTR = \"ExtraField5\";\r\n    public static final String EXTRAFIELD6_NAMESTR = \"ExtraField6\";\r\n    public static final String EXTRAFIELD7_NAMESTR = \"ExtraField7\";\r\n    public static final String EXTRAFIELD8_NAMESTR = \"ExtraField8\";\r\n    public static final String EMAIL_NAMESTR = \"Email\";\r\n    public static final String EMBALLAGE_NAMESTR = \"Emballage\";\r\n    //endregion E\r\n\r\n    //region F\r\n    public static final String FIELD_NAMESTR = \"Field\";\r\n    public static final String FIELDIDENTIFIER_NAMESTR = \"Field_identifier\";\r\n    public static final String FIELDTYPE_NAMESTR = \"Field_type\";\r\n    public static final String FILTERFIELD_NAMESTR = \"Filter_veld\";\r\n    public static final String FILTERVALUE_NAMESTR = \"Filter_waarde\";\r\n    //endregion F\r\n\r\n    //Region G\r\n    public static final String GENERATED_NAMESTR = \"Generated\";\r\n    //End Region G\r\n\r\n    //region H\r\n    public static final String HANDLEDTIMESTAMP_NAMESTR = \"HandledTimestamp\";\r\n    public static final String HANDLEDTIMESTAMPTAKENOTEXPORTED_NAMESTR = \"HandledTimestamp_take_not_exported\";\r\n    public static final String HOUSENUMBER_NAMESTR = \"HouseNumber\";\r\n    public static final String HOUSENUMBERCOMPLEMENTED_NAMESTR = \"HouseNumberComplemented\";\r\n    public static final String HOUSENUMBEREXTENSION_NAMESTR = \"HouseNumberExtension\";\r\n    public static final String HOUSENUMBEREXTENSIONCOMPLEMENTED_NAMESTR = \"HouseNumberExtensionComplemented\";\r\n    //endregion H\r\n\r\n\r\n    //Region I\r\n    public static final String IDENTIFIER_NAMESTR = \"Identifier\";\r\n    public static final String INFOKEY_NAMESTR = \"InfoKey\";\r\n    public static final String INFOVALUE_NAMESTR = \"InfoValue\";\r\n    public static final String IMAGE_NAMESTR = \"Image\";\r\n    public static final String INTERFACERESULTMETHOD_NAMESTR = \"Interface_result_method\";\r\n    public static final String ISPARTOFMULTILINEORDER_NAMESTR = \"IsPartOfMultiLineOrder\";\r\n    public static final String ISUNIQUEBARCODE_NAMESTR = \"IsUniqueBarcode\";\r\n    public static final String ISUNIQUE_NAMESTR = \"IsUnique\";\r\n    public static final String ITEMINFOCODE_NAMESTR = \"ItemInfoCode\";\r\n    public static final String ITEMNO_NAMESTR = \"ItemNo\";\r\n    public static final String ITEMTYPE_NAMESTR = \"Itemsoort\";\r\n\r\n    public static final String IMAGEBASE64_NAMESTR = \"Image_base64\";\r\n    public static final String INV_AUTOCLOSE_BIN_NAMESTR = \"Inv_auto_close_bin\";\r\n    public static final String INV_PRECOUNT_NAMESTR = \"Inv_precount\";\r\n    public static final String INV_AMOUNT_MANUAL_NAMESTR = \"Inv_Amount_manual\";\r\n    public static final String INV_BARCODECHECK_NAMESTR = \"Inv_barcode_check\";\r\n    public static final String INV_ADD_EXTRA_BIN_NAMESTR = \"Inv_add_extra_bin\";\r\n\r\n    public static final String INVENTORYWITHPICTURE_NAMESTR = \"Inv_with_picture\";\r\n    public static final String INVENTORYWITHPICTURE_AUTO_OPEN_NAMESTR = \"Inv_with_picture_auto_open\";\r\n    public static final String INVENTORYWITHPICTURE_PREFETCH_NAMESTR = \"Inv_with_picture_prefetch\";\r\n\r\n    public static final String ISINPUT_NAMESTR = \"IsInput\";\r\n    public static final String ISREQUIRED_NAMESTR = \"Isrequired\";\r\n    public static final String ISPROCESSINGORPARKED_NAMESTR = \"IsProcessingOrParked\";\r\n\r\n\r\n\r\n    //endregion I\r\n\r\n    //region L\r\n    public static final String LANGUAGEDUTCH_NAMESTR = \"Taal\";\r\n    public static final String LABELCODE_NAMESTR = \"Labelcode\";\r\n    public static final String LAYOUT_NAMESTR = \"Layout\";\r\n    public static final String LICENSE_NAMESTR = \"License\";\r\n    public static final String LICENSE_NL_NAMESTR = \"Licentie\";\r\n    public static final String LINE_NAMESTR = \"Line\";\r\n    public static final String LINES_NAMESTR = \"Lines\";\r\n    public static final String LINENO_NAMESTR = \"LineNo\";\r\n    public static final String LINENOTAKE_NAMESTR = \"LineNoTake\";\r\n    public static final String LOCALSTATUS_NAMESTR = \"LocalStatus\";\r\n    public static final String LOCAL_QUANTITYTAKEN_NAMESTR = \"LocalQuantityTaken\";\r\n    public static final String LOCAL_QUANTITYPLACED_NAMESTR = \"LocalQuantityPlaced\";\r\n    //endregion L\r\n\r\n    //region M\r\n    public static final String MOVEDEFAULTBIN_NAMESTR = \"Move_default_bin\";\r\n    public static final String PICKDEFAULTSTORAGEBIN = \"Pick_default_storage_bin\";\r\n\r\n\r\n\r\n    public static final String MOVEAMOUNTMANUAL_NAMESTR = \"Move_Amount_manual\";\r\n    public static final String MOVEBARCODECHECK_NAMESTR = \"Move_Barcode_check\";\r\n    public static final String MOVEVALIDATESTOCK_NAMESTR = \"Move_validate_stock\";\r\n    public static final String MOVEVALIDATESTOCKENFORCE_NAMESTR = \"Move_validate_stock_enforce\";\r\n    public static final String MOVE_MT_TAKEAMOUNTMANUAL_NAMESTR = \"Move_MT_take_amount_manual\";\r\n    public static final String MOVE_MT_TAKEAUTOITEM_NAMESTR = \"Move_MT_take_auto_item\";\r\n    public static final String MOVE_MT_TAKEAUTOITEMCONTAINERONCE_NAMESTR = \"Move_MT_take_auto_item_container_once\";\r\n    public static final String MOVE_MT_TAKEALLOWEND_NAMESTR = \"Move_MT_take_allow_end\";\r\n    public static final String MOVE_MT_TAKEIGNOREUNDERTAKE_NAMESTR = \"Move_MT_take_ignore_undertake\";\r\n    public static final String MOVE_MT_TAKEAUTOACCEPTSINGLEPIECE_NAMESTR = \"Move_MT_take_auto_accept_single_piece\";\r\n    public static final String MOVE_MT_PLACEAMOUNTMANUAL_NAMESTR = \"Move_MT_place_amount_manual\";\r\n    public static final String MOVE_MT_PLACEAUTOITEM_NAMESTR = \"Move_MT_place_auto_item\";\r\n    public static final String MOVE_AUTOACCEPTATREQUESTED_NAMESTR = \"Move_auto_accept_at_requested\";\r\n    public static final String MOVE_NOEXTRABINS_NAMESTR = \"Move_no_extra_bins\";\r\n    public static final String MOVE_NOEXTRAITEMS_NAMESTR = \"Move_no_extra_items\";\r\n    public static final String MOVE_NOEXTRAPIECES_NAMESTR = \"Move_no_extra_pieces\";\r\n    public static final String MOVEWITHPICTURE_NAMESTR = \"Move_with_picture\";\r\n    public static final String MOVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Move_with_picture_auto_open\";\r\n    public static final String MOVEWITHPICTURE_PREFETCH_NAMESTR = \"Move_with_picture_prefetch\";\r\n    //endregion M\r\n\r\n    //region N\r\n    public static final String NAMEDUTCH_NAMESTR = \"Naam\";\r\n    public static final String NAMEADDITION_NAMESTR = \"Naamtoevoeging\";\r\n    public static final String NAMESHORT_NAMESTR = \"Naam_kort\";\r\n\r\n\r\n    public static final String NUMBEROFBINS_NAMESTR = \"Aantal_bins\";\r\n    //endregion N\r\n\r\n    //region O\r\n    public static final String ORDERDUTCH_NAMESTR = \"Volgorde\";\r\n    public static final String OMSCHRIJVING_NAMESTR = \"Omschrijving\";\r\n    public static final String ORDERNUMBER_NAMESTR = \"Opdrachtnummer\";\r\n    public static final String ORDERTYPE_NAMESTR = \"Opdrachttype\";\r\n    public static final String ORIGINDUTCH_NAMESTR = \"Herkomstcode\";\r\n    public static final String ORIGINKEYDUTCH_NAMESTR = \"Herkomstsleutel\";\r\n    //endregion O\r\n\r\n    //region P\r\n\r\n    public static final String PACKAGECONTAINER_NAMESTR = \"PackageContainer\";\r\n    public static final String PACKAGECONTAINERTYPE_NAMESTR = \"PackageContainersoort\";\r\n    public static final String PACKAGEITEMCOUNT_NAMESTR = \"PackageItemCount\";\r\n    public static final String PACKAGEWEIGHTING_NAMESTR = \"PackageWeightInG\";\r\n    public static final String PACKAGETYPE_NAMESTR = \"PackageType\";\r\n    public static final String PACKAGESEQUENCENUMBER_NAMESTR = \"PackageSequenceNumber\";\r\n    public static final String PACKINGTABLE_NAMESTR = \"Packingtable\";\r\n    public static final String PHONE_NAMESTR = \"PhoneNumber\";\r\n    public static final String PHONENL_NAMESTR = \"Telefoon\";\r\n    public static final String PICKSALESASKWORKPLACE_NAMESTR = \"Pick_Sales_ask_workplace\";\r\n    public static final String PICKTRANSFERASKWORKPLACE_NAMESTR = \"Pick_Transfer_ask_workplace\";\r\n    public static final String PICKAUTONEXT_NAMESTR = \"Pick_Auto_next\";\r\n    public static final String PICKBARCODECHECK_NAMESTR = \"Pick_Barcode_check\";\r\n    public static final String PICKPICKPVVKKOEACHPIECE_NAMESTR = \"Pick_Pick_PV_VKO_each_piece\";\r\n    public static final String PICKPICKTOCONTAINER_NAMESTR = \"Pick_Pick_to_container\";\r\n    public static final String PICKPICKTOCONTAINERTYPE_NAMESTR = \"Pick_Pick_to_container_type\";\r\n    public static final String PICKPRINTADDRESSLABEL_NAMESTR = \"Pick_Print_adreslabel\";\r\n    public static final String PICKPRINTCONTENTLABEL_NAMESTR = \"Pick_Print_contentlabel\";\r\n    public static final String PICKWITHPICTURE_NAMESTR = \"Pick_with_picture\";\r\n    public static final String PICKWITHPICTURE_AUTO_OPEN_NAMESTR = \"Pick_with_picture_auto_open\";\r\n    public static final String PICKWITHPICTURE_PREFETCH_NAMESTR = \"Pick_with_picture_prefetch\";\r\n    public static final String PICKACTIVITYBINREQUIRED_NAMESTR = \"Pick_Activity_bin_required\";\r\n    public static final String PICKQCCHECKCOUNT_NAMESTR = \"Pick_Qc_check_count\";\r\n\r\n    public static final String POSITIONSTART_NAMESTR = \"Position_start\";\r\n    public static final String POSITIONEND_NAMESTR = \"Position_end\";\r\n\r\n    public  static final String PRIORITY_NAMESTR = \"Priority\";\r\n\r\n    public static final String PRICE_NAMESTR = \"Price\";\r\n    public static final String PRINTDOCUMENTS_NAMESTR = \"PrintDocuments\";\r\n    public static final String PROCESSINGSEQUENCE_NAMESTR = \"ProcessingSequence\";\r\n    public static final String PROPERTY_NAMESTR = \"Property\";\r\n    public static final String PROPERTYCODE_NAMESTR = \"Propertycode\";\r\n    public static final String PROPERTYDUTCH_NAMESTR = \"Propertie\";\r\n    public static final String PROPERTYSDUTCH_NAMESTR = \"Properties\";\r\n    public static final String PROPERTYGROUP_NAMESTR = \"Propertiegroep\";\r\n    public static final String ADDRESSES_NAMESTR = \"Addresses\";\r\n    public static final String SHIPPINGMETHODS_NAMESTR = \"ShippingMethods\";\r\n    public static final String COMPOSITEBARCODESPLITTED_NAMESTR = \"Composite_barcode\";\r\n    public static final String COMPOSITEBARCODETYPE_NAMESTR = \"Compositebarcode_type\";\r\n    public static final String FIELDSEPERATOR_NAMESTR = \"Field_separator\";\r\n    public static final String LAYOUTREGEX_NAMESTR = \"Layout_regex\";\r\n    public static final String LAYOUTTYPE_NAMESTR = \"Layout_type\";\r\n\r\n\r\n    public static final String PICKORDERLINEBARCODE_LINENO = \"LineNo\";\r\n    public static final String PICKORDERLINEBARCODE_BARCODE = \"Barcode\";\r\n    public static final String PICKORDERLINEBARCODE_QUANTITY = \"Quantity\";\r\n    public static final String PICKORDERLINEBARCODE_ISMANUAL = \"IsManual\";\r\n    //endregion P\r\n\r\n    //region Q\r\n    public static final String QUANTITY_NAMESTR = \"Quantity\";\r\n\r\n    public static final String QUANTITYAVAILABLE_NAMESTR = \"Voorraad_beschikbaar\";\r\n    public static final String QUANTITYHANDLED_NAMESTR = \"QuantityHandled\";\r\n    public static final String QUANTITYHANDLEDALLSCANNERS_NAMESTR = \"QuantityHandledAllScanners\";\r\n    public static final String QUANTITYHANDLEDSUM_NAMESTR = \"QuantityHandledSum\";\r\n    public static final String QUANTITYPERUNITOFMEASURE_NAMESTR = \"QtyPerUnitOfMeasure\";\r\n    public static final String QUANTITYREJECTED_NAMESTR = \"QuantityRejected\";\r\n    public static final String QUANTITYCHECKED_NAMESTR = \"QuantityChecked\";\r\n    public static final String QUANTITYTOTAL_NAMESTR = \"QuantityTotal\";\r\n    public static final String QUANTITYTAKEN_NAMESTR = \"QuantityTaken\";\r\n    public static final String QUANTITYHANDLEDTAKE_NAMESTR = \"QuantityHandled_take\";\r\n    public static final String QUANTITYTAKE_NAMESTR = \"Quantity_take\";\r\n    public static final String QUANTITYTAKENOTEXPORTED_NAMESTR = \"QuantityHandled_take_not_exported\";\r\n    public static final String QUANTITYTAKEEXPORTED_NAMESTR = \"QuantityHandled_take_exported\";\r\n    //endregion Q\r\n\r\n    //region R\r\n    public static final String RECEIVEDEFAULTBIN_NAMESTR = \"Receive_default_bin\";\r\n    public static final String REGION_NAMESTR = \"Regio\";\r\n    public static final String REJECTPICK_NAMESTR = \"RejectPick\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGINTAKE_NAMESTR = \"Receive_intake_eo_packaging_intake\";\r\n    public static final String RECEIVEINTAKEEOPACKAGINGSHIPPED_NAMESTR = \"Receive_intake_eo_packaging_shipped\";\r\n\r\n    public static final String RECEIVEWITHPICTURE_NAMESTR = \"Receive_with_picture\";\r\n    public static final String RECEIVEWITHPICTURE_AUTO_OPEN_NAMESTR = \"Receive_with_picture_auto_open\";\r\n    public static final String RECEIVEWITHPICTURE_PREFETCH_NAMESTR = \"Receive_with_picture_prefetch\";\r\n    public static final String REQUESTENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDENDDATETIME_NAMESTR = \"RequestedEndDateTime\";\r\n    public static final String REQUESTEDSTARTDATETIME_NAMESTR = \"RequestedStartDateTime\";\r\n    public static final String REMEMBERVALUE_NAMESTR = \"RememberValue\";\r\n    public static final String RETURNDEFAULTBIN_NAMESTR = \"Retour_default_bin\";\r\n\r\n    public static final String RECEIVEDDATETIME_NAMESTR = \"ReceivedDateTime\";\r\n    public static final String RECEIVEEXPORTPART_NAMESTR = \"Receive_export_part\";\r\n    public static final String RECEIVE_AMOUNT_MANUAL_NAMESTR = \"Receive_Amount_manual\";\r\n    public static final String RECEIVEAMOUNTMANUAL_EO_NAMESTR = \"Receive_Amount_manual_eo\";\r\n    public static final String RECEIVEBARCODECHECK_NAMESTR = \"Receive_Barcode_check\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATREQUESTED_NAMESTR = \"Receive_store_auto_accept_at_requested\";\r\n    public static final String RECEIVESTOREAUTOACCEPTATNEWITEM_NAMESTR = \"Receive_store_auto_accept_at_new_item\";\r\n    public static final String RECEIVESTOREAUTOACCEPTVALIDATIONMESSAGE_NAMESTR = \"Receive_store_auto_accept_validation_message\";\r\n    public static final String RECEIVENOEXTRABINS_NAMESTR = \"Receive_no_extra_bins\";\r\n    public static final String RECEIVENOEXTRAITEMS_NAMESTR = \"Receive_no_extra_items\";\r\n    public static final String RECEIVENOEXTRAPIECES_NAMESTR = \"Receive_no_extra_pieces\";\r\n    public static final String RECEIVEMATAUTOSPLITINCOMPLETELINE_NAMESTR = \"Receive_mat_auto_split_incomplete_line\";\r\n\r\n    public static final String RETOURREDEN_NAMESTR = \"Retourreden\";\r\n    public static final String RETOURAMAOUNTMANUAL_NAMESTR = \"Retour_Amount_manual\";\r\n    public static final String RETOURBARCODECHECK_NAMESTR = \"Retour_Barcode_check\";\r\n    public static final String RETOURMULTIDOCUMENT_NAMESTR = \"Retour_multi_document\";\r\n    public static final String RETOURORDERBINNOCHECK_NAMESTR = \"Retour_Order_bin_no_check\";\r\n\r\n\r\n    public static final String REASON_NAMESTR = \"Reason\";\r\n    public static final String REASONNL_NAMESTR = \"Reden\";\r\n    public static final String RETURN_NAMESTR = \"Return\";\r\n    public static final String RETURNEXTERNAL_NAMESTR = \"ReturnExternal\";\r\n\r\n    public static final String RETOURWITHPICTURE_NAMESTR = \"Retour_with_picture\";\r\n    public static final String RETURNADDRESSCODE_NAMESTR = \"ReturnAddressCode\";\r\n    public static final String RETURNSENDERADDRESSCODE_NAMESTR = \"ReturnSenderAddressCode\";\r\n    public static final String RETURNSHIPPINGADDRESSCODE_NAMESTR = \"ReturnShippingAddressCode\";\r\n    //endregion R\r\n\r\n    //region S\r\n    public static final String SALESORDER_NAMESTR = \"Salesorder\";\r\n    public static final String SCANNER_NAMESTR = \"Scanner\";\r\n    public static final String SENDERADDRESSCODE_NAMESTR = \"SenderAddressCode\";\r\n\r\n    public static final String SEQUENCENOHANDLED_NAMESTR = \"SequenceNoHandled\";\r\n    public static final String SETTINGCODE_NAMESTR = \"SettingCode\";\r\n    public static final String SETTINGVALUE_NAMESTR = \"SettingValue\";\r\n    public static final String SETTING_NAMESTR = \"Instelling\";\r\n    public static final String SINGLEARTICLEORDERS_NAMESTR = \"SingleArticleOrders\";\r\n    public static final String STATUS_NAMESTR = \"Status\";\r\n    public static final String STATUSSHIPPING_NAMESTR = \"StatusShipping\";\r\n    public static final String STATUSPACKING_NAMESTR = \"StatusPacking\";\r\n    public static final String STATUSPRINTATSTART_NAMESTR = \"StatusPrintAtStart\";\r\n    public static final String STOCKOWNER_NAMESTR = \"StockOwner\";\r\n    public static final String SORTORDER_NAMESTR = \"Volgorde\";\r\n    public static final String SORTING_NAMESTR = \"Sortering\";\r\n    public static final String SOURCEDOCUMENT_NAMESTR = \"SourceDocument\";\r\n    public static final String SOURCENO_NAMESTR = \"SourceNo\";\r\n    public static final String SORTINGSEQUENCENO_NAMESTR = \"SortingSequenceNo\";\r\n    public static final String SORTINGSEQUENCENOPLACE_NAMESTR = \"SortingSequenceNo_place\";\r\n    public static final String STORAGEBINCODE_NAMESTR = \"StorageBinCode\";\r\n    public static final String STOREBINCODE_NAMESTR = \"StoreBinCode\";\r\n    public static final String STORESOURCEORDER_NAMESTR = \"StoreSourceOpdracht\";\r\n    public static final String STREETNL_NAMESTR = \"Straat\";\r\n    public static final String STREET_NAMESTR = \"Street\";\r\n    public static final String STREETCOMPLEMENTERD_NAMESTR = \"StreetComplemented\";\r\n    public static final String SEQUENCE_NAMESTR = \"Order\";\r\n    public static final String SHIPPINGAGENT_NAMESTR = \"Expediteur\";\r\n    public static final String SHIPPINGLABELS_NAMESTR = \"ShippingLabels\";\r\n    public static final String SERVICE_NAMESTR = \"Service\";\r\n    public static final String SHIPPINGUNIT_NAMESTR = \"Verzendeenheid\";\r\n    public static final String SHIPPINGMETHOD_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGMETHODCODE_NAMESTR = \"ShippingMethodCode\";\r\n    public static final String SHIPPINGMETHODVALUE_NAMESTR = \"ShippingMethodValue\";\r\n    public static final String SHIPPINGUNITQUANTITYUSED_NAMESTR = \"Verzendmethode\";\r\n    public static final String SHIPPINGAGENTCODE_NAMESTR = \"ShippingAgentCode\";\r\n    public static final String SHIPPINGAGENTSERVICECODE_NAMESTR = \"ShippingAgentServiceCode\";\r\n    public static final String SHIPPINGADDRESSCODE_NAMESTR = \"ShippingAddressCode\";\r\n    public static final String SHIPPINGADDRESSTYPE_NAMESTR = \"ShippingAddressType\";\r\n\r\n    public static final String SHOWONTERMINAL_NAMESTR = \"ShowOnTerminal\";\r\n    public static final String SOURCETYPE_NAMESTR = \"SourceType\";\r\n    public static final String SORTINGSEQUENCENOTAKE_NAMESTR = \"SortingSequenceNo_take\";\r\n    public static final String STRIPTHIS_NAMESTR = \"Strip_this\";\r\n    //endregion S\r\n\r\n    //region T\r\n    public static final String TAKENTIMESTAMP_NAMESTR = \"TakenTimestamp\";\r\n    public static final String TEMPLATE_NAMESTR = \"Template\";\r\n    public static final String TEXTDUTCH_NAMESTR = \"Tekst\";\r\n    public static final String TRANSLATIONDUTCH_NAMESTR = \"Vertaling\";\r\n    //endregion T\r\n\r\n\r\n    //region U\r\n    public static final String USEFORSTORAGE_NAMESTR = \"UseForStorage\";\r\n    public static final String USEFORRETURNSALES_NAMESTR = \"UseForReturnSales\";\r\n    public static final String UNIQUNESS_NAMESTR = \"Uniqueness\";\r\n    public static final String UNITOFMEASURE_NAMESTR = \"UnitOfMeasure\";\r\n    public static final String USERNAME_NAMESTR = \"Gebruikersnaam\";\r\n    //endregion U\r\n\r\n    //region V\r\n    public static final String VALUE_NAMESTR = \"Value\";\r\n    public static final String VALUENL_NAMESTR = \"Waarde\";\r\n    public static final String VALUEHANDLED_NAMESTR = \"ValueHandled\";\r\n    public static final String VARIANTCODE_NAMESTR = \"VariantCode\";\r\n    public static final String VENDORITEMNO_NAMESTR = \"VendorItemNo\";\r\n    public static final String VENDORITEMDESCRIPTION_NAMESTR = \"VendorItemDescription\";\r\n    public static final String VALUETYPE_NAMESTR = \"ValueType\";\r\n    public static final String VERZENDLABEL_STATUS_NAMESTR = \"Verzendlabel_status\";\r\n\r\n\r\n    //endregion V\r\n\r\n    //region W\r\n    public static final String WAREHOUSELOCATION_NAMESTR = \"Magazijnlocatie\";\r\n    public static final String WEBSERVICETIMEOUTERPINS_NAMESTR = \"Webservice_timeout_erp_in_s\";\r\n    public static final String WORKPLACE_NAMESTR = \"Workplace\";\r\n    public static final String WORKPLACE_DUTCH_NAMESTR = \"Werkplek\";\r\n    //endregion W\r\n\r\n    //region Z\r\n    public static final String ZIPCODENL_NAMESTR = \"Postcode\";\r\n    public static final String ZIPCODE_NAMESTR = \"Zipcode\";\r\n    public static final String ZONE_NAMESTR = \"Zone\";\r\n\r\n\r\n\r\n    //endregion Z\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/General/cDatabase.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/SSU_WHS/General/cDatabase.java	(date 1617283728673)
+@@ -46,6 +46,8 @@
+     public static final String TABLENAME_INVENTORYORDER = "InventoryOrder";
+     public static final String TABLENAME_INVENTORYORDERBIN = "InventoryOrderBin";
+     public static final String TABLENAME_INVENTORYORDERLINE = "InventoryOrderLines";
++    public static final String TABLENAME_INVENTORYORDERLINEPROPERTY = "InventoryorderlineProperty";
++    public static final String TABLENAME_INVENTORYORDERLINEPROPERTYVALUE = "InventoryorderlinePropertyValue";
+     public static final String TABLENAME_INVENTORYORDERBARCODE = "InventoryOrderBarcodes";
+     public static final String TABLENAME_INVENTORYORDERLINEBARCODE  = "InventoryOrderLineBarcodes";
+     public static final String TABLENAME_INTAKEORDERMATLINES  = "IntakeLinesMAT";
+Index: app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package SSU_WHS.General;\r\n\r\nimport android.content.Context;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.RoomDatabase;\r\n\r\nimport SSU_WHS.Basics.ArticleImages.cArticleImageEntity;\r\nimport SSU_WHS.Basics.ArticleImages.iArticleImageDao;\r\nimport SSU_WHS.Basics.Authorisations.cAuthorisationEntity;\r\nimport SSU_WHS.Basics.Authorisations.iAuthorisationDao;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwnerEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayoutEntity;\r\nimport SSU_WHS.Basics.BarcodeLayouts.iBarcodeLayoutDao;\r\nimport SSU_WHS.Basics.Branches.cBranchEntity;\r\nimport SSU_WHS.Basics.Branches.iBranchDao;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcodeEntity;\r\nimport SSU_WHS.Basics.CompositeBarcode.iCompositeBarcodeDao;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.cCompositeBarcodePropertyEntity;\r\nimport SSU_WHS.Basics.CompositeBarcodeProperty.iCompositeBarcodePropertyDao;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisationEntity;\r\nimport SSU_WHS.Basics.CustomAuthorisations.iCustomAuthorisationDao;\r\nimport SSU_WHS.Basics.ItemProperty.cItemPropertyEntity;\r\nimport SSU_WHS.Basics.ItemProperty.iItemPropertyDao;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplateEntity;\r\nimport SSU_WHS.Basics.LabelTemplate.iLabelTemplateDao;\r\nimport SSU_WHS.Basics.Packaging.cPackagingEntity;\r\nimport SSU_WHS.Basics.Packaging.iPackagingDao;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroupEntity;\r\nimport SSU_WHS.Basics.PropertyGroup.iPropertyGroupDao;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.cPropertyGroupPropertyEntity;\r\nimport SSU_WHS.Basics.PropertyGroupProperty.iPropertyGroupPropertyDao;\r\nimport SSU_WHS.Basics.Scanners.cScannerEntity;\r\nimport SSU_WHS.Basics.Scanners.iScannerDao;\r\nimport SSU_WHS.Basics.Settings.cSettingsEntity;\r\nimport SSU_WHS.Basics.Settings.iSettingsDao;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnitEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.iShippingAgentServiceShippingUnitDao;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentServiceEntity;\r\nimport SSU_WHS.Basics.ShippingAgentServices.iShippingAgentServiceDao;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgentEntity;\r\nimport SSU_WHS.Basics.ShippingAgents.iShippingAgentDao;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentServiceShipMethodEntity;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.iShippingAgentServiceShipMethodDao;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwnerEntity;\r\nimport SSU_WHS.Basics.StockOwner.iStockOwnerDao;\r\nimport SSU_WHS.Basics.Translations.cTranslationEntity;\r\nimport SSU_WHS.Basics.Translations.iTranslationDao;\r\nimport SSU_WHS.Basics.Users.cUserEntity;\r\nimport SSU_WHS.Basics.Users.iUserDao;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceEntity;\r\nimport SSU_WHS.Basics.Workplaces.iWorkplaceDao;\r\nimport SSU_WHS.General.Comments.cCommentEntity;\r\nimport SSU_WHS.General.Comments.iCommentDao;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.iIntakeorderBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.cIntakeorderMATLineBarcodeEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLineBarcodes.iIntakeorderMATLineBarcodeDao;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.cIntakeorderMATLineEntity;\r\nimport SSU_WHS.Intake.IntakeorderMATLines.iIntakeorderMATLineDao;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorderEntity;\r\nimport SSU_WHS.Intake.Intakeorders.iIntakeorderDao;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorderEntity;\r\nimport SSU_WHS.Inventory.InventoryOrders.iInventoryorderDao;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.iInventoryorderBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBinEntity;\r\nimport SSU_WHS.Inventory.InventoryorderBins.iInventoryorderBinDao;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcodeEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.iInventoryorderLineBarcodeDao;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;\r\nimport SSU_WHS.Inventory.InventoryorderLines.iInventoryorderLineDao;\r\nimport SSU_WHS.Move.Moveorders.cMoveorderEntity;\r\nimport SSU_WHS.Move.Moveorders.iMoveorderDao;\r\nimport SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderBarcodes.iMoveorderBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.cMoveorderLineBarcodeEntity;\r\nimport SSU_WHS.Move.MoveorderLineBarcode.iMoveorderLineBarcodeDao;\r\nimport SSU_WHS.Move.MoveorderLines.cMoveorderLineEntity;\r\nimport SSU_WHS.Move.MoveorderLines.iMoveorderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.cPackAndShipAddressEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipAddress.iPackAndShipAddressDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.cPackAndShipBarcodeEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipBarcode.iPackAndShipBarcodeDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.cPackAndShipOrderLineEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipLines.iPackAndShipOrderLineDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.cPackAndShipOrderEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipOrders.iPackAndShipOrderDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.cPackAndShipSettingEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipSetting.iPackAndShipSettingDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.cPackAndShipShipmentEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShipment.iPackAndShipShipmentDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.cPackAndShipShippingMethodEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingMethod.iPackAndShipShippingMethodDao;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.cPackAndShipShippingPackageEntity;\r\nimport SSU_WHS.PackAndShip.PackAndShipShippingPackage.iPackAndShipShippingPackageDao;\r\nimport SSU_WHS.Picken.FinishSinglePieceLine.cPickorderLineFinishSinglePieceEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.cPickorderAddressEntity;\r\nimport SSU_WHS.Picken.PickorderAddresses.iPickorderAddressDao;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderBarcodes.iPickorderBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.cPickorderCompositeBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderCompositeBarcode.iPickorderCompositeBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.cPickorderLineBarcodeEntity;\r\nimport SSU_WHS.Picken.PickorderLineBarcodes.iPickorderLineBarcodeDao;\r\nimport SSU_WHS.Picken.PickorderLinePackAndShip.cPickorderLinePackAndShipEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;\r\nimport SSU_WHS.Picken.PickorderLineProperty.iPickorderLinePropertyDao;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;\r\nimport SSU_WHS.Picken.PickorderLinePropertyValue.iPickorderLinePropertyValueDao;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLineEntity;\r\nimport SSU_WHS.Picken.PickorderLines.iPickorderLineDao;\r\nimport SSU_WHS.Picken.PickorderSetting.cPickorderSettingEntity;\r\nimport SSU_WHS.Picken.PickorderSetting.iPickorderSettingDao;\r\nimport SSU_WHS.Picken.PickorderShipPackages.cPickorderShipPackageEntity;\r\nimport SSU_WHS.Picken.PickorderShipPackages.iPickorderShipPackageDao;\r\nimport SSU_WHS.Picken.Pickorders.cPickorderEntity;\r\nimport SSU_WHS.Picken.Pickorders.iPickorderDao;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.cSalesOrderPackingTableEntity;\r\nimport SSU_WHS.Picken.SalesOrderPackingTable.iSalesOrderPackingTableDao;\r\nimport SSU_WHS.Receive.ReceiveLines.cReceiveorderLineEntity;\r\nimport SSU_WHS.Receive.ReceiveLines.iReceiveorderLineDao;\r\nimport SSU_WHS.Return.ReturnOrder.cReturnorderEntity;\r\nimport SSU_WHS.Return.ReturnOrder.iReturnorderDao;\r\nimport SSU_WHS.Return.ReturnorderBarcode.cReturnorderBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderBarcode.iReturnorderBarcodeDao;\r\nimport SSU_WHS.Return.ReturnorderDocument.cReturnorderDocumentEntity;\r\nimport SSU_WHS.Return.ReturnorderDocument.iReturnorderDocumentDao;\r\nimport SSU_WHS.Return.ReturnorderLine.cReturnorderLineEntity;\r\nimport SSU_WHS.Return.ReturnorderLine.iReturnorderLineDao;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.cReturnorderLineBarcodeEntity;\r\nimport SSU_WHS.Return.ReturnorderLineBarcode.iReturnorderLineBarcodeDao;\r\nimport SSU_WHS.ScannerLogon.cScannerLogonEntity;\r\nimport SSU_WHS.ScannerLogon.iScannerLogonDao;\r\n\r\n@Database(entities = {\r\n        cScannerLogonEntity.class,\r\n        cWorkplaceEntity.class,\r\n        cBarcodeLayoutEntity.class,\r\n        cAuthorisationEntity.class,\r\n        cUserEntity.class,\r\n        cBranchEntity.class,\r\n        cSettingsEntity.class,\r\n        cPickorderEntity.class,\r\n        cPickorderLineEntity.class,\r\n        cPickorderLineBarcodeEntity.class,\r\n        cPickorderLinePropertyEntity.class,\r\n        cPickorderLinePropertyValueEntity.class,\r\n        cArticleImageEntity.class,\r\n        cPickorderBarcodeEntity.class,\r\n        cPickorderCompositeBarcodeEntity.class,\r\n        cCommentEntity.class,\r\n        cSalesOrderPackingTableEntity.class,\r\n        cPickorderAddressEntity.class,\r\n        cShippingAgentEntity.class,\r\n        cShippingAgentServiceEntity.class,\r\n        cShippingAgentServiceShippingUnitEntity.class,\r\n        cShippingAgentServiceShipMethodEntity.class,\r\n        cPickorderShipPackageEntity.class,\r\n        cPickorderLineFinishSinglePieceEntity.class,\r\n        cPickorderSettingEntity.class,\r\n        cItemPropertyEntity.class,\r\n        cPropertyGroupEntity.class,\r\n        cPropertyGroupPropertyEntity.class,\r\n        cPickorderLinePackAndShipEntity.class,\r\n        cInventoryorderEntity.class,\r\n        cInventoryorderBinEntity.class,\r\n        cInventoryorderLineEntity.class,\r\n        cInventoryorderBarcodeEntity.class,\r\n        cInventoryorderLineBarcodeEntity.class,\r\n        cIntakeorderEntity.class,\r\n        cIntakeorderMATLineEntity.class,\r\n        cIntakeorderBarcodeEntity.class,\r\n        cIntakeorderMATLineBarcodeEntity.class,\r\n        cReturnorderEntity.class,\r\n        cReturnorderBarcodeEntity.class,\r\n        cReturnorderDocumentEntity.class,\r\n        cReturnorderLineEntity.class,\r\n        cReturnorderLineBarcodeEntity.class,\r\n        cReceiveorderLineEntity.class,\r\n        cMoveorderEntity.class,\r\n        cMoveorderLineEntity.class,\r\n        cMoveorderBarcodeEntity.class,\r\n        cMoveorderLineBarcodeEntity.class,\r\n        cPackagingEntity.class,\r\n        cScannerEntity.class,\r\n        cCustomAuthorisationEntity.class,\r\n        cTranslationEntity.class,\r\n        cCompositeBarcodeEntity.class,\r\n        cCompositeBarcodePropertyEntity.class,\r\n        cPackAndShipOrderEntity.class,\r\n        cPackAndShipOrderLineEntity.class,\r\n        cPackAndShipBarcodeEntity.class,\r\n        cPackAndShipShipmentEntity.class,\r\n        cPackAndShipAddressEntity.class,\r\n        cPackAndShipSettingEntity.class,\r\n        cPackAndShipShippingMethodEntity.class,\r\n        cPackAndShipShippingPackageEntity.class,\r\n        cStockOwnerEntity.class,\r\n        cAuthorizedStockOwnerEntity.class,\r\n        cLabelTemplateEntity.class,\r\n        },version = 150)\r\n\r\n\r\npublic abstract class acScanSuiteDatabase extends RoomDatabase {\r\n    public abstract iScannerLogonDao scannerLogonDao();\r\n    public abstract iSettingsDao settingsDao();\r\n    public abstract iBarcodeLayoutDao barcodeLayoutDao();\r\n    public abstract iAuthorisationDao authorisationDao();\r\n    public abstract iScannerDao scannerDao();\r\n    public abstract iWorkplaceDao workplaceDao();\r\n    public abstract iBranchDao branchDao();\r\n    public abstract iUserDao userDao();\r\n    public abstract iPickorderDao pickorderDao();\r\n    public abstract iPickorderLineDao pickorderLineDao();\r\n    public abstract iPickorderLineBarcodeDao pickorderLineBarcodeDao();\r\n    public abstract iPickorderLinePropertyDao pickorderLinePropertyDao();\r\n    public abstract iPickorderLinePropertyValueDao pickorderLinePropertyValueDao();\r\n    public abstract iArticleImageDao articleImageDao();\r\n    public abstract iPickorderBarcodeDao pickorderBarcodeDao();\r\n    public abstract iPickorderCompositeBarcodeDao pickorderCompositeBarcodeDao();\r\n    public abstract iCommentDao commentDao();\r\n    public abstract iSalesOrderPackingTableDao salesOrderPackingTableDao();\r\n    public abstract iPickorderAddressDao pickorderAddressDao();\r\n    public abstract iPickorderSettingDao pickorderSettingDao();\r\n    public abstract iShippingAgentDao shippingAgentDao();\r\n    public abstract iShippingAgentServiceDao shippingAgentServiceDao();\r\n    public abstract iShippingAgentServiceShippingUnitDao shippingAgentServiceShippingUnitDao();\r\n    public abstract iShippingAgentServiceShipMethodDao shippingAgentServiceShipMethodDao();\r\n    public abstract iPickorderShipPackageDao pickorderShipPackageDao();\r\n    public abstract iItemPropertyDao itemPropertyDao();\r\n    public abstract iPropertyGroupDao propertyGroupDao();\r\n    public abstract iPropertyGroupPropertyDao propertyGroupPropertyDao();\r\n    public abstract iCompositeBarcodeDao compositeBarcodeDao();\r\n    public abstract iCompositeBarcodePropertyDao compositeBarcodePropertyDao();\r\n    public abstract iInventoryorderDao inventoryorderDao();\r\n    public abstract iInventoryorderBinDao inventoryorderBinDao();\r\n    public abstract iInventoryorderLineDao inventoryorderLineDao();\r\n    public abstract iInventoryorderBarcodeDao inventoryorderBarcodeDao();\r\n    public abstract iInventoryorderLineBarcodeDao inventoryorderLineBarcodeDao();\r\n    public abstract iIntakeorderMATLineDao intakeorderMATLineDao();\r\n    public abstract iIntakeorderDao intakeorderDao();\r\n    public abstract iIntakeorderBarcodeDao intakeorderBarcodeDao();\r\n    public abstract iIntakeorderMATLineBarcodeDao intakeorderMATLineBarcodeDao();\r\n    public abstract iReturnorderDao returnorderDao();\r\n    public abstract iReturnorderDocumentDao returnorderDocumentDao();\r\n    public abstract iReturnorderLineDao returnorderLineDao();\r\n    public abstract iReturnorderBarcodeDao returnorderBarcodeDao();\r\n    public abstract iReturnorderLineBarcodeDao returnorderLineBarcodeDao();\r\n    public abstract iReceiveorderLineDao receiveorderLineDao();\r\n    public  abstract iMoveorderDao moveorderDao();\r\n    public  abstract iMoveorderLineDao moveorderLineDao();\r\n    public  abstract iMoveorderLineBarcodeDao moveorderLineBarcodeDao();\r\n    public  abstract iMoveorderBarcodeDao moveorderBarcodeDao();\r\n    public  abstract iPackagingDao packagingDao();\r\n    public  abstract iCustomAuthorisationDao customAuthorisationDao();\r\n    public  abstract iTranslationDao translationDao();\r\n    public  abstract iPackAndShipOrderDao packAndShipOrderDao();\r\n    public  abstract iPackAndShipOrderLineDao packAndShipOrderLineDao();\r\n    public  abstract iPackAndShipSettingDao packAndShipSettingDao();\r\n    public  abstract iPackAndShipBarcodeDao packAndShipBarcodeDao();\r\n    public  abstract iPackAndShipShipmentDao packAndShipShipmentDao();\r\n    public  abstract iPackAndShipAddressDao packAndShipAddressDao();\r\n    public  abstract iPackAndShipShippingMethodDao packAndShipShippingMethodDao();\r\n    public  abstract iPackAndShipShippingPackageDao packAndShipShippingPackageDao();\r\n    public  abstract iStockOwnerDao stockOwnerDao();\r\n    public  abstract iLabelTemplateDao labelTemplateDao();\r\n\r\n    private static acScanSuiteDatabase INSTANCE;\r\n\r\n    public static acScanSuiteDatabase pGetDatabase(final Context context) {\r\n        if (INSTANCE == null) {\r\n            synchronized (acScanSuiteDatabase.class) {\r\n                if (INSTANCE == null) {\r\n                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(), acScanSuiteDatabase.class, \"SSU_WHS\").fallbackToDestructiveMigration().build();\r\n                }\r\n            }\r\n        }\r\n        return INSTANCE;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/SSU_WHS/General/acScanSuiteDatabase.java	(date 1617284664624)
+@@ -71,6 +71,10 @@
+ import SSU_WHS.Inventory.InventoryorderLineBarcodes.iInventoryorderLineBarcodeDao;
+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLineEntity;
+ import SSU_WHS.Inventory.InventoryorderLines.iInventoryorderLineDao;
++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLinePropertyEntity;
++import SSU_WHS.Inventory.InventoryorderlineProperty.iInventoryorderlinePropertyDao;
++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValueEntity;
++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.iInventoryorderLinePropertyValueDao;
+ import SSU_WHS.Move.Moveorders.cMoveorderEntity;
+ import SSU_WHS.Move.Moveorders.iMoveorderDao;
+ import SSU_WHS.Move.MoveorderBarcodes.cMoveorderBarcodeEntity;
+@@ -169,6 +173,8 @@
+         cInventoryorderLineEntity.class,
+         cInventoryorderBarcodeEntity.class,
+         cInventoryorderLineBarcodeEntity.class,
++        cInventoryorderLinePropertyEntity.class,
++        cInventoryorderLinePropertyValueEntity.class,
+         cIntakeorderEntity.class,
+         cIntakeorderMATLineEntity.class,
+         cIntakeorderBarcodeEntity.class,
+@@ -200,7 +206,7 @@
+         cStockOwnerEntity.class,
+         cAuthorizedStockOwnerEntity.class,
+         cLabelTemplateEntity.class,
+-        },version = 150)
++        },version = 151)
+ 
+ 
+ public abstract class acScanSuiteDatabase extends RoomDatabase {
+@@ -239,6 +245,9 @@
+     public abstract iInventoryorderLineDao inventoryorderLineDao();
+     public abstract iInventoryorderBarcodeDao inventoryorderBarcodeDao();
+     public abstract iInventoryorderLineBarcodeDao inventoryorderLineBarcodeDao();
++    public abstract iInventoryorderlinePropertyDao inventoryorderlinePropertyDao();
++    public  abstract  iInventoryorderLinePropertyValueDao inventoryorderLinePropertyValueDao();
++
+     public abstract iIntakeorderMATLineDao intakeorderMATLineDao();
+     public abstract iIntakeorderDao intakeorderDao();
+     public abstract iIntakeorderBarcodeDao intakeorderBarcodeDao();
+Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package nl.icsvertex.scansuite.Activities.Inventory;\r\n\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.InputType;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.AppCompatImageButton;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.constraintlayout.widget.ConstraintSet;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Intake.IntakeorderBarcodes.cIntakeorderBarcode;\r\nimport SSU_WHS.Intake.Intakeorders.cIntakeorder;\r\nimport SSU_WHS.Inventory.InventoryOrders.cInventoryorder;\r\nimport SSU_WHS.Inventory.InventoryorderBarcodes.cInventoryorderBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;\r\nimport SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;\r\nimport SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ScanBinFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\npublic class InventoryArticleActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    //End Region Public Properties\r\n\r\n    //Region Private\r\n\r\n    private  ConstraintLayout inventoryArticleDetailContainer;\r\n\r\n    private Toolbar toolbar;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n\r\n    private CardView articleContainer;\r\n    private ConstraintLayout articleInfoContainer;\r\n    private  TextView articleDescriptionText;\r\n    private  TextView articleDescription2Text;\r\n    private  TextView articleItemText;\r\n    private  TextView articleBarcodeText;\r\n    private  ImageView articleThumbImageView;\r\n\r\n    private TextView binText;\r\n\r\n    private TextView quantityText;\r\n    private TextView quantityRequiredText;\r\n    private AppCompatImageButton imageButtonMinus;\r\n    private AppCompatImageButton imageButtonPlus;\r\n\r\n    private  int inventoryCounterMinusHelperInt;\r\n    private  int inventoryCounterPlusHelperInt;\r\n    private  Handler minusHandler;\r\n    private  Handler plusHandler;\r\n\r\n    private  ImageView imageButtonDone;\r\n    private  ImageButton imageButtonBarcode;\r\n    private ImageView imageButtonNoInputPropertys;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Constructor\r\n    public InventoryArticleActivity() {\r\n\r\n    }\r\n\r\n    //End Region Constructor\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_inventoryarticle);\r\n        this.mActivityInitialize();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n            super.onPause();\r\n\r\n            if (cAppExtension.activity instanceof  InventoryArticleActivity) {\r\n                cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            }\r\n             LocalBroadcastManager.getInstance(cAppExtension.context).unregisterReceiver(mNumberReceiver);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n        LocalBroadcastManager.getInstance(cAppExtension.context).registerReceiver(mNumberReceiver, new IntentFilter(cPublicDefinitions.NUMBERINTENT_NUMBER));\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_intakeactions,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n\r\n//        invalidateOptionsMenu();\r\n\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(true);\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n        DialogFragment selectedFragment = null;\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mStartInventoryBINActivity();\r\n                return true;\r\n\r\n            case R.id.item_print_item:\r\n                selectedFragment = new PrintItemLabelFragment();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.message_scan_article));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.inventoryArticleDetailContainer = findViewById(R.id.inventoryArticleDetailContainer);\r\n\r\n        this.toolbar =  findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.articleContainer = findViewById(R.id.articleContainer);\r\n        this.articleInfoContainer = findViewById(R.id.articleInfoContainer);\r\n        this.articleThumbImageView = findViewById(R.id.articleThumbImageView);\r\n\r\n        this.articleDescriptionText = findViewById(R.id.articleDescriptionText);\r\n        this.articleDescription2Text = findViewById(R.id.articleDescription2Text);\r\n        this.articleItemText = findViewById(R.id.articleItemText);\r\n        this.articleBarcodeText = findViewById(R.id.articleBarcodeText);\r\n\r\n        this.binText = findViewById(R.id.binText);\r\n        this.quantityText = findViewById(R.id.quantityText);\r\n        this.quantityRequiredText = findViewById(R.id.quantityRequiredText);\r\n\r\n        this.imageButtonMinus = findViewById(R.id.imageButtonMinus);\r\n        this.imageButtonPlus = findViewById(R.id.imageButtonPlus);\r\n        this.imageButtonBarcode = findViewById(R.id.imageButtonBarcode);\r\n        this.imageButtonNoInputPropertys = findViewById(R.id.imageButtonNoInputPropertys);\r\n        this.imageButtonDone = findViewById(R.id.imageButtonDone);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_inventory);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        String subTitleStr = cInventoryorder.currentInventoryOrder.getOrderNumberStr();\r\n        this.toolbarSubTitle.setText(subTitleStr);\r\n        this.toolbarSubTitle.setSelected(true);\r\n\r\n        setSupportActionBar(this.toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        if (!cInventoryorder.currentInventoryOrder.isInvAmountManualBln()) {\r\n            this.imageButtonBarcode.setVisibility(View.GONE);\r\n        } else {\r\n            this.imageButtonBarcode.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        this.inventoryCounterPlusHelperInt = 0;\r\n        this. inventoryCounterMinusHelperInt = 0;\r\n\r\n        this.articleDescriptionText.setText(cInventoryorderLine.currentInventoryOrderLine.getDescriptionStr());\r\n        this.articleDescription2Text.setText(cInventoryorderLine.currentInventoryOrderLine.getDescription2Str());\r\n        if (cInventoryorderLine.currentInventoryOrderLine.getDescription2Str().isEmpty()) {\r\n            this.articleDescription2Text.setVisibility(View.GONE);\r\n        }\r\n        else\r\n        {\r\n            this.articleDescription2Text.setVisibility(View.VISIBLE);\r\n        }\r\n        this.articleItemText.setText(cInventoryorderLine.currentInventoryOrderLine.getItemNoAndVariantCodeStr());\r\n\r\n        this.binText.setText(cInventoryorderBin.currentInventoryOrderBin.getBinCodeStr());\r\n\r\n        this.mShowQuantityInfo();\r\n        this.mShowArticleImage();\r\n        this.mShowBarcodeInfo();\r\n        this.mHideArticleInfo();\r\n\r\n        this.imageButtonNoInputPropertys.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n       this.mSetDoneListener();\r\n\r\n        if (cSetting.INV_AMOUNT_MANUAL()) {\r\n            this.mSetNumberListener();\r\n            this.mSetImageButtonBarcodeListener();\r\n        }\r\n\r\n        this.mSetPlusListener();\r\n        this.mSetMinusListener();\r\n        this.mSetDoneListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public void pHandleScan(final cBarcodeScan pvBarcodeScan){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        //Only ARTICLE scans are allowed\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n            mDoUnknownScan(cAppExtension.context.getString(R.string.error_article_scan_mandatory));\r\n            return;\r\n        }\r\n\r\n        //Check if the scanned value belongs to this line\r\n        if (! cInventoryorder.currentInventoryOrder.pCheckBarcodeWithLineBarcodesBln(pvBarcodeScan)) {\r\n\r\n            //Keep the scan, so BIN activity can handle it\r\n            InventoryorderBinActivity.barcodeScanToHandle = pvBarcodeScan;\r\n\r\n            //Close this activity, we are done with the current article\r\n            this.mHandleDone();\r\n           return;\r\n        }\r\n\r\n        this.mShowBarcodeInfo();\r\n\r\n        //Try to raise quantityDbl\r\n        this.mTryToChangeInventoryQuantity(true, false,cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() );\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private void mTryToChangeInventoryQuantity(Boolean pvIsPositiveBln, Boolean pvAmountFixedBln, double pvAmountDbl) {\r\n\r\n        if (pvIsPositiveBln) {\r\n\r\n            //Determine the new amount\r\n            if (pvAmountFixedBln) {\r\n\r\n                cInventoryorderLineBarcode.pDeleteAllOtherLinesForBarcode(cInventoryorderLine.currentInventoryOrderLine.getLineNoInt(),\r\n                                                                          cInventoryorderLineBarcode.currentInventoryorderLineBarcode.getBarcodeStr() );\r\n\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n            } else {\r\n                cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl += pvAmountDbl;\r\n                cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl += pvAmountDbl;\r\n            }\r\n\r\n            this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n            return;\r\n        }\r\n\r\n        //negative\r\n\r\n        //Check if value already is zero\r\n        if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl < 1 ) {\r\n\r\n            //If we have a decimal, correct it to zero\r\n            if (cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl > 0 ) {\r\n                pvAmountDbl = 0;\r\n                pvAmountFixedBln = true;\r\n\r\n            } else {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (pvAmountDbl < 0) {\r\n            cUserInterface.pDoNope(this.quantityText, true, true);\r\n            return;\r\n        }\r\n\r\n        //Determine the new amount\r\n        if (pvAmountFixedBln) {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl = pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl =  pvAmountDbl;\r\n        }else {\r\n            cInventoryorderLine.currentInventoryOrderLine.quantityHandledDbl -= pvAmountDbl;\r\n            cInventoryorderLineBarcode.currentInventoryorderLineBarcode.quantityHandledDbl -= pvAmountDbl;\r\n        }\r\n\r\n        //Change quantityDbl in activity\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n\r\n    }\r\n\r\n    private  void mShowArticleImage() {\r\n\r\n        //If pick with picture is false, then hide image view\r\n        if (!cInventoryorder.currentInventoryOrder.isInventoryWithPictureBln()) {\r\n            this.articleThumbImageView.setVisibility(View.GONE);\r\n            return;\r\n        }\r\n\r\n        //If picture is not in cache (via webservice) then show no image\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pGetArticleImageBln()) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //If picture is in cache but can't be converted, then show no image\r\n        if (cInventoryorderLine.currentInventoryOrderLine.articleImage == null || cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap() == null) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.could_not_get_article_image), null);\r\n            this.articleThumbImageView.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_no_image_lightgrey_24dp));\r\n            return;\r\n        }\r\n\r\n        //Show the image\r\n        this.articleThumbImageView.setImageBitmap(cInventoryorderLine.currentInventoryOrderLine.articleImage.imageBitmap());\r\n\r\n    }\r\n\r\n    private void mShowQuantityInfo() {\r\n\r\n        this.quantityText.setImeOptions(EditorInfo.IME_ACTION_DONE);\r\n        this.quantityText.setSelectAllOnFocus(true);\r\n        this.quantityText.requestFocus();\r\n        this.quantityText.setSingleLine();\r\n        this.quantityText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_TEXT_VARIATION_NORMAL);\r\n        this.quantityText.setCursorVisible(false);\r\n\r\n        this.quantityText.setText(cText.pDoubleToStringStr(cInventoryorderLine.currentInventoryOrderLine.getQuantityHandledDbl()));\r\n        this.quantityRequiredText.setVisibility(View.INVISIBLE);\r\n    }\r\n\r\n    private void mNumberClicked() {\r\n\r\n        if (!cSetting.INV_AMOUNT_MANUAL()) {\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n            cUserInterface.pDoNope(this.quantityText, false, false);\r\n            cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.choose_barcode_first), null, false);\r\n            return;\r\n        }\r\n\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl() > 1) {\r\n\r\n            //Try to switch to another barcode for the same article, so the user doesn't have to manually\r\n            cInventoryorderBarcode inventoryorderBarcode = cInventoryorderBarcode.getSingleQuantityBarcodeForItemAndVariant(cInventoryorderBarcode.currentInventoryOrderBarcode);\r\n            if (inventoryorderBarcode != null) {\r\n                cInventoryorderBarcode.currentInventoryOrderBarcode = inventoryorderBarcode;\r\n            }\r\n            else\r\n            {\r\n                cUserInterface.pDoNope(this.quantityText, true, true);\r\n                cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer, getString(R.string.manual_input_only_barcodenumber_bigger1), null, false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.mShowNumberPickerFragment();\r\n    }\r\n\r\n    private  void mHandleDone() {\r\n\r\n        //Try to save the line to the database\r\n        if (!cInventoryorderLine.currentInventoryOrderLine.pSaveLineViaWebserviceBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.activity.getString(R.string.message_line_save_failed),\"\",true,true);\r\n            return;\r\n        }\r\n\r\n        //Change quantityDbl handled in database\r\n        cInventoryorderLine.currentInventoryOrderLine.pUpdateQuantityInDatabase();\r\n\r\n        cUserInterface.pHideGettingData();\r\n        this.mResetCurrents();\r\n        this.mStartInventoryBINActivity();\r\n    }\r\n\r\n    private void mDoUnknownScan(String pvErrorMessageStr) {\r\n        cUserInterface.pShowSnackbarMessage(this.inventoryArticleDetailContainer,pvErrorMessageStr,null,true);\r\n    }\r\n\r\n    private void mHideArticleInfo(){\r\n\r\n        this.articleInfoContainer.setVisibility(View.GONE);\r\n        ConstraintLayout.LayoutParams newCardViewLayoutParams = new ConstraintLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        newCardViewLayoutParams.setMargins(15,15,15,15);\r\n        this.articleContainer.setLayoutParams(newCardViewLayoutParams);\r\n\r\n        ConstraintSet constraintSetSpace = new ConstraintSet();\r\n        constraintSetSpace.clone(this.inventoryArticleDetailContainer);\r\n        constraintSetSpace.connect(this.articleContainer.getId(), ConstraintSet.TOP, toolbar.getId(), ConstraintSet.BOTTOM);\r\n        constraintSetSpace.applyTo(this.inventoryArticleDetailContainer);\r\n\r\n    }\r\n\r\n    private  void mShowBarcodeInfo(){\r\n        if (cInventoryorderBarcode.currentInventoryOrderBarcode != null) {\r\n            this.articleBarcodeText.setText(cInventoryorderBarcode.currentInventoryOrderBarcode.getUnitOfMeasureInfoStr());\r\n        } else {\r\n            this.articleBarcodeText.setText(cAppExtension.context.getString(R.string.message_unknown_barcode));\r\n        }\r\n    }\r\n\r\n    private void mSetImageButtonBarcodeListener() {\r\n        this.imageButtonBarcode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl() == null || cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 0) {\r\n                    return;\r\n                }\r\n\r\n                //If we only have one barcodeStr, then automatticaly select that barcodeStr\r\n                if (cInventoryorderLine.currentInventoryOrderLine.barcodesObl().size() == 1) {\r\n                    pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLine.currentInventoryOrderLine.barcodesObl().get(0).getBarcodeStr()));\r\n                    return;\r\n                }\r\n\r\n                mShowBarcodeSelectFragment();\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mShowBarcodeSelectFragment() {\r\n        BarcodeFragment barcodeFragment = new BarcodeFragment();\r\n        barcodeFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BARCODEFRAGMENT_LIST_TAG);\r\n    }\r\n\r\n    private void mStartInventoryBINActivity() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        InventoryorderBinActivity.busyBln = false;\r\n\r\n        final Intent intent = new Intent(cAppExtension.context, InventoryorderBinActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n            cAppExtension.activity.finish();\r\n    }\r\n\r\n    private void mResetCurrents(){\r\n        cInventoryorderLine.currentInventoryOrderLine = null;\r\n        cInventoryorderBarcode.currentInventoryOrderBarcode = null;\r\n        cInventoryorderLineBarcode.currentInventoryorderLineBarcode = null;\r\n    }\r\n\r\n    //Region Number Broadcaster\r\n\r\n    private void mShowNumberPickerFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(cPublicDefinitions.NUMBERINTENT_CURRENTQUANTITY, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityHandledDbl().intValue());\r\n        bundle.putDouble(cPublicDefinitions.NUMBERINTENT_MAXQUANTITY,99999);\r\n\r\n        NumberpickerFragment numberpickerFragment = new NumberpickerFragment();\r\n        numberpickerFragment.setArguments(bundle);\r\n\r\n        numberpickerFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.NUMBERPICKERFRAGMENT_TAG);\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetPlusListener() {\r\n\r\n        this.imageButtonPlus.setOnTouchListener(new View.OnTouchListener() {\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (plusHandler != null) return true;\r\n                    plusHandler = new Handler();\r\n                    plusHandler.postDelayed(mPlusAction, 750);\r\n                }\r\n\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (plusHandler == null) return true;\r\n                    plusHandler.removeCallbacks(mPlusAction);\r\n                    plusHandler = null;\r\n                    inventoryCounterPlusHelperInt = 0;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.imageButtonPlus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n\r\n                mTryToChangeInventoryQuantity(true, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private void mSetMinusListener() {\r\n\r\n        this.imageButtonMinus.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                    if (minusHandler != null) return true;\r\n                    minusHandler = new Handler();\r\n                    minusHandler.postDelayed(mMinusAction, 750);\r\n                }\r\n                if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                    if (minusHandler == null) return true;\r\n                    minusHandler.removeCallbacks(mMinusAction);\r\n                    minusHandler = null;\r\n                    inventoryCounterMinusHelperInt = 0;\r\n                }\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        this.imageButtonMinus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n\r\n                //There is no selected barcodeStr, select one first\r\n                if (cInventoryorderBarcode.currentInventoryOrderBarcode == null) {\r\n                    cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_select_one_of_multiple_barcodes),null);\r\n                    return;\r\n                }\r\n                mTryToChangeInventoryQuantity(false, false, cInventoryorderBarcode.currentInventoryOrderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetNumberListener() {\r\n        this.quantityText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mNumberClicked();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mSetDoneListener(){\r\n\r\n        this.imageButtonDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mHandleDone();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private final Runnable mMinusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonMinus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterMinusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterMinusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterMinusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterMinusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedMinus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final Runnable mPlusAction = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            imageButtonPlus.performClick();\r\n            long milliSecsLng;\r\n            if (inventoryCounterPlusHelperInt < 10) {\r\n                milliSecsLng = 200;\r\n            } else if (inventoryCounterPlusHelperInt < 20) {\r\n                milliSecsLng = 150;\r\n            } else if (inventoryCounterPlusHelperInt < 30) {\r\n                milliSecsLng = 100;\r\n            } else if (inventoryCounterPlusHelperInt < 40) {\r\n                milliSecsLng = 50;\r\n            } else {\r\n                milliSecsLng = 50;\r\n            }\r\n            mDoDelayedPlus(this, milliSecsLng);\r\n        }\r\n    };\r\n\r\n    private final BroadcastReceiver mNumberReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            int numberChosenInt = 0;\r\n            Bundle extras = intent.getExtras();\r\n\r\n            if (extras != null) {\r\n                numberChosenInt = extras.getInt(cPublicDefinitions.NUMBERINTENT_EXTRANUMBER);\r\n            }\r\n            mHandleQuantityChosen(numberChosenInt);\r\n        }\r\n    };\r\n\r\n    private void mDoDelayedMinus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.minusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterMinusHelperInt += 1;\r\n    }\r\n\r\n    private void mDoDelayedPlus(Runnable pvRunnable, long pvMilliSecsLng) {\r\n        this.plusHandler.postDelayed(pvRunnable, pvMilliSecsLng);\r\n        this.inventoryCounterPlusHelperInt += 1;\r\n    }\r\n\r\n    private void mHandleQuantityChosen(double pvQuantityDbl) {\r\n        this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);\r\n    }\r\n\r\n    //End Region Private Methods\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/src/main/java/nl/icsvertex/scansuite/Activities/Inventory/InventoryArticleActivity.java	(date 1617289789323)
+@@ -48,6 +48,9 @@
+ import SSU_WHS.Inventory.InventoryorderBins.cInventoryorderBin;
+ import SSU_WHS.Inventory.InventoryorderLineBarcodes.cInventoryorderLineBarcode;
+ import SSU_WHS.Inventory.InventoryorderLines.cInventoryorderLine;
++import SSU_WHS.Picken.PickorderLines.cPickorderLine;
++import nl.icsvertex.scansuite.Activities.Pick.PickorderLineItemPropertyInputActvity;
++import nl.icsvertex.scansuite.Activities.Pick.PickorderPickActivity;
+ import nl.icsvertex.scansuite.Fragments.Dialogs.BarcodeFragment;
+ import nl.icsvertex.scansuite.Fragments.Dialogs.NumberpickerFragment;
+ import nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;
+@@ -62,6 +65,8 @@
+ 
+     //Region Private
+ 
++    public static boolean cancelledViaPropertysBln;
++    public static boolean handledViaPropertysBln;
+     private  ConstraintLayout inventoryArticleDetailContainer;
+ 
+     private Toolbar toolbar;
+@@ -330,6 +335,17 @@
+     @Override
+     public void mInitScreen() {
+ 
++        if (InventoryArticleActivity.handledViaPropertysBln) {
++            this.mHandleDone();
++            return;
++        }
++        else
++        {
++            if (!InventoryArticleActivity.cancelledViaPropertysBln && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl() != null && cInventoryorderLine.currentInventoryOrderLine.inventoryorderLinePropertyInputObl().size() > 0 ) {
++                mShowItemPropertyInputActivity();
++                return;
++            }
++        }
+     }
+ 
+     //End Region iICSDefaultActivity defaults
+@@ -358,6 +374,9 @@
+            return;
+         }
+ 
++
++
++
+         this.mShowBarcodeInfo();
+ 
+         //Try to raise quantityDbl
+@@ -761,5 +780,12 @@
+         this.mTryToChangeInventoryQuantity(pvQuantityDbl != 0, true,pvQuantityDbl);
+     }
+ 
++    private  void mShowItemPropertyInputActivity() {
++        cUserInterface.pCheckAndCloseOpenDialogs();
++        Intent intent = new Intent(cAppExtension.context, InventoryorderLineItemPropertyInputActvity.class);
++        cAppExtension.activity.startActivity(intent);
++        cAppExtension.activity.finish();
++    }
++
+     //End Region Private Methods
+ }
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java	(date 1617289071926)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueInputAdapter.java	(date 1617289071926)
+@@ -0,0 +1,291 @@
++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
++
++import android.text.TextUtils;
++import android.view.LayoutInflater;
++import android.view.View;
++import android.view.ViewGroup;
++import android.view.animation.AnimationUtils;
++import android.widget.ImageView;
++import android.widget.LinearLayout;
++import android.widget.TextView;
++
++import androidx.annotation.NonNull;
++import androidx.appcompat.widget.AppCompatImageButton;
++import androidx.appcompat.widget.AppCompatImageView;
++import androidx.constraintlayout.widget.ConstraintLayout;
++import androidx.recyclerview.widget.RecyclerView;
++
++import java.util.ArrayList;
++import java.util.List;
++
++import ICS.Utils.Scanning.cBarcodeScan;
++import ICS.Utils.cText;
++import ICS.cAppExtension;
++import nl.icsvertex.scansuite.Activities.Inventory.InventoryorderLineItemPropertyInputActvity;
++import nl.icsvertex.scansuite.R;
++
++public class cInventoryorderLinePropertyValueInputAdapter extends RecyclerView.Adapter<cInventoryorderLinePropertyValueInputAdapter.commentViewHolder>{
++
++    public static class commentViewHolder extends RecyclerView.ViewHolder{
++
++        private final AppCompatImageView imageViewPropertyType;
++        private final TextView textViewDescription;
++        private final TextView textViewValue;
++        private TextView textViewQuantityUsed;
++        private final ConstraintLayout primaryContent;
++        private final ConstraintLayout secondaryContent;
++        private final AppCompatImageButton imageButtonMinus;
++        private final AppCompatImageButton imageButtonPlus;
++        private final AppCompatImageButton imageButtonZero;
++        private final  AppCompatImageButton imageButtonManual;
++        private final AppCompatImageView imageChevronDown;
++
++        public LinearLayout itemPropertyValueInputItemLinearLayout;
++
++        public commentViewHolder(View pvView) {
++            super(pvView);
++
++            this.imageViewPropertyType =  pvView.findViewById(R.id.imageViewPropertyType);
++
++            this.textViewDescription = pvView.findViewById(R.id.textViewDescription);
++            this.textViewDescription.setEllipsize(TextUtils.TruncateAt.MARQUEE);
++            this.textViewDescription.setSingleLine(true);
++            this.textViewDescription.setMarqueeRepeatLimit(5);
++            this.textViewDescription.setSelected(true);
++
++            this.textViewValue = pvView.findViewById(R.id.textViewValue);
++
++            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);
++
++            this.itemPropertyValueInputItemLinearLayout = pvView.findViewById(R.id.itemPropertyValueInputItemLinearLayout);
++            this.primaryContent = pvView.findViewById(R.id.primaryContent);
++            this.secondaryContent = pvView.findViewById(R.id.secondaryContent);
++            this.secondaryContent.setVisibility(View.GONE);
++
++            this.imageButtonPlus = pvView.findViewById(R.id.imageButtonPlus);
++            this.imageButtonMinus = pvView.findViewById(R.id.imageButtonMinus);
++            this.imageButtonZero = pvView.findViewById(R.id.imageButtonZero);
++            this.imageButtonManual = pvView.findViewById(R.id.imageButtonManual);
++            this.textViewQuantityUsed = pvView.findViewById(R.id.textViewQuantityUsed);
++            this.imageChevronDown = pvView.findViewById(R.id.imageChevronDown);
++        }
++    }
++
++    //Region Private Properties
++    private final LayoutInflater layoutInflaterObject;
++    private final List<LinearLayout> itemPropertyValueLinearLayoutObl = new ArrayList<>();
++    private List<cInventoryorderLinePropertyValue> localItemPropertyValueObl;
++    //End Region Private Properties
++
++    //Region Constructor
++    public cInventoryorderLinePropertyValueInputAdapter() {
++        this.layoutInflaterObject = LayoutInflater.from(cAppExtension.context);
++    }
++    //End Region Constructor
++
++    @NonNull
++    @Override
++    public commentViewHolder onCreateViewHolder(@NonNull ViewGroup pvParentVieGroup, int pvViewTypeInt) {
++        View itemView = this.layoutInflaterObject.inflate(R.layout.recycler_itempropertyvalue_input, pvParentVieGroup, false);
++        return new commentViewHolder(itemView);
++    }
++
++    @Override
++    public void onBindViewHolder(final commentViewHolder pvHolder, int pvPositionInt) {
++
++        this.itemPropertyValueLinearLayoutObl.add(pvHolder.itemPropertyValueInputItemLinearLayout);
++
++        if (this.localItemPropertyValueObl != null && this.localItemPropertyValueObl.size() > 0) {
++
++            final cInventoryorderLinePropertyValue inventoryorderLinePropertyValue = this.localItemPropertyValueObl.get(pvPositionInt);
++
++
++            switch (inventoryorderLinePropertyValue.getItemProperty().getValueTypeStr().toUpperCase()) {
++
++                case "BOOLEAN":
++                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_check_black_24dp);
++                    break;
++
++                case "DECIMAL":
++                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_counter_black_24dp);
++                    break;
++
++                case "TEXT" :
++                case "CODE":
++                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_text_black_24dp);
++                    break;
++
++                case "DATE":
++                    pvHolder.imageViewPropertyType.setImageResource(R.drawable.ic_calendar_black_24dp);
++                    break;
++            }
++
++            pvHolder.textViewDescription.setText(inventoryorderLinePropertyValue.getItemProperty().getOmschrijvingStr());
++            pvHolder.textViewValue.setText(inventoryorderLinePropertyValue.getValueStr());
++            pvHolder.textViewQuantityUsed.setText(cText.pDoubleToStringStr(inventoryorderLinePropertyValue.getQuantityDbl()));
++
++            if (inventoryorderLinePropertyValue.getQuantityDbl() == 0 ) {
++                pvHolder.imageChevronDown.setVisibility(View.GONE);
++            }
++
++            if (inventoryorderLinePropertyValue.getItemProperty().getUniqueBln() && inventoryorderLinePropertyValue.getQuantityDbl() > 0 ) {
++                pvHolder.imageButtonPlus.setVisibility(View.INVISIBLE);
++                pvHolder.imageButtonManual.setVisibility(View.INVISIBLE);
++            }
++
++            if (inventoryorderLinePropertyValue == cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue) {
++                pvHolder.secondaryContent.setVisibility(View.VISIBLE);
++            }
++
++
++            pvHolder.primaryContent.setOnClickListener(new View.OnClickListener() {
++                @Override
++                public void onClick(final View view) {
++
++                    if (inventoryorderLinePropertyValue.getQuantityDbl() == 0) {
++                        return;
++                    }
++
++                    AnimationUtils.loadAnimation(cAppExtension.context.getApplicationContext(), R.anim.rotate_180);
++
++                    //Close all others
++                    for (LinearLayout aLayout : itemPropertyValueLinearLayoutObl) {
++                        ConstraintLayout secondaryLayout = aLayout.findViewById(R.id.secondaryContent);
++                        ConstraintLayout primaryLayout = aLayout.findViewById(R.id.primaryContent);
++                        if (secondaryLayout != null) {
++                            if (primaryLayout != view) {
++                                if (secondaryLayout.getVisibility() == View.VISIBLE) {
++                                    ImageView chevronImage = primaryLayout.findViewById(R.id.imageChevronDown);
++                                    if (chevronImage != null) {
++                                        chevronImage.animate().rotation(0).start();
++                                    }
++                                }
++                                secondaryLayout.animate().scaleY(0).start();
++                                secondaryLayout.setVisibility(View.GONE);
++                            }
++                        }
++                    }
++
++                    boolean isExpanded;
++                    isExpanded = pvHolder.secondaryContent.getVisibility() == View.VISIBLE;
++
++                    if (isExpanded) {
++                        pvHolder.imageChevronDown.animate().rotation(0).start();
++                        pvHolder.secondaryContent.animate().scaleY(0).start();
++                        pvHolder.secondaryContent.setVisibility(View.GONE);
++                    }
++                    else {
++                        pvHolder.imageChevronDown.animate().rotation(180).start();
++                        pvHolder.secondaryContent.animate().scaleY(1).start();
++                        pvHolder.secondaryContent.setVisibility(View.VISIBLE);
++                    }
++
++
++                }
++            });
++
++            pvHolder.imageButtonPlus.setOnClickListener(new View.OnClickListener() {
++                @Override
++                public void onClick(View view) {
++
++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
++
++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
++                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity)cAppExtension.activity;
++                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
++                        inventoryorderLineItemPropertyInputActvity.pHandleScan(cBarcodeScan.pFakeScan(cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.getValueStr()));
++                    }
++
++                }
++            });
++
++            pvHolder.imageButtonMinus.setOnClickListener(new View.OnClickListener() {
++                @Override
++                public void onClick(View view) {
++
++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
++
++                    int currentQuantity = cText.pStringToIntegerInt(pvHolder.textViewQuantityUsed.getText().toString());
++                    int newQuantity = currentQuantity - 1;
++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl = newQuantity;
++
++                    final InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity;
++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
++                        inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
++
++                        if (newQuantity == 0) {
++                            inventoryorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();
++                        }
++                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
++                        inventoryorderLineItemPropertyInputActvity.pTryToChangeCountedQuantity(false, false,1);
++                    }
++                }
++            });
++
++            pvHolder.imageButtonZero.setOnClickListener(new View.OnClickListener() {
++                @Override
++                public void onClick(View view) {
++
++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
++
++                    final InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity;
++
++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
++                        inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
++
++                        double countDbl = cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl;
++
++                        while (countDbl > 0) {
++                            inventoryorderLineItemPropertyInputActvity.pTryToChangeCountedQuantity(false, false,1);
++                            cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl --;
++                            countDbl--;
++                        }
++
++                        inventoryorderLineItemPropertyInputActvity.pDeleteValueFromRecyler();
++                        inventoryorderLineItemPropertyInputActvity.pRefreshActivity();
++                    }
++                }
++            });
++
++            pvHolder.imageButtonManual.setOnClickListener(new View.OnClickListener() {
++                @Override
++                public void onClick(View view) {
++
++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue.quantityDbl = 0;
++
++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
++                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
++                        inventoryorderLineItemPropertyInputActvity.pShowNumericInputFragment();
++                    }
++                }
++            });
++
++            pvHolder.imageViewPropertyType.setOnClickListener(new View.OnClickListener() {
++                @Override
++                public void onClick(View view) {
++
++                    cInventoryorderLinePropertyValue.currentInventoryorderLinePropertyValue = inventoryorderLinePropertyValue;
++
++                    if (cAppExtension.activity instanceof InventoryorderLineItemPropertyInputActvity) {
++                        InventoryorderLineItemPropertyInputActvity inventoryorderLineItemPropertyInputActvity = (InventoryorderLineItemPropertyInputActvity) cAppExtension.activity;
++                        inventoryorderLineItemPropertyInputActvity.pShowTextInputFragment();
++                    }
++                }
++            });
++        }
++    }
++
++    public void pFillData(List<cInventoryorderLinePropertyValue> pvDataObl) {
++        this.localItemPropertyValueObl = pvDataObl;
++        notifyDataSetChanged();
++    }
++
++
++    @Override
++    public int getItemCount () {
++        if (this.localItemPropertyValueObl != null)
++            return this.localItemPropertyValueObl.size();
++        else return 0;
++    }
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java	(date 1617282805885)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyEntity.java	(date 1617282805885)
+@@ -0,0 +1,77 @@
++package SSU_WHS.Inventory.InventoryorderlineProperty;
++
++import androidx.room.ColumnInfo;
++import androidx.room.Entity;
++import androidx.room.PrimaryKey;
++
++import org.json.JSONException;
++import org.json.JSONObject;
++
++import ICS.Utils.cText;
++import SSU_WHS.General.cDatabase;
++
++@Entity(tableName=cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
++public class cInventoryorderLinePropertyEntity {
++
++    @PrimaryKey(autoGenerate = true)
++    public Integer recordid;
++    public Integer getRecordidInt() {return this.recordid;}
++
++    @ColumnInfo(name = cDatabase.LINENO_NAMESTR )
++    public Integer linenoInt;
++    public Integer getLineNoInt() {return this.linenoInt;}
++
++    @ColumnInfo(name = cDatabase.PROPERTYCODE_NAMESTR)
++    public String propertyCodeStr;
++    public String getPropertyCodeStr() {return this.propertyCodeStr;}
++
++    @ColumnInfo(name = cDatabase.SEQUENCENOHANDLED_NAMESTR )
++    public Integer sequenceNoHandledInt;
++    public Integer getSequenceNoHandledInt() {return this.sequenceNoHandledInt;}
++
++    @ColumnInfo(name = cDatabase.SORTINGSEQUENCENO_NAMESTR )
++    public Integer sortingSequenceNoInt;
++    public Integer getSortingSequenceNoInt() {return this.sortingSequenceNoInt;}
++
++    @ColumnInfo(name = cDatabase.LAYOUT_NAMESTR)
++    public String layoutStr;
++    public String getLayoutStr() {return this.layoutStr;}
++
++    @ColumnInfo(name = cDatabase.ISINPUT_NAMESTR)
++    public boolean isInputBln;
++    public boolean getIsInputBln() {return this.isInputBln;}
++
++    @ColumnInfo(name = cDatabase.ISREQUIRED_NAMESTR)
++    public boolean isRequiredBln;
++    public boolean getIsRequiredBln() {return this.isRequiredBln;}
++
++    @ColumnInfo(name = cDatabase.VALUEHANDLED_NAMESTR)
++    public String valueHandledStr;
++    public String getValueHandledStr() {return this.valueHandledStr;}
++
++    //empty constructor
++    public cInventoryorderLinePropertyEntity() {
++
++    }
++
++    public cInventoryorderLinePropertyEntity(JSONObject pvJsonObject) {
++        try {
++            this.linenoInt = pvJsonObject.getInt(cDatabase.LINENO_NAMESTR);
++            this.propertyCodeStr = pvJsonObject.getString(cDatabase.PROPERTYCODE_NAMESTR);
++            this.sequenceNoHandledInt = pvJsonObject.getInt(cDatabase.SEQUENCENOHANDLED_NAMESTR);
++            this.sortingSequenceNoInt = pvJsonObject.getInt(cDatabase.SORTINGSEQUENCENO_NAMESTR);
++            this.layoutStr = pvJsonObject.getString(cDatabase.LAYOUT_NAMESTR);
++            this.isInputBln = cText.pStringToBooleanBln(pvJsonObject.getString(cDatabase.ISINPUT_NAMESTR), false) ;
++            this.isRequiredBln = cText.pStringToBooleanBln(pvJsonObject.getString(cDatabase.ISREQUIRED_NAMESTR), false) ;
++            this.valueHandledStr = pvJsonObject.getString(cDatabase.VALUEHANDLED_NAMESTR);
++
++        } catch (JSONException e) {
++            e.printStackTrace();
++        }
++    }
++
++
++
++
++
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java	(date 1617282982916)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/iInventoryorderlinePropertyDao.java	(date 1617282982916)
+@@ -0,0 +1,33 @@
++package SSU_WHS.Inventory.InventoryorderlineProperty;
++
++import androidx.room.Dao;
++import androidx.room.Delete;
++import androidx.room.Insert;
++import androidx.room.OnConflictStrategy;
++import androidx.room.Query;
++
++import java.util.List;
++
++import SSU_WHS.General.cDatabase;
++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
++
++@Dao
++public interface iInventoryorderlinePropertyDao {
++
++    //Standard SQL functions
++    @Delete
++    void deletePickorder(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity);
++
++    @Insert(onConflict = OnConflictStrategy.REPLACE)
++    void insert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity);
++
++
++    @Query("DELETE FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
++    void deleteAll();
++
++    @Query("SELECT * FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTY)
++    List<cPickorderLinePropertyEntity> getAll();
++    //Get inventorylines
++
++
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java	(date 1617287945968)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLineProperty.java	(date 1617287945968)
+@@ -0,0 +1,176 @@
++package SSU_WHS.Inventory.InventoryorderlineProperty;
++
++import androidx.lifecycle.ViewModelProvider;
++
++import org.json.JSONObject;
++
++import java.util.ArrayList;
++import java.util.List;
++
++import ICS.Utils.cResult;
++import ICS.cAppExtension;
++import SSU_WHS.Basics.ItemProperty.cItemProperty;
++import SSU_WHS.Inventory.InventoryorderlinePropertyValue.cInventoryorderLinePropertyValue;
++import nl.icsvertex.scansuite.R;
++
++public class cInventoryorderLineProperty {
++
++    //Public Properties
++    private Integer lineNoInt;
++    public Integer getLineNoInt() {return lineNoInt;}
++
++    private String propertyCodeStr;
++    public String getPropertyCodeStr() {return propertyCodeStr;}
++
++    public cItemProperty getItemProperty() {
++
++        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {
++            return  null;
++        }
++
++        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {
++            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
++                return  itemProperty;
++            }
++        }
++
++        return  null;
++
++    }
++
++    private Integer sequenceNoHandledInt;
++    public Integer getSequenceNoHandledInt() {return sequenceNoHandledInt;}
++
++    private Integer sortingSequenceNoInt;
++    public Integer getSortingSequenceNoInt() {return sortingSequenceNoInt;}
++
++    private String layoutStr;
++    public String getLayoutStr() {return layoutStr;}
++
++    private boolean isInputBln;
++    public boolean getIsInputBln() {return isInputBln;}
++
++    private boolean isRequiredBln;
++    public boolean getIsRequiredBln() {return isRequiredBln;}
++
++    private String valueHandledStr;
++    public String getValueHandledStr() {return valueHandledStr;}
++
++    private cInventoryorderLinePropertyEntity inventoryorderLinePropertyEntity;
++
++    public  static cInventoryorderLineProperty currentInventoryorderLineProperty;
++    public static ArrayList<cInventoryorderLineProperty> allLinePropertysObl;
++
++    public List<cInventoryorderLinePropertyValue> propertyValueObl() {
++
++        List<cInventoryorderLinePropertyValue> resultObl = new ArrayList<>();
++
++        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null || cInventoryorderLinePropertyValue.allLinePropertysValuesObl.size() == 0)  {
++            return  resultObl;
++        }
++
++        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : cInventoryorderLinePropertyValue.allLinePropertysValuesObl) {
++            if (inventoryorderLinePropertyValue.getLineNoInt() == this.getLineNoInt() && inventoryorderLinePropertyValue.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
++                resultObl.add(inventoryorderLinePropertyValue);
++            }
++        }
++
++        return  resultObl;
++
++    }
++
++    private cInventoryorderLinePropertyViewModel getInventoryorderLinePropertyViewModel() {
++        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyViewModel.class);
++    }
++
++    public cInventoryorderLineProperty(JSONObject pvJsonObject) {
++        this.inventoryorderLinePropertyEntity = new cInventoryorderLinePropertyEntity(pvJsonObject);
++        this.lineNoInt = this.inventoryorderLinePropertyEntity.getLineNoInt();
++        this.propertyCodeStr = this.inventoryorderLinePropertyEntity.getPropertyCodeStr();
++        this.sequenceNoHandledInt = this.inventoryorderLinePropertyEntity.getSequenceNoHandledInt();
++        this.sortingSequenceNoInt = this.inventoryorderLinePropertyEntity.getSortingSequenceNoInt();
++        this.layoutStr = this.inventoryorderLinePropertyEntity.getLayoutStr();
++        this.isInputBln = this.inventoryorderLinePropertyEntity.getIsInputBln();
++        this.isRequiredBln = this.inventoryorderLinePropertyEntity.getIsRequiredBln();
++        this.valueHandledStr = this.inventoryorderLinePropertyEntity.getValueHandledStr();
++    }
++
++    public boolean pInsertInDatabaseBln() {
++        this.getInventoryorderLinePropertyViewModel().insert(this.inventoryorderLinePropertyEntity);
++
++        if (cInventoryorderLineProperty.allLinePropertysObl == null) {
++            cInventoryorderLineProperty.allLinePropertysObl = new ArrayList<>();
++        }
++        cInventoryorderLineProperty.allLinePropertysObl.add(this);
++        return true;
++    }
++
++    public void pValueAdded(String pvValueStr) {
++
++        //Try to find value with same value
++        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.propertyValueObl()) {
++            if (inventoryorderLinePropertyValue.getValueStr().equalsIgnoreCase(pvValueStr)) {
++                inventoryorderLinePropertyValue.quantityDbl += 1;
++                return;
++            }
++        }
++
++        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null) {
++            cInventoryorderLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();
++        }
++
++        //Add a new value
++        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.add(new cInventoryorderLinePropertyValue(this.getLineNoInt(), this.getPropertyCodeStr(),pvValueStr));
++    }
++
++    public cResult pCheckScanForUniquePropertyRst(String pvPropertyValueStr) {
++
++        cResult resultRst = new cResult();
++        resultRst.resultBln = true;
++
++        if (!this.getItemProperty().getUniqueBln() || this.propertyValueObl() == null ||this.propertyValueObl().size() ==0 ) {
++            resultRst.resultBln = true;
++            return  resultRst;
++        }
++
++
++
++        for (cInventoryorderLinePropertyValue inventoryorderLinePropertyValue : this.propertyValueObl()) {
++
++            if (inventoryorderLinePropertyValue.getValueStr().equalsIgnoreCase(pvPropertyValueStr)) {
++
++                // We have a match, and this hasn't been scanned already
++                if (inventoryorderLinePropertyValue.getQuantityDbl() == 0) {
++                    resultRst.resultBln = true;
++                    return  resultRst;
++                }
++                else
++                {
++                    resultRst.resultBln = false;
++                    resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_itempropery_value_already_used));
++                    return  resultRst;
++                }
++            }
++        }
++
++        resultRst.resultBln = true;
++        return  resultRst;
++
++    }
++
++    public boolean pDeleteFromDatabaseBln() {
++        if (cInventoryorderLineProperty.allLinePropertysObl != null) {
++            cInventoryorderLineProperty.allLinePropertysObl.remove(this);
++        }
++        return true;
++    }
++
++    public static boolean pTruncateTableBln() {
++
++        cInventoryorderLinePropertyViewModel inventoryorderLinePropertyViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyViewModel.class);
++        inventoryorderLinePropertyViewModel.deleteAll();
++        cInventoryorderLineProperty.allLinePropertysObl = null;
++        return true;
++    }
++
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java	(date 1617283458046)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyViewModel.java	(date 1617283458046)
+@@ -0,0 +1,28 @@
++package SSU_WHS.Inventory.InventoryorderlineProperty;
++
++import android.app.Application;
++
++import androidx.lifecycle.AndroidViewModel;
++
++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyRepository;
++
++public class cInventoryorderLinePropertyViewModel extends AndroidViewModel {
++
++    //Region Public Properties
++    private cInventoryorderLinePropertyRepository Repository;
++    //End Region Public Properties
++
++    //Region Constructor
++    public cInventoryorderLinePropertyViewModel(Application pvApplication) {
++        super(pvApplication);
++        this.Repository = new cInventoryorderLinePropertyRepository(pvApplication);
++    }
++    //End Region Constructor
++
++    public void insert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {this.Repository.pInsert(pvInventoryorderLinePropertyEntity);}
++    public void deleteAll() {this.Repository.pTruncate();}
++    public void delete(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {this.Repository.pDelete(pvInventoryorderLinePropertyEntity);}
++
++
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java	(date 1617283407238)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlineProperty/cInventoryorderLinePropertyRepository.java	(date 1617283407238)
+@@ -0,0 +1,81 @@
++package SSU_WHS.Inventory.InventoryorderlineProperty;
++
++import android.app.Application;
++import android.os.AsyncTask;
++
++import SSU_WHS.General.acScanSuiteDatabase;
++import SSU_WHS.Picken.PickorderLineProperty.cPickorderLinePropertyEntity;
++import SSU_WHS.Picken.PickorderLineProperty.iPickorderLinePropertyDao;
++
++public class cInventoryorderLinePropertyRepository {
++
++    //Region Public Properties
++    private iInventoryorderlinePropertyDao inventoryorderlinePropertyDao;
++    //End Region Public Properties
++
++    //End Region Private Properties
++
++    //Region Constructor
++    public cInventoryorderLinePropertyRepository(Application pvApplication) {
++        //Region Private Properties
++        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);
++        this.inventoryorderlinePropertyDao = db.inventoryorderlinePropertyDao();
++    }
++    //End Region Constructor
++
++    //Region Public Methods
++
++    public void pInsert(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {
++        new mInsertInDatabaseAsyncTask(this.inventoryorderlinePropertyDao).execute(pvInventoryorderLinePropertyEntity);
++    }
++
++    public void pDelete(cInventoryorderLinePropertyEntity pvInventoryorderLinePropertyEntity) {
++        new mDeleteAsyncTask(this.inventoryorderlinePropertyDao).execute(pvInventoryorderLinePropertyEntity);
++    }
++
++    public void pTruncate() {
++        new cInventoryorderLinePropertyRepository.deleteAllAsyncTask(this.inventoryorderlinePropertyDao).execute();
++    }
++
++    //End Region Public Methods
++
++    private static class mInsertInDatabaseAsyncTask extends AsyncTask<cInventoryorderLinePropertyEntity, Void, Void> {
++        private iInventoryorderlinePropertyDao mAsyncTaskDao;
++
++        mInsertInDatabaseAsyncTask(iInventoryorderlinePropertyDao dao) {
++            mAsyncTaskDao = dao;
++        }
++        @Override
++        protected Void doInBackground(final cInventoryorderLinePropertyEntity... params) {
++            mAsyncTaskDao.insert(params[0]);
++            return null;
++        }
++    }
++
++    private static class mDeleteAsyncTask extends AsyncTask<cInventoryorderLinePropertyEntity, Void, Void> {
++        private iInventoryorderlinePropertyDao mAsyncTaskDao;
++
++        mDeleteAsyncTask(iInventoryorderlinePropertyDao dao) { mAsyncTaskDao = dao; }
++        @Override
++        protected Void doInBackground(final cInventoryorderLinePropertyEntity... params) {
++            mAsyncTaskDao.deletePickorder(params[0]);
++            return null;
++        }
++    }
++
++    private static class deleteAllAsyncTask extends AsyncTask<Void, Void, Void> {
++        private iInventoryorderlinePropertyDao mAsyncTaskDao;
++
++        deleteAllAsyncTask(iInventoryorderlinePropertyDao dao) {
++            mAsyncTaskDao = dao;
++        }
++        @Override
++        protected Void doInBackground(final Void... params) {
++            mAsyncTaskDao.deleteAll();
++            return null;
++        }
++    }
++
++
++
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java	(date 1617284128378)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/iInventoryorderLinePropertyValueDao.java	(date 1617284128378)
+@@ -0,0 +1,32 @@
++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
++
++import androidx.room.Dao;
++import androidx.room.Delete;
++import androidx.room.Insert;
++import androidx.room.OnConflictStrategy;
++import androidx.room.Query;
++
++import java.util.List;
++
++import SSU_WHS.General.cDatabase;
++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
++
++@Dao
++public interface iInventoryorderLinePropertyValueDao {
++
++    //Standard SQL functions
++    @Delete
++    void deletePickorder(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity);
++
++    @Insert(onConflict = OnConflictStrategy.REPLACE)
++    void insert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity);
++
++    @Query("DELETE FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
++    void deleteAll();
++
++    @Query("SELECT * FROM " + cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
++    List<cInventoryorderLinePropertyValueEntity> getAll();
++    //Get picklines
++
++
++}
+Index: app/release/normal/release/output-metadata.json
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>{\r\n  \"version\": 2,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"nl.icsvertex.scansuite\",\r\n  \"variantName\": \"processNormalReleaseResources\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"versionCode\": 15891,\r\n      \"versionName\": \"1.5.8.91A\",\r\n      \"outputFile\": \"app-normal-release.apk\"\r\n    }\r\n  ]\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/release/normal/release/output-metadata.json	(revision 443cf5552bcc70e32c46f03737a5690bb825de24)
++++ app/release/normal/release/output-metadata.json	(date 1615995006673)
+@@ -10,8 +10,8 @@
+     {
+       "type": "SINGLE",
+       "filters": [],
+-      "versionCode": 15891,
+-      "versionName": "1.5.8.91A",
++      "versionCode": 15892,
++      "versionName": "1.5.8.92A",
+       "outputFile": "app-normal-release.apk"
+     }
+   ]
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java	(date 1617284608363)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValue.java	(date 1617284608363)
+@@ -0,0 +1,134 @@
++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
++
++import androidx.lifecycle.ViewModelProvider;
++
++import org.json.JSONObject;
++
++import java.util.ArrayList;
++
++import ICS.Utils.cText;
++import ICS.cAppExtension;
++import SSU_WHS.Basics.ItemProperty.cItemProperty;
++import SSU_WHS.Inventory.InventoryorderlineProperty.cInventoryorderLineProperty;
++import nl.icsvertex.scansuite.R;
++
++public class cInventoryorderLinePropertyValue implements Comparable{
++
++    //Public Properties
++    private int lineNoInt;
++
++    public int getLineNoInt() {return lineNoInt;}
++
++    private String propertyCodeStr;
++    public String getPropertyCodeStr() {return propertyCodeStr;}
++
++    public cInventoryorderLineProperty getInventoryorderLineProperty(){
++
++        if (this.getPropertyCodeStr().isEmpty() || cInventoryorderLineProperty.allLinePropertysObl == null || cInventoryorderLineProperty.allLinePropertysObl.size() == 0) {
++            return  null;
++        }
++
++        for (cInventoryorderLineProperty inventoryorderLineProperty :cInventoryorderLineProperty.allLinePropertysObl ) {
++            if (inventoryorderLineProperty.getLineNoInt().equals(this.getLineNoInt()) && inventoryorderLineProperty.getPropertyCodeStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
++                return inventoryorderLineProperty;
++            }
++        }
++
++        return  null;
++
++    }
++
++    public cItemProperty getItemProperty() {
++
++        if (this.getPropertyCodeStr().isEmpty() || cItemProperty.allItemPropertiesObl == null || cItemProperty.allItemPropertiesObl.size() == 0) {
++            return  null;
++        }
++
++        for (cItemProperty itemProperty :  cItemProperty.allItemPropertiesObl) {
++            if (itemProperty.getPropertyStr().equalsIgnoreCase(this.getPropertyCodeStr())) {
++                return  itemProperty;
++            }
++        }
++
++        return  null;
++
++    }
++
++    private String valueStr;
++    public String getValueStr() {return valueStr;}
++
++    private int sortingSequenceNoInt;
++    public  int getSortingSequenceNoInt(){return sortingSequenceNoInt;}
++
++    public double quantityDbl;
++    public double getQuantityDbl() {return quantityDbl;}
++
++    private cInventoryorderLinePropertyValueEntity inventoryorderLinePropertyValueEntity;
++
++    public static cInventoryorderLinePropertyValue currentInventoryorderLinePropertyValue;
++    public static ArrayList<cInventoryorderLinePropertyValue> allLinePropertysValuesObl;
++
++    private cInventoryorderLinePropertyValueViewModel getInventoryorderLinePropertyValueViewModel() {
++        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyValueViewModel.class);
++    }
++
++    public cInventoryorderLinePropertyValue(JSONObject pvJsonObject) {
++        this.inventoryorderLinePropertyValueEntity = new cInventoryorderLinePropertyValueEntity(pvJsonObject);
++        this.lineNoInt = this.inventoryorderLinePropertyValueEntity.getLineNoInt();
++        this.propertyCodeStr = this.inventoryorderLinePropertyValueEntity.getPropertyCodeStr();
++        this.valueStr = this.inventoryorderLinePropertyValueEntity.getValueStr();
++        this.sortingSequenceNoInt = this.inventoryorderLinePropertyValueEntity.getSortingSequenceNoInt();
++        this.quantityDbl = 0;
++    }
++
++    public cInventoryorderLinePropertyValue(cInventoryorderLineProperty pvInventoryorderLineProperty) {
++        this.inventoryorderLinePropertyValueEntity = null;
++
++        this.lineNoInt = 0;
++        this.propertyCodeStr = pvInventoryorderLineProperty.getPropertyCodeStr();
++        this.valueStr = cAppExtension.activity.getString(R.string.novalueyet);
++        this.sortingSequenceNoInt = 0;
++        this.quantityDbl = 0;
++    }
++
++    public cInventoryorderLinePropertyValue(int pvLineNoInt, String pvPropertyCodeStr, String pvValueStr) {
++        this.inventoryorderLinePropertyValueEntity = null;
++        this.lineNoInt = pvLineNoInt;
++        this.propertyCodeStr = pvPropertyCodeStr;
++        this.valueStr = pvValueStr;
++        this.sortingSequenceNoInt = 0;
++        this.quantityDbl = 1;
++    }
++
++    public boolean pInsertInDatabaseBln() {
++        this.getInventoryorderLinePropertyValueViewModel().insert(this.inventoryorderLinePropertyValueEntity);
++
++        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl == null) {
++            cInventoryorderLinePropertyValue.allLinePropertysValuesObl = new ArrayList<>();
++        }
++        cInventoryorderLinePropertyValue.allLinePropertysValuesObl.add(this);
++        return true;
++    }
++
++    public boolean pDeleteFromDatabaseBln() {
++        if (cInventoryorderLinePropertyValue.allLinePropertysValuesObl != null) {
++            cInventoryorderLinePropertyValue.allLinePropertysValuesObl.remove(this);
++        }
++        return true;
++    }
++
++    public static boolean pTruncateTableBln() {
++
++        cInventoryorderLinePropertyValueViewModel inventoryorderLinePropertyValueViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cInventoryorderLinePropertyValueViewModel.class);
++        inventoryorderLinePropertyValueViewModel.deleteAll();
++        cInventoryorderLinePropertyValue.allLinePropertysValuesObl = null;
++        return true;
++    }
++
++    @Override
++    public int compareTo(Object o) {
++        int compareint = cText.pDoubleToInt(((cInventoryorderLinePropertyValue)o).getQuantityDbl());
++        return compareint- cText.pDoubleToInt(this.getQuantityDbl());
++
++    }
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java	(date 1617283763783)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueEntity.java	(date 1617283763783)
+@@ -0,0 +1,55 @@
++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
++
++import androidx.room.ColumnInfo;
++import androidx.room.Entity;
++import androidx.room.PrimaryKey;
++
++import org.json.JSONException;
++import org.json.JSONObject;
++
++import SSU_WHS.General.cDatabase;
++
++@Entity(tableName=cDatabase.TABLENAME_INVENTORYORDERLINEPROPERTYVALUE)
++public class cInventoryorderLinePropertyValueEntity {
++
++    @PrimaryKey(autoGenerate = true)
++    public Integer recordid;
++    public Integer getRecordidInt() {return this.recordid;}
++
++    @ColumnInfo(name = cDatabase.LINENO_NAMESTR)
++    public int lineNoInt;
++    public int getLineNoInt() {return this.lineNoInt;}
++
++    @ColumnInfo(name = cDatabase.PROPERTYCODE_NAMESTR )
++    public String propertyCodeStr;
++    public String getPropertyCodeStr() {return this.propertyCodeStr;}
++
++    @ColumnInfo(name = cDatabase.VALUE_NAMESTR )
++    public String valueStr;
++    public String getValueStr() {return this.valueStr;}
++
++    @ColumnInfo(name = cDatabase.SORTINGSEQUENCENO_NAMESTR)
++    public Integer sortingSequenceNoInt;
++    public Integer getSortingSequenceNoInt() {return this.sortingSequenceNoInt;}
++
++    //empty constructor
++    public cInventoryorderLinePropertyValueEntity() {
++
++    }
++
++    public cInventoryorderLinePropertyValueEntity(JSONObject pvJsonObject) {
++        try {
++            this.lineNoInt = pvJsonObject.getInt(cDatabase.LINENO_NAMESTR);
++            this.propertyCodeStr = pvJsonObject.getString(cDatabase.PROPERTYCODE_NAMESTR);
++            this.valueStr = pvJsonObject.getString(cDatabase.VALUE_NAMESTR);
++            this.sortingSequenceNoInt = pvJsonObject.getInt(cDatabase.SORTINGSEQUENCENO_NAMESTR);
++        } catch (JSONException e) {
++            e.printStackTrace();
++        }
++    }
++
++
++
++
++
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java	(date 1617284053514)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueViewModel.java	(date 1617284053514)
+@@ -0,0 +1,28 @@
++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
++
++import android.app.Application;
++
++import androidx.lifecycle.AndroidViewModel;
++
++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueRepository;
++
++public class cInventoryorderLinePropertyValueViewModel extends AndroidViewModel {
++
++    //Region Public Properties
++    private cInventoryorderLinePropertyValueRepository Repository;
++    //End Region Public Properties
++
++    //Region Constructor
++    public cInventoryorderLinePropertyValueViewModel(Application pvApplication) {
++        super(pvApplication);
++        this.Repository = new cInventoryorderLinePropertyValueRepository(pvApplication);
++    }
++    //End Region Constructor
++
++    public void insert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {this.Repository.pInsert(pvInventoryorderLinePropertyValueEntity);}
++    public void deleteAll() {this.Repository.pTruncate();}
++    public void delete(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {this.Repository.pDelete(pvInventoryorderLinePropertyValueEntity);}
++
++
++}
+Index: app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java	(date 1617284123755)
++++ app/src/main/java/SSU_WHS/Inventory/InventoryorderlinePropertyValue/cInventoryorderLinePropertyValueRepository.java	(date 1617284123755)
+@@ -0,0 +1,81 @@
++package SSU_WHS.Inventory.InventoryorderlinePropertyValue;
++
++import android.app.Application;
++import android.os.AsyncTask;
++
++import SSU_WHS.General.acScanSuiteDatabase;
++import SSU_WHS.Picken.PickorderLinePropertyValue.cPickorderLinePropertyValueEntity;
++import SSU_WHS.Picken.PickorderLinePropertyValue.iPickorderLinePropertyValueDao;
++
++public class cInventoryorderLinePropertyValueRepository {
++
++    //Region Public Properties
++    private iInventoryorderLinePropertyValueDao inventoryorderLinePropertyValueDao;
++    //End Region Public Properties
++
++    //End Region Private Properties
++
++    //Region Constructor
++    public cInventoryorderLinePropertyValueRepository(Application pvApplication) {
++        //Region Private Properties
++        acScanSuiteDatabase db = acScanSuiteDatabase.pGetDatabase(pvApplication);
++        this.inventoryorderLinePropertyValueDao = db.inventoryorderLinePropertyValueDao();
++    }
++    //End Region Constructor
++
++    //Region Public Methods
++
++    public void pInsert(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {
++        new mInsertInDatabaseAsyncTask(this.inventoryorderLinePropertyValueDao).execute(pvInventoryorderLinePropertyValueEntity);
++    }
++
++    public void pDelete(cInventoryorderLinePropertyValueEntity pvInventoryorderLinePropertyValueEntity) {
++        new mDeleteAsyncTask(this.inventoryorderLinePropertyValueDao).execute(pvInventoryorderLinePropertyValueEntity);
++    }
++
++    public void pTruncate() {
++        new cInventoryorderLinePropertyValueRepository.deleteAllAsyncTask(this.inventoryorderLinePropertyValueDao).execute();
++    }
++
++    //End Region Public Methods
++
++    private static class mInsertInDatabaseAsyncTask extends AsyncTask<cInventoryorderLinePropertyValueEntity, Void, Void> {
++        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
++
++        mInsertInDatabaseAsyncTask(iInventoryorderLinePropertyValueDao dao) {
++            mAsyncTaskDao = dao;
++        }
++        @Override
++        protected Void doInBackground(final cInventoryorderLinePropertyValueEntity... params) {
++            mAsyncTaskDao.insert(params[0]);
++            return null;
++        }
++    }
++
++    private static class mDeleteAsyncTask extends AsyncTask<cInventoryorderLinePropertyValueEntity, Void, Void> {
++        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
++
++        mDeleteAsyncTask(iInventoryorderLinePropertyValueDao dao) { mAsyncTaskDao = dao; }
++        @Override
++        protected Void doInBackground(final cInventoryorderLinePropertyValueEntity... params) {
++            mAsyncTaskDao.deletePickorder(params[0]);
++            return null;
++        }
++    }
++
++    private static class deleteAllAsyncTask extends AsyncTask<Void, Void, Void> {
++        private iInventoryorderLinePropertyValueDao mAsyncTaskDao;
++
++        deleteAllAsyncTask(iInventoryorderLinePropertyValueDao dao) {
++            mAsyncTaskDao = dao;
++        }
++        @Override
++        protected Void doInBackground(final Void... params) {
++            mAsyncTaskDao.deleteAll();
++            return null;
++        }
++    }
++
++
++
++}
Index: app/schemas/SSU_WHS.General.acScanSuiteDatabase/152.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/schemas/SSU_WHS.General.acScanSuiteDatabase/152.json	(date 1617965443120)
+++ app/schemas/SSU_WHS.General.acScanSuiteDatabase/152.json	(date 1617965443120)
@@ -0,0 +1,4379 @@
+{
+  "formatVersion": 1,
+  "database": {
+    "version": 152,
+    "identityHash": "c3903465ac711d7815c8d3aea34ee5e6",
+    "entities": [
+      {
+        "tableName": "ScannerLogon",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`FixedScannerBranch` TEXT, `ScannerDescription` TEXT NOT NULL, `RequiredScannerVersion` TEXT, `ApplicationEnvironment` TEXT, `Languages` TEXT, `RequiredScannerConfiguration` TEXT, `ReapplyScannerConfiguration` TEXT, `VersionConfigAppCurrentScanner` TEXT, `VersionConfigAppRequiredScanner` TEXT, `ColorSet` TEXT, PRIMARY KEY(`ScannerDescription`))",
+        "fields": [
+          {
+            "fieldPath": "fixedscannerbranch",
+            "columnName": "FixedScannerBranch",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "scannerdescription",
+            "columnName": "ScannerDescription",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "requiredscannerversion",
+            "columnName": "RequiredScannerVersion",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "applicationenvironment",
+            "columnName": "ApplicationEnvironment",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "languages",
+            "columnName": "Languages",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "requiredscannerconfiguration",
+            "columnName": "RequiredScannerConfiguration",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "reapplyscannerconfiguration",
+            "columnName": "ReapplyScannerConfiguration",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "versionconfigappcurrentscanner",
+            "columnName": "VersionConfigAppCurrentScanner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "versionconfigapprequiredscanner",
+            "columnName": "VersionConfigAppRequiredScanner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "colorset",
+            "columnName": "ColorSet",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "ScannerDescription"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Workplaces",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Werkplek` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Werkplek`))",
+        "fields": [
+          {
+            "fieldPath": "workplace",
+            "columnName": "Werkplek",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Werkplek"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "BarcodeLayouts",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcodelayout` TEXT NOT NULL, `Layout` TEXT NOT NULL, PRIMARY KEY(`Barcodelayout`, `Layout`))",
+        "fields": [
+          {
+            "fieldPath": "barcodelayout",
+            "columnName": "Barcodelayout",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "layoutvalue",
+            "columnName": "Layout",
+            "affinity": "TEXT",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcodelayout",
+            "Layout"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Authorisations",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Autorisatie` TEXT NOT NULL, `Order` INTEGER, `License` TEXT, PRIMARY KEY(`Autorisatie`))",
+        "fields": [
+          {
+            "fieldPath": "authorisation",
+            "columnName": "Autorisatie",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "order",
+            "columnName": "Order",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "license",
+            "columnName": "License",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Autorisatie"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Users",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Gebruikersnaam` TEXT NOT NULL, `Naam` TEXT, PRIMARY KEY(`Gebruikersnaam`))",
+        "fields": [
+          {
+            "fieldPath": "username",
+            "columnName": "Gebruikersnaam",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "name",
+            "columnName": "Naam",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Gebruikersnaam"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Branches",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Vestiging` TEXT NOT NULL, `Vestigingtype` TEXT, `Name` TEXT, `BinMandatory` TEXT, `Receive_default_bin` TEXT, `Retour_default_bin` TEXT, `Move_default_bin` TEXT, `Pick_default_storage_bin` TEXT, PRIMARY KEY(`Vestiging`))",
+        "fields": [
+          {
+            "fieldPath": "branch",
+            "columnName": "Vestiging",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "branchtype",
+            "columnName": "Vestigingtype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "branchname",
+            "columnName": "Name",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "binmandatory",
+            "columnName": "BinMandatory",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receivedefaultbin",
+            "columnName": "Receive_default_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returndefaultbin",
+            "columnName": "Retour_default_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "movedefaultbin",
+            "columnName": "Move_default_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickDefaultStorageBinStr",
+            "columnName": "Pick_default_storage_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Vestiging"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Settings",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Instelling` TEXT NOT NULL, `Waarde` TEXT, PRIMARY KEY(`Instelling`))",
+        "fields": [
+          {
+            "fieldPath": "name",
+            "columnName": "Instelling",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "value",
+            "columnName": "Waarde",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Instelling"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Pickorders",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Ordernumber` TEXT NOT NULL, `Ordertype` TEXT, `QuantityTotal` TEXT, `SingleArticleOrders` TEXT, `Pick_Sales_ask_workplace` TEXT, `Pick_Transfer_ask_workplace` TEXT, `Pick_Pick_PV_VKO_each_piece` TEXT, `Pick_with_picture` TEXT, `Pick_with_picture_auto_open` TEXT, `Pick_with_picture_prefetch` TEXT, `Pick_activity_bin_required` TEXT, `Pick_auto_next` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Currentlocation` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `IsSelected` INTEGER NOT NULL, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Ordernumber`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Ordernumber",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Ordertype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantitytotal",
+            "columnName": "QuantityTotal",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "singleArticleOrders",
+            "columnName": "SingleArticleOrders",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickSalesaskworkplace",
+            "columnName": "Pick_Sales_ask_workplace",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickTransferaskworkplace",
+            "columnName": "Pick_Transfer_ask_workplace",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickPickPVVKOeachpiece",
+            "columnName": "Pick_Pick_PV_VKO_each_piece",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickWithPicture",
+            "columnName": "Pick_with_picture",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickWithPictureAutoOpen",
+            "columnName": "Pick_with_picture_auto_open",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickWithPicturePrefetch",
+            "columnName": "Pick_with_picture_prefetch",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickActivityBinRequired",
+            "columnName": "Pick_activity_bin_required",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickAutoNext",
+            "columnName": "Pick_auto_next",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockOwner",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentlocation",
+            "columnName": "Currentlocation",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "interfaceresultmethod",
+            "columnName": "Interface_result_method",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isSelected",
+            "columnName": "IsSelected",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Ordernumber"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Pickorderlines",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `StorageBinCode` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `QuantityRejected` REAL, `SourceNo` TEXT, `DestinationNo` TEXT, `ProcessingSequence` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Status` INTEGER, `StatusShipping` INTEGER, `StatusPacking` INTEGER, `QuantityTaken` REAL NOT NULL, `TakenTimestamp` TEXT, `LocalStatus` INTEGER NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "storageBincode",
+            "columnName": "StorageBinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityRejected",
+            "columnName": "QuantityRejected",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "destinationno",
+            "columnName": "DestinationNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "processingsequence",
+            "columnName": "ProcessingSequence",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusShipping",
+            "columnName": "StatusShipping",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusPacking",
+            "columnName": "StatusPacking",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantitytaken",
+            "columnName": "QuantityTaken",
+            "affinity": "REAL",
+            "notNull": true
+          },
+          {
+            "fieldPath": "takenTimeStamp",
+            "columnName": "TakenTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderLineBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` TEXT NOT NULL, `Barcode` TEXT NOT NULL, `Quantity` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "lineNoStr",
+            "columnName": "LineNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandledStr",
+            "columnName": "Quantity",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "LineNo",
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderlineProperty",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `Propertycode` TEXT, `SequenceNoHandled` INTEGER, `SortingSequenceNo` INTEGER, `Layout` TEXT, `IsInput` INTEGER NOT NULL, `Isrequired` INTEGER NOT NULL, `ValueHandled` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "linenoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "propertyCodeStr",
+            "columnName": "Propertycode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sequenceNoHandledInt",
+            "columnName": "SequenceNoHandled",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "layoutStr",
+            "columnName": "Layout",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isInputBln",
+            "columnName": "IsInput",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "isRequiredBln",
+            "columnName": "Isrequired",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "valueHandledStr",
+            "columnName": "ValueHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderlinePropertyValue",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Propertycode` TEXT, `Value` TEXT, `SortingSequenceNo` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "propertyCodeStr",
+            "columnName": "Propertycode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "valueStr",
+            "columnName": "Value",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ArticleImage",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Itemno` TEXT NOT NULL, `Variantcode` TEXT NOT NULL, `Image` TEXT, PRIMARY KEY(`Itemno`, `Variantcode`))",
+        "fields": [
+          {
+            "fieldPath": "itemno",
+            "columnName": "Itemno",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "Variantcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "image",
+            "columnName": "Image",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Itemno",
+            "Variantcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT NOT NULL, `ItemNo` TEXT NOT NULL, `VariantCode` TEXT NOT NULL, `IsUniqueBarcode` TEXT, `QtyPerUnitOfMeasure` TEXT, `QuantityHandled` TEXT, PRIMARY KEY(`Barcode`, `BarCodeType`, `ItemNo`, `VariantCode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityperunitofmeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode",
+            "BarCodeType",
+            "ItemNo",
+            "VariantCode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderCompositeBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Composite_barcode` TEXT NOT NULL, `ItemNo` TEXT NOT NULL, `VariantCode` TEXT NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, PRIMARY KEY(`Composite_barcode`, `ItemNo`, `VariantCode`))",
+        "fields": [
+          {
+            "fieldPath": "compositeBarcodeStr",
+            "columnName": "Composite_barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "itemNoStr",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "variantCodeStr",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Composite_barcode",
+            "ItemNo",
+            "VariantCode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Comment",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`CommentLineNo` INTEGER NOT NULL, `CommentCode` TEXT, `CommentText` TEXT, PRIMARY KEY(`CommentLineNo`))",
+        "fields": [
+          {
+            "fieldPath": "commentLineNoLng",
+            "columnName": "CommentLineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "commentcodeStr",
+            "columnName": "CommentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "commentTextStr",
+            "columnName": "CommentText",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "CommentLineNo"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "SalesOrderPackingTable",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Salesorder` TEXT NOT NULL, `Packingtable` TEXT NOT NULL, PRIMARY KEY(`Salesorder`))",
+        "fields": [
+          {
+            "fieldPath": "salesorder",
+            "columnName": "Salesorder",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "packingtable",
+            "columnName": "Packingtable",
+            "affinity": "TEXT",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Salesorder"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderAddress",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Adrescode` TEXT NOT NULL, `Naam` TEXT, `Naamtoevoeging` TEXT, `Address` TEXT, `Adrestoevoeging` TEXT, `Street` TEXT, `Huisnummer` TEXT, `Huisnummertoevoeging` TEXT, `Zipcode` TEXT, `Plaats` TEXT, `Land` TEXT, PRIMARY KEY(`Adrescode`))",
+        "fields": [
+          {
+            "fieldPath": "addrescode",
+            "columnName": "Adrescode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "name",
+            "columnName": "Naam",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "nameAddition",
+            "columnName": "Naamtoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "address",
+            "columnName": "Address",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressAddition",
+            "columnName": "Adrestoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "street",
+            "columnName": "Street",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressNumber",
+            "columnName": "Huisnummer",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressNumberAddition",
+            "columnName": "Huisnummertoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "zipcode",
+            "columnName": "Zipcode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "city",
+            "columnName": "Plaats",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "country",
+            "columnName": "Land",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Adrescode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ShippingAgents",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Expediteur`))",
+        "fields": [
+          {
+            "fieldPath": "shippingagent",
+            "columnName": "Expediteur",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Expediteur"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ShippingAgentServices",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Expediteur`, `Service`))",
+        "fields": [
+          {
+            "fieldPath": "shippingagent",
+            "columnName": "Expediteur",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "service",
+            "columnName": "Service",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Expediteur",
+            "Service"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ShippingAgentServiceShippingUnits",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Verzendeenheid` TEXT NOT NULL, `Omschrijving` TEXT, `Containersoort` TEXT, PRIMARY KEY(`Expediteur`, `Service`, `Verzendeenheid`))",
+        "fields": [
+          {
+            "fieldPath": "shippingagent",
+            "columnName": "Expediteur",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "service",
+            "columnName": "Service",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shippingunit",
+            "columnName": "Verzendeenheid",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "containertype",
+            "columnName": "Containersoort",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Expediteur",
+            "Service",
+            "Verzendeenheid"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ShippingAgentServiceShipMethods",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Verzendmethode` TEXT NOT NULL, `Omschrijving` TEXT, `ValueType` TEXT, `DefaultValue` TEXT, `EnumerationValues` TEXT, PRIMARY KEY(`Expediteur`, `Service`, `Verzendmethode`))",
+        "fields": [
+          {
+            "fieldPath": "shippingagent",
+            "columnName": "Expediteur",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "service",
+            "columnName": "Service",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shippingMethodStr",
+            "columnName": "Verzendmethode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "valuetype",
+            "columnName": "ValueType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "defaultvalue",
+            "columnName": "DefaultValue",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "enumerationvalues",
+            "columnName": "EnumerationValues",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Expediteur",
+            "Service",
+            "Verzendmethode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderShipPackages",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceNo` TEXT NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `PackageType` TEXT, `PackageSequenceNumber` TEXT, PRIMARY KEY(`SourceNo`))",
+        "fields": [
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shipagentcode",
+            "columnName": "ShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shipagentservicecode",
+            "columnName": "ShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packagetype",
+            "columnName": "PackageType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packagesequencenumber",
+            "columnName": "PackageSequenceNumber",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "SourceNo"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderLineFinishSinglePiece",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SourceNo` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `Verzendlabel_status` INTEGER NOT NULL, `LocalStatus` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Verzendlabel_status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderSetting",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SettingCode` TEXT NOT NULL, `SettingValue` TEXT, PRIMARY KEY(`SettingCode`))",
+        "fields": [
+          {
+            "fieldPath": "settingCode",
+            "columnName": "SettingCode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "settingValue",
+            "columnName": "SettingValue",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "SettingCode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ItemProperties",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Property` TEXT NOT NULL, `Layout` TEXT, `Omschrijving` TEXT, `IsUnique` INTEGER, `Uniqueness` TEXT, `RememberValue` INTEGER, `ValueType` TEXT, PRIMARY KEY(`Property`))",
+        "fields": [
+          {
+            "fieldPath": "property",
+            "columnName": "Property",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "layout",
+            "columnName": "Layout",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "omschrijving",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isUnique",
+            "columnName": "IsUnique",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "uniqueness",
+            "columnName": "Uniqueness",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "rememberValue",
+            "columnName": "RememberValue",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "valueType",
+            "columnName": "ValueType",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Property"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PropertyGroup",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Propertiegroep` TEXT NOT NULL, `Omschrijving` TEXT, `Naam_kort` TEXT, `Image_base64` TEXT, PRIMARY KEY(`Propertiegroep`))",
+        "fields": [
+          {
+            "fieldPath": "propertyGroup",
+            "columnName": "Propertiegroep",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shortName",
+            "columnName": "Naam_kort",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "imageBase64",
+            "columnName": "Image_base64",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Propertiegroep"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PropertyGroupProperty",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Herkomstcode` TEXT, `Herkomstsleutel` TEXT, `Propertie` TEXT NOT NULL, `Volgorde` INTEGER NOT NULL, PRIMARY KEY(`Propertie`))",
+        "fields": [
+          {
+            "fieldPath": "origin",
+            "columnName": "Herkomstcode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "originKey",
+            "columnName": "Herkomstsleutel",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "property",
+            "columnName": "Propertie",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "order",
+            "columnName": "Volgorde",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Propertie"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderLinePackAndShip",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `LineNoTake` INTEGER, `SourceNo` TEXT, `DestinationNo` TEXT, `DeliveryAddressCode` TEXT, `ProcessingSequence` TEXT, `StatusShipping` INTEGER NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Quantity` REAL, `QuantityChecked` REAL, `QuantityHandled` REAL, `Status` INTEGER NOT NULL, `LocalStatus` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "linenoTake",
+            "columnName": "LineNoTake",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "destinationno",
+            "columnName": "DestinationNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "deliveryaddresscode",
+            "columnName": "DeliveryAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "processingsequence",
+            "columnName": "ProcessingSequence",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusshipping",
+            "columnName": "StatusShipping",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shippingagentcode",
+            "columnName": "ShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingagentservicecode",
+            "columnName": "ShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityChecked",
+            "columnName": "QuantityChecked",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrder",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `Inv_Amount_manual` TEXT, `Inv_barcode_check` TEXT, `Inv_add_extra_bin` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `Inventory_with_picture` TEXT, `Inventory_with_picture_auto_open` TEXT, `Inventory_with_picture_prefetch` TEXT, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "numberofBins",
+            "columnName": "Aantal_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "invAmountManual",
+            "columnName": "Inv_Amount_manual",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "invBarcodeCheck",
+            "columnName": "Inv_barcode_check",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "invAddExtraBin",
+            "columnName": "Inv_add_extra_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockOwner",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "interfaceresultmethod",
+            "columnName": "Interface_result_method",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "inventoryWithPicture",
+            "columnName": "Inventory_with_picture",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "inventoryWithPictureAutoOpen",
+            "columnName": "Inventory_with_picture_auto_open",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "inventoryWithPicturePrefetch",
+            "columnName": "Inventory_with_picture_prefetch",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrderBin",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`BinCode` TEXT NOT NULL, `Lines` INTEGER NOT NULL, `HandledTimestamp` TEXT, `Status` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, PRIMARY KEY(`BinCode`))",
+        "fields": [
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "lines",
+            "columnName": "Lines",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "handledTimeStamp",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "BinCode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrderLines",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `ItemNo` TEXT, `VariantCode` TEXT, `Itemsoort` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `SortingSequenceNo` INTEGER NOT NULL, `Status` INTEGER NOT NULL, `SourceType` INTEGER NOT NULL, `HandledTimestamp` TEXT, `QuantityHandled` REAL, `QuantityHandledAllScanners` REAL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemtype",
+            "columnName": "Itemsoort",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingsequenceno",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sourcetype",
+            "columnName": "SourceType",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "handledtimestamp",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandledAllScanners",
+            "columnName": "QuantityHandledAllScanners",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrderBarcodes",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Itemsoort` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, `Inv_Amount_manual` INTEGER, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemType",
+            "columnName": "Itemsoort",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasure",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "invAmountManual",
+            "columnName": "Inv_Amount_manual",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrderLineBarcodes",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "lineNoLng",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandledStr",
+            "columnName": "QuantityHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "LineNo",
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "IntakeOrders",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` INTEGER NOT NULL, `BinCode` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `Receive_Amount_manual_eo` TEXT, `Receive_store_auto_accept_at_requested` TEXT, `Receive_no_extra_bins` TEXT, `Receive_no_extra_items` TEXT, `Receive_no_extra_pieces` TEXT, `SourceDocument` INTEGER NOT NULL, `Document` TEXT, `Document2` TEXT, `ReceivedDateTime` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `Receive_with_picture` TEXT, `Receive_with_picture_auto_open` TEXT, `Receive_intake_eo_packaging_intake` TEXT, `Receive_intake_eo_packaging_shipped` TEXT, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "binCode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockOwner",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveAmountManualEO",
+            "columnName": "Receive_Amount_manual_eo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveStoreAutoAcceptAtRequested",
+            "columnName": "Receive_store_auto_accept_at_requested",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveNoExtraBins",
+            "columnName": "Receive_no_extra_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveNoExtraItems",
+            "columnName": "Receive_no_extra_items",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveNoExtraPieces",
+            "columnName": "Receive_no_extra_pieces",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receivedDateTime",
+            "columnName": "ReceivedDateTime",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "interfaceresultmethod",
+            "columnName": "Interface_result_method",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveWithPicture",
+            "columnName": "Receive_with_picture",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveWithPictureAutoOpen",
+            "columnName": "Receive_with_picture_auto_open",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveIntakeEOPackagingIntake",
+            "columnName": "Receive_intake_eo_packaging_intake",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveIntakeEOPackagingShipped",
+            "columnName": "Receive_intake_eo_packaging_shipped",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "IntakeLinesMAT",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Container` TEXT, `BinCodeHandled` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `SourceNo` TEXT, `DestinationNo` TEXT, `IsPartOfMultiLineOrder` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Status` INTEGER, `LocalStatus` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `SourceType` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemNoStr",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCodeStr",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2Str",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "binCodeStr",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "containerStr",
+            "columnName": "Container",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "binCodehandledStr",
+            "columnName": "BinCodeHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityDbl",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandledDbl",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceNoStr",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "destinationNoStr",
+            "columnName": "DestinationNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isPartOfMultilineOrderStr",
+            "columnName": "IsPartOfMultiLineOrder",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendorItemNoStr",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendorItemDescriptionStr",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusInt",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "localStatusInt",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "extraField1Str",
+            "columnName": "ExtraField1",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField2Str",
+            "columnName": "ExtraField2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField3Str",
+            "columnName": "ExtraField3",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField4Str",
+            "columnName": "ExtraField4",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField5Str",
+            "columnName": "ExtraField5",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField6Str",
+            "columnName": "ExtraField6",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField7Str",
+            "columnName": "ExtraField7",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField8Str",
+            "columnName": "ExtraField8",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceTypeInt",
+            "columnName": "SourceType",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "IntakeOrderBarcodes",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, `Receive_Amount_manual` INTEGER, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasure",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveAmountManual",
+            "columnName": "Receive_Amount_manual",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "IntakeOrderMATLineBarcodes",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "lineNoLng",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandledStr",
+            "columnName": "QuantityHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "LineNo",
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Returnorder",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `StockOwner` TEXT, `Status` TEXT, `BinCode` TEXT, `CurrentLocation` TEXT, `ExternalReference` TEXT, `Retour_Amount_manual` INTEGER, `Retour_Barcode_check` INTEGER, `Retour_multi_document` INTEGER, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Reason` TEXT, `Retour_with_picture` INTEGER, `Retour_Order_bin_no_check` INTEGER, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumberStr",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertypeStr",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserIdStr",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserIdStr",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockownerStr",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusStr",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincodeStr",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentLocationStr",
+            "columnName": "CurrentLocation",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReferenceStr",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourAmountManualBln",
+            "columnName": "Retour_Amount_manual",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourBarcodeCheckBln",
+            "columnName": "Retour_Barcode_check",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourMultiDocumentBln",
+            "columnName": "Retour_multi_document",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocumentStr",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "documentStr",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2Str",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "reasonStr",
+            "columnName": "Reason",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returnWithPictureBln",
+            "columnName": "Retour_with_picture",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourOrderBINNoCheckBln",
+            "columnName": "Retour_Order_bin_no_check",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReturnorderBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeTypeStr",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isUniqueBarcodeBln",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemNoStr",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasureDbl",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasureStr",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandledDbl",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReturnorderDocument",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceDocument` TEXT NOT NULL, `Status` INTEGER NOT NULL, PRIMARY KEY(`SourceDocument`))",
+        "fields": [
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "SourceDocument"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReturnorderLine",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ItemNo` TEXT, `VariantCode` TEXT, `Document` TEXT, `Retourreden` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `SortingSequenceNo_take` INTEGER NOT NULL, `Quantity_take` REAL, `QuantityHandled_take` REAL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `Generated` INTEGER NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourreden",
+            "columnName": "Retourreden",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingsequenceno",
+            "columnName": "SortingSequenceNo_take",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantitytake",
+            "columnName": "Quantity_take",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandledtake",
+            "columnName": "QuantityHandled_take",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield1",
+            "columnName": "ExtraField1",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield2",
+            "columnName": "ExtraField2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield3",
+            "columnName": "ExtraField3",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield4",
+            "columnName": "ExtraField4",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield5",
+            "columnName": "ExtraField5",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield6",
+            "columnName": "ExtraField6",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield7",
+            "columnName": "ExtraField7",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield8",
+            "columnName": "ExtraField8",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "generated",
+            "columnName": "Generated",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReturnorderLineBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoLng",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandledStr",
+            "columnName": "QuantityHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReceiveLines",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `SortingSequenceNo` INTEGER NOT NULL, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `HandledTimestamp` TEXT, `Status` INTEGER, `LocalStatus` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemNoStr",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCodeStr",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2Str",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "binCodeStr",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityDbl",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandledDbl",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNoStr",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "vendorItemNoStr",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendorItemDescriptionStr",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "handledTimeStampStr",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusInt",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "localStatusInt",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "extraField1Str",
+            "columnName": "ExtraField1",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField2Str",
+            "columnName": "ExtraField2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField3Str",
+            "columnName": "ExtraField3",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField4Str",
+            "columnName": "ExtraField4",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField5Str",
+            "columnName": "ExtraField5",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField6Str",
+            "columnName": "ExtraField6",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField7Str",
+            "columnName": "ExtraField7",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField8Str",
+            "columnName": "ExtraField8",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "MoveOrder",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `BinCode` TEXT, `StockOwner` TEXT, `ExternalReference` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Move_Amount_manual` TEXT, `Move_Barcode_check` TEXT, `Move_validate_stock` TEXT, `Move_validate_stock_enforce` TEXT, `Move_auto_accept_at_requested` TEXT, `Move_no_extra_bins` TEXT, `Move_no_extra_items` TEXT, `Move_no_extra_pieces` TEXT, `Move_with_picture` TEXT, `Move_with_picture_auto_open` TEXT, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "numberofBins",
+            "columnName": "Aantal_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockownerStr",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveAmountManual",
+            "columnName": "Move_Amount_manual",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveBarcodeCheck",
+            "columnName": "Move_Barcode_check",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveValidateStock",
+            "columnName": "Move_validate_stock",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveValidateStockEnforce",
+            "columnName": "Move_validate_stock_enforce",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveAutoAcceptAtRequested",
+            "columnName": "Move_auto_accept_at_requested",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveNoExtraBins",
+            "columnName": "Move_no_extra_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveNoExtraItems",
+            "columnName": "Move_no_extra_items",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveNoExtraPieces",
+            "columnName": "Move_no_extra_pieces",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveWithPicture",
+            "columnName": "Move_with_picture",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveWithPictureAutoOpen",
+            "columnName": "Move_with_picture_auto_open",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "MoveOrderLine",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `ActionTypeCode` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL NOT NULL, `QuantityHandled` REAL, `HandledTimestamp` TEXT, `SourceNo` TEXT, `Status` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `LocalStatus` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `LocalQuantityTaken` REAL NOT NULL, `LocalQuantityPlaced` REAL NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "actiontypecode",
+            "columnName": "ActionTypeCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "handledtimestamp",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceNo",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "extrafield1",
+            "columnName": "ExtraField1",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield2",
+            "columnName": "ExtraField2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield3",
+            "columnName": "ExtraField3",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield4",
+            "columnName": "ExtraField4",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield5",
+            "columnName": "ExtraField5",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield6",
+            "columnName": "ExtraField6",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield7",
+            "columnName": "ExtraField7",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield8",
+            "columnName": "ExtraField8",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityTaken",
+            "columnName": "LocalQuantityTaken",
+            "affinity": "REAL",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityPlaced",
+            "columnName": "LocalQuantityPlaced",
+            "affinity": "REAL",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "MoveOrdeBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasure",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "MoveOrderLineBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` REAL, PRIMARY KEY(`LineNo`, `Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "LineNo",
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Packaging",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Emballage` TEXT NOT NULL, `Description` TEXT NOT NULL, PRIMARY KEY(`Emballage`))",
+        "fields": [
+          {
+            "fieldPath": "codeStr",
+            "columnName": "Emballage",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Emballage"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Scanners",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Werkplek` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Werkplek`))",
+        "fields": [
+          {
+            "fieldPath": "scanner",
+            "columnName": "Werkplek",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "omschrijving",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Werkplek"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "CustomAuthorisations",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Autorisatie` TEXT NOT NULL, `Omschrijving` TEXT, `Autorisatie_basis` TEXT, `Filter_veld` TEXT, `Filter_waarde` TEXT, `Image_base64` TEXT, PRIMARY KEY(`Autorisatie`))",
+        "fields": [
+          {
+            "fieldPath": "authorisation",
+            "columnName": "Autorisatie",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "authorisationbase",
+            "columnName": "Autorisatie_basis",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "filterfield",
+            "columnName": "Filter_veld",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "filtervalue",
+            "columnName": "Filter_waarde",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "imagebase64",
+            "columnName": "Image_base64",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Autorisatie"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Translations",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Tekst` TEXT NOT NULL, `Taal` TEXT NOT NULL, `Vertaling` TEXT, PRIMARY KEY(`Tekst`, `Taal`))",
+        "fields": [
+          {
+            "fieldPath": "text",
+            "columnName": "Tekst",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "language",
+            "columnName": "Taal",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "translation",
+            "columnName": "Vertaling",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Tekst",
+            "Taal"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "CompositeBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`CompositeBarcode` TEXT NOT NULL, `Compositebarcode_type` TEXT, `Description` TEXT, `Field_separator` TEXT, `Layout_regex` TEXT, `Layout_type` TEXT, PRIMARY KEY(`CompositeBarcode`))",
+        "fields": [
+          {
+            "fieldPath": "compositeBarcodeStr",
+            "columnName": "CompositeBarcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "compositeBarcodeTypeStr",
+            "columnName": "Compositebarcode_type",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "fieldSeperatorStr",
+            "columnName": "Field_separator",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "layoutRegexStr",
+            "columnName": "Layout_regex",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "layoutTypeStr",
+            "columnName": "Layout_type",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "CompositeBarcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "CompositeBarcodeProperty",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Comment` TEXT, `Field` TEXT NOT NULL, `Field_identifier` TEXT, `Field_type` TEXT, `Position_start` INTEGER NOT NULL, `Position_end` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `Strip_this` TEXT, PRIMARY KEY(`Field`))",
+        "fields": [
+          {
+            "fieldPath": "commentStr",
+            "columnName": "Comment",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "fieldStr",
+            "columnName": "Field",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "fieldIdentifierStr",
+            "columnName": "Field_identifier",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "fieldTypeStr",
+            "columnName": "Field_type",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "positionStartInt",
+            "columnName": "Position_start",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "positionEndInt",
+            "columnName": "Position_end",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "stripThisStr",
+            "columnName": "Strip_this",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Field"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndSHipOrder",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentLocation` TEXT, `CurrentUserId` TEXT, `DestinationNo` TEXT, `Document` TEXT, `Document2` TEXT, `DocumentType` TEXT, `DocumentType2` TEXT, `ExternalReference` TEXT, `Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `SourceDocument` TEXT, `Status` TEXT, `Workplace` TEXT, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "numberofBins",
+            "columnName": "Aantal_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentLocation",
+            "columnName": "CurrentLocation",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "destinationNo",
+            "columnName": "DestinationNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "documentType",
+            "columnName": "DocumentType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "documentType2",
+            "columnName": "DocumentType2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "workplace",
+            "columnName": "Workplace",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipOrderLine",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ActionTypeCode` TEXT, `BinCode` TEXT, `Description` TEXT, `Description2` TEXT, `HandledTimestamp` TEXT, `ItemNo` TEXT, `LineNo` INTEGER NOT NULL, `Quantity` REAL NOT NULL, `QuantityHandled` REAL, `SortingSequenceNo` INTEGER NOT NULL, `Status` INTEGER NOT NULL, `VariantCode` TEXT, `LocalStatus` INTEGER NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "actiontypecode",
+            "columnName": "ActionTypeCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "handledtimestamp",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNo",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasure",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipShipment",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SourceNo` TEXT, `ShippingLabels` TEXT, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `ActualShippingAgentCode` TEXT, `ActualShippingAgentServiceCode` TEXT, `ShippingAddressType` TEXT, `ShippingAddressCode` TEXT, `DeliveryAddressType` TEXT, `DeliveryAddressCode` TEXT, `SenderAddressCode` TEXT, `ReturnAddressCode` TEXT, `ReturnSenderAddressCode` TEXT, `ReturnShippingAddressCode` TEXT, `BillingAddressCode` TEXT, `StatusShipping` INTEGER NOT NULL, `StatusPacking` INTEGER NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceNoStr",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingLabelsStr",
+            "columnName": "ShippingLabels",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAgentCodeStr",
+            "columnName": "ShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAgentServiceCodeStr",
+            "columnName": "ShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "actualShippingAgentCodeStr",
+            "columnName": "ActualShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "actualShippingAgentServiceCodeStr",
+            "columnName": "ActualShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAddressTypeStr",
+            "columnName": "ShippingAddressType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAddressCodeStr",
+            "columnName": "ShippingAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "deliveryAddressTypeStr",
+            "columnName": "DeliveryAddressType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "deliveryAddressCodeStr",
+            "columnName": "DeliveryAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "senderAddressCodeStr",
+            "columnName": "SenderAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returnAddressCodeStr",
+            "columnName": "ReturnAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returnSenderAddressCodeStr",
+            "columnName": "ReturnSenderAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returnShippingAddressCodeStr",
+            "columnName": "ReturnShippingAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "billingAddressCodeStr",
+            "columnName": "BillingAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusShippingInt",
+            "columnName": "StatusShipping",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "statusPackingInt",
+            "columnName": "StatusPacking",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipAddress",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Adrescode` TEXT NOT NULL, `AddressName` TEXT, `AddressType` TEXT, `Naamtoevoeging` TEXT, `Address` TEXT, `Adrestoevoeging` TEXT, `Street` TEXT, `Huisnummer` INTEGER NOT NULL, `Huisnummertoevoeging` TEXT, `Zipcode` TEXT, `Regio` TEXT, `Plaats` TEXT, `Land` TEXT, `Email` TEXT, `Telefoon` TEXT, `Contactpersoon` TEXT, PRIMARY KEY(`Adrescode`))",
+        "fields": [
+          {
+            "fieldPath": "addressCodeStr",
+            "columnName": "Adrescode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "addressNameStr",
+            "columnName": "AddressName",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressTypeStr",
+            "columnName": "AddressType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "nameAdditionStr",
+            "columnName": "Naamtoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressStr",
+            "columnName": "Address",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressAdditionStr",
+            "columnName": "Adrestoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "streetStr",
+            "columnName": "Street",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressNumberInt",
+            "columnName": "Huisnummer",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "addressNumberAdditionStr",
+            "columnName": "Huisnummertoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "zipcodeStr",
+            "columnName": "Zipcode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "regionStr",
+            "columnName": "Regio",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "cityStr",
+            "columnName": "Plaats",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "countryStr",
+            "columnName": "Land",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "emailStr",
+            "columnName": "Email",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "phoneStr",
+            "columnName": "Telefoon",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "contactPersonStr",
+            "columnName": "Contactpersoon",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Adrescode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipSetting",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SettingCode` TEXT, `SettingValue` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "settingCodeStr",
+            "columnName": "SettingCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "settingValueStr",
+            "columnName": "SettingValue",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipShippingMethod",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ShippingMethodCode` TEXT, `ShippingMethodValue` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingMethodCodeStr",
+            "columnName": "ShippingMethodCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingMethodValueStr",
+            "columnName": "ShippingMethodValue",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipShippingPackage",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceNo` TEXT NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `PackageType` TEXT, `PackageSequenceNumber` INTEGER NOT NULL, `PackageItemCount` INTEGER NOT NULL, `PackageWeightInG` INTEGER NOT NULL, `PackageContainersoort` TEXT, `PackageContainer` TEXT, PRIMARY KEY(`SourceNo`))",
+        "fields": [
+          {
+            "fieldPath": "sourceNoStr",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shippingAgentCodeStr",
+            "columnName": "ShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAgentServiceCodeStr",
+            "columnName": "ShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packageTypeStr",
+            "columnName": "PackageType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packageSequenceNumberInt",
+            "columnName": "PackageSequenceNumber",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "packageItemCountInt",
+            "columnName": "PackageItemCount",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "packageWeightInGInt",
+            "columnName": "PackageWeightInG",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "packageContainerTypeStr",
+            "columnName": "PackageContainersoort",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packageContainerStr",
+            "columnName": "PackageContainer",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "SourceNo"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "StockOwner",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`StockOwner` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`StockOwner`))",
+        "fields": [
+          {
+            "fieldPath": "stockownerStr",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "StockOwner"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "AutorizedStockOwner",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`StockOwner` TEXT NOT NULL, `Vestiging` TEXT, PRIMARY KEY(`StockOwner`))",
+        "fields": [
+          {
+            "fieldPath": "stockownerStr",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "vestigingStr",
+            "columnName": "Vestiging",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "StockOwner"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Labeltemplate",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Labelcode` TEXT NOT NULL, `Template` TEXT, PRIMARY KEY(`Labelcode`))",
+        "fields": [
+          {
+            "fieldPath": "labelcodeStr",
+            "columnName": "Labelcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "templateStr",
+            "columnName": "Template",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Labelcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      }
+    ],
+    "views": [],
+    "setupQueries": [
+      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
+      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'c3903465ac711d7815c8d3aea34ee5e6')"
+    ]
+  }
+}
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    \r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.1.2'\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n        classpath 'com.google.gms:google-services:4.3.5'\r\n        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.0'\r\n        classpath 'com.android.tools.build:gradle:4.1.2'\r\n        classpath 'com.google.firebase:perf-plugin:1.3.4'  // Performance Monitoring plugin\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url \"https://jitpack.io\" }\r\n        maven {\r\n            url 'https://maven.google.com/'\r\n        }\r\n        maven {\r\n            url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases/'\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\next {\r\n    androidSupportVersion = '28.0.0'\r\n    roomVersion = '1.1.1'\r\n    archLifecycleVersion = '1.1.1'\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ build.gradle	(date 1617965689006)
@@ -8,12 +8,12 @@
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:4.1.2'
+        classpath 'com.android.tools.build:gradle:4.1.3'
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
         classpath 'com.google.gms:google-services:4.3.5'
         classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.0'
-        classpath 'com.android.tools.build:gradle:4.1.2'
+        classpath 'com.android.tools.build:gradle:4.1.3'
         classpath 'com.google.firebase:perf-plugin:1.3.4'  // Performance Monitoring plugin
     }
 }
Index: app/release/normal/release/output-metadata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 2,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"nl.icsvertex.scansuite\",\r\n  \"variantName\": \"processNormalReleaseResources\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"versionCode\": 15891,\r\n      \"versionName\": \"1.5.8.91A\",\r\n      \"outputFile\": \"app-normal-release.apk\"\r\n    }\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/release/normal/release/output-metadata.json	(revision c5d4aa842914a9f9bb1a117ce0bc5692a214422c)
+++ app/release/normal/release/output-metadata.json	(date 1617964993454)
@@ -10,8 +10,8 @@
     {
       "type": "SINGLE",
       "filters": [],
-      "versionCode": 15891,
-      "versionName": "1.5.8.91A",
+      "versionCode": 15892,
+      "versionName": "1.5.8.92A",
       "outputFile": "app-normal-release.apk"
     }
   ]
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml	(date 1617965228484)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43__Default_Changelist_.xml	(date 1617965228484)
@@ -0,0 +1,14 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]" date="1617964994205" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 9-4-2021 12:43 [Default Changelist]" />
+  <binary>
+    <option name="BEFORE_PATH" value="app/release/normal/release/scansuite.apk" />
+    <option name="AFTER_PATH" value="app/release/normal/release/scansuite.apk" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/scansuite.apk" />
+  </binary>
+  <binary>
+    <option name="BEFORE_PATH" value=".idea/caches/build_file_checksums.ser" />
+    <option name="AFTER_PATH" value=".idea/caches/build_file_checksums.ser" />
+    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_9-4-2021_12_43_[Default_Changelist]/build_file_checksums.ser" />
+  </binary>
+</changelist>
\ No newline at end of file
Index: app/schemas/SSU_WHS.General.acScanSuiteDatabase/151.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/schemas/SSU_WHS.General.acScanSuiteDatabase/151.json	(date 1617285538653)
+++ app/schemas/SSU_WHS.General.acScanSuiteDatabase/151.json	(date 1617285538653)
@@ -0,0 +1,4491 @@
+{
+  "formatVersion": 1,
+  "database": {
+    "version": 151,
+    "identityHash": "b971f1cbeb59fe9dccff03b56f01ba4b",
+    "entities": [
+      {
+        "tableName": "ScannerLogon",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`FixedScannerBranch` TEXT, `ScannerDescription` TEXT NOT NULL, `RequiredScannerVersion` TEXT, `ApplicationEnvironment` TEXT, `Languages` TEXT, `RequiredScannerConfiguration` TEXT, `ReapplyScannerConfiguration` TEXT, `VersionConfigAppCurrentScanner` TEXT, `VersionConfigAppRequiredScanner` TEXT, `ColorSet` TEXT, PRIMARY KEY(`ScannerDescription`))",
+        "fields": [
+          {
+            "fieldPath": "fixedscannerbranch",
+            "columnName": "FixedScannerBranch",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "scannerdescription",
+            "columnName": "ScannerDescription",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "requiredscannerversion",
+            "columnName": "RequiredScannerVersion",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "applicationenvironment",
+            "columnName": "ApplicationEnvironment",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "languages",
+            "columnName": "Languages",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "requiredscannerconfiguration",
+            "columnName": "RequiredScannerConfiguration",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "reapplyscannerconfiguration",
+            "columnName": "ReapplyScannerConfiguration",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "versionconfigappcurrentscanner",
+            "columnName": "VersionConfigAppCurrentScanner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "versionconfigapprequiredscanner",
+            "columnName": "VersionConfigAppRequiredScanner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "colorset",
+            "columnName": "ColorSet",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "ScannerDescription"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Workplaces",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Werkplek` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Werkplek`))",
+        "fields": [
+          {
+            "fieldPath": "workplace",
+            "columnName": "Werkplek",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Werkplek"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "BarcodeLayouts",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcodelayout` TEXT NOT NULL, `Layout` TEXT NOT NULL, PRIMARY KEY(`Barcodelayout`, `Layout`))",
+        "fields": [
+          {
+            "fieldPath": "barcodelayout",
+            "columnName": "Barcodelayout",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "layoutvalue",
+            "columnName": "Layout",
+            "affinity": "TEXT",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcodelayout",
+            "Layout"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Authorisations",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Autorisatie` TEXT NOT NULL, `Order` INTEGER, `License` TEXT, PRIMARY KEY(`Autorisatie`))",
+        "fields": [
+          {
+            "fieldPath": "authorisation",
+            "columnName": "Autorisatie",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "order",
+            "columnName": "Order",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "license",
+            "columnName": "License",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Autorisatie"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Users",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Gebruikersnaam` TEXT NOT NULL, `Naam` TEXT, PRIMARY KEY(`Gebruikersnaam`))",
+        "fields": [
+          {
+            "fieldPath": "username",
+            "columnName": "Gebruikersnaam",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "name",
+            "columnName": "Naam",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Gebruikersnaam"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Branches",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Vestiging` TEXT NOT NULL, `Vestigingtype` TEXT, `Name` TEXT, `BinMandatory` TEXT, `Receive_default_bin` TEXT, `Retour_default_bin` TEXT, `Move_default_bin` TEXT, `Pick_default_storage_bin` TEXT, PRIMARY KEY(`Vestiging`))",
+        "fields": [
+          {
+            "fieldPath": "branch",
+            "columnName": "Vestiging",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "branchtype",
+            "columnName": "Vestigingtype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "branchname",
+            "columnName": "Name",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "binmandatory",
+            "columnName": "BinMandatory",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receivedefaultbin",
+            "columnName": "Receive_default_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returndefaultbin",
+            "columnName": "Retour_default_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "movedefaultbin",
+            "columnName": "Move_default_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickDefaultStorageBinStr",
+            "columnName": "Pick_default_storage_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Vestiging"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Settings",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Instelling` TEXT NOT NULL, `Waarde` TEXT, PRIMARY KEY(`Instelling`))",
+        "fields": [
+          {
+            "fieldPath": "name",
+            "columnName": "Instelling",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "value",
+            "columnName": "Waarde",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Instelling"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Pickorders",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Ordernumber` TEXT NOT NULL, `Ordertype` TEXT, `QuantityTotal` TEXT, `SingleArticleOrders` TEXT, `Pick_Sales_ask_workplace` TEXT, `Pick_Transfer_ask_workplace` TEXT, `Pick_Pick_PV_VKO_each_piece` TEXT, `Pick_with_picture` TEXT, `Pick_with_picture_auto_open` TEXT, `Pick_with_picture_prefetch` TEXT, `Pick_activity_bin_required` TEXT, `Pick_auto_next` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Currentlocation` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `IsSelected` INTEGER NOT NULL, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Ordernumber`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Ordernumber",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Ordertype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantitytotal",
+            "columnName": "QuantityTotal",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "singleArticleOrders",
+            "columnName": "SingleArticleOrders",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickSalesaskworkplace",
+            "columnName": "Pick_Sales_ask_workplace",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickTransferaskworkplace",
+            "columnName": "Pick_Transfer_ask_workplace",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickPickPVVKOeachpiece",
+            "columnName": "Pick_Pick_PV_VKO_each_piece",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickWithPicture",
+            "columnName": "Pick_with_picture",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickWithPictureAutoOpen",
+            "columnName": "Pick_with_picture_auto_open",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickWithPicturePrefetch",
+            "columnName": "Pick_with_picture_prefetch",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickActivityBinRequired",
+            "columnName": "Pick_activity_bin_required",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "pickAutoNext",
+            "columnName": "Pick_auto_next",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockOwner",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentlocation",
+            "columnName": "Currentlocation",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "interfaceresultmethod",
+            "columnName": "Interface_result_method",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isSelected",
+            "columnName": "IsSelected",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Ordernumber"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Pickorderlines",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `StorageBinCode` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `QuantityRejected` REAL, `SourceNo` TEXT, `DestinationNo` TEXT, `ProcessingSequence` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Status` INTEGER, `StatusShipping` INTEGER, `StatusPacking` INTEGER, `QuantityTaken` REAL NOT NULL, `TakenTimestamp` TEXT, `LocalStatus` INTEGER NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "storageBincode",
+            "columnName": "StorageBinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityRejected",
+            "columnName": "QuantityRejected",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "destinationno",
+            "columnName": "DestinationNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "processingsequence",
+            "columnName": "ProcessingSequence",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusShipping",
+            "columnName": "StatusShipping",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusPacking",
+            "columnName": "StatusPacking",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantitytaken",
+            "columnName": "QuantityTaken",
+            "affinity": "REAL",
+            "notNull": true
+          },
+          {
+            "fieldPath": "takenTimeStamp",
+            "columnName": "TakenTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderLineBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` TEXT NOT NULL, `Barcode` TEXT NOT NULL, `Quantity` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "lineNoStr",
+            "columnName": "LineNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandledStr",
+            "columnName": "Quantity",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "LineNo",
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderlineProperty",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `Propertycode` TEXT, `SequenceNoHandled` INTEGER, `SortingSequenceNo` INTEGER, `Layout` TEXT, `IsInput` INTEGER NOT NULL, `Isrequired` INTEGER NOT NULL, `ValueHandled` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "linenoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "propertyCodeStr",
+            "columnName": "Propertycode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sequenceNoHandledInt",
+            "columnName": "SequenceNoHandled",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "layoutStr",
+            "columnName": "Layout",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isInputBln",
+            "columnName": "IsInput",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "isRequiredBln",
+            "columnName": "Isrequired",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "valueHandledStr",
+            "columnName": "ValueHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderlinePropertyValue",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Propertycode` TEXT, `Value` TEXT, `SortingSequenceNo` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "propertyCodeStr",
+            "columnName": "Propertycode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "valueStr",
+            "columnName": "Value",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ArticleImage",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Itemno` TEXT NOT NULL, `Variantcode` TEXT NOT NULL, `Image` TEXT, PRIMARY KEY(`Itemno`, `Variantcode`))",
+        "fields": [
+          {
+            "fieldPath": "itemno",
+            "columnName": "Itemno",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "Variantcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "image",
+            "columnName": "Image",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Itemno",
+            "Variantcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT NOT NULL, `ItemNo` TEXT NOT NULL, `VariantCode` TEXT NOT NULL, `IsUniqueBarcode` TEXT, `QtyPerUnitOfMeasure` TEXT, `QuantityHandled` TEXT, PRIMARY KEY(`Barcode`, `BarCodeType`, `ItemNo`, `VariantCode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityperunitofmeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode",
+            "BarCodeType",
+            "ItemNo",
+            "VariantCode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderCompositeBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Composite_barcode` TEXT NOT NULL, `ItemNo` TEXT NOT NULL, `VariantCode` TEXT NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, PRIMARY KEY(`Composite_barcode`, `ItemNo`, `VariantCode`))",
+        "fields": [
+          {
+            "fieldPath": "compositeBarcodeStr",
+            "columnName": "Composite_barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "itemNoStr",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "variantCodeStr",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Composite_barcode",
+            "ItemNo",
+            "VariantCode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Comment",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`CommentLineNo` INTEGER NOT NULL, `CommentCode` TEXT, `CommentText` TEXT, PRIMARY KEY(`CommentLineNo`))",
+        "fields": [
+          {
+            "fieldPath": "commentLineNoLng",
+            "columnName": "CommentLineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "commentcodeStr",
+            "columnName": "CommentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "commentTextStr",
+            "columnName": "CommentText",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "CommentLineNo"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "SalesOrderPackingTable",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Salesorder` TEXT NOT NULL, `Packingtable` TEXT NOT NULL, PRIMARY KEY(`Salesorder`))",
+        "fields": [
+          {
+            "fieldPath": "salesorder",
+            "columnName": "Salesorder",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "packingtable",
+            "columnName": "Packingtable",
+            "affinity": "TEXT",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Salesorder"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderAddress",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Adrescode` TEXT NOT NULL, `Naam` TEXT, `Naamtoevoeging` TEXT, `Address` TEXT, `Adrestoevoeging` TEXT, `Street` TEXT, `Huisnummer` TEXT, `Huisnummertoevoeging` TEXT, `Zipcode` TEXT, `Plaats` TEXT, `Land` TEXT, PRIMARY KEY(`Adrescode`))",
+        "fields": [
+          {
+            "fieldPath": "addrescode",
+            "columnName": "Adrescode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "name",
+            "columnName": "Naam",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "nameAddition",
+            "columnName": "Naamtoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "address",
+            "columnName": "Address",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressAddition",
+            "columnName": "Adrestoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "street",
+            "columnName": "Street",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressNumber",
+            "columnName": "Huisnummer",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressNumberAddition",
+            "columnName": "Huisnummertoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "zipcode",
+            "columnName": "Zipcode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "city",
+            "columnName": "Plaats",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "country",
+            "columnName": "Land",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Adrescode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ShippingAgents",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Expediteur`))",
+        "fields": [
+          {
+            "fieldPath": "shippingagent",
+            "columnName": "Expediteur",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Expediteur"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ShippingAgentServices",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Expediteur`, `Service`))",
+        "fields": [
+          {
+            "fieldPath": "shippingagent",
+            "columnName": "Expediteur",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "service",
+            "columnName": "Service",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Expediteur",
+            "Service"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ShippingAgentServiceShippingUnits",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Verzendeenheid` TEXT NOT NULL, `Omschrijving` TEXT, `Containersoort` TEXT, PRIMARY KEY(`Expediteur`, `Service`, `Verzendeenheid`))",
+        "fields": [
+          {
+            "fieldPath": "shippingagent",
+            "columnName": "Expediteur",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "service",
+            "columnName": "Service",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shippingunit",
+            "columnName": "Verzendeenheid",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "containertype",
+            "columnName": "Containersoort",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Expediteur",
+            "Service",
+            "Verzendeenheid"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ShippingAgentServiceShipMethods",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Expediteur` TEXT NOT NULL, `Service` TEXT NOT NULL, `Verzendmethode` TEXT NOT NULL, `Omschrijving` TEXT, `ValueType` TEXT, `DefaultValue` TEXT, `EnumerationValues` TEXT, PRIMARY KEY(`Expediteur`, `Service`, `Verzendmethode`))",
+        "fields": [
+          {
+            "fieldPath": "shippingagent",
+            "columnName": "Expediteur",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "service",
+            "columnName": "Service",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shippingMethodStr",
+            "columnName": "Verzendmethode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "valuetype",
+            "columnName": "ValueType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "defaultvalue",
+            "columnName": "DefaultValue",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "enumerationvalues",
+            "columnName": "EnumerationValues",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Expediteur",
+            "Service",
+            "Verzendmethode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderShipPackages",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceNo` TEXT NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `PackageType` TEXT, `PackageSequenceNumber` TEXT, PRIMARY KEY(`SourceNo`))",
+        "fields": [
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shipagentcode",
+            "columnName": "ShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shipagentservicecode",
+            "columnName": "ShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packagetype",
+            "columnName": "PackageType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packagesequencenumber",
+            "columnName": "PackageSequenceNumber",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "SourceNo"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderLineFinishSinglePiece",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SourceNo` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `Verzendlabel_status` INTEGER NOT NULL, `LocalStatus` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Verzendlabel_status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderSetting",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SettingCode` TEXT NOT NULL, `SettingValue` TEXT, PRIMARY KEY(`SettingCode`))",
+        "fields": [
+          {
+            "fieldPath": "settingCode",
+            "columnName": "SettingCode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "settingValue",
+            "columnName": "SettingValue",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "SettingCode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ItemProperties",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Property` TEXT NOT NULL, `Layout` TEXT, `Omschrijving` TEXT, `IsUnique` INTEGER, `Uniqueness` TEXT, `RememberValue` INTEGER, `ValueType` TEXT, PRIMARY KEY(`Property`))",
+        "fields": [
+          {
+            "fieldPath": "property",
+            "columnName": "Property",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "layout",
+            "columnName": "Layout",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "omschrijving",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isUnique",
+            "columnName": "IsUnique",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "uniqueness",
+            "columnName": "Uniqueness",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "rememberValue",
+            "columnName": "RememberValue",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "valueType",
+            "columnName": "ValueType",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Property"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PropertyGroup",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Propertiegroep` TEXT NOT NULL, `Omschrijving` TEXT, `Naam_kort` TEXT, `Image_base64` TEXT, PRIMARY KEY(`Propertiegroep`))",
+        "fields": [
+          {
+            "fieldPath": "propertyGroup",
+            "columnName": "Propertiegroep",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shortName",
+            "columnName": "Naam_kort",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "imageBase64",
+            "columnName": "Image_base64",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Propertiegroep"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PropertyGroupProperty",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Herkomstcode` TEXT, `Herkomstsleutel` TEXT, `Propertie` TEXT NOT NULL, `Volgorde` INTEGER NOT NULL, PRIMARY KEY(`Propertie`))",
+        "fields": [
+          {
+            "fieldPath": "origin",
+            "columnName": "Herkomstcode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "originKey",
+            "columnName": "Herkomstsleutel",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "property",
+            "columnName": "Propertie",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "order",
+            "columnName": "Volgorde",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Propertie"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PickorderLinePackAndShip",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `LineNoTake` INTEGER, `SourceNo` TEXT, `DestinationNo` TEXT, `DeliveryAddressCode` TEXT, `ProcessingSequence` TEXT, `StatusShipping` INTEGER NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Quantity` REAL, `QuantityChecked` REAL, `QuantityHandled` REAL, `Status` INTEGER NOT NULL, `LocalStatus` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "linenoTake",
+            "columnName": "LineNoTake",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "destinationno",
+            "columnName": "DestinationNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "deliveryaddresscode",
+            "columnName": "DeliveryAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "processingsequence",
+            "columnName": "ProcessingSequence",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusshipping",
+            "columnName": "StatusShipping",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shippingagentcode",
+            "columnName": "ShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingagentservicecode",
+            "columnName": "ShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityChecked",
+            "columnName": "QuantityChecked",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrder",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `Inv_Amount_manual` TEXT, `Inv_barcode_check` TEXT, `Inv_add_extra_bin` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `Inventory_with_picture` TEXT, `Inventory_with_picture_auto_open` TEXT, `Inventory_with_picture_prefetch` TEXT, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "numberofBins",
+            "columnName": "Aantal_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "invAmountManual",
+            "columnName": "Inv_Amount_manual",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "invBarcodeCheck",
+            "columnName": "Inv_barcode_check",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "invAddExtraBin",
+            "columnName": "Inv_add_extra_bin",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockOwner",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "interfaceresultmethod",
+            "columnName": "Interface_result_method",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "inventoryWithPicture",
+            "columnName": "Inventory_with_picture",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "inventoryWithPictureAutoOpen",
+            "columnName": "Inventory_with_picture_auto_open",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "inventoryWithPicturePrefetch",
+            "columnName": "Inventory_with_picture_prefetch",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrderBin",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`BinCode` TEXT NOT NULL, `Lines` INTEGER NOT NULL, `HandledTimestamp` TEXT, `Status` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, PRIMARY KEY(`BinCode`))",
+        "fields": [
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "lines",
+            "columnName": "Lines",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "handledTimeStamp",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "BinCode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrderLines",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `ItemNo` TEXT, `VariantCode` TEXT, `Itemsoort` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `SortingSequenceNo` INTEGER NOT NULL, `Status` INTEGER NOT NULL, `SourceType` INTEGER NOT NULL, `HandledTimestamp` TEXT, `QuantityHandled` REAL, `QuantityHandledAllScanners` REAL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemtype",
+            "columnName": "Itemsoort",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingsequenceno",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sourcetype",
+            "columnName": "SourceType",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "handledtimestamp",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityhandledAllScanners",
+            "columnName": "QuantityHandledAllScanners",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrderBarcodes",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Itemsoort` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, `Inv_Amount_manual` INTEGER, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemType",
+            "columnName": "Itemsoort",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasure",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "invAmountManual",
+            "columnName": "Inv_Amount_manual",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryOrderLineBarcodes",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "lineNoLng",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandledStr",
+            "columnName": "QuantityHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "LineNo",
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryorderlineProperty",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `Propertycode` TEXT, `SequenceNoHandled` INTEGER, `SortingSequenceNo` INTEGER, `Layout` TEXT, `IsInput` INTEGER NOT NULL, `Isrequired` INTEGER NOT NULL, `ValueHandled` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "linenoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "propertyCodeStr",
+            "columnName": "Propertycode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sequenceNoHandledInt",
+            "columnName": "SequenceNoHandled",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "layoutStr",
+            "columnName": "Layout",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isInputBln",
+            "columnName": "IsInput",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "isRequiredBln",
+            "columnName": "Isrequired",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "valueHandledStr",
+            "columnName": "ValueHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "InventoryorderlinePropertyValue",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Propertycode` TEXT, `Value` TEXT, `SortingSequenceNo` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "propertyCodeStr",
+            "columnName": "Propertycode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "valueStr",
+            "columnName": "Value",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "IntakeOrders",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` INTEGER NOT NULL, `BinCode` TEXT, `ExternalReference` TEXT, `StockOwner` TEXT, `Receive_Amount_manual_eo` TEXT, `Receive_store_auto_accept_at_requested` TEXT, `Receive_no_extra_bins` TEXT, `Receive_no_extra_items` TEXT, `Receive_no_extra_pieces` TEXT, `SourceDocument` INTEGER NOT NULL, `Document` TEXT, `Document2` TEXT, `ReceivedDateTime` TEXT, `Interface_result_method` TEXT, `IsProcessingOrParked` INTEGER, `Receive_with_picture` TEXT, `Receive_with_picture_auto_open` TEXT, `Receive_intake_eo_packaging_intake` TEXT, `Receive_intake_eo_packaging_shipped` TEXT, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "binCode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockOwner",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveAmountManualEO",
+            "columnName": "Receive_Amount_manual_eo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveStoreAutoAcceptAtRequested",
+            "columnName": "Receive_store_auto_accept_at_requested",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveNoExtraBins",
+            "columnName": "Receive_no_extra_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveNoExtraItems",
+            "columnName": "Receive_no_extra_items",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveNoExtraPieces",
+            "columnName": "Receive_no_extra_pieces",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receivedDateTime",
+            "columnName": "ReceivedDateTime",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "interfaceresultmethod",
+            "columnName": "Interface_result_method",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveWithPicture",
+            "columnName": "Receive_with_picture",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveWithPictureAutoOpen",
+            "columnName": "Receive_with_picture_auto_open",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveIntakeEOPackagingIntake",
+            "columnName": "Receive_intake_eo_packaging_intake",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveIntakeEOPackagingShipped",
+            "columnName": "Receive_intake_eo_packaging_shipped",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "IntakeLinesMAT",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Container` TEXT, `BinCodeHandled` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `SourceNo` TEXT, `DestinationNo` TEXT, `IsPartOfMultiLineOrder` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `Status` INTEGER, `LocalStatus` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `SourceType` INTEGER)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemNoStr",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCodeStr",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2Str",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "binCodeStr",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "containerStr",
+            "columnName": "Container",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "binCodehandledStr",
+            "columnName": "BinCodeHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityDbl",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandledDbl",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceNoStr",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "destinationNoStr",
+            "columnName": "DestinationNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isPartOfMultilineOrderStr",
+            "columnName": "IsPartOfMultiLineOrder",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendorItemNoStr",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendorItemDescriptionStr",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusInt",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "localStatusInt",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "extraField1Str",
+            "columnName": "ExtraField1",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField2Str",
+            "columnName": "ExtraField2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField3Str",
+            "columnName": "ExtraField3",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField4Str",
+            "columnName": "ExtraField4",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField5Str",
+            "columnName": "ExtraField5",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField6Str",
+            "columnName": "ExtraField6",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField7Str",
+            "columnName": "ExtraField7",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField8Str",
+            "columnName": "ExtraField8",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceTypeInt",
+            "columnName": "SourceType",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "IntakeOrderBarcodes",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, `Receive_Amount_manual` INTEGER, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasure",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "receiveAmountManual",
+            "columnName": "Receive_Amount_manual",
+            "affinity": "INTEGER",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "IntakeOrderMATLineBarcodes",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT, PRIMARY KEY(`LineNo`, `Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "lineNoLng",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandledStr",
+            "columnName": "QuantityHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "LineNo",
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Returnorder",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `StockOwner` TEXT, `Status` TEXT, `BinCode` TEXT, `CurrentLocation` TEXT, `ExternalReference` TEXT, `Retour_Amount_manual` INTEGER, `Retour_Barcode_check` INTEGER, `Retour_multi_document` INTEGER, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Reason` TEXT, `Retour_with_picture` INTEGER, `Retour_Order_bin_no_check` INTEGER, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumberStr",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertypeStr",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserIdStr",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserIdStr",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockownerStr",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusStr",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincodeStr",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentLocationStr",
+            "columnName": "CurrentLocation",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReferenceStr",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourAmountManualBln",
+            "columnName": "Retour_Amount_manual",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourBarcodeCheckBln",
+            "columnName": "Retour_Barcode_check",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourMultiDocumentBln",
+            "columnName": "Retour_multi_document",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocumentStr",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "documentStr",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2Str",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "reasonStr",
+            "columnName": "Reason",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returnWithPictureBln",
+            "columnName": "Retour_with_picture",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourOrderBINNoCheckBln",
+            "columnName": "Retour_Order_bin_no_check",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReturnorderBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeTypeStr",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isUniqueBarcodeBln",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemNoStr",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasureDbl",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasureStr",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandledDbl",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReturnorderDocument",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceDocument` TEXT NOT NULL, `Status` INTEGER NOT NULL, PRIMARY KEY(`SourceDocument`))",
+        "fields": [
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "SourceDocument"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReturnorderLine",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ItemNo` TEXT, `VariantCode` TEXT, `Document` TEXT, `Retourreden` TEXT, `Description` TEXT, `Description2` TEXT, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `SortingSequenceNo_take` INTEGER NOT NULL, `Quantity_take` REAL, `QuantityHandled_take` REAL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `Generated` INTEGER NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "retourreden",
+            "columnName": "Retourreden",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemno",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendoritemdescription",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingsequenceno",
+            "columnName": "SortingSequenceNo_take",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantitytake",
+            "columnName": "Quantity_take",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandledtake",
+            "columnName": "QuantityHandled_take",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield1",
+            "columnName": "ExtraField1",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield2",
+            "columnName": "ExtraField2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield3",
+            "columnName": "ExtraField3",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield4",
+            "columnName": "ExtraField4",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield5",
+            "columnName": "ExtraField5",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield6",
+            "columnName": "ExtraField6",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield7",
+            "columnName": "ExtraField7",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield8",
+            "columnName": "ExtraField8",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "generated",
+            "columnName": "Generated",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReturnorderLineBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoLng",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandledStr",
+            "columnName": "QuantityHandled",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "ReceiveLines",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL, `QuantityHandled` REAL, `SortingSequenceNo` INTEGER NOT NULL, `VendorItemNo` TEXT, `VendorItemDescription` TEXT, `HandledTimestamp` TEXT, `Status` INTEGER, `LocalStatus` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemNoStr",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCodeStr",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2Str",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "binCodeStr",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityDbl",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandledDbl",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNoStr",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "vendorItemNoStr",
+            "columnName": "VendorItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "vendorItemDescriptionStr",
+            "columnName": "VendorItemDescription",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "handledTimeStampStr",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusInt",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "localStatusInt",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "extraField1Str",
+            "columnName": "ExtraField1",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField2Str",
+            "columnName": "ExtraField2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField3Str",
+            "columnName": "ExtraField3",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField4Str",
+            "columnName": "ExtraField4",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField5Str",
+            "columnName": "ExtraField5",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField6Str",
+            "columnName": "ExtraField6",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField7Str",
+            "columnName": "ExtraField7",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extraField8Str",
+            "columnName": "ExtraField8",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "MoveOrder",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentUserId` TEXT, `Status` TEXT, `BinCode` TEXT, `StockOwner` TEXT, `ExternalReference` TEXT, `SourceDocument` TEXT, `Document` TEXT, `Document2` TEXT, `Move_Amount_manual` TEXT, `Move_Barcode_check` TEXT, `Move_validate_stock` TEXT, `Move_validate_stock_enforce` TEXT, `Move_auto_accept_at_requested` TEXT, `Move_no_extra_bins` TEXT, `Move_no_extra_items` TEXT, `Move_no_extra_pieces` TEXT, `Move_with_picture` TEXT, `Move_with_picture_auto_open` TEXT, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "numberofBins",
+            "columnName": "Aantal_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "stockownerStr",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveAmountManual",
+            "columnName": "Move_Amount_manual",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveBarcodeCheck",
+            "columnName": "Move_Barcode_check",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveValidateStock",
+            "columnName": "Move_validate_stock",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveValidateStockEnforce",
+            "columnName": "Move_validate_stock_enforce",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveAutoAcceptAtRequested",
+            "columnName": "Move_auto_accept_at_requested",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveNoExtraBins",
+            "columnName": "Move_no_extra_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveNoExtraItems",
+            "columnName": "Move_no_extra_items",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveNoExtraPieces",
+            "columnName": "Move_no_extra_pieces",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveWithPicture",
+            "columnName": "Move_with_picture",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "moveWithPictureAutoOpen",
+            "columnName": "Move_with_picture_auto_open",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "MoveOrderLine",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `LineNo` INTEGER NOT NULL, `ActionTypeCode` TEXT, `ItemNo` TEXT, `VariantCode` TEXT, `Description` TEXT, `Description2` TEXT, `BinCode` TEXT, `Quantity` REAL NOT NULL, `QuantityHandled` REAL, `HandledTimestamp` TEXT, `SourceNo` TEXT, `Status` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `LocalStatus` INTEGER NOT NULL, `ExtraField1` TEXT, `ExtraField2` TEXT, `ExtraField3` TEXT, `ExtraField4` TEXT, `ExtraField5` TEXT, `ExtraField6` TEXT, `ExtraField7` TEXT, `ExtraField8` TEXT, `LocalQuantityTaken` REAL NOT NULL, `LocalQuantityPlaced` REAL NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "actiontypecode",
+            "columnName": "ActionTypeCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "handledtimestamp",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceno",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceNo",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "extrafield1",
+            "columnName": "ExtraField1",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield2",
+            "columnName": "ExtraField2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield3",
+            "columnName": "ExtraField3",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield4",
+            "columnName": "ExtraField4",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield5",
+            "columnName": "ExtraField5",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield6",
+            "columnName": "ExtraField6",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield7",
+            "columnName": "ExtraField7",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "extrafield8",
+            "columnName": "ExtraField8",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityTaken",
+            "columnName": "LocalQuantityTaken",
+            "affinity": "REAL",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityPlaced",
+            "columnName": "LocalQuantityPlaced",
+            "affinity": "REAL",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "MoveOrdeBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasure",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "MoveOrderLineBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`LineNo` INTEGER NOT NULL, `Barcode` TEXT NOT NULL, `QuantityHandled` REAL, PRIMARY KEY(`LineNo`, `Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "lineNoInt",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodeStr",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "LineNo",
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Packaging",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Emballage` TEXT NOT NULL, `Description` TEXT NOT NULL, PRIMARY KEY(`Emballage`))",
+        "fields": [
+          {
+            "fieldPath": "codeStr",
+            "columnName": "Emballage",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Emballage"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Scanners",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Werkplek` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`Werkplek`))",
+        "fields": [
+          {
+            "fieldPath": "scanner",
+            "columnName": "Werkplek",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "omschrijving",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Werkplek"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "CustomAuthorisations",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Autorisatie` TEXT NOT NULL, `Omschrijving` TEXT, `Autorisatie_basis` TEXT, `Filter_veld` TEXT, `Filter_waarde` TEXT, `Image_base64` TEXT, PRIMARY KEY(`Autorisatie`))",
+        "fields": [
+          {
+            "fieldPath": "authorisation",
+            "columnName": "Autorisatie",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "authorisationbase",
+            "columnName": "Autorisatie_basis",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "filterfield",
+            "columnName": "Filter_veld",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "filtervalue",
+            "columnName": "Filter_waarde",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "imagebase64",
+            "columnName": "Image_base64",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Autorisatie"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Translations",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Tekst` TEXT NOT NULL, `Taal` TEXT NOT NULL, `Vertaling` TEXT, PRIMARY KEY(`Tekst`, `Taal`))",
+        "fields": [
+          {
+            "fieldPath": "text",
+            "columnName": "Tekst",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "language",
+            "columnName": "Taal",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "translation",
+            "columnName": "Vertaling",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Tekst",
+            "Taal"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "CompositeBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`CompositeBarcode` TEXT NOT NULL, `Compositebarcode_type` TEXT, `Description` TEXT, `Field_separator` TEXT, `Layout_regex` TEXT, `Layout_type` TEXT, PRIMARY KEY(`CompositeBarcode`))",
+        "fields": [
+          {
+            "fieldPath": "compositeBarcodeStr",
+            "columnName": "CompositeBarcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "compositeBarcodeTypeStr",
+            "columnName": "Compositebarcode_type",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "fieldSeperatorStr",
+            "columnName": "Field_separator",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "layoutRegexStr",
+            "columnName": "Layout_regex",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "layoutTypeStr",
+            "columnName": "Layout_type",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "CompositeBarcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "CompositeBarcodeProperty",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Comment` TEXT, `Field` TEXT NOT NULL, `Field_identifier` TEXT, `Field_type` TEXT, `Position_start` INTEGER NOT NULL, `Position_end` INTEGER NOT NULL, `SortingSequenceNo` INTEGER NOT NULL, `Strip_this` TEXT, PRIMARY KEY(`Field`))",
+        "fields": [
+          {
+            "fieldPath": "commentStr",
+            "columnName": "Comment",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "fieldStr",
+            "columnName": "Field",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "fieldIdentifierStr",
+            "columnName": "Field_identifier",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "fieldTypeStr",
+            "columnName": "Field_type",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "positionStartInt",
+            "columnName": "Position_start",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "positionEndInt",
+            "columnName": "Position_end",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "sortingSequenceNoInt",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "stripThisStr",
+            "columnName": "Strip_this",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Field"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndSHipOrder",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Aantal_bins` TEXT, `AssignedUserId` TEXT, `CurrentLocation` TEXT, `CurrentUserId` TEXT, `DestinationNo` TEXT, `Document` TEXT, `Document2` TEXT, `DocumentType` TEXT, `DocumentType2` TEXT, `ExternalReference` TEXT, `Opdrachtnummer` TEXT NOT NULL, `Opdrachttype` TEXT, `SourceDocument` TEXT, `Status` TEXT, `Workplace` TEXT, `IsProcessingOrParked` INTEGER, `Priority` INTEGER NOT NULL, PRIMARY KEY(`Opdrachtnummer`))",
+        "fields": [
+          {
+            "fieldPath": "numberofBins",
+            "columnName": "Aantal_bins",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "assignedUserId",
+            "columnName": "AssignedUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentLocation",
+            "columnName": "CurrentLocation",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "currentUserId",
+            "columnName": "CurrentUserId",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "destinationNo",
+            "columnName": "DestinationNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document",
+            "columnName": "Document",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "document2",
+            "columnName": "Document2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "documentType",
+            "columnName": "DocumentType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "documentType2",
+            "columnName": "DocumentType2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "externalReference",
+            "columnName": "ExternalReference",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "ordernumber",
+            "columnName": "Opdrachtnummer",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "ordertype",
+            "columnName": "Opdrachttype",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceDocument",
+            "columnName": "SourceDocument",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "workplace",
+            "columnName": "Workplace",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isprocessingorparked",
+            "columnName": "IsProcessingOrParked",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "priorityInt",
+            "columnName": "Priority",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Opdrachtnummer"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipOrderLine",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ActionTypeCode` TEXT, `BinCode` TEXT, `Description` TEXT, `Description2` TEXT, `HandledTimestamp` TEXT, `ItemNo` TEXT, `LineNo` INTEGER NOT NULL, `Quantity` REAL NOT NULL, `QuantityHandled` REAL, `SortingSequenceNo` INTEGER NOT NULL, `Status` INTEGER NOT NULL, `VariantCode` TEXT, `LocalStatus` INTEGER NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "actiontypecode",
+            "columnName": "ActionTypeCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "bincode",
+            "columnName": "BinCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description",
+            "columnName": "Description",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "description2",
+            "columnName": "Description2",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "handledtimestamp",
+            "columnName": "HandledTimestamp",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "lineno",
+            "columnName": "LineNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantity",
+            "columnName": "Quantity",
+            "affinity": "REAL",
+            "notNull": true
+          },
+          {
+            "fieldPath": "quantityhandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sortingSequenceNo",
+            "columnName": "SortingSequenceNo",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "status",
+            "columnName": "Status",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "variantcode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "localstatus",
+            "columnName": "LocalStatus",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipBarcode",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Barcode` TEXT NOT NULL, `BarCodeType` TEXT, `IsUniqueBarcode` INTEGER, `ItemNo` TEXT, `VariantCode` TEXT, `QtyPerUnitOfMeasure` REAL, `UnitOfMeasure` TEXT, `QuantityHandled` REAL, PRIMARY KEY(`Barcode`))",
+        "fields": [
+          {
+            "fieldPath": "barcode",
+            "columnName": "Barcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "barcodetype",
+            "columnName": "BarCodeType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "isuniquebarcode",
+            "columnName": "IsUniqueBarcode",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "itemno",
+            "columnName": "ItemNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "variantCode",
+            "columnName": "VariantCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityPerUnitOfMeasure",
+            "columnName": "QtyPerUnitOfMeasure",
+            "affinity": "REAL",
+            "notNull": false
+          },
+          {
+            "fieldPath": "unitOfMeasure",
+            "columnName": "UnitOfMeasure",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "quantityHandled",
+            "columnName": "QuantityHandled",
+            "affinity": "REAL",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Barcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipShipment",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SourceNo` TEXT, `ShippingLabels` TEXT, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `ActualShippingAgentCode` TEXT, `ActualShippingAgentServiceCode` TEXT, `ShippingAddressType` TEXT, `ShippingAddressCode` TEXT, `DeliveryAddressType` TEXT, `DeliveryAddressCode` TEXT, `SenderAddressCode` TEXT, `ReturnAddressCode` TEXT, `ReturnSenderAddressCode` TEXT, `ReturnShippingAddressCode` TEXT, `BillingAddressCode` TEXT, `StatusShipping` INTEGER NOT NULL, `StatusPacking` INTEGER NOT NULL)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "sourceNoStr",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingLabelsStr",
+            "columnName": "ShippingLabels",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAgentCodeStr",
+            "columnName": "ShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAgentServiceCodeStr",
+            "columnName": "ShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "actualShippingAgentCodeStr",
+            "columnName": "ActualShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "actualShippingAgentServiceCodeStr",
+            "columnName": "ActualShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAddressTypeStr",
+            "columnName": "ShippingAddressType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAddressCodeStr",
+            "columnName": "ShippingAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "deliveryAddressTypeStr",
+            "columnName": "DeliveryAddressType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "deliveryAddressCodeStr",
+            "columnName": "DeliveryAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "senderAddressCodeStr",
+            "columnName": "SenderAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returnAddressCodeStr",
+            "columnName": "ReturnAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returnSenderAddressCodeStr",
+            "columnName": "ReturnSenderAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "returnShippingAddressCodeStr",
+            "columnName": "ReturnShippingAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "billingAddressCodeStr",
+            "columnName": "BillingAddressCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "statusShippingInt",
+            "columnName": "StatusShipping",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "statusPackingInt",
+            "columnName": "StatusPacking",
+            "affinity": "INTEGER",
+            "notNull": true
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipAddress",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Adrescode` TEXT NOT NULL, `AddressName` TEXT, `AddressType` TEXT, `Naamtoevoeging` TEXT, `Address` TEXT, `Adrestoevoeging` TEXT, `Street` TEXT, `Huisnummer` INTEGER NOT NULL, `Huisnummertoevoeging` TEXT, `Zipcode` TEXT, `Regio` TEXT, `Plaats` TEXT, `Land` TEXT, `Email` TEXT, `Telefoon` TEXT, `Contactpersoon` TEXT, PRIMARY KEY(`Adrescode`))",
+        "fields": [
+          {
+            "fieldPath": "addressCodeStr",
+            "columnName": "Adrescode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "addressNameStr",
+            "columnName": "AddressName",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressTypeStr",
+            "columnName": "AddressType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "nameAdditionStr",
+            "columnName": "Naamtoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressStr",
+            "columnName": "Address",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressAdditionStr",
+            "columnName": "Adrestoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "streetStr",
+            "columnName": "Street",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "addressNumberInt",
+            "columnName": "Huisnummer",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "addressNumberAdditionStr",
+            "columnName": "Huisnummertoevoeging",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "zipcodeStr",
+            "columnName": "Zipcode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "regionStr",
+            "columnName": "Regio",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "cityStr",
+            "columnName": "Plaats",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "countryStr",
+            "columnName": "Land",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "emailStr",
+            "columnName": "Email",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "phoneStr",
+            "columnName": "Telefoon",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "contactPersonStr",
+            "columnName": "Contactpersoon",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Adrescode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipSetting",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `SettingCode` TEXT, `SettingValue` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "settingCodeStr",
+            "columnName": "SettingCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "settingValueStr",
+            "columnName": "SettingValue",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipShippingMethod",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`recordid` INTEGER PRIMARY KEY AUTOINCREMENT, `ShippingMethodCode` TEXT, `ShippingMethodValue` TEXT)",
+        "fields": [
+          {
+            "fieldPath": "recordid",
+            "columnName": "recordid",
+            "affinity": "INTEGER",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingMethodCodeStr",
+            "columnName": "ShippingMethodCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingMethodValueStr",
+            "columnName": "ShippingMethodValue",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "recordid"
+          ],
+          "autoGenerate": true
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "PackAndShipShippingPackage",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`SourceNo` TEXT NOT NULL, `ShippingAgentCode` TEXT, `ShippingAgentServiceCode` TEXT, `PackageType` TEXT, `PackageSequenceNumber` INTEGER NOT NULL, `PackageItemCount` INTEGER NOT NULL, `PackageWeightInG` INTEGER NOT NULL, `PackageContainersoort` TEXT, `PackageContainer` TEXT, PRIMARY KEY(`SourceNo`))",
+        "fields": [
+          {
+            "fieldPath": "sourceNoStr",
+            "columnName": "SourceNo",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "shippingAgentCodeStr",
+            "columnName": "ShippingAgentCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "shippingAgentServiceCodeStr",
+            "columnName": "ShippingAgentServiceCode",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packageTypeStr",
+            "columnName": "PackageType",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packageSequenceNumberInt",
+            "columnName": "PackageSequenceNumber",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "packageItemCountInt",
+            "columnName": "PackageItemCount",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "packageWeightInGInt",
+            "columnName": "PackageWeightInG",
+            "affinity": "INTEGER",
+            "notNull": true
+          },
+          {
+            "fieldPath": "packageContainerTypeStr",
+            "columnName": "PackageContainersoort",
+            "affinity": "TEXT",
+            "notNull": false
+          },
+          {
+            "fieldPath": "packageContainerStr",
+            "columnName": "PackageContainer",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "SourceNo"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "StockOwner",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`StockOwner` TEXT NOT NULL, `Omschrijving` TEXT, PRIMARY KEY(`StockOwner`))",
+        "fields": [
+          {
+            "fieldPath": "stockownerStr",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "descriptionStr",
+            "columnName": "Omschrijving",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "StockOwner"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "AutorizedStockOwner",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`StockOwner` TEXT NOT NULL, `Vestiging` TEXT, PRIMARY KEY(`StockOwner`))",
+        "fields": [
+          {
+            "fieldPath": "stockownerStr",
+            "columnName": "StockOwner",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "vestigingStr",
+            "columnName": "Vestiging",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "StockOwner"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      },
+      {
+        "tableName": "Labeltemplate",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`Labelcode` TEXT NOT NULL, `Template` TEXT, PRIMARY KEY(`Labelcode`))",
+        "fields": [
+          {
+            "fieldPath": "labelcodeStr",
+            "columnName": "Labelcode",
+            "affinity": "TEXT",
+            "notNull": true
+          },
+          {
+            "fieldPath": "templateStr",
+            "columnName": "Template",
+            "affinity": "TEXT",
+            "notNull": false
+          }
+        ],
+        "primaryKey": {
+          "columnNames": [
+            "Labelcode"
+          ],
+          "autoGenerate": false
+        },
+        "indices": [],
+        "foreignKeys": []
+      }
+    ],
+    "views": [],
+    "setupQueries": [
+      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
+      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'b971f1cbeb59fe9dccff03b56f01ba4b')"
+    ]
+  }
+}
\ No newline at end of file
