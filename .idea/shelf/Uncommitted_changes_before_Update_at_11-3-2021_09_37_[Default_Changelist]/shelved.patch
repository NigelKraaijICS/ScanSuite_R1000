Index: app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SSU_WHS.Basics.Branches;\r\n\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ICS.Utils.cText;\r\nimport ICS.Weberror.cWeberror;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.AuthorizedStockOwners.cAuthorizedStockOwner;\r\nimport SSU_WHS.Basics.BranchBin.cBranchBin;\r\nimport SSU_WHS.Basics.BranchReason.cBranchReason;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplaceViewModel;\r\nimport SSU_WHS.General.cDatabase;\r\nimport SSU_WHS.Webservice.cWebresult;\r\nimport SSU_WHS.Webservice.cWebserviceDefinitions;\r\n\r\npublic class cBranch {\r\n\r\n    //Region Public Properties\r\n    private String branchStr;\r\n    public String getBranchStr() {\r\n        return branchStr;\r\n    }\r\n\r\n    private String branchTypeStr;\r\n    public String getBranchTypeStr() {\r\n        return branchTypeStr;\r\n    }\r\n\r\n    private String branchNameStr;\r\n    public String getBranchNameStr() {\r\n        return branchNameStr;\r\n    }\r\n\r\n    private boolean binMandatoryBln;\r\n    public  boolean isBinMandatoryBln() {return  binMandatoryBln;}\r\n\r\n    private String returnDefaultBinStr;\r\n    public String getReturnDefaultBinStr(){\r\n        return   returnDefaultBinStr;\r\n    }\r\n\r\n    private String receiveDefaultBinStr;\r\n    public String getReceiveDefaultBinStr(){\r\n        return   receiveDefaultBinStr;\r\n    }\r\n\r\n    private String pickDefaultStorageBinStr;\r\n    public String getPickDefaultStorageBinStr(){\r\n        return pickDefaultStorageBinStr;\r\n    }\r\n\r\n    private String moveDefaultBinStr;\r\n    public String getMoveDefaultBinStr(){\r\n        return   moveDefaultBinStr;\r\n    }\r\n\r\n    private cBranchEntity branchEntity;\r\n\r\n    public ArrayList<cWorkplace>  workplacesObl() {\r\n        return  cWorkplace.allWorkplacesObl;\r\n\r\n    }\r\n    public ArrayList<cBranchBin>  binsObl;\r\n    public ArrayList<cBranchReason>  returnReasonObl;\r\n    public ArrayList<cStockOwner> stockOwnerObl;\r\n\r\n    private cBranchViewModel getBranchViewModel() {\r\n        return new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n    }\r\n\r\n\r\n    public static List<cBranch> allBranchesObl;\r\n    public  List<cBranchBin> receiveBinsObl;\r\n    public  List<cBranchBin> shipBinsObl;\r\n\r\n    public  static  boolean BranchesAvailableBln;\r\n\r\n       public enum brachTypeEnum {\r\n        INTRANSIT,\r\n        STORE,\r\n        UNKNOWN,\r\n        WAREHOUSE\r\n    }\r\n    //end region Public Propties\r\n\r\n    //Region Constructor\r\n    public cBranch(JSONObject pvJsonObject) {\r\n        this.branchEntity = new cBranchEntity(pvJsonObject);\r\n        this.branchStr = branchEntity.getBranchStr();\r\n        this.branchTypeStr = branchEntity.getBranchtypeStr();\r\n        this.branchNameStr = branchEntity.getBranchnameStr();\r\n        this.returnDefaultBinStr = branchEntity.getReturndefaultbinStr();\r\n        this.receiveDefaultBinStr = branchEntity.getReceivedefaultbinStr();\r\n        this.moveDefaultBinStr = branchEntity.getMovedefaultbinStr();\r\n        this.pickDefaultStorageBinStr = branchEntity.getPickDefaultStorageBinStr();\r\n        this.binMandatoryBln = cText.pStringToBooleanBln(branchEntity.getBinmandatoryStr(),false) ;\r\n\r\n    }\r\n    //End Region Constructor\r\n\r\n    //Region Public Methods\r\n\r\n    public static boolean pGetBranchesViaWebserviceBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cBranch.allBranchesObl = null;\r\n            cBranch.pTruncateTableBln();\r\n        }\r\n\r\n        if (cBranch.allBranchesObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n\r\n        cBranchViewModel branchViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n        WebResult =  branchViewModel.pGetBranchesFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranch branch = new cBranch(jsonObject);\r\n                branch.pInsertInDatabaseBln();\r\n            }\r\n\r\n            cBranch.BranchesAvailableBln = true;\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean pGetReceiveBinsViaWebserviceBln() {\r\n\r\n        if (this.receiveBinsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetReceiveBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            this.receiveBinsObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                this.receiveBinsObl.add(branchBin);\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n    public boolean pGetShipBinsViaWebserviceBln() {\r\n\r\n        if (this.shipBinsObl != null) {\r\n            return  true;\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetShipBinsFromWebserviceWrs();\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            this.shipBinsObl = new ArrayList<>();\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n                cBranchBin branchBin = new cBranchBin(jsonObject);\r\n                this.shipBinsObl.add(branchBin);\r\n            }\r\n            return  true;\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETBRANCHES);\r\n            return  false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean pInsertInDatabaseBln() {\r\n        this.getBranchViewModel().insert(this.branchEntity);\r\n\r\n        if (cBranch.allBranchesObl == null){\r\n            cBranch.allBranchesObl = new ArrayList<>();\r\n        }\r\n        cBranch.allBranchesObl .add(this);\r\n\r\n        return true;\r\n    }\r\n\r\n    public static cBranch pGetBranchByCode(String pvBranchStr){\r\n        if(cBranch.allBranchesObl == null || cBranch.allBranchesObl.size() == 0){\r\n            return null;\r\n        }\r\n\r\n        for (cBranch branch :  cBranch.allBranchesObl )\r\n        {\r\n            if(branch.branchStr.equalsIgnoreCase(pvBranchStr)){\r\n                return  branch;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static cBranch pGetUserBranchByCode(String pvBranchStr){\r\n        if(cUser.currentUser == null || cUser.currentUser.branchesObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cBranch branch :  cUser.currentUser.branchesObl)\r\n        {\r\n            if(branch.branchStr.equalsIgnoreCase(pvBranchStr)){\r\n                return  branch;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public cBranchBin pGetBinByCode(String pvBinCodeStr){\r\n\r\n        //Search for the BIN in the cache\r\n        if (this.binsObl != null && this.binsObl.size() > 0 ) {\r\n            for (cBranchBin branchBin : this.binsObl) {\r\n                if (branchBin.getBinCodeStr().equalsIgnoreCase(pvBinCodeStr)) {\r\n                    return  branchBin;\r\n                }\r\n            }\r\n        }\r\n\r\n        return   this.mGetBinViaWebservice(pvBinCodeStr);\r\n    }\r\n\r\n    public static boolean pTruncateTableBln(){\r\n\r\n        cBranchViewModel branchViewModel =  new ViewModelProvider(cAppExtension.fragmentActivity).get(cBranchViewModel.class);\r\n        branchViewModel.deleteAll();\r\n        return true;\r\n    }\r\n\r\n    public boolean pGetWorkplacesBln(boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln) {\r\n            cWorkplace.allWorkplacesObl = null;\r\n        }\r\n\r\n        if (this.workplacesObl() != null){\r\n            return  true;\r\n        }\r\n\r\n        cWorkplace.pTruncateTableBln();\r\n        cWorkplace.allWorkplacesObl = null;\r\n\r\n        cWebresult WebResult;\r\n\r\n        cWorkplaceViewModel  workplaceViewModel = new ViewModelProvider(cAppExtension.fragmentActivity).get(cWorkplaceViewModel.class);\r\n        WebResult =  workplaceViewModel.pGetWorkplacesFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n            List<JSONObject> myList = WebResult.getResultDtt();\r\n            if( cWorkplace.allWorkplacesObl == null) {\r\n                cWorkplace.allWorkplacesObl =  new ArrayList<>();\r\n            }\r\n\r\n            for (int i = 0; i < myList.size(); i++) {\r\n                JSONObject jsonObject;\r\n                jsonObject = myList.get(i);\r\n\r\n                cWorkplace workplace = new cWorkplace(jsonObject);\r\n                workplace.pInsertInDatabaseBln();\r\n            }\r\n\r\n            return  true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean pGetReasonBln(Boolean pvRefreshBln) {\r\n\r\n        if (pvRefreshBln){\r\n            this.returnReasonObl = null;\r\n            this.returnReasonObl = new ArrayList<>();\r\n        }\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetReasonFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n\r\n\r\n            if (this.returnReasonObl == null){\r\n                this.returnReasonObl = new ArrayList<>();\r\n            }\r\n\r\n\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cBranchReason branchReason = new cBranchReason(jsonObject);\r\n                if(branchReason.isReturn()) {\r\n                    this.returnReasonObl.add(branchReason);\r\n                }\r\n            }\r\n            return  true;\r\n\r\n        }\r\n        return false;\r\n    }\r\n    public boolean pGetAuthorizedStockOwnerBln(Boolean pvRefreshBln) {\r\n        if (pvRefreshBln){\r\n            this.stockOwnerObl = null;\r\n            this.stockOwnerObl = new ArrayList<>();\r\n        }\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetAuthorizedStockOwnerFromWebserviceWrs();\r\n\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            if (this.stockOwnerObl == null){\r\n                this.stockOwnerObl = new ArrayList<>();\r\n            }\r\n            for (JSONObject jsonObject : WebResult.getResultDtt()) {\r\n\r\n                cAuthorizedStockOwner authorizedStockOwner = new cAuthorizedStockOwner(jsonObject);\r\n                cStockOwner stockOwner = cStockOwner.pGetStockOwnerByCodeStr(authorizedStockOwner.getStockownerStr());\r\n                    this.stockOwnerObl.add(stockOwner);\r\n                    \r\n            }\r\n            return  true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static cBranch pGetBranchByDescriptionStr(String pvScannedBranchStr){\r\n\r\n        if (cBranch.allBranchesObl == null || cBranch.allBranchesObl.size() == 0 ) {\r\n            return  null;\r\n        }\r\n\r\n        for (cBranch branch : cBranch.allBranchesObl) {\r\n\r\n            if (branch.getBranchNameStr().equalsIgnoreCase(pvScannedBranchStr)) {\r\n                return branch;\r\n            }\r\n        }\r\n\r\n        return  null;\r\n    }\r\n\r\n    public cBranchReason pGetReasonByName(String pvReasonStr){\r\n        if(cUser.currentUser.currentBranch.returnReasonObl == null){\r\n            return null;\r\n        }\r\n\r\n        for (cBranchReason branchReason : cUser.currentUser.currentBranch.returnReasonObl)\r\n        {\r\n            if(branchReason.getReasonStr().equalsIgnoreCase(pvReasonStr)){\r\n                return  branchReason;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private cBranchBin mGetBinViaWebservice(String pvBinCodeStr) {\r\n\r\n        cWebresult WebResult;\r\n        WebResult =  this.getBranchViewModel().pGetBinFromWebserviceWrs(pvBinCodeStr);\r\n        if (WebResult.getResultBln() && WebResult.getSuccessBln()){\r\n            if (WebResult.getResultDtt() != null && WebResult.getResultDtt().size() == 1) {\r\n                cBranchBin branchBin = new cBranchBin(WebResult.getResultDtt().get(0));\r\n                if (this.binsObl == null) {\r\n                    this.binsObl = new ArrayList<>();\r\n                }\r\n\r\n                this.binsObl.add(branchBin);\r\n                return  branchBin;\r\n            }\r\n\r\n        }\r\n        else {\r\n            cWeberror.pReportErrorsToFirebaseBln(cWebserviceDefinitions.WEBMETHOD_GETWAREHOUSELOCATIONS);\r\n        }\r\n        return  null;\r\n    }\r\n    //End Region Private Methods\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java	(revision 1c0b4132251ab66a445d9938c4b6f21c38dbfcd0)
+++ app/src/main/java/SSU_WHS/Basics/Branches/cBranch.java	(date 1614154486419)
@@ -83,6 +83,7 @@
     public  List<cBranchBin> receiveBinsObl;
     public  List<cBranchBin> shipBinsObl;
 
+    
     public  static  boolean BranchesAvailableBln;
 
        public enum brachTypeEnum {
