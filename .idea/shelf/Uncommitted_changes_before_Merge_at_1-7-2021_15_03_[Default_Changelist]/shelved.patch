Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderLinesActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Ship;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Picken.Shipment.cShipment;\r\nimport nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Ship.ShiporderLinesToShipFragment;\r\nimport nl.icsvertex.scansuite.PagerAdapters.ShiporderLinesPagerAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n//import android.app.Fragment;\r\n\r\npublic class ShiporderLinesActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //Region Views\r\n\r\n    private  TextView textViewChosenOrder;\r\n    private  TextView quantityShipordersText;\r\n    private  ConstraintLayout shiporderLineContainer;\r\n    private  TabLayout shiporderLinesTabLayout;\r\n    private  ViewPager shiporderLinesViewPager;\r\n    private  ImageView imageButtonComments;\r\n\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n\r\n    public static Fragment currentLineFragment;\r\n\r\n\r\n    //End Region Views\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_shiporderlines);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        this.mActivityInitialize();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n        if (pvMenuItem.getItemId() == android.R.id.home) {\r\n            this.mTryToLeaveActivity();\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mTryToLeaveActivity();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n        this.mFindViews();\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_shiporderlines));\r\n        this.mFieldsInitialize();\r\n        this.mSetListeners();\r\n        this.mInitScreen();\r\n\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        this.shiporderLineContainer = findViewById(R.id.shiporderLineContainer);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.quantityShipordersText = findViewById(R.id.quantityShipordersText);\r\n        this.shiporderLinesTabLayout = findViewById(R.id.shiporderLinesTabLayout);\r\n        this.shiporderLinesViewPager = findViewById(R.id.shiporderLinesViewpager);\r\n        this.textViewChosenOrder = findViewById(R.id.textViewChosenOrder);\r\n        this.imageButtonComments = findViewById(R.id.imageButtonComments);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_ship);\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarTitle.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        ViewCompat.setTransitionName(this.textViewChosenOrder, cPublicDefinitions.VIEW_CHOSEN_ORDER);\r\n\r\n        this.textViewChosenOrder.setText(cPickorder.currentPickOrder.getOrderNumberStr());\r\n        this.shiporderLinesTabLayout.addTab(shiporderLinesTabLayout.newTab().setText(R.string.tab_shiporderline_toship));\r\n        this.shiporderLinesTabLayout.addTab(shiporderLinesTabLayout.newTab().setText(R.string.tab_shiporderline_shipped));\r\n        this.shiporderLinesTabLayout.addTab(shiporderLinesTabLayout.newTab().setText(R.string.tab_shiporderline_total));\r\n\r\n        ShiporderLinesPagerAdapter shiporderLinesPagerAdapter = new ShiporderLinesPagerAdapter(this.shiporderLinesTabLayout.getTabCount());\r\n        this.shiporderLinesViewPager.setAdapter(shiporderLinesPagerAdapter);\r\n        this.shiporderLinesViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(shiporderLinesTabLayout));\r\n        this.shiporderLinesTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab pvTab) {\r\n                shiporderLinesViewPager.setCurrentItem(pvTab.getPosition());\r\n                mChangeSelectedTab(pvTab);\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n                cUserInterface.pKillAllSounds();\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n        this.mShowComments();\r\n\r\n        //Check if we need to register a workplaceStr\r\n        if (cWorkplace.currentWorkplace == null ) {\r\n\r\n            if (cWorkplace.allWorkplacesObl.size() > 1) {\r\n                //Show the workplaceStr fragment\r\n                this.mShowWorkplaceFragment();\r\n            }\r\n            else {\r\n                //Pop-up is not needed, we just select the only workplace there is\r\n                cWorkplace.currentWorkplace = cWorkplace.allWorkplacesObl.get(0);\r\n                this.pWorkplaceSelected();\r\n            }\r\n            return;\r\n\r\n        }\r\n\r\n        //Call this here, because this is called everytime the activiy gets shown\r\n        this.mCheckAllDone();\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pChangeTabCounterText(String pvTextStr){\r\n        this.quantityShipordersText.setText(pvTextStr);\r\n\r\n    }\r\n\r\n    public void pHandleScan(cBarcodeScan pvBarcodeScan, Boolean pvSourceNoSelectedBln) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        if (cShipment.currentShipment == null) {\r\n            this.mHandleStarQC(pvBarcodeScan,pvSourceNoSelectedBln);\r\n            return;\r\n        }\r\n\r\n        if (cShipment.currentShipment.isCheckedBln()) {\r\n            this.mHandleStartShip(pvBarcodeScan,pvSourceNoSelectedBln);\r\n        }\r\n        else\r\n        {\r\n            this.mHandleStarQC(pvBarcodeScan,pvSourceNoSelectedBln);\r\n        }\r\n    }\r\n\r\n    public  void pShipmentSelected(cShipment pvShipment) {\r\n        cShipment.currentShipment = pvShipment;\r\n    }\r\n\r\n    public  void pShippingDone() {\r\n\r\n        //Try to close\r\n        if (!this.mTryToCloseOrderBln()){\r\n            return;\r\n        }\r\n\r\n        //Go back to order select activity\r\n        this.mStartOrderSelectActivity();\r\n\r\n    }\r\n\r\n    public void pShowOrderDoneFragment() {\r\n\r\n        cUserInterface.pPlaySound(R.raw.goodsound, null);\r\n\r\n        final StepDoneFragment stepDoneFragment = new StepDoneFragment(cAppExtension.activity.getString(R.string.message_packandshipdone), cAppExtension.activity.getString(R.string.message_close_packandship_fase),false);\r\n        stepDoneFragment.setCancelable(false);\r\n        stepDoneFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ORDERDONE_TAG);\r\n    }\r\n\r\n    public  void pWorkplaceSelected(){\r\n\r\n\r\n        List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n        for (Fragment fragment : fragments) {\r\n            if (fragment instanceof WorkplaceFragment) {\r\n                FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                fragmentTransaction.remove(fragment);\r\n                fragmentTransaction.commit();\r\n            }\r\n        }\r\n\r\n        if (!cPickorder.currentPickOrder.pUpdateWorkplaceViaWebserviceBln(cWorkplace.currentWorkplace.getWorkplaceStr())) {\r\n            cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_workplace_not_updated),null, true);\r\n            return;\r\n        }\r\n\r\n        //Register barcodeStr receiver, because the workplaceStr fragment has been shown\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n        cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_workplace_selected) + ' ' + cWorkplace.currentWorkplace.getWorkplaceStr() ,R.raw.headsupsound,false);\r\n\r\n       if (ShiporderLinesActivity.currentLineFragment instanceof  ShiporderLinesToShipFragment) {\r\n           ShiporderLinesToShipFragment shiporderLinesToShipFragment = (ShiporderLinesToShipFragment)ShiporderLinesActivity.currentLineFragment ;\r\n           shiporderLinesToShipFragment.pGetData();\r\n       }\r\n\r\n        this.mCheckAllDone();\r\n\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    private void mHandleStartShip(cBarcodeScan pvBarcodeScan, Boolean pvSourceNoSelectedBln){\r\n\r\n        cResult hulpRst;\r\n\r\n        cShipment selectedShipment =   cShipment.currentShipment;\r\n\r\n        //SourceNo button has been pressed, so we already have a current line\r\n        if (pvSourceNoSelectedBln) {\r\n\r\n            hulpRst = cShipment.currentShipment.pCheckShipmentRst();\r\n            if (!hulpRst.resultBln ){\r\n                cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,hulpRst.messagesStr(),null,true);\r\n                return;\r\n            }\r\n\r\n            if (cShipment.currentShipment.isHandledBln()) {\r\n                cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_shipment_already_handled),null,true);\r\n                return;\r\n            }\r\n\r\n            //we have a SourceDocument to handle, so start Pick activity\r\n            this.mStartShipActivity();\r\n            return;\r\n        }\r\n\r\n        //Check if we have scanned an ARTICLE and check if there are not handled linesInt for this ARTICLE\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n\r\n            //Check if article scan is allowed\r\n            if (!cPickorder.currentPickOrder.isSingleArticleOrdersBln()) {\r\n                this.mStepFailed(cAppExtension.context.getString(R.string.message_article_not_allowed));\r\n                return;\r\n            }\r\n\r\n            //Get shipment with scanned barcodeStr\r\n            cShipment.currentShipment = cShipment.pGetShipmentWithScannedArticleBarcode(pvBarcodeScan);\r\n\r\n            // We did not find a match, so stop\r\n            if (cShipment.currentShipment == null) {\r\n                this.mStepFailed(cAppExtension.context.getString(R.string.message_shipment_unkown_or_already_send));\r\n                if (ShiporderLinesActivity.currentLineFragment instanceof  ShiporderLinesToShipFragment) {\r\n                    ShiporderLinesToShipFragment shiporderLinesToShipFragment = (ShiporderLinesToShipFragment)ShiporderLinesActivity.currentLineFragment;\r\n                    shiporderLinesToShipFragment.pGetData();\r\n                }\r\n                return;\r\n            }\r\n\r\n            //Check if we have everything we need to ship the order before showing next activity\r\n            if (cShipment.currentShipment.shippingAgent() == null ||\r\n                    cShipment.currentShipment.shippingAgentService() == null ||\r\n                    cShipment.currentShipment.shippingAgentService().shippingUnitsObl() == null ||\r\n                    cShipment.currentShipment.shippingAgentService().shippingUnitsObl().size() == 0 ) {\r\n\r\n                cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_shipping_basics_invalid),null,true);\r\n                return;\r\n            }\r\n\r\n            if (cShipment.currentShipment.isHandledBln()) {\r\n                cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,(cAppExtension.activity.getString(R.string.message_shipment_already_handled)), null,true);\r\n                return;\r\n            }\r\n\r\n            //We found a match in open shipments\r\n            this.mStartShipActivity();\r\n            return;\r\n\r\n        }\r\n\r\n        //Get shipment by SourceNo or pickcartbox\r\n        cShipment.currentShipment = cShipment.pGetShipmentWithScannedBarcode(pvBarcodeScan);\r\n\r\n        // We did not find a match, so stop\r\n        if (cShipment.currentShipment == null) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.message_unknown_barcode));\r\n            cShipment.currentShipment = selectedShipment;\r\n            return;\r\n        }\r\n\r\n        hulpRst = cShipment.currentShipment.pCheckShipmentRst();\r\n        if (!hulpRst.resultBln ){\r\n            cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,hulpRst.messagesStr(),null,true);\r\n            return;\r\n        }\r\n\r\n        if (cShipment.currentShipment.isHandledBln()) {\r\n            cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_shipment_already_handled),null,true);\r\n            return;\r\n        }\r\n\r\n        //We found a match in open shipments\r\n        this.mStartShipActivity();\r\n    }\r\n\r\n    private void mHandleStarQC(cBarcodeScan pvBarcodeScan, Boolean pvSourceNoSelectedBln){\r\n\r\n        //SourceNo button has been pressed, so we already have a current line\r\n        if (pvSourceNoSelectedBln) {\r\n\r\n            if (cShipment.currentShipment.isCheckedBln()) {\r\n                cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_shipment_already_checked),null,true);\r\n                return;\r\n            }\r\n\r\n            if (cShipment.currentShipment.isHandledBln()) {\r\n                cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_shipment_already_handled),null,true);\r\n                return;\r\n            }\r\n\r\n            //we have a SourceDocument to handle, so start Pick activity\r\n            this.mStartQCLinesActivity();\r\n            return;\r\n        }\r\n\r\n        //Get shipment by SourceNo or pickcartbox\r\n        cShipment.currentShipment = cShipment.pGetShipmentWithScannedBarcode(pvBarcodeScan);\r\n\r\n        // We did not find a match, so stop\r\n        if (cShipment.currentShipment == null) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.message_unknown_barcode));\r\n            return;\r\n        }\r\n\r\n        if (cShipment.currentShipment.isCheckedBln()) {\r\n            cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_shipment_already_checked),null,true);\r\n            return;\r\n        }\r\n\r\n        if (cShipment.currentShipment.isHandledBln()) {\r\n            cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,cAppExtension.activity.getString(R.string.message_shipment_already_handled),null,true);\r\n            return;\r\n        }\r\n\r\n        //We found a match in open shipments\r\n        this.mStartQCLinesActivity();\r\n\r\n    }\r\n\r\n    private void mCheckAllDone() {\r\n\r\n        // If not everything is done, then leave\r\n        if (!this.mCheckAllDoneBln()) {\r\n            return;\r\n        }\r\n\r\n        // Show order done fragment\r\n        this.pShowOrderDoneFragment();\r\n\r\n    }\r\n\r\n    private boolean mCheckAllDoneBln() {\r\n\r\n        return cPickorder.currentPickOrder.pGetNotHandledShipmentsObl().size() <= 0;\r\n    }\r\n\r\n    private void mChangeSelectedTab(TabLayout.Tab pvTab) {\r\n\r\n        switch (pvTab.getPosition()) {\r\n            case 0:\r\n                this.pChangeTabCounterText(cText.pIntToStringStr(cPickorder.currentPickOrder.pGetNotHandledShipmentsObl().size()) + \"/\" + cText.pIntToStringStr(cPickorder.currentPickOrder.shipmentObl().size()));\r\n                break;\r\n            case 1:\r\n                this.pChangeTabCounterText(cText.pIntToStringStr(cPickorder.currentPickOrder.pGetHandledShipmentsObl().size()) + \"/\" + cText.pIntToStringStr(cPickorder.currentPickOrder.shipmentObl().size()));\r\n                break;\r\n            case 2:\r\n                this.pChangeTabCounterText(cText.pIntToStringStr(cPickorder.currentPickOrder.shipmentObl().size()));\r\n                break;\r\n            default:\r\n\r\n        }\r\n    }\r\n\r\n    private void mShowCommentsFragment(List<cComment> pvDataObl, String pvTitleStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(cPublicDefinitions.KEY_COMMENTHEADER, pvTitleStr);\r\n\r\n        CommentFragment commentFragment = new CommentFragment(pvDataObl);\r\n        commentFragment.setArguments(bundle);\r\n\r\n        commentFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.COMMENTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private  void mShowComments(){\r\n\r\n        if (cPickorder.currentPickOrder.pShipCommentObl() == null || cPickorder.currentPickOrder.pShipCommentObl().size() == 0) {\r\n            this.imageButtonComments.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonComments.setVisibility(View.VISIBLE);\r\n\r\n        //We already showed the comments\r\n        if (cComment.commentsShownBln) {\r\n            return;\r\n        }\r\n\r\n        this.mShowCommentsFragment(cPickorder.currentPickOrder.pPickCommentObl(),\"\");\r\n        cComment.commentsShownBln = true;\r\n    }\r\n\r\n    private  void mStepFailed(String pvErrorMessageStr){\r\n        cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,pvErrorMessageStr,null,true);\r\n    }\r\n\r\n    private  void mShowWorkplaceFragment() {\r\n        WorkplaceFragment workplaceFragment = new WorkplaceFragment();\r\n        workplaceFragment.setCancelable(false);\r\n        workplaceFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.WORKPLACEFRAGMENT_TAG);\r\n    }\r\n\r\n    private void mTryToLeaveActivity(){\r\n\r\n        AlertDialog.Builder alertDialog = new AlertDialog.Builder(cAppExtension.context);\r\n        alertDialog.setTitle(R.string.message_sure_leave_screen_title);\r\n        alertDialog.setMessage(getString(R.string.message_sure_leave_screen_text));\r\n        alertDialog.setPositiveButton(R.string.message_sure_leave_screen_positive, (pvDialogInterface, i) -> {\r\n\r\n            cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu.Pick_PackAndShip,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n\r\n            //If activity bin is not required, then don't show the fragment\r\n            if (!cPickorder.currentPickOrder.isPickActivityBinRequiredBln() || cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 || !cPickorder.currentPickOrder.getCurrentLocationStr().isEmpty()) {\r\n                mStartOrderSelectActivity();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        alertDialog.setNeutralButton(R.string.cancel, (dialogInterface, i) -> {\r\n            //do nothing (close the dialog)\r\n        });\r\n\r\n        alertDialog.setCancelable(true);\r\n        alertDialog.show();\r\n    }\r\n\r\n    private  boolean mTryToCloseOrderBln(){\r\n\r\n        cResult hulpResult;\r\n        hulpResult = new cResult();\r\n        hulpResult.resultBln = false;\r\n\r\n        hulpResult = cPickorder.currentPickOrder.pShipHandledViaWebserviceRst();\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown ) {\r\n            cUserInterface.pShowSnackbarMessage(this.shiporderLineContainer,hulpResult.messagesStr(),null,true);\r\n            return  false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold ) {\r\n\r\n            //If we got any comments, show them\r\n            if (cPickorder.currentPickOrder.pFeedbackCommentObl() != null && cPickorder.currentPickOrder.pFeedbackCommentObl().size() > 0 ) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return  false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mStartOrderSelectActivity() {\r\n\r\n        cWorkplace.currentWorkplace = null;\r\n\r\n        Intent intent = new Intent(cAppExtension.context, ShiporderSelectActivity.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private void mStartShipActivity(){\r\n        //we have a SourceDocument to handle, so start Ship activity\r\n        Intent intent = new Intent(cAppExtension.context, ShiporderShipActivity.class);\r\n       startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private void mStartQCLinesActivity(){\r\n        //we have a SourceDocument to check, so start QC lines activity\r\n        Intent intent = new Intent(cAppExtension.context, QualityControlLinesActivity.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderLinesActivity.java	(revision bb390e9cbb523d22c0741f7dbef629b3a6c61030)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderLinesActivity.java	(date 1625144268259)
@@ -34,6 +34,8 @@
 import SSU_WHS.General.cPublicDefinitions;
 import SSU_WHS.Picken.Pickorders.cPickorder;
 import SSU_WHS.Picken.Shipment.cShipment;
+import nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;
+import nl.icsvertex.scansuite.Activities.Pick.PickorderSelectActivity;
 import nl.icsvertex.scansuite.Activities.QualityControl.QualityControlLinesActivity;
 import nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;
@@ -272,6 +274,11 @@
         if (!this.mTryToCloseOrderBln()){
             return;
         }
+
+        if(PickorderLinesActivity.shipFromPickBln){
+            mStartPickorderSelectActivity();
+            return;
+        }
 
         //Go back to order select activity
         this.mStartOrderSelectActivity();
@@ -543,6 +550,11 @@
 
             cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu.Pick_PackAndShip,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);
 
+            if(PickorderLinesActivity.shipFromPickBln){
+                mStartPickorderSelectActivity();
+                return;
+            }
+
             //If activity bin is not required, then don't show the fragment
             if (!cPickorder.currentPickOrder.isPickActivityBinRequiredBln() || cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 || !cPickorder.currentPickOrder.getCurrentLocationStr().isEmpty()) {
                 mStartOrderSelectActivity();
@@ -602,6 +614,16 @@
         startActivity(intent);
         finish();
     }
+
+    private  void mStartPickorderSelectActivity(){
+        cWorkplace.currentWorkplace = null;
+        PickorderLinesActivity.shipFromPickBln = false;
+
+        Intent intent = new Intent(cAppExtension.context, PickorderSelectActivity.class);
+        startActivity(intent);
+        finish();
+
+    }
 
     private void mStartShipActivity(){
         //we have a SourceDocument to handle, so start Ship activity
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.General;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.app.AppCompatDelegate;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.analytics.FirebaseAnalytics;\r\n\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport ICS.Environments.cEnvironment;\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cProGlove;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cDeviceInfo;\r\nimport ICS.Utils.cPermissions;\r\nimport ICS.Utils.cPower;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Branches.cBranch;\r\nimport SSU_WHS.Basics.CompositeBarcode.cCompositeBarcode;\r\nimport SSU_WHS.Basics.CustomAuthorisations.cCustomAuthorisation;\r\nimport SSU_WHS.Basics.ItemProperty.cItemProperty;\r\nimport SSU_WHS.Basics.LabelTemplate.cLabelTemplate;\r\nimport SSU_WHS.Basics.PropertyGroup.cPropertyGroup;\r\nimport SSU_WHS.Basics.Scanners.cScanner;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.ShippingAgentServiceShippingUnits.cShippingAgentServiceShippingUnit;\r\nimport SSU_WHS.Basics.ShippingAgentServices.cShippingAgentService;\r\nimport SSU_WHS.Basics.ShippingAgents.cShippingAgent;\r\nimport SSU_WHS.Basics.ShippingAgentsServiceShipMethods.cShippingAgentShipMethod;\r\nimport SSU_WHS.Basics.StockOwner.cStockOwner;\r\nimport SSU_WHS.Basics.Translations.cTranslation;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.ScannerLogon.cScannerLogon;\r\nimport SSU_WHS.Webservice.cWebservice;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.EnvironmentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoConnectionFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.DateTimeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.HomeFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Main.LanguageFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Support.SupportFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.Scanning.cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_CHECKBOX;\r\nimport static ICS.Utils.Scanning.cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1TITLE_1FIELD_CHECKBOX;\r\nimport static SSU_WHS.General.cPublicDefinitions.PROGLOVE_CONNECT_ACTION;\r\nimport static SSU_WHS.General.cPublicDefinitions.SHAREDPREFERENCE_USEPROGLOVE;\r\n\r\n\r\npublic class MainDefaultActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //region views\r\n    private  ImageView imageHome;\r\n    private  Toolbar Toolbar;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private  FrameLayout mainFramelayout;\r\n    private  DrawerLayout menuMainDrawer;\r\n    private  NavigationView mainmenuNavigation;\r\n\r\n\r\n    //End region views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\r\n        super.onCreate(savedInstanceState);\r\n\r\n        this.setContentView(R.layout.activity_main);\r\n\r\n        //check permissions first\r\n        cPermissions.checkPermissions(this, this);\r\n\r\n         //set Crashlytics, otherwise Firebase wont work\r\n        FirebaseAnalytics.getInstance(this);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        // Standard methods to initialize the Activity\r\n        this.mActivityInitialize();\r\n\r\n        cPower.pRegisterPowerConnectReceiver();\r\n        cPower.pRegisterPowerLevelChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cPower.pUnregisterConnectPowerReceiver();\r\n        cPower.pUnregisterPowerLevelChangedReceiver();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int pvRequestCodeInt, int pvResultCodeInt, Intent data) {\r\n\r\n        super.onActivityResult(pvRequestCodeInt, pvResultCodeInt, data);\r\n        if (pvRequestCodeInt == cPublicDefinitions.CHANGELANGUAGE_REQUESTCODE) {\r\n            //we've changed the language, or not, who cares, but go back to language\r\n            this.setTitle(R.string.screentitle_language);\r\n            this.toolbarTitle.setText(R.string.screentitle_language);\r\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n            transaction.replace(R.id.mainFramelayout, new LanguageFragment());\r\n            transaction.commit();\r\n        }\r\n\r\n        //internet set?\r\n        if (pvRequestCodeInt == cPublicDefinitions.ACTIVITY_WIFI_SETTINGS) {\r\n\r\n            if (!cConnection.isInternetConnectedBln()) {\r\n                cUserInterface.pCheckAndCloseOpenDialogs();\r\n                final NoConnectionFragment noConnectionFragment = new NoConnectionFragment();\r\n                noConnectionFragment.setCancelable(true);\r\n                noConnectionFragment.show(((MainDefaultActivity) cAppExtension.context).getSupportFragmentManager(), \"NOCONNECTION\");\r\n                return;\r\n            }\r\n            try {\r\n                this.pLetsGetThisPartyStartedOrNot();\r\n            } catch (ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        //Set App Extensions\r\n        this.mSetAppExtensions();\r\n\r\n        //Find all views in Activity\r\n        this.mFindViews();\r\n\r\n        //set environment from preferences/by QR code\r\n        this.mSetEnviroment();\r\n\r\n        //Try to set the serialnumber\r\n        this.mSetSerialNumberIfPossible();\r\n\r\n        //Set darmode\r\n        this.pChangeDarkModus();\r\n\r\n        // Show and set toolbar\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_main));\r\n\r\n        // Don't do shit\r\n        this.mFieldsInitialize();\r\n\r\n        // Set event listeners\r\n        this.mSetListeners();\r\n\r\n        // Init screen\r\n        this.mInitScreen();\r\n\r\n        this.mCheckProGlove();\r\n\r\n        //Set Proglove Screen\r\n        this.mSetProGloveScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.Toolbar = findViewById(R.id.toolbar);\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.imageHome = findViewById(R.id.imageHome);\r\n\r\n        this.mainFramelayout = findViewById(R.id.mainFramelayout);\r\n        this.menuMainDrawer = findViewById(R.id.menuMainDrawer);\r\n        this.mainmenuNavigation = findViewById(R.id.mainMenuNavigation);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitle) {\r\n\r\n        this.toolbarTitle.setText(pvScreenTitle);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        this.Toolbar.showOverflowMenu();\r\n\r\n        setSupportActionBar(this.Toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_black_24dp);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        Boolean useProGlove = cSharedPreferences.pGetSharedPreferenceBoolean(SHAREDPREFERENCE_USEPROGLOVE, false);\r\n        if (!useProGlove) {\r\n            View proGloveView =  findViewById(R.id.action_proglove);\r\n            if (proGloveView != null) {\r\n                proGloveView.setVisibility(View.GONE);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetHomeListener();\r\n        this.mSetMenuListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n    private void mCheckProGlove() {\r\n        cProGlove myproglove= new cProGlove();\r\n        if ( cSharedPreferences.pGetSharedPreferenceBoolean(SHAREDPREFERENCE_USEPROGLOVE, false)){\r\n            if (!myproglove.pIsProgloveInstalled()) {\r\n                cUserInterface.pShowToastMessage(getString(R.string.proglove_not_installed), R.raw.headsupsound);\r\n            }\r\n        }\r\n    }\r\n    private void mSetProGloveScreen() {\r\n        if (cEnvironment.currentEnvironment != null){\r\n            String proglovedata = \"1|\" + getResources().getString(R.string.proglove_header_scansuite) + \"|\" + cEnvironment.currentEnvironment.getDescriptionStr() + \"|2|\" + getResources().getString(R.string.proglove_on_terminal) + \"|\" + getResources().getString(R.string.proglove_press_begin_scanner);\r\n            cProGlove myproglove= new cProGlove();\r\n            myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_2FIELD_2HEADER, proglovedata, true, 0, 0);\r\n        }\r\n    }\r\n\r\n    //Region Public Methods\r\n    public void pLetsGetThisPartyStartedOrNot() throws ExecutionException {\r\n\r\n        // If scanner had different interface version then web service, then stop\r\n        if (!cWebservice.pWebserviceIsAvailableAndRightVersionBln()) {\r\n\r\n            cAppExtension.activity.runOnUiThread(this::mShowHomeFragment);\r\n            return;\r\n        }\r\n\r\n        // If we already have everything we need, then next fragment\r\n        if (this.mAllBasicsAvailableBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n\r\n        // Get all basic data via webservice, then next fragment\r\n        if (this.mGetBasicDataBln()) {\r\n            this.mStartLoginActivity();\r\n        }\r\n    }\r\n\r\n    public void pChangeDarkModus() {\r\n                if (cSharedPreferences.getDarkModusBln()) {\r\n                    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\r\n                    return;\r\n                }\r\n\r\n                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\r\n    }\r\n\r\n    public  void pSetChosenEnvironment() {\r\n\r\n        Fragment FragmentFrg = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n        if (FragmentFrg != null) {\r\n            DialogFragment DialogFragmentDfr = (DialogFragment) FragmentFrg;\r\n            DialogFragmentDfr.dismiss();\r\n        }\r\n\r\n        toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        cUserInterface.pShowSnackbarMessage(mainFramelayout, cAppExtension.context.getString(R.string.environment_set_to_parameter1, cEnvironment.currentEnvironment.getDescriptionStr()), R.raw.goodsound, false );\r\n\r\n    }\r\n\r\n    public void pPasswordCancelled() {\r\n        this.mShowHomeFragment();\r\n    }\r\n\r\n    public  void pPasswordSuccess(){\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n    private boolean mAllBasicsAvailableBln() {\r\n        return cScannerLogon.scannerLoggedOnBln &&\r\n                cUser.usersAvailableBln &&\r\n                cBarcodeLayout.barcodeLayoutsAvailableBln &&\r\n                cSetting.settingsAvailableBln &&\r\n                cBranch.BranchesAvailableBln &&\r\n                cShippingAgent.shippingAgentsAvailableBln &&\r\n                cShippingAgentService.shippingAgentServicesAvailableBln &&\r\n                cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln &&\r\n                cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln &&\r\n                cItemProperty.itemPropertiesAvaliableBln &&\r\n                cPropertyGroup.propertyGroupsAvailableBln &&\r\n                cCompositeBarcode.compositeBarcodesAvailableBln &&\r\n                cScanner.scannersAvailableBln &&\r\n                cCustomAuthorisation.customAutorisationsAvailableBln &&\r\n                cTranslation.translationsAvailableBln &&\r\n                cStockOwner.stockOwnersAvailableBln;\r\n    }\r\n\r\n    private boolean mGetBasicDataBln() throws ExecutionException {\r\n\r\n        if (!cScannerLogon.pScannerLogonViaWebserviceBln()) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cScannerLogon.currentScannerLogon.pScannerVersionCheckBln(mainFramelayout)){\r\n            return  false;\r\n        }\r\n\r\n        if (!cSetting.pGetSettingsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBranch.pGetBranchesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cUser.pGetUsersViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cBarcodeLayout.pGetBarcodeLayoutsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cItemProperty.pGetItemPropertiesViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cLabelTemplate.pGetLabelTemplatesViaWebserviceBln()){\r\n            return false;\r\n        }\r\n\r\n        if (!cPropertyGroup.pGetPropertyGroupsViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!cCompositeBarcode.pGetCompositeBarcodesViaWebserviceBln(true)) {\r\n            return  false;\r\n        }\r\n\r\n        if (!mGetshippingInfoViawebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cScanner.pGetScannersViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cCustomAuthorisation.pGetCustomAutorisationsViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)){\r\n            return false;\r\n        }\r\n\r\n        if (!cTranslation.pGetTranslationsViaWebserviceBln()) {\r\n            return false;\r\n        }\r\n\r\n        if (!cStockOwner.pStockOwnerViaWebserviceBln(true)) {\r\n            return false;\r\n        }\r\n\r\n        return  mAllBasicsAvailableBln();\r\n\r\n    }\r\n\r\n    private boolean mGetshippingInfoViawebserviceBln() throws ExecutionException {\r\n\r\n        cShippingAgent.pGetShippingAgentsViaWebservice(true);\r\n        if (!cShippingAgent.shippingAgentsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentService.pGetShippingAgentServicesViaWebservice(true);\r\n        if (!cShippingAgentService.shippingAgentServicesAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentServiceShippingUnit.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        if (!cShippingAgentServiceShippingUnit.shippingAgentServiceShippingUnitsAvailableBln) {\r\n            return false;\r\n        }\r\n\r\n        cShippingAgentShipMethod.pGetShippingAgentServicesShippingUnitsViaWebservice(true);\r\n        return cShippingAgentShipMethod.ShippingAgentServiceShippingMethodsAvailableBln;\r\n    }\r\n\r\n    public void pSetAddedEnvironment() {\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        this.mShowEnvironmentFragment();\r\n    }\r\n\r\n    private void mSetEnviroment(){\r\n        cEnvironment.pSetEnvironment();\r\n        if (cEnvironment.currentEnvironment != null) {\r\n            toolbarSubtext.setText(cEnvironment.currentEnvironment.getDescriptionStr());\r\n        }\r\n    }\r\n\r\n    private void mShowHomeFragment() {\r\n        this.imageHome.setVisibility(View.GONE);\r\n        this.toolbarTitle.setText(R.string.screentitle_main);\r\n        this.toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n        FragmentTransaction transaction =  getSupportFragmentManager().beginTransaction();\r\n        transaction.replace(R.id.mainFramelayout, new HomeFragment());\r\n        transaction.commit();\r\n    }\r\n\r\n    private  void mShowEnvironmentFragment() {\r\n        final EnvironmentFragment environmentFragment = new EnvironmentFragment();\r\n        environmentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ENVIRONMENTFRAGMENT_TAG);\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n\r\n    //Region Listeners\r\n    private void mSetHomeListener() {\r\n        this.imageHome.setOnClickListener(view -> mShowHomeFragment());\r\n    }\r\n\r\n\r\n    private void mSetMenuListener() {\r\n        this.mainmenuNavigation.setNavigationItemSelectedListener(menuItem -> {\r\n            Fragment selectedFragment = null;\r\n            switch (menuItem.getItemId()) {\r\n\r\n                case R.id.action_home:\r\n                    imageHome.setVisibility(View.GONE);\r\n                    selectedFragment = new HomeFragment();\r\n                    toolbarTitle.setText(R.string.screentitle_main);\r\n                    toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                    break;\r\n\r\n                case R.id.action_settings:\r\n                    imageHome.setVisibility(View.VISIBLE);\r\n                    toolbarTitle.setText(R.string.screentitle_settings);\r\n                    toolbarImage.setImageResource(R.drawable.ic_settings);\r\n                    break;\r\n\r\n                case R.id.action_support:\r\n                    imageHome.setVisibility(View.VISIBLE);\r\n                    selectedFragment = new SupportFragment();\r\n                    toolbarTitle.setText(R.string.screentitle_support);\r\n                    toolbarImage.setImageResource(R.drawable.ic_support);\r\n                    break;\r\n\r\n                case R.id.action_language:\r\n                    imageHome.setVisibility(View.VISIBLE);\r\n                    selectedFragment = new LanguageFragment();\r\n                    toolbarTitle.setText(R.string.screentitle_language);\r\n                    toolbarImage.setImageResource(R.drawable.ic_language);\r\n                    break;\r\n\r\n                case R.id.action_datetime:\r\n                    imageHome.setVisibility(View.VISIBLE);\r\n                    selectedFragment = new DateTimeFragment();\r\n                    toolbarTitle.setText(R.string.screentitle_datetime);\r\n                    toolbarImage.setImageResource(R.drawable.ic_calendar);\r\n                    break;\r\n                case R.id.action_environments:\r\n                    cUserInterface.pShowpasswordDialog(cAppExtension.context.getString(R.string.password_header_default) ,cAppExtension.context.getString(R.string.dialog_password_enviroment_text),false);\r\n                    break;\r\n\r\n                case R.id.action_proglove:\r\n                    imageHome.setVisibility(View.GONE);\r\n                    cProGlove myProGlove = new cProGlove();\r\n                    myProGlove.pShowPairGlove();\r\n                    return true;\r\n\r\n                case R.id.action_close_application:\r\n\r\n                   finishAffinity();\r\n\r\n\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                        finishAndRemoveTask();\r\n                    }\r\n\r\n                    System.exit(0);\r\n                    return true;\r\n\r\n                default:\r\n                    imageHome.setVisibility(View.GONE);\r\n                    selectedFragment = new HomeFragment();\r\n                    toolbarTitle.setText(R.string.screentitle_main);\r\n                    toolbarImage.setImageResource(R.drawable.ic_welcome);\r\n                    break;\r\n            }\r\n\r\n            if (selectedFragment != null) {\r\n                FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\r\n                transaction.replace(R.id.mainFramelayout, selectedFragment);\r\n                transaction.commit();\r\n            }\r\n\r\n            // deselect everything\r\n            int size = mainmenuNavigation.getMenu().size();\r\n            for (int i = 0; i < size; i++) {\r\n                mainmenuNavigation.getMenu().getItem(i).setChecked(false);\r\n            }\r\n\r\n            // set item as selected to persist highlight\r\n            menuItem.setChecked(true);\r\n            // close drawer when item is tapped\r\n            menuMainDrawer.closeDrawers();\r\n            return true;\r\n        });\r\n    }\r\n\r\n    //endregion Listeners\r\n\r\n    //region Event handlers\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        if (item.getItemId() == android.R.id.home) {\r\n            this.menuMainDrawer.openDrawer(GravityCompat.START);\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void mStartLoginActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, LoginActivity.class);\r\n        cAppExtension.context.startActivity(intent);\r\n    }\r\n\r\n    private void mSetSerialNumberIfPossible(){\r\n\r\n        if (!cSharedPreferences.getSerialNumerStr().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && !cDeviceInfo.getSerialnumberStr().isEmpty()) {\r\n            cSharedPreferences.setSerialNumerStr(cDeviceInfo.getSerialnumberStr());\r\n        }\r\n\r\n    }\r\n\r\n    private void mShowPairGlove() {\r\n        Intent i = new Intent();\r\n        i.setAction(cPublicDefinitions.PROGLOVE_CONNECT_ACTION);\r\n        cAppExtension.context.sendBroadcast(i);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(revision bb390e9cbb523d22c0741f7dbef629b3a6c61030)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/General/MainDefaultActivity.java	(date 1625143035330)
@@ -1,5 +1,6 @@
 package nl.icsvertex.scansuite.Activities.General;
 
+import android.annotation.SuppressLint;
 import android.content.Intent;
 import android.os.Build;
 import android.os.Bundle;
@@ -22,6 +23,7 @@
 import com.google.android.material.navigation.NavigationView;
 import com.google.firebase.analytics.FirebaseAnalytics;
 
+import java.lang.reflect.Method;
 import java.util.concurrent.ExecutionException;
 
 import ICS.Environments.cEnvironment;
@@ -256,6 +258,7 @@
                 proGloveView.setVisibility(View.GONE);
             }
         }
+        cSharedPreferences.setSerialNumerStr(this.mGetSerialNumberStr());
     }
 
     @Override
@@ -613,4 +616,37 @@
         cAppExtension.context.sendBroadcast(i);
     }
 
+    @SuppressLint("HardwareIds")
+    private String mGetSerialNumberStr() {
+        String serialNumberStr;
+
+        try {
+            @SuppressLint("PrivateApi") Class<?> c = Class.forName("android.os.SystemProperties");
+            Method get = c.getMethod("get", String.class);
+
+            serialNumberStr = (String) get.invoke(c, "gsm.sn1");
+            assert serialNumberStr != null;
+            if (serialNumberStr.equals(""))
+                serialNumberStr = (String) get.invoke(c, "ril.serialnumber");
+            assert serialNumberStr != null;
+            if (serialNumberStr.equals(""))
+                serialNumberStr = (String) get.invoke(c, "ro.serialno");
+            assert serialNumberStr != null;
+            if (serialNumberStr.equals(""))
+                serialNumberStr = (String) get.invoke(c, "sys.serialnumber");
+            assert serialNumberStr != null;
+            if (serialNumberStr.equals(""))
+                serialNumberStr = Build.SERIAL;
+
+            // If none of the methods above worked
+            if (serialNumberStr.equals(""))
+                serialNumberStr = null;
+        } catch (Exception e) {
+            e.printStackTrace();
+            serialNumberStr = null;
+        }
+
+        return serialNumberStr;
+    }
+
 }
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderSelectActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Ship;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.app.ActivityOptionsCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.util.Pair;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Licenses.cLicense;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Picken.Pickorders.cPickorderAdapter;\r\nimport SSU_WHS.Picken.Shipment.cShipment;\r\nimport nl.icsvertex.scansuite.Activities.General.MenuActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.FilterOrderLinesFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoOrdersFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\n\r\npublic class ShiporderSelectActivity extends AppCompatActivity implements iICSDefaultActivity, SwipeRefreshLayout.OnRefreshListener {\r\n\r\n    //Region Public Properties\r\n\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    // Region Views\r\n\r\n    //Region Private Properties\r\n\r\n    // Region Views\r\n\r\n    private  SearchView recyclerSearchView;\r\n    private  ImageView toolbarImage;\r\n    private  TextView toolbarTitle;\r\n    private  TextView toolbarSubTitle;\r\n    private  RecyclerView recyclerViewShiporders;\r\n\r\n    private  ConstraintLayout constraintFilterOrders;\r\n    private  SwipeRefreshLayout swipeRefreshLayout;\r\n    private  BottomSheetBehavior bottomSheetBehavior;\r\n    private  ImageView imageViewFilter;\r\n\r\n    cPickorderAdapter pickorderAdapter;\r\n    cPickorderAdapter getPickorderAdapter(){\r\n        if (this.pickorderAdapter == null) {\r\n            this.pickorderAdapter = new cPickorderAdapter();\r\n        }\r\n\r\n        return  this.pickorderAdapter;\r\n    }\r\n\r\n    // End Region Views\r\n\r\n    //End Region Private Properties\r\n\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_shiporder_select);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        this.mActivityInitialize();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n        if (pvMenuItem.getItemId() == android.R.id.home) {\r\n            mTryToLeaveActivity();\r\n            return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        this.mTryToLeaveActivity();\r\n    }\r\n\r\n    @Override\r\n    public void onRefresh() {\r\n        this.pFillOrders();\r\n\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_shiporderselect));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n        this.recyclerViewShiporders = findViewById(R.id.recyclerViewShiporders);\r\n        this.recyclerSearchView = findViewById(R.id.recyclerSearchView);\r\n        this.imageViewFilter = findViewById(R.id.imageViewFilter);\r\n        this.constraintFilterOrders = findViewById(R.id.constraintFilterOrders);\r\n        this.swipeRefreshLayout = findViewById(R.id.swipeRefreshLayout);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubTitle.setText(cUser.currentUser.currentBranch.getBranchNameStr());\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        this.mInitBottomSheet();\r\n        this.mResetCurrents();\r\n        this.pFillOrders();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetSearchListener();\r\n        this.mSetFilterListener();\r\n        this.mSetSwipeRefreshListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pFillOrders() {\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleFillOrders).start();\r\n\r\n\r\n    }\r\n\r\n    public  void pShiporderSelected(cPickorder pvPickorder) {\r\n\r\n\r\n        if (!mCheckOrderIsLockableBln(pvPickorder)) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.lockorder_order_assigned_to_another_user), R.raw.badsound);\r\n            cUserInterface.pCheckAndCloseOpenDialogs();\r\n            return;\r\n        }\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        //Set the current pickorder\r\n        cPickorder.currentPickOrder = pvPickorder;\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Ordernumber\", cPickorder.currentPickOrder.getOrderNumberStr());\r\n\r\n        new Thread(this::mHandleShipOrderSelected).start();\r\n\r\n\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Try to find a pickorder with the current location and open it\r\n        cPickorder pickorder =  cPickorder.pGetPackAndShipOrderByCurrentLocationStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n        if (pickorder != null) {\r\n            this.pShiporderSelected(pickorder);\r\n            return;\r\n        }\r\n\r\n        //Set filter with scanned barcodeStr if there is no prefix\r\n        if (!cRegex.pHasPrefix(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n            //no prefix, fine\r\n            this.recyclerSearchView.setQuery(pvBarcodeScan.getBarcodeOriginalStr(), true);\r\n            this.recyclerSearchView.callOnClick();\r\n            return;\r\n        }\r\n\r\n        // If there is a prefix, check if its a salesorder, then remove prefix en set filter\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.DOCUMENT)) {\r\n            //has prefix, is salesorderStr\r\n           this.recyclerSearchView.setQuery(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()), true);\r\n           this.recyclerSearchView.callOnClick();\r\n           return;\r\n        }\r\n\r\n        //If there is a prefix but it's not a salesorder tgen do nope\r\n        cUserInterface.pDoNope(this.recyclerSearchView, true, true);\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Method\r\n\r\n    private  void mHandleFillOrders() {\r\n\r\n        //First get all sortorders\r\n        if (!cPickorder.pGetPackAndShipOrdersViaWebserviceBln(true, \"\")) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_get_pickorders_failed), \"\", true, true);\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.allPickordersObl == null || cPickorder.allPickordersObl.size() == 0) {\r\n            this.mShowNoOrdersIcon(true);\r\n            return;\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            //Fill and show recycler\r\n            mSetSortorderRecycler(cPickorder.allPickordersObl);\r\n            mShowNoOrdersIcon(false);\r\n        });\r\n\r\n    }\r\n\r\n    private  void mHandleShipOrderSelected() {\r\n\r\n        cResult hulpResult;\r\n\r\n\r\n        //Try to lock the pickorder\r\n\r\n        if (!this.mTryToLockOrderBln()) {\r\n            this.pFillOrders();\r\n            return;\r\n        }\r\n\r\n        //Delete the detail, so we can get them from the webservice\r\n        if (!cPickorder.currentPickOrder.pDeleteDetailsBln()) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_couldnt_delete_details));\r\n            return;\r\n\r\n        }\r\n\r\n        hulpResult = cPickorder.currentPickOrder.pGetShipmentDetailsRst();\r\n        if (!hulpResult.resultBln) {\r\n            this.mStepFailed(hulpResult.messagesStr());\r\n            return;\r\n        }\r\n\r\n        // If everything went well, then start Lines Activity\r\n        cAppExtension.activity.runOnUiThread(this::mShowShipLinesActivity);\r\n\r\n    }\r\n\r\n    private void mSetSearchListener() {\r\n        //make whole view clickable\r\n        this.recyclerSearchView.setOnClickListener(view -> recyclerSearchView.setIconified(false));\r\n\r\n        //query entered\r\n        this.recyclerSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String s) {\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String pvQueryTextStr) {\r\n                mApplyFilter();\r\n                getPickorderAdapter().pSetFilter((pvQueryTextStr));\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetFilterListener() {\r\n        this.imageViewFilter.setOnClickListener(view -> mShowHideBottomSheet(bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_HIDDEN || bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_COLLAPSED));\r\n    }\r\n\r\n    private void mSetSwipeRefreshListener() {\r\n        this.swipeRefreshLayout.setOnRefreshListener(this);\r\n        this.swipeRefreshLayout.setColorSchemeColors(getResources().getColor(R.color.colorAccent), getResources().getColor(R.color.colorActive), getResources().getColor(R.color.colorPrimary));\r\n    }\r\n\r\n    private void mInitBottomSheet() {\r\n\r\n        this.bottomSheetBehavior = BottomSheetBehavior.from(this.constraintFilterOrders);\r\n        this.bottomSheetBehavior.setHideable(true);\r\n        this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);\r\n        this.bottomSheetBehavior.addBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {\r\n            @Override\r\n            public void onStateChanged(@NonNull View pvBottomSheet, int pvNewStateInt) {\r\n                if (pvNewStateInt == BottomSheetBehavior.STATE_COLLAPSED) {\r\n                    mApplyFilter();\r\n                }\r\n                if (pvNewStateInt == BottomSheetBehavior.STATE_HIDDEN) {\r\n                    mApplyFilter();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onSlide(@NonNull View view, float v) {\r\n\r\n            }\r\n        });\r\n\r\n        this.mFillBottomSheet();\r\n    }\r\n\r\n    private void mShowHideBottomSheet(Boolean pvShowBln) {\r\n\r\n        if (pvShowBln) {\r\n            this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n            return;\r\n        }\r\n\r\n        this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);\r\n\r\n    }\r\n\r\n    private void mApplyFilter() {\r\n\r\n        List<cPickorder> filteredPicksObl;\r\n\r\n        this.mShowThatFiltersInUse(cSharedPreferences.userShipFilterBln());\r\n\r\n        filteredPicksObl = cPickorder.pGetPicksWithFilterFromDatabasObl();\r\n        if (filteredPicksObl.size() == 0) {\r\n            return;\r\n        }\r\n\r\n        this.mSetSortorderRecycler(filteredPicksObl);\r\n    }\r\n\r\n    private void mShowThatFiltersInUse(Boolean pvFiltersInUseBln) {\r\n        if (pvFiltersInUseBln) {\r\n            this.imageViewFilter.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_filter_filled_black_24dp));\r\n        } else {\r\n            this. imageViewFilter.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_filter_black_24dp));\r\n        }\r\n    }\r\n\r\n    private void mFillBottomSheet() {\r\n        cAppExtension.fragmentManager.beginTransaction().replace(R.id.constraintFilterOrders, new FilterOrderLinesFragment()).commit();\r\n    }\r\n\r\n    private void mResetCurrents() {\r\n\r\n        //Reset all current objects\r\n        cPickorder.currentPickOrder = null;\r\n        cPickorderLine.currentPickOrderLine = null;\r\n        cPickorderBarcode.currentPickorderBarcode = null;\r\n        cWorkplace.currentWorkplace = null;\r\n        cShipment.allShipmentsObl = null;\r\n    }\r\n\r\n    private  void mShowNoOrdersIcon(final Boolean pvShowBln) {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n\r\n            cUserInterface.pHideGettingData();\r\n\r\n            if (pvShowBln) {\r\n\r\n                recyclerViewShiporders.setVisibility(View.INVISIBLE);\r\n                FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                NoOrdersFragment fragment = new NoOrdersFragment();\r\n                fragmentTransaction.replace(R.id.container, fragment);\r\n                fragmentTransaction.commit();\r\n                return;\r\n            }\r\n\r\n            recyclerViewShiporders.setVisibility(View.VISIBLE);\r\n\r\n            List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n            for (Fragment fragment : fragments) {\r\n                if (fragment instanceof NoOrdersFragment) {\r\n                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                    fragmentTransaction.remove(fragment);\r\n                    fragmentTransaction.commit();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private  void mSetSortorderRecycler(List<cPickorder> pvPickorderObl) {\r\n\r\n        this.swipeRefreshLayout.setRefreshing(false);\r\n\r\n        if (pvPickorderObl == null || pvPickorderObl.size() == 0) {\r\n            return;\r\n        }\r\n\r\n        for (Fragment fragment : cAppExtension.fragmentManager.getFragments()) {\r\n            if (fragment instanceof NoOrdersFragment) {\r\n                cAppExtension.fragmentManager.beginTransaction().remove(fragment).commit();\r\n            }\r\n        }\r\n\r\n        this.recyclerViewShiporders.setHasFixedSize(false);\r\n        this.recyclerViewShiporders.setAdapter(this.getPickorderAdapter());\r\n        this.recyclerViewShiporders.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n\r\n        this.getPickorderAdapter().pFillData(pvPickorderObl);\r\n    }\r\n\r\n    private  boolean mCheckOrderIsLockableBln(cPickorder pvPickorder) {\r\n\r\n        //If there is no assigned user, then always oke\r\n        if (pvPickorder.getAssignedUserIdStr().isEmpty()) {\r\n            return true;\r\n        }\r\n\r\n        //If you are allowed to unlock busy order, then no problem\r\n        if (cSetting.GENERIC_UNLOCK_BUSY_ORDERS_ALLOWED()) {\r\n            return true;\r\n        }\r\n\r\n        return cUser.currentUser.getUsernameStr().equalsIgnoreCase(pvPickorder.getAssignedUserIdStr());\r\n\r\n\r\n    }\r\n\r\n    private  boolean mTryToLockOrderBln() {\r\n\r\n        cResult hulpResult;\r\n        hulpResult = cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown) {\r\n            mStepFailed(hulpResult.messagesStr());\r\n            return false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if ( hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete ||\r\n             hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart) {\r\n\r\n\r\n            //If we got any comments, show them\r\n            if (cPickorder.currentPickOrder.pFeedbackCommentObl() != null && cPickorder.currentPickOrder.pFeedbackCommentObl().size() > 0) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mStepFailed(String pvErrorMessageStr) {\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, cPickorder.currentPickOrder.getOrderNumberStr(), true, true);\r\n        cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        cPickorder.currentPickOrder = null;\r\n    }\r\n\r\n    private  void mShowCommentsFragment(List<cComment> pvDataObl, String pvTitleStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(cPublicDefinitions.KEY_COMMENTHEADER, pvTitleStr);\r\n\r\n        CommentFragment commentFragment = new CommentFragment(pvDataObl);\r\n        commentFragment.setArguments(bundle);\r\n\r\n        commentFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.COMMENTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private  void mShowShipLinesActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, ShiporderLinesActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void mTryToLeaveActivity() {\r\n\r\n        this.mReleaseLicense();\r\n\r\n        Intent intent = new Intent(cAppExtension.context, MenuActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void mReleaseLicense() {\r\n\r\n        if (!cLicense.pReleaseLicenseViaWebserviceBln()) {\r\n            cUserInterface.pShowSnackbarMessage(recyclerViewShiporders, cAppExtension.activity.getString(R.string.message_license_release_error), null, false);\r\n        }\r\n\r\n        cLicense.currentLicenseEnu = cLicense.LicenseEnu.Unknown;\r\n\r\n    }\r\n}\r\n\r\n//End Region Private Methods\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderSelectActivity.java	(revision bb390e9cbb523d22c0741f7dbef629b3a6c61030)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Ship/ShiporderSelectActivity.java	(date 1625144268233)
@@ -50,6 +50,7 @@
 import SSU_WHS.Picken.Pickorders.cPickorderAdapter;
 import SSU_WHS.Picken.Shipment.cShipment;
 import nl.icsvertex.scansuite.Activities.General.MenuActivity;
+import nl.icsvertex.scansuite.Activities.Pick.PickorderLinesActivity;
 import nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.FilterOrderLinesFragment;
 import nl.icsvertex.scansuite.Fragments.Dialogs.NoOrdersFragment;
@@ -445,6 +446,8 @@
         cPickorderBarcode.currentPickorderBarcode = null;
         cWorkplace.currentWorkplace = null;
         cShipment.allShipmentsObl = null;
+        PickorderLinesActivity.shipFromPickBln = false;
+
     }
 
     private  void mShowNoOrdersIcon(final Boolean pvShowBln) {
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLinesActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Pick;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.Scanning.cProGlove;\r\nimport ICS.Utils.cConnection;\r\nimport ICS.Utils.cNoSwipeViewPager;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.Article.cArticle;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport nl.icsvertex.scansuite.Activities.Ship.ShiporderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Sort.SortorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Activities.Store.StoreorderLinesActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.AcceptRejectFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.BinItemsFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CurrentLocationFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.ItemStockFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintBinLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.PrintItemLabelFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.SendingFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.StepDoneFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkplaceFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Pick.PickorderLinesToPickFragment;\r\nimport nl.icsvertex.scansuite.PagerAdapters.PickorderLinesPagerAdapter;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.Scanning.cProGlove.PROGLOVE_DISPLAY_TEMPLATE_2FIELD_2HEADER;\r\nimport static ICS.Utils.Scanning.cProGlove.PROGLOVE_FEEDBACK_NEGATIVE;\r\nimport static ICS.Utils.Scanning.cProGlove.PROGLOVE_FEEDBACK_PURPLE;\r\nimport static SSU_WHS.General.cPublicDefinitions.SHAREDPREFERENCE_USEPROGLOVE;\r\n\r\npublic class PickorderLinesActivity extends AppCompatActivity implements iICSDefaultActivity {\r\n\r\n    //Region Public Properties\r\n    public static Fragment currentLineFragment;\r\n    public static boolean startedViaOrderSelectBln;\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    //Region Views\r\n    private TextView quantityPickordersText;\r\n    private TabLayout pickorderLinesTabLayout;\r\n    private cNoSwipeViewPager pickorderLinesViewPager;\r\n    private ImageView imageButtonComments;\r\n\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private  TextView toolbarSubtext;\r\n\r\n    private ImageView imageButtonCloseOrder;\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView actionMenuNavigation;\r\n\r\n    //End Region Views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_pickorderlines);\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n                super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        this.mActivityInitialize();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cConnection.pRegisterWifiChangedReceiver();\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        try {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n            cConnection.pUnregisterWifiChangedReceiver();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_pick,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n        //  invalidateOptionsMenu();\r\n\r\n        MenuItem item_bin_stock = pvMenu.findItem(R.id.item_bin_stock);\r\n        MenuItem item_article_stock = pvMenu.findItem(R.id.item_article_stock);\r\n\r\n        item_bin_stock.setVisible(cPickorderLine.currentPickOrderLine != null);\r\n        item_article_stock.setVisible(cPickorderLine.currentPickOrderLine != null);\r\n\r\n        if (cSetting.GENERIC_PRINT_BINLABEL()){\r\n            MenuItem item_print_bin = pvMenu.findItem(R.id.item_print_bin);\r\n            item_print_bin.setVisible(cPickorderLine.currentPickOrderLine != null);\r\n        }\r\n        if (cSetting.GENERIC_PRINT_ITEMLABEL()){\r\n            MenuItem item_print_item = pvMenu.findItem(R.id.item_print_item);\r\n            item_print_item.setVisible(cPickorderLine.currentPickOrderLine != null);\r\n        }\r\n        MenuItem itemPairProglove = pvMenu.findItem(R.id.item_pair_proglove);\r\n        if ( cSharedPreferences.pGetSharedPreferenceBoolean(SHAREDPREFERENCE_USEPROGLOVE, false)) {\r\n            if (itemPairProglove != null) {\r\n                itemPairProglove.setVisible(true);\r\n            }\r\n        }\r\n\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n\r\n        DialogFragment selectedFragment = null;\r\n\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mTryToLeaveActivity();\r\n                return true;\r\n\r\n            case R.id.item_bin_stock:\r\n                selectedFragment = new BinItemsFragment(cPickorderLine.currentPickOrderLine.getBinCodeStr());\r\n                break;\r\n\r\n            case R.id.item_article_stock:\r\n\r\n                cArticle.currentArticle= cPickorder.currentPickOrder.articleObl.get(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n                selectedFragment = new ItemStockFragment();\r\n                break;\r\n\r\n            case R.id.item_print_bin:\r\n                selectedFragment = new PrintBinLabelFragment();\r\n                break;\r\n\r\n            case R.id.item_print_item:\r\n                if (cPickorderLine.currentPickOrderLine.pGetBarcodesObl()){\r\n                    cArticle.currentArticle= cPickorder.currentPickOrder.articleObl.get(cPickorderLine.currentPickOrderLine.getItemNoAndVariantStr());\r\n                    selectedFragment = new PrintItemLabelFragment();\r\n                }\r\n                else\r\n                {  cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.no_barcodes_availabe_for_this_line),null);}\r\n                break;\r\n            case R.id.item_pair_proglove:\r\n                cProGlove myProGlove = new cProGlove();\r\n                myProGlove.pShowPairGlove();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        // deselect everything\r\n        int size = actionMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            actionMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n\r\n        if (selectedFragment != null) {\r\n            selectedFragment.setCancelable(true);\r\n            selectedFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.BINITEMSFRAGMENT_TAG);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(pvMenuItem);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        mTryToLeaveActivity();\r\n    }\r\n\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetListeners();\r\n\r\n        if (cPickorder.currentPickOrder == null) {\r\n            return;\r\n        }\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_pickorderlines));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mInitScreen();\r\n\r\n        this.mSetProGloveScreen();\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubtext = findViewById(R.id.toolbarSubtext);\r\n\r\n        this.quantityPickordersText = findViewById(R.id.quantityPickordersText);\r\n        this.pickorderLinesTabLayout = findViewById(R.id.pickorderLinesTabLayout);\r\n        this.pickorderLinesViewPager = findViewById(R.id.pickorderLinesViewpager);\r\n\r\n        this.imageButtonComments = findViewById(R.id.imageButtonComments);\r\n        this.imageButtonCloseOrder = findViewById(R.id.imageButtonCloseOrder);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.actionMenuNavigation = findViewById(R.id.actionMenuNavigation);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n\r\n        this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);\r\n        this.toolbarTitle.setText(pvScreenTitleStr);\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubtext.setText(cPickorder.currentPickOrder.getOrderNumberStr());\r\n        this.toolbarSubtext.setSelected(true);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n\r\n        this.imageButtonCloseOrder.setVisibility(View.INVISIBLE);\r\n        this.mSetTabLayout();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetShowCommentListener();\r\n        this.mSetCloseOrderListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n        this.mShowComments();\r\n\r\n        //Call this here, because this is called everytime the activiy gets shown\r\n        this.pCheckAllDone();\r\n\r\n    }\r\n\r\n    private void mSetProGloveScreen() {\r\n        cProGlove myproglove= new cProGlove();\r\n        String proglovedata = \"1|\" + getString(R.string.proglove_header_order) + \"|\" + cPickorder.currentPickOrder.getOrderNumberStr() + \"|2|\" +  \"|\" + getString(R.string.proglove_scan_article_or_bin);\r\n        myproglove.pSendScreen(PROGLOVE_DISPLAY_TEMPLATE_2FIELD_2HEADER, proglovedata, true,0,0);\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pChangeTabCounterText(String pvTextStr){\r\n        this.quantityPickordersText.setText(pvTextStr);\r\n    }\r\n\r\n    public  void pPicklineSelected(cPickorderLine pvPickorderLine) {\r\n        cPickorderLine.currentPickOrderLine = pvPickorderLine;\r\n\r\n        if (PickorderLinesActivity.currentLineFragment instanceof  PickorderLinesToPickFragment) {\r\n            PickorderLinesToPickFragment pickorderLinesToPickFragment = (PickorderLinesToPickFragment)PickorderLinesActivity.currentLineFragment;\r\n            pickorderLinesToPickFragment.pSetChosenBinCode();\r\n        }\r\n\r\n    }\r\n\r\n    public  void pPicklineToResetSelected(cPickorderLine pvPickorderLine) {\r\n        cPickorderLine.currentPickOrderLine = pvPickorderLine;\r\n    }\r\n\r\n    public  void pSetCurrentLocation(String pvCurrentLocationStr) {\r\n\r\n        if (!cPickorder.currentPickOrder.pUpdateCurrentLocationBln(pvCurrentLocationStr)) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_currentlocation_could_not_update), \"\", true, false);\r\n\r\n            String proglovedata = \"1||\" + cAppExtension.context.getString(R.string.error_currentlocation_could_not_update);\r\n\r\n            cProGlove myproglove= new cProGlove();\r\n            myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 10, PROGLOVE_FEEDBACK_NEGATIVE);\r\n            return;\r\n        }\r\n\r\n        //Check if we are done\r\n        if (cPickorder.currentPickOrder.pGetLinesNotHandledFromDatabaseObl().size() > 0 ) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        //We are done\r\n        this.pPickingDone(\"\");\r\n\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan, Boolean pvBinSelectedBln) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        cResult hulpResult;\r\n\r\n        //BIN button has been pressed, so we already have a current line\r\n        if (pvBinSelectedBln) {\r\n\r\n            //Clear current barcodeStr\r\n            cPickorderBarcode.currentPickorderBarcode = null;\r\n\r\n            hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n            if (!hulpResult.resultBln) {\r\n                mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPicking);\r\n                cPickorderLine.currentPickOrderLine = null;\r\n                return;\r\n            }\r\n\r\n            //Set last selected index\r\n            cPickorder.currentPickOrder.lastSelectedIndexInt = cPickorder.currentPickOrder.pGetIndexOfNotHandledLineInt(cPickorderLine.currentPickOrderLine);\r\n\r\n            //we have a line to handle, so start Pick activity\r\n            this.mStartPickActivity();\r\n            return;\r\n        }\r\n\r\n        //If we scan a branch reset current branch\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.LOCATION)) {\r\n            cPickorder.currentPickOrder.scannedBranch  = null;\r\n        }\r\n\r\n        //If we still need a destination scan, make sure we scan this first\r\n        if (cPickorder.currentPickOrder.scannedBranch  == null && cPickorder.currentPickOrder.isPFBln() ) {\r\n            cResult hulpRst = this.mCheckDestionationRst(pvBarcodeScan);\r\n            if (! hulpRst.resultBln) {\r\n                cUserInterface.pDoExplodingScreen(hulpRst.messagesStr(),\"\", true, true);\r\n\r\n                String proglovedata = \"1||\" + hulpRst.messagesStr();\r\n\r\n                cProGlove myproglove= new cProGlove();\r\n                myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 10, PROGLOVE_FEEDBACK_NEGATIVE);\r\n            }\r\n\r\n            //If we scanned, refresh to pick fragment and leave this void\r\n            if (PickorderLinesActivity.currentLineFragment instanceof PickorderLinesToPickFragment ) {\r\n                PickorderLinesToPickFragment pickorderLinesToPickFragment = (PickorderLinesToPickFragment)PickorderLinesActivity.currentLineFragment;\r\n                pickorderLinesToPickFragment.pBranchScanned();\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Check if we have scanned a BIN and check if there are not handled linesInt for this BIN\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.BIN)) {\r\n\r\n            String barcodewithoutPrefix = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n            //Clear current barcodeStr\r\n            cPickorderBarcode.currentPickorderBarcode = null;\r\n\r\n            cPickorderLine.currentPickOrderLine = cPickorder.currentPickOrder.pGetNextLineToHandleForBin(barcodewithoutPrefix);\r\n            if (cPickorderLine.currentPickOrderLine == null) {\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.nothing_more_todo_for_bin), barcodewithoutPrefix);\r\n                return;\r\n            }\r\n\r\n            hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n            if (!hulpResult.resultBln) {\r\n                this.mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n                cPickorderLine.currentPickOrderLine = null;\r\n                return;\r\n            }\r\n\r\n            //Set last selected index\r\n            cPickorder.currentPickOrder.lastSelectedIndexInt = cPickorder.currentPickOrder.pGetIndexOfNotHandledLineInt(cPickorderLine.currentPickOrderLine);\r\n\r\n            //we have a line to handle, so start Pick activity\r\n            this.mStartPickActivity();\r\n            return;\r\n        }\r\n\r\n        //Check if we have scanned an ARTICLE and check if there are not handled linesInt for this ARTICLE\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.ARTICLE)) {\r\n\r\n            if (!cSetting.PICK_BIN_IS_ITEM() && !cPickorder.currentPickOrder.isSingleBinBln() ) {\r\n                //unknown scan\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.error_article_scan_not_allowed), pvBarcodeScan.getBarcodeOriginalStr());\r\n                return;\r\n            }\r\n\r\n            String barcodewithoutPrefix = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n            cPickorderLine pickorderLineMatched = cPickorder.currentPickOrder.pGetLineNotHandledByBarcode(pvBarcodeScan);\r\n\r\n            // Article always had BIN, so ARTICLE is EQUAL to BIN\r\n            if (pickorderLineMatched== null) {\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.nothing_more_todo_for_article), barcodewithoutPrefix);\r\n                return;\r\n            }\r\n\r\n            cPickorderLine.currentPickOrderLine = pickorderLineMatched;\r\n\r\n            cPickorderBarcode.currentPickorderBarcode = cPickorderBarcode.pGetPickbarcodeViaBarcode(pvBarcodeScan);\r\n            if (cPickorderBarcode.currentPickorderBarcode == null) {\r\n                this.mDoUnknownScan(cAppExtension.context.getString(R.string.nothing_more_todo_for_article), barcodewithoutPrefix);\r\n                return;\r\n            }\r\n\r\n            hulpResult = cPickorderLine.currentPickOrderLine.pLineBusyRst();\r\n            if (!hulpResult.resultBln) {\r\n                this.mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n                return;\r\n            }\r\n\r\n            //Set last selected index\r\n            cPickorder.currentPickOrder.lastSelectedIndexInt = cPickorder.currentPickOrder.pGetIndexOfNotHandledLineInt(cPickorderLine.currentPickOrderLine);\r\n\r\n            if (cPickorderLine.currentPickOrderLine.getQuantityDbl() == 1) {\r\n                if (cSetting.PICK_BIN_IS_ITEM() || cPickorder.currentPickOrder.isSingleBinBln() && !cPickorder.currentPickOrder.isPickAutoNextBln()) {\r\n                    //Add barcode\r\n                    cPickorderLine.currentPickOrderLine.pAddOrUpdateLineBarcode(cPickorderBarcode.currentPickorderBarcode.getQuantityPerUnitOfMeasureDbl());\r\n\r\n                    //Update orderline info (quantityDbl, timestamp, localStatusInt)\r\n                    cPickorderLine.currentPickOrderLine.pHandledIndatabase();\r\n                    this.mSendPickorderLine();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            cPickorder.currentPickOrder.pickorderBarcodeScanned = cPickorderBarcode.currentPickorderBarcode;\r\n\r\n            //we have a line to handle, so start Pick activity\r\n            this.mStartPickActivity();\r\n            return;\r\n        }\r\n\r\n        //unknown scan\r\n        this.mDoUnknownScan(cAppExtension.context.getString(R.string.error_unknown_barcode), pvBarcodeScan.getBarcodeOriginalStr());\r\n\r\n    }\r\n\r\n    public void pCheckAllDone() {\r\n\r\n        // If not everything is done, then leave\r\n        if (!this.mAllLinesDoneBln()) {\r\n            this.imageButtonCloseOrder.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        //All lines are done\r\n\r\n        if (!cConnection.isInternetConnectedBln()) {\r\n            cConnection.pShowTryAgainDialog();\r\n            this.imageButtonCloseOrder.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        // Show close button, so user can close the order manually\r\n        this.imageButtonCloseOrder.setVisibility(View.VISIBLE);\r\n\r\n        // If not everything is sent, then leave\r\n        if (!this.mCheckAndSentLinesBln()) {\r\n            return;\r\n        }\r\n\r\n        //We started an split order, so don't show done pop-up\r\n        if (PickorderLinesActivity.startedViaOrderSelectBln && !cPickorder.currentPickOrder.getDocumentStr().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.pQuantityHandledDbl() == 0) {\r\n            // Show order done fragment\r\n            this.mShowPickDoneFragment(false);\r\n            return;\r\n        }\r\n\r\n        // If there is no next step, then we are done\r\n        if (!cPickorder.currentPickOrder.isPackAndShipNeededBln() && !cPickorder.currentPickOrder.isBPBln() && !cPickorder.currentPickOrder.isBCBln()) {\r\n            if (!cPickorder.currentPickOrder.isPickActivityBinRequiredBln() ||\r\n                    !cPickorder.currentPickOrder.getCurrentLocationStr().isEmpty()) {\r\n\r\n                // Show pick done fragment\r\n                this.mShowPickDoneFragment(false);\r\n                return;\r\n            }\r\n\r\n            // Show order done fragment\r\n            this.mShowPickDoneFragment(true);\r\n        }\r\n\r\n        //Show Current Location fragment\r\n        if (cPickorder.currentPickOrder.isPickActivityBinRequiredBln() &&\r\n                cPickorder.currentPickOrder.getCurrentLocationStr().isEmpty()) {\r\n            // Show order done fragment\r\n            this.mShowCurrentLocationFragment();\r\n            return;\r\n        }\r\n\r\n        //We are done\r\n        this.pPickingDone(\"\");\r\n\r\n    }\r\n\r\n    public  void pPickingDone(String pvCurrentLocationStr) {\r\n\r\n        //If we received a current location, then update it via the webservice and locally\r\n        //If we didn't receive a location, then we picked 0 items, so it's oke\r\n\r\n\r\n        if (!pvCurrentLocationStr.isEmpty()){\r\n            if (!cPickorder.currentPickOrder.pUpdateCurrentLocationBln(pvCurrentLocationStr)) {\r\n                cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_currentlocation_could_not_update), \"\", true, false);\r\n\r\n                String proglovedata = \"1||\" + cAppExtension.context.getString(R.string.error_currentlocation_could_not_update);\r\n\r\n                cProGlove myproglove= new cProGlove();\r\n                myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 10, PROGLOVE_FEEDBACK_NEGATIVE);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.pQuantityHandledDbl() > 0 ) {\r\n            //Pick Transfer\r\n            if (cPickorder.currentPickOrder.isTransferBln()) {\r\n                if (!cPickorder.currentPickOrder.isSortableBln()&&\r\n                        cPickorder.currentPickOrder.isPickTransferAskWorkplaceBln() && cWorkplace.currentWorkplace == null ) {\r\n\r\n                    //If we don't need to ship, then we ask for a workplace now otherwise ask it later\r\n                    if (!cPickorder.currentPickOrder.isPackAndShipNeededBln()) {\r\n                        this.mShowWorkplaceFragment();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            else {\r\n\r\n                //Pick Sales\r\n\r\n                //Check if we need to select a workplaceStr\r\n                if (!cPickorder.currentPickOrder.isSortableBln()&&\r\n                   cPickorder.currentPickOrder.isPickSalesAskWorkplaceBln() && cWorkplace.currentWorkplace == null ) {\r\n\r\n                    //If we don't need to ship, then we ask for a workplace now otherwise ask it later\r\n                    if (!cPickorder.currentPickOrder.isPackAndShipNeededBln()) {\r\n                        this.mShowWorkplaceFragment();\r\n                        return;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n\r\n            //We did nothing, but still want to print manco documents\r\n            if (!cPickorder.currentPickOrder.getDocumentStr().isEmpty()) {\r\n                this.mShowWorkplaceFragment();\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.pClosePickAndDecideNextStep();\r\n\r\n    }\r\n\r\n    public  void pClosePickAndDecideNextStep(){\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandlePickFaseHandledAndDecideNextStep).start();\r\n\r\n    }\r\n\r\n    public  void pLeaveActivity(){\r\n\r\n        cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPicking);\r\n\r\n        //If activity bin is not required, then don't show the fragment\r\n        if (!cPickorder.currentPickOrder.isPickActivityBinRequiredBln() ||\r\n            cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 ||\r\n            !cPickorder.currentPickOrder.getCurrentLocationStr().isEmpty()) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        this.mShowCurrentLocationFragment();\r\n\r\n    }\r\n\r\n    public void pAskAbort() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(cAppExtension.context);\r\n        builder.setTitle(R.string.message_abort_header);\r\n        builder.setMessage(cAppExtension.activity.getString(R.string.message_abort_text));\r\n        builder.setPositiveButton(R.string.button_abort, (dialogInterface, i) -> {\r\n            cUserInterface.pCheckAndCloseOpenDialogs();\r\n            mAbortOrder();\r\n        });\r\n\r\n        builder.setNeutralButton(R.string.cancel, (dialogInterface, i) -> cUserInterface.pCheckAndCloseOpenDialogs());\r\n\r\n        builder.show();\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    //Region Private Methods\r\n\r\n    private  boolean mPickFaseHandledBln(){\r\n\r\n        cResult hulpResult;\r\n        hulpResult = new cResult();\r\n        hulpResult.resultBln = false;\r\n\r\n        hulpResult = cPickorder.currentPickOrder.pPickFaseHandledViaWebserviceRst();\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if ( hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown ) {\r\n            cUserInterface.pDoExplodingScreen(hulpResult.messagesStr(),\"\",true,true);\r\n\r\n            String proglovedata = \"1||\" + hulpResult.messagesStr();\r\n\r\n            cProGlove myproglove= new cProGlove();\r\n            myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 10, PROGLOVE_FEEDBACK_NEGATIVE);\r\n\r\n\r\n            return  false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Hold ) {\r\n\r\n            //If we got any comments, show them\r\n            if (cPickorder.currentPickOrder.pFeedbackCommentObl() != null && cPickorder.currentPickOrder.pFeedbackCommentObl().size() > 0 ) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return  false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mHandlePickFaseHandledAndDecideNextStep(){\r\n\r\n        if (!this.mPickFaseHandledBln()) {\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.isStorableBln()) {\r\n            this.mStoreNextStep();\r\n            return;\r\n        }\r\n\r\n\r\n        if (cPickorder.currentPickOrder.isSortableBln()) {\r\n            this.mSortNextStep();\r\n            return;\r\n        }\r\n\r\n        //If Pack or Ship is not required, then we are dibe\r\n        if (cPickorder.currentPickOrder.isPackAndShipNeededBln()) {\r\n            this.mPackAndShipNextStap();\r\n            return;\r\n        }\r\n\r\n        this.mStartOrderSelectActivity();\r\n\r\n    }\r\n\r\n    private void mChangeSelectedTab(TabLayout.Tab pvTab) {\r\n\r\n        switch (pvTab.getPosition()) {\r\n            case 0:\r\n                this.pChangeTabCounterText(cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityNotHandledDbl()) + \"/\" + cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityTotalDbl()));\r\n                break;\r\n            case 1:\r\n                this.pChangeTabCounterText(cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityHandledDbl()) + \"/\" + cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityTotalDbl()));\r\n                break;\r\n            case 2:\r\n                this.pChangeTabCounterText(cText.pDoubleToStringStr(cPickorder.currentPickOrder.pQuantityTotalDbl()));\r\n                break;\r\n            default:\r\n\r\n        }\r\n    }\r\n\r\n    private void mSetShowCommentListener() {\r\n        this.imageButtonComments.setOnClickListener(view -> mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackAndPickCommentObl(),\"\"));\r\n    }\r\n\r\n    private void mSetCloseOrderListener() {\r\n\r\n        this.imageButtonCloseOrder.setOnClickListener(view -> {\r\n\r\n          PickorderLinesActivity.startedViaOrderSelectBln = false;\r\n          pCheckAllDone();\r\n\r\n        });\r\n    }\r\n\r\n    private   void mDoUnknownScan(String pvErrorMessageStr, String pvScannedBarcodeStr) {\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, pvScannedBarcodeStr, true, true);\r\n\r\n        String proglovedata = \"1||\" + pvErrorMessageStr;\r\n\r\n        cProGlove myproglove= new cProGlove();\r\n        myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 10, PROGLOVE_FEEDBACK_NEGATIVE);\r\n\r\n    }\r\n\r\n    private  void mShowCommentsFragment(List<cComment> pvDataObl, String pvTitleStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(cPublicDefinitions.KEY_COMMENTHEADER, pvTitleStr);\r\n\r\n        CommentFragment commentFragment = new CommentFragment(pvDataObl);\r\n        commentFragment.setArguments(bundle);\r\n\r\n        commentFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.COMMENTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private  void mShowCurrentLocationFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        cUserInterface.pPlaySound(R.raw.goodsound, null);\r\n\r\n        final CurrentLocationFragment currentLocationFragment = new CurrentLocationFragment();\r\n        currentLocationFragment.setCancelable(true);\r\n        currentLocationFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.CURRENTLOCATION_TAG);\r\n    }\r\n\r\n    private  void mShowWorkplaceFragment() {\r\n\r\n        WorkplaceFragment workplaceFragment = new WorkplaceFragment();\r\n        workplaceFragment.setCancelable(false);\r\n        workplaceFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.WORKPLACEFRAGMENT_TAG);\r\n    }\r\n\r\n    private  void mShowPickDoneFragment(Boolean pvShowCurrentLocationBln) {\r\n\r\n        cUserInterface.pPlaySound(R.raw.goodsound, null);\r\n\r\n        final StepDoneFragment stepDoneFragment = new StepDoneFragment(cAppExtension.activity.getString(R.string.message_pick_done), cAppExtension.activity.getString(R.string.message_close_pick_fase) , pvShowCurrentLocationBln);\r\n        stepDoneFragment.setCancelable(false);\r\n        stepDoneFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ORDERDONE_TAG);\r\n\r\n        String proglovedata = \"1||\" + getResources().getString(R.string.proglove_check_terminal_screen);\r\n        cProGlove myproglove= new cProGlove();\r\n        myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 10, PROGLOVE_FEEDBACK_PURPLE);\r\n    }\r\n\r\n    private  Boolean mCheckAndSentLinesBln() {\r\n\r\n        final List<cPickorderLine> linesToSendObl = cPickorder.currentPickOrder.pGetLinesToSendFromDatabaseObl();\r\n\r\n        // If there is nothing to send, then we are done\r\n        if (linesToSendObl.size() == 0 ) {\r\n            return  true;\r\n        }\r\n\r\n        this.mShowSending();\r\n\r\n\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        Callable<Boolean> callableBln = () -> {\r\n\r\n            // Try to send each line, if one failes then stop\r\n            for (cPickorderLine pickorderLine : linesToSendObl) {\r\n\r\n                //Set the current line\r\n                cPickorderLine.currentPickOrderLine = pickorderLine;\r\n\r\n                //Try to send the line\r\n               cPickorderLine.currentPickOrderLine .pHandledBln();\r\n\r\n            }\r\n            return  true;\r\n        };\r\n\r\n        try {\r\n            Future<Boolean> callableResultBln = executorService.submit(callableBln);\r\n            Boolean hulpBln = callableResultBln.get();\r\n\r\n            if (!hulpBln) {\r\n                    mShowNotSent();\r\n                 return false;\r\n            }\r\n            this.mShowSent();\r\n            return  true;\r\n        }\r\n        catch (InterruptedException | ExecutionException ignored) {\r\n        }\r\n      return  false;\r\n    }\r\n\r\n    private  Boolean mAllLinesDoneBln() {\r\n        return cPickorder.currentPickOrder.pGetLinesNotHandledFromDatabaseObl().size() <= 0;\r\n    }\r\n\r\n    private  void mShowSending() {\r\n        final SendingFragment sendingFragment = new SendingFragment();\r\n        sendingFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            // show my popup\r\n            sendingFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.SENDING_TAG);\r\n        });\r\n    }\r\n\r\n    private void mShowNotSent() {\r\n        Fragment fragment = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.SENDING_TAG);\r\n        if (fragment != null) {\r\n            if (fragment instanceof SendingFragment) {\r\n                ((SendingFragment) fragment).pShowCrashAnimation(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mShowSent() {\r\n        Fragment fragment = cAppExtension.fragmentManager.findFragmentByTag(cPublicDefinitions.SENDING_TAG);\r\n        if (fragment != null) {\r\n            if (fragment instanceof SendingFragment) {\r\n                ((SendingFragment) fragment).pShowFlyAwayAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    private  void mStepFailed(String pvErrorMessageStr, cWarehouseorder.StepCodeEnu pvStepCodeEnu,int pvWorkflowPickStepInt ){\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, cPickorder.currentPickOrder.getOrderNumberStr(), true, true );\r\n\r\n        String proglovedata = \"1||\" + pvErrorMessageStr;\r\n\r\n        cProGlove myproglove= new cProGlove();\r\n        myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 10, PROGLOVE_FEEDBACK_NEGATIVE);\r\n\r\n\r\n        cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(pvStepCodeEnu,pvWorkflowPickStepInt);\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n    }\r\n\r\n    private  void mAskSort() {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(cAppExtension.context);\r\n\r\n            builder.setMessage(cAppExtension.context.getString(R.string.question_open_sort));\r\n            builder.setTitle(cAppExtension.context.getString(R.string.question_open_sort_title));\r\n            builder.setPositiveButton(R.string.open, (dialog, id) -> mStartSortActivity());\r\n            builder.setNegativeButton(R.string.no, (dialogInterface, i) -> mStartOrderSelectActivity());\r\n            builder.setIcon(R.drawable.ic_menu_sort);\r\n            builder.show();\r\n        });\r\n    }\r\n\r\n    private  void mAskShip() {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            AlertDialog.Builder builder = new AlertDialog.Builder(cAppExtension.context);\r\n\r\n            builder.setMessage(cAppExtension.context.getString(R.string.question_open_ship));\r\n            builder.setTitle(cAppExtension.context.getString(R.string.question_open_ship_title));\r\n            builder.setPositiveButton(R.string.open, (dialog, id) -> mStartShipActivity());\r\n            builder.setNegativeButton(R.string.no, (dialogInterface, i) -> mStartOrderSelectActivity());\r\n            builder.setIcon(R.drawable.ic_menu_ship);\r\n            builder.show();\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    private  void mStoreNextStep(){\r\n\r\n        //If activity bin is not required, then don't show the fragment\r\n        if ( cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 ) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        // If setting is not defined, then ask user\r\n        if (cSetting.PICK_STORAGE_AUTO_START() == null) {\r\n            this.mAskSort();\r\n            return;\r\n        }\r\n\r\n        // If settings is false, then go back to order select\r\n        if (!cSetting.PICK_STORAGE_AUTO_START()) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        // If settings is true, then go  to sort\r\n        if (cSetting.PICK_STORAGE_AUTO_START()) {\r\n            this.mStartStoreActivity();\r\n        }\r\n\r\n    }\r\n\r\n    private  void mSortNextStep(){\r\n\r\n        //If activity bin is not required, then don't show the fragment\r\n        if ( cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 ) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        // If setting is not defined, then ask user\r\n        if (cSetting.PICK_PACK_AND_SHIP_AUTO_START() == null) {\r\n            this.mAskSort();\r\n            return;\r\n        }\r\n\r\n        // If settings is false, then go back to order select\r\n        if (!cSetting.PICK_SORT_AUTO_START()) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n        // If settings is true, then go  to sort\r\n        if (cSetting.PICK_SORT_AUTO_START()) {\r\n            this.mStartSortActivity();\r\n        }\r\n\r\n    }\r\n\r\n    private void mPackAndShipNextStap(){\r\n\r\n        //If activity bin is not required, then don't show the fragment\r\n        if ( cPickorder.currentPickOrder.pQuantityHandledDbl() == 0 ) {\r\n            this.mStartOrderSelectActivity();\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        // If setting is not defined, then ask user\r\n        if (cSetting.PICK_PACK_AND_SHIP_AUTO_START() == null) {\r\n            this.mAskShip();\r\n            return;\r\n        }\r\n\r\n        // If settings is false, then go back to order select\r\n            if (!cSetting.PICK_PACK_AND_SHIP_AUTO_START()) {\r\n                this.mStartOrderSelectActivity();\r\n                return;\r\n            }\r\n\r\n        // If settings is true, then go  to ship\r\n            if (cSetting.PICK_PACK_AND_SHIP_AUTO_START()) {\r\n                this.mStartShipActivity();\r\n            }\r\n\r\n    }\r\n\r\n    private void mTryToLeaveActivity(){\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final AcceptRejectFragment acceptRejectFragment = new AcceptRejectFragment(cAppExtension.activity.getString(R.string.message_sure_leave_pick_screen_title),\r\n                cAppExtension.activity.getString(R.string.message_sure_leave_pick_screen_text),cAppExtension.activity.getString(R.string.message_cancel),cAppExtension.activity.getString(R.string.message_leave), false);\r\n        acceptRejectFragment.setCancelable(true);\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            // show my popup\r\n            acceptRejectFragment.show(cAppExtension.fragmentManager, cPublicDefinitions.ACCEPTREJECTFRAGMENT_TAG);\r\n        });\r\n\r\n    }\r\n\r\n    private  void mStartOrderSelectActivity() {\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            Intent intent = new Intent(cAppExtension.context, PickorderSelectActivity.class);\r\n            PickorderSelectActivity.startedViaMenuBln = false;\r\n           startActivity(intent);\r\n           finish();\r\n        });\r\n\r\n    }\r\n\r\n    private  void mStartSortActivity() {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleStartSortActivity).start();\r\n\r\n    }\r\n\r\n    private  void mStartStoreActivity() {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleStartStoreActivity).start();\r\n\r\n    }\r\n\r\n    private  void mHandleStartStoreActivity(){\r\n\r\n        //Clear workplaceStr, so you have to select it in the next step\r\n        cWorkplace.currentWorkplace = null;\r\n\r\n        //Try to lock the pickorder\r\n        if (!cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_Picking, cWarehouseorder.WorkflowPickStepEnu.PickStorage).resultBln) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_couldnt_lock_order),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickStorage);\r\n            return;\r\n        }\r\n\r\n        //Get sort linesInt\r\n        if (!cPickorder.currentPickOrder.pGetStorageLinesViaWebserviceBln(true)) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_getting_sort_lines_failed),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickStorage);\r\n            return;\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            //Show Sort Activity\r\n            Intent intent = new Intent(cAppExtension.context, StoreorderLinesActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n        });\r\n    }\r\n\r\n    private  void mHandleStartSortActivity(){\r\n\r\n        //Clear workplaceStr, so you have to select it in the next step\r\n        cWorkplace.currentWorkplace = null;\r\n\r\n        //Try to lock the pickorder\r\n        if (!cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_Picking, cWarehouseorder.WorkflowPickStepEnu.PickSorting).resultBln) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_couldnt_lock_order),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return;\r\n        }\r\n\r\n        //Get sort linesInt\r\n        if (!cPickorder.currentPickOrder.pGetLinesViaWebserviceBln(true,cWarehouseorder.PickOrderTypeEnu.SORT)) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_getting_sort_lines_failed),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return;\r\n        }\r\n\r\n        if (!cPickorder.currentPickOrder.pGetPropertyLineDataViaWebserviceBln()) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_get_property_line_data_failed),cWarehouseorder.StepCodeEnu.Pick_Picking,cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return;\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n            //Show Sort Activity\r\n            Intent intent = new Intent(cAppExtension.context, SortorderLinesActivity.class);\r\n            cAppExtension.activity.startActivity(intent);\r\n        });\r\n    }\r\n\r\n    private  void mStartShipActivity() {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(this::mHandleStartShipActivity).start();\r\n\r\n        String proglovedata = \"1||\" + getResources().getString(R.string.proglove_check_terminal_screen);\r\n        cProGlove myproglove= new cProGlove();\r\n        myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 0, PROGLOVE_FEEDBACK_PURPLE);\r\n\r\n    }\r\n\r\n    private  void mHandleStartShipActivity(){\r\n\r\n        cResult hulpResult;\r\n\r\n        if (!this.mTryToLockShipOrderBln()) {\r\n            return;\r\n        }\r\n\r\n        hulpResult = cPickorder.currentPickOrder.pGetShipmentDetailsRst();\r\n        if (!hulpResult.resultBln) {\r\n            this.mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return;\r\n        }\r\n\r\n        //Show ShipLines\r\n        Intent intent = new Intent(cAppExtension.context, ShiporderLinesActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n\r\n    }\r\n\r\n    private  void mStartPickActivity(){\r\n        //we have a line to handle, so start Pick activity\r\n        Intent intent = new Intent(cAppExtension.context, PickorderPickActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n    }\r\n\r\n    private  void mShowComments(){\r\n\r\n        if (cPickorder.currentPickOrder.pFeedbackAndPickCommentObl() == null || cPickorder.currentPickOrder.pFeedbackAndPickCommentObl().size() == 0) {\r\n            this.imageButtonComments.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        this.imageButtonComments.setVisibility(View.VISIBLE);\r\n\r\n        //We already showed the comments\r\n        if (cComment.commentsShownBln) {\r\n            return;\r\n        }\r\n\r\n        this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackAndPickCommentObl(),\"\");\r\n        cComment.commentsShownBln = true;\r\n    }\r\n\r\n    private  boolean mTryToLockShipOrderBln(){\r\n\r\n        cResult hulpResult;\r\n        hulpResult = cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown ) {\r\n            this.mStepFailed(hulpResult.messagesStr(),cWarehouseorder.StepCodeEnu.Pick_PackAndShip, cWarehouseorder.WorkflowPickStepEnu.PickPackAndShip);\r\n            return  false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if ( hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete ||\r\n              hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart ) {\r\n\r\n\r\n            //If we got any comments, show them\r\n            if (cPickorder.currentPickOrder.pFeedbackCommentObl() != null && cPickorder.currentPickOrder.pFeedbackCommentObl().size() > 0 ) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return  false;\r\n        }\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  cResult mCheckDestionationRst(cBarcodeScan pvBarcodeScan) {\r\n\r\n        cResult resultRst = new cResult();\r\n\r\n        //If we don't need a branch, we are done\r\n        if (!cPickorder.currentPickOrder.isPFBln()) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        if (cPickorder.currentPickOrder.destionationBranch() != null) {\r\n            cPickorder.currentPickOrder.scannedBranch = cPickorder.currentPickOrder.destionationBranch();\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        //Check if scan matches a branch in open lines\r\n        cPickorder.currentPickOrder.scannedBranch = cPickorder.currentPickOrder.pGetBranchForOpenLines(pvBarcodeScan.getBarcodeOriginalStr());\r\n        if (cPickorder.currentPickOrder.scannedBranch  != null) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        //If we don't have a match, check if we have a location scan\r\n        if (!cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.LOCATION)) {\r\n            cPickorder.currentPickOrder.scannedBranch  = null;\r\n            resultRst.resultBln = false;\r\n            resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_scan_is_not_location));\r\n            return  resultRst;\r\n        }\r\n\r\n        //We have a location scan, now strip the prefix and check if plain value matches a branch in open lines\r\n        String barcodewithoutPrefix = cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr());\r\n        cPickorder.currentPickOrder.scannedBranch  = cPickorder.currentPickOrder.pGetBranchForOpenLines(barcodewithoutPrefix);\r\n        if (cPickorder.currentPickOrder.scannedBranch  != null) {\r\n            resultRst.resultBln = true;\r\n            return  resultRst;\r\n        }\r\n\r\n        resultRst.resultBln = false;\r\n        resultRst.pAddErrorMessage(cAppExtension.activity.getString(R.string.message_location_incorrect));\r\n        return  resultRst;\r\n\r\n    }\r\n\r\n    private void mSetTabLayout(){\r\n\r\n        if (this.pickorderLinesTabLayout.getTabCount() == 0) {\r\n            this.pickorderLinesTabLayout.addTab(this.pickorderLinesTabLayout.newTab().setText(R.string.tab_pickorderline_topick));\r\n            this.pickorderLinesTabLayout.addTab(this.pickorderLinesTabLayout.newTab().setText(R.string.tab_pickorderline_picked));\r\n            this.pickorderLinesTabLayout.addTab(this.pickorderLinesTabLayout.newTab().setText(R.string.tab_pickorderline_total));\r\n        }\r\n\r\n\r\n        PickorderLinesPagerAdapter pickorderLinesPagerAdapter = new PickorderLinesPagerAdapter(this.pickorderLinesTabLayout.getTabCount());\r\n        this.pickorderLinesViewPager.setAdapter(pickorderLinesPagerAdapter);\r\n        this.pickorderLinesViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(this.pickorderLinesTabLayout));\r\n        this.pickorderLinesTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab pvTab) {\r\n                pickorderLinesViewPager.setCurrentItem(pvTab.getPosition());\r\n                mChangeSelectedTab(pvTab);\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab pvTab) {\r\n                cUserInterface.pKillAllSounds();\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab pvTab) {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mAbortOrder() {\r\n\r\n        cUserInterface.pShowGettingData();\r\n\r\n        if (!cPickorder.currentPickOrder.pAbortBln()) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_couldnt_abort_order), cPickorderLine.currentPickOrderLine.getLineNoInt().toString(), true, true );\r\n\r\n            String proglovedata = \"1||\" + cAppExtension.context.getString(R.string.error_couldnt_abort_order);\r\n\r\n            cProGlove myproglove= new cProGlove();\r\n            myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_0HEADER, proglovedata, false, 10, PROGLOVE_FEEDBACK_NEGATIVE);\r\n\r\n\r\n            return;\r\n        }\r\n\r\n        cUserInterface.pHideGettingData();\r\n\r\n        //Check if we are done\r\n        PickorderLinesActivity.startedViaOrderSelectBln = false;\r\n        this.pCheckAllDone();\r\n\r\n    }\r\n\r\n    private  void mSendPickorderLine() {\r\n\r\n        //If internet is not connected\r\n        if (!cConnection.isInternetConnectedBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), R.raw.badsound);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n            return;\r\n        }\r\n\r\n        if (!cPickorderLine.currentPickOrderLine.pHandledBln()) {\r\n            //could not send line, let user know but answer succes so user can go to next line\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.couldnt_send_line), R.raw.badsound);\r\n            cPickorderLine.currentPickOrderLine.pErrorSending();\r\n        }\r\n\r\n        cPickorder.currentPickOrder.lastSelectedIndexInt = 0;\r\n        cPickorderLine.currentPickOrderLine = null;\r\n        cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.message_line_send), R.raw.headsupsound);\r\n        this.mActivityInitialize();\r\n\r\n    }\r\n\r\n    //End Region Private Methods\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLinesActivity.java	(revision bb390e9cbb523d22c0741f7dbef629b3a6c61030)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderLinesActivity.java	(date 1625144066711)
@@ -94,6 +94,7 @@
     private DrawerLayout menuActionsDrawer;
     private NavigationView actionMenuNavigation;
 
+    public static Boolean shipFromPickBln;
     //End Region Views
 
     //End Region Private Properties
@@ -1152,6 +1153,8 @@
 
     private  void mStartShipActivity() {
 
+        PickorderLinesActivity.shipFromPickBln = true;
+
         cUserInterface.pShowGettingData();
 
         new Thread(this::mHandleStartShipActivity).start();
Index: app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderSelectActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.icsvertex.scansuite.Activities.Pick;\r\n\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.app.ActivityOptionsCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.util.Pair;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics;\r\n\r\nimport java.util.List;\r\n\r\nimport ICS.Interfaces.iICSDefaultActivity;\r\nimport ICS.Utils.Scanning.cBarcodeScan;\r\nimport ICS.Utils.Scanning.cProGlove;\r\nimport ICS.Utils.cRegex;\r\nimport ICS.Utils.cResult;\r\nimport ICS.Utils.cSharedPreferences;\r\nimport ICS.Utils.cText;\r\nimport ICS.Utils.cUserInterface;\r\nimport ICS.cAppExtension;\r\nimport SSU_WHS.Basics.BarcodeLayouts.cBarcodeLayout;\r\nimport SSU_WHS.Basics.Settings.cSetting;\r\nimport SSU_WHS.Basics.Users.cUser;\r\nimport SSU_WHS.Basics.Workplaces.cWorkplace;\r\nimport SSU_WHS.General.Comments.cComment;\r\nimport SSU_WHS.General.Licenses.cLicense;\r\nimport SSU_WHS.General.Warehouseorder.cWarehouseorder;\r\nimport SSU_WHS.General.cPublicDefinitions;\r\nimport SSU_WHS.Picken.PickorderBarcodes.cPickorderBarcode;\r\nimport SSU_WHS.Picken.PickorderLines.cPickorderLine;\r\nimport SSU_WHS.Picken.Pickorders.cPickorder;\r\nimport SSU_WHS.Picken.Pickorders.cPickorderAdapter;\r\nimport nl.icsvertex.scansuite.Activities.General.MenuActivity;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.CommentFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.FilterOrderLinesFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.HugeErrorFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.NoOrdersFragment;\r\nimport nl.icsvertex.scansuite.Fragments.Dialogs.WorkflowFragment;\r\nimport nl.icsvertex.scansuite.R;\r\n\r\nimport static ICS.Utils.Scanning.cProGlove.PROGLOVE_DISPLAY_TEMPLATE_2FIELD_2HEADER;\r\nimport static ICS.Utils.Scanning.cProGlove.PROGLOVE_FEEDBACK_NEGATIVE;\r\nimport static ICS.Utils.Scanning.cProGlove.PROGLOVE_FEEDBACK_YELLOW;\r\n\r\npublic class PickorderSelectActivity extends AppCompatActivity implements iICSDefaultActivity, SwipeRefreshLayout.OnRefreshListener {\r\n\r\n    //Region Public Properties\r\n\r\n    //End Region Public Properties\r\n\r\n    //Region Private Properties\r\n\r\n    // Region Views\r\n    private ConstraintLayout combinePicksConstraintLayout;\r\n    private RecyclerView recyclerViewPickorders;\r\n    private ImageView toolbarImage;\r\n    private TextView toolbarTitle;\r\n    private TextView toolbarSubTitle;\r\n    private TextView toolbarSubTitle2;\r\n    private androidx.appcompat.widget.SearchView recyclerSearchView;\r\n\r\n    private MenuItem item_combine_picks;\r\n    private MenuItem item_select_single_pick;\r\n\r\n    private ImageView imageViewFilter;\r\n    private ImageView imageStartCombinedOrder;\r\n    private ImageView imageViewNewOrder;\r\n    private ConstraintLayout constraintFilterOrders;\r\n    private SwipeRefreshLayout swipeRefreshLayout;\r\n\r\n    private DrawerLayout menuActionsDrawer;\r\n    private NavigationView pickMenuNavigation;\r\n\r\n    private BottomSheetBehavior bottomSheetBehavior;\r\n\r\n    private cPickorderAdapter pickorderAdapter;\r\n    private cPickorderAdapter getPickorderAdapter(){\r\n        if (this.pickorderAdapter == null) {\r\n            this.pickorderAdapter = new cPickorderAdapter();\r\n        }\r\n\r\n        return  this.pickorderAdapter;\r\n    }\r\n\r\n    public  enum  ModusEnu {\r\n        NORMAL,\r\n        COMBINE\r\n    }\r\n\r\n    public static ModusEnu currentModusEnu = ModusEnu.NORMAL;\r\n    public static boolean startedViaMenuBln;\r\n\r\n\r\n    // End Region Views\r\n\r\n    //End Region Private Properties\r\n\r\n    //Region Default Methods\r\n\r\n    @Override\r\n    protected void onCreate(Bundle pvSavedInstanceState) {\r\n        super.onCreate(pvSavedInstanceState);\r\n        setContentView(R.layout.activity_pickorderselect);\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n\r\n        if (cAppExtension.activity instanceof  PickorderSelectActivity) {\r\n            cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        cBarcodeScan.pUnregisterBarcodeReceiver(this.getClass().getSimpleName());\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n\r\n        this.mActivityInitialize();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n        cUserInterface.pEnableScanner();\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu pvMenu) {\r\n        getMenuInflater().inflate(R.menu.menu_pick,pvMenu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onPrepareOptionsMenu(Menu pvMenu) {\r\n\r\n        if (this.item_combine_picks == null && this.item_select_single_pick == null) {\r\n            this.item_combine_picks =  pvMenu.findItem(R.id.item_combine_picks);\r\n            this.item_select_single_pick = pvMenu.findItem(R.id.item_select_single_pick);\r\n        }\r\n\r\n        if (cUser.currentUser.canMergePicks()) {\r\n\r\n            switch (PickorderSelectActivity.currentModusEnu) {\r\n                case NORMAL:\r\n                    this.item_combine_picks.setVisible(true);\r\n                    this.item_select_single_pick.setVisible(false);\r\n                    break;\r\n                case COMBINE:\r\n                    this.item_combine_picks.setVisible(false);\r\n                    this.item_select_single_pick.setVisible(true);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n        }\r\n\r\n        return super.onPrepareOptionsMenu(pvMenu);\r\n    }\r\n\r\n    @SuppressLint(\"NonConstantResourceId\")\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem pvMenuItem) {\r\n\r\n\r\n\r\n        switch (pvMenuItem.getItemId()) {\r\n\r\n            case android.R.id.home:\r\n                this.mLeaveActivity();\r\n                return  true;\r\n\r\n            case R.id.item_combine_picks:\r\n                PickorderSelectActivity.currentModusEnu = ModusEnu.COMBINE;\r\n                mInitCombinePickViews();\r\n                pFillOrders();\r\n                break;\r\n\r\n            case R.id.item_select_single_pick:\r\n                PickorderSelectActivity.currentModusEnu = ModusEnu.NORMAL;\r\n                cPickorder.pUnselectAllOrders();\r\n                mInitCombinePickViews();\r\n                pFillOrders();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // deselect everything\r\n        int size = pickMenuNavigation.getMenu().size();\r\n        for (int i = 0; i < size; i++) {\r\n            pickMenuNavigation.getMenu().getItem(i).setChecked(false);\r\n        }\r\n\r\n        // set item as selected to persist highlight\r\n        pvMenuItem.setChecked(true);\r\n        // close drawer when item is tapped\r\n        this.menuActionsDrawer.closeDrawers();\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (this.bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_EXPANDED){\r\n            this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);\r\n            return;\r\n        }\r\n\r\n        this.mLeaveActivity();\r\n    }\r\n\r\n    @Override\r\n    public void onRefresh() {\r\n        this.pFillOrders();\r\n    }\r\n\r\n    //End Region Default Methods\r\n\r\n    //Region iICSDefaultActivity defaults\r\n\r\n    @Override\r\n    public void mActivityInitialize() {\r\n\r\n        this.mSetAppExtensions();\r\n\r\n        this.mFindViews();\r\n\r\n        this.mSetToolbar(getResources().getString(R.string.screentitle_pickorderselect));\r\n\r\n        this.mFieldsInitialize();\r\n\r\n        this.mSetListeners();\r\n\r\n        this.mInitScreen();\r\n\r\n        this.mSetProGloveScreen();\r\n        cBarcodeScan.pRegisterBarcodeReceiver(this.getClass().getSimpleName());\r\n    }\r\n\r\n    @Override\r\n    public void mSetAppExtensions() {\r\n        cAppExtension.context = this;\r\n        cAppExtension.fragmentActivity  = this;\r\n        cAppExtension.activity = this;\r\n        cAppExtension.fragmentManager  = getSupportFragmentManager();\r\n    }\r\n\r\n    @Override\r\n    public void mFindViews() {\r\n        this.toolbarImage = findViewById(R.id.toolbarImage);\r\n        this.toolbarTitle = findViewById(R.id.toolbarTitle);\r\n        this.toolbarSubTitle = findViewById(R.id.toolbarSubtext);\r\n        this.toolbarSubTitle2 = findViewById(R.id.toolbarSubtext2);\r\n        this.recyclerViewPickorders = findViewById(R.id.recyclerViewPickorders);\r\n        this.recyclerSearchView = findViewById(R.id.recyclerSearchView);\r\n        this.imageViewFilter = findViewById(R.id.imageViewFilter);\r\n        this.imageStartCombinedOrder = findViewById(R.id.imageStartCombinedOrder);\r\n        this.imageViewNewOrder = findViewById(R.id.imageViewNewOrder);\r\n        this.constraintFilterOrders = findViewById(R.id.constraintFilterOrders);\r\n        this.swipeRefreshLayout = findViewById(R.id.swipeRefreshLayout);\r\n        this.menuActionsDrawer = findViewById(R.id.menuActionsDrawer);\r\n        this.pickMenuNavigation = findViewById(R.id.pickMenuNavigation);\r\n        this.combinePicksConstraintLayout = findViewById(R.id.combinePicksConstraintLayout);\r\n    }\r\n\r\n    @Override\r\n    public void mSetToolbar(String pvScreenTitleStr) {\r\n\r\n\r\n        if (cUser.currentUser.currentAuthorisation.getCustomAuthorisation() != null) {\r\n            this.toolbarImage.setImageBitmap(cUser.currentUser.currentAuthorisation.customImageBmp());\r\n            this.toolbarTitle.setText(cUser.currentUser.currentAuthorisation.getCustomAuthorisation().getDescriptionStr());\r\n        }\r\n        else {\r\n            this.toolbarImage.setImageResource(R.drawable.ic_menu_pick);\r\n            this.toolbarTitle.setText(pvScreenTitleStr);\r\n        }\r\n\r\n        this.toolbarSubTitle2.setText(cUser.currentUser.currentBranch.getBranchNameStr());\r\n        this.toolbarTitle.setSelected(true);\r\n        this.toolbarSubTitle.setSelected(true);\r\n        ViewCompat.setTransitionName(this.toolbarImage, cPublicDefinitions.VIEW_NAME_HEADER_IMAGE);\r\n        ViewCompat.setTransitionName(this.toolbarTitle, cPublicDefinitions.VIEW_NAME_HEADER_TEXT);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mFieldsInitialize() {\r\n        this.mInitBottomSheet();\r\n        this.mSetNewOrderButton();\r\n        this.mInitCombinePickViews();\r\n        this.mResetCurrents();\r\n        this.pFillOrders();\r\n    }\r\n\r\n    @Override\r\n    public void mSetListeners() {\r\n        this.mSetRecyclerOnScrollListener();\r\n        this.mSetSearchListener();\r\n        this.mSetFilterListener();\r\n        this.mSetSwipeRefreshListener();\r\n        this.mSetOpenCombinedOrderListener();\r\n        this.mSetNewOrderListener();\r\n    }\r\n\r\n    @Override\r\n    public void mInitScreen() {\r\n\r\n    }\r\n\r\n    //End Region iICSDefaultActivity defaults\r\n\r\n    private void mSetProGloveScreen() {\r\n\r\n    }\r\n\r\n    //Region Public Methods\r\n\r\n    public  void pFillOrders() {\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        new Thread(new Runnable() {\r\n            public void run() {\r\n                mHandleFillOrders();\r\n            }\r\n        }).start();\r\n\r\n    }\r\n\r\n    public  void pHandleScan(cBarcodeScan pvBarcodeScan) {\r\n\r\n        //Set filter with scanned barcodeStr if there is no prefix\r\n        if (!cRegex.pHasPrefix(pvBarcodeScan.getBarcodeOriginalStr())) {\r\n\r\n            if (PickorderSelectActivity.currentModusEnu == ModusEnu.NORMAL) {\r\n                //no prefix, fine\r\n                this.recyclerSearchView.setQuery(pvBarcodeScan.getBarcodeOriginalStr(), true);\r\n                this.recyclerSearchView.callOnClick();\r\n                return;\r\n            }\r\n\r\n            if (PickorderSelectActivity.currentModusEnu == ModusEnu.COMBINE) {\r\n\r\n                cPickorder pickorder = cPickorder.pGetPickorder(pvBarcodeScan.getBarcodeOriginalStr());\r\n                if (pickorder == null) {\r\n                    this.mStepFailed(cAppExtension.activity.getString(R.string.message_unknown_order));\r\n                    return;\r\n                }\r\n\r\n                this.recyclerViewPickorders.findViewHolderForAdapterPosition(cPickorder.pickordersToSelectObl().indexOf(pickorder)).itemView.performClick();\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        // If there is a prefix, check if its a salesorder, then remove prefix en set filter\r\n        if (cBarcodeLayout.pCheckBarcodeWithLayoutBln(pvBarcodeScan.getBarcodeOriginalStr(),cBarcodeLayout.barcodeLayoutEnu.DOCUMENT)) {\r\n\r\n            if (PickorderSelectActivity.currentModusEnu == ModusEnu.NORMAL) {\r\n                //has prefix, is salesorderStr\r\n                this.recyclerSearchView.setQuery(cRegex.pStripRegexPrefixStr(pvBarcodeScan.getBarcodeOriginalStr()), true);\r\n                this.recyclerSearchView.callOnClick();\r\n                return;\r\n            }\r\n\r\n            if (PickorderSelectActivity.currentModusEnu == ModusEnu.COMBINE) {\r\n\r\n                cPickorder pickorder = cPickorder.pGetPickorder(pvBarcodeScan.getBarcodeOriginalStr());\r\n                if (pickorder == null) {\r\n                    this.mStepFailed(cAppExtension.activity.getString(R.string.message_unknown_order));\r\n                    return;\r\n                }\r\n\r\n                this.recyclerViewPickorders.findViewHolderForAdapterPosition(cPickorder.pickordersToSelectObl().indexOf(pickorder)).itemView.performClick();\r\n                return;\r\n            }\r\n        }\r\n\r\n        //If there is a prefix but it's not a salesorder tgen do nope\r\n        cUserInterface.pDoNope(this.recyclerSearchView, true, true);\r\n    }\r\n\r\n    public void pPickorderSelected(cPickorder pvPickorder) {\r\n\r\n        if (!mCheckOrderIsLockableBln(pvPickorder)) {\r\n            cUserInterface.pShowToastMessage(cAppExtension.context.getString(R.string.lockorder_order_assigned_to_another_user), R.raw.badsound);\r\n            cUserInterface.pCheckAndCloseOpenDialogs();\r\n            return;\r\n        }\r\n\r\n        // Show that we are getting data\r\n        cUserInterface.pShowGettingData();\r\n\r\n        //Set the current pickorder\r\n        cPickorder.currentPickOrder = pvPickorder;\r\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Ordernumber\", cPickorder.currentPickOrder.getOrderNumberStr());\r\n\r\n        new Thread(new Runnable() {\r\n            public void run() {\r\n                mHandlePickorderSelected();\r\n            }\r\n        }).start();\r\n\r\n    }\r\n\r\n    public void pPickorderSelectedForCombi(cPickorder pvPickorder) {\r\n        cPickorder.currentPickOrder = pvPickorder;\r\n\r\n        cResult result = cPickorder.currentPickOrder.pUpdateSelectedRst(!cPickorder.currentPickOrder.getIsSelectedBln());\r\n        if (!result.resultBln) {\r\n            this.mStepFailed(result.messagesStr());\r\n            return;\r\n        }\r\n\r\n        mInitCombinePickViews();\r\n        if (PickorderSelectActivity.currentModusEnu == ModusEnu.COMBINE) {\r\n            cPickorder.allPickordersObl = cPickorder.pickordersToSelectObl();\r\n        }\r\n\r\n        mRefreshRecycler();\r\n\r\n    }\r\n\r\n    public  void pSetToolBarTitleWithCounters(final int pvCountFilterInt){\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (cPickorder.allPickordersObl == null ) {\r\n                    toolbarSubTitle.setText(\"0\"  + \" \" + cAppExtension.activity.getString(R.string.orders));\r\n                    return;\r\n                }\r\n                String subtitleStr;\r\n                if (!cSharedPreferences.userPickFilterBln()) {\r\n                    subtitleStr = cAppExtension.context.getResources().getQuantityString(R.plurals.plural_parameter1_orders, cPickorder.totalPicksInt,cPickorder.totalPicksInt);\r\n                } else {\r\n                    subtitleStr = cText.pIntToStringStr(pvCountFilterInt)  + \"/\" + cText.pIntToStringStr(cPickorder.totalPicksInt) + \" \" + cAppExtension.activity.getString(R.string.orders) + \" \" + cAppExtension.activity.getString(R.string.shown);\r\n                }\r\n                toolbarSubTitle.setText(subtitleStr);\r\n\r\n                cProGlove myproglove= new cProGlove();\r\n                String proglovedata = \"1|\" + getString(R.string.proglove_header_pickorders) + \"|\" + cUser.currentUser.currentBranch.getBranchNameStr() + \"|2|\" + \"\" + \"|\" + subtitleStr;\r\n                myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_2FIELD_2HEADER, proglovedata, true, 0, 0);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void pNewWorkflowSelected(String pvNewWorkflowsStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        cWarehouseorder.PickMainTypeEnu pickMainTypeEnu = cWarehouseorder.PickMainTypeEnu.Unknown;\r\n\r\n        switch (pvNewWorkflowsStr) {\r\n            case \"PA\":\r\n                pickMainTypeEnu =  cWarehouseorder.PickMainTypeEnu.PA;\r\n                break;\r\n            case \"PF\":\r\n                pickMainTypeEnu = cWarehouseorder.PickMainTypeEnu.PF;\r\n                break;\r\n\r\n        }\r\n\r\n        this.mShowCreatePickctivity(pickMainTypeEnu);\r\n\r\n    }\r\n\r\n    //End Region Public Methods\r\n\r\n    // Region Private Methods\r\n\r\n    private  void mHandleFillOrders(){\r\n\r\n        //First get all Pickorders that are new\r\n        if (!cPickorder.pGetPickOrdersViaWebserviceBln(true, false, \"\")) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_get_pickorders_failed), \"\", true, true );\r\n            String proglovedata = \"1||\" + cAppExtension.context.getString(R.string.error_get_pickorders_failed);\r\n            cProGlove myproglove= new cProGlove();\r\n            myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_ERROR, proglovedata, false, 5, PROGLOVE_FEEDBACK_NEGATIVE);\r\n            return;\r\n        }\r\n\r\n        //Then get all pickorders that are processing or parked\r\n        if (!cPickorder.pGetPickOrdersViaWebserviceBln(false, true, \"\")) {\r\n            cUserInterface.pDoExplodingScreen(cAppExtension.context.getString(R.string.error_get_pickorders_failed), \"\", true, true );\r\n            String proglovedata = \"1||\" + cAppExtension.context.getString(R.string.error_get_pickorders_failed);\r\n            cProGlove myproglove= new cProGlove();\r\n            myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_ERROR, proglovedata, false, 5, PROGLOVE_FEEDBACK_NEGATIVE);\r\n            return;\r\n        }\r\n\r\n        if (cPickorder.allPickordersObl == null || cPickorder.allPickordersObl.size() == 0) {\r\n            cPickorder.totalPicksInt = 0;\r\n            pSetToolBarTitleWithCounters(cPickorder.totalPicksInt);\r\n            this.mShowNoOrdersIcon(true);\r\n\r\n            String proglovedata = \"1||\" + getResources().getString(R.string.proglove_no_orders);\r\n            cProGlove myproglove= new cProGlove();\r\n            myproglove.pSendScreen(cProGlove.PROGLOVE_DISPLAY_TEMPLATE_1FIELD_ALERT, proglovedata, true, 0, PROGLOVE_FEEDBACK_YELLOW);\r\n\r\n            return;\r\n        }\r\n\r\n        cPickorder.totalPicksInt  = cPickorder.allPickordersObl.size();\r\n\r\n        cAppExtension.activity.runOnUiThread(() -> {\r\n\r\n            if (PickorderSelectActivity.currentModusEnu == ModusEnu.NORMAL) {\r\n                cPickorder.allPickordersObl = cPickorder.pGetPicksWithFilterFromDatabasObl();\r\n            }\r\n\r\n            if (PickorderSelectActivity.currentModusEnu == ModusEnu.COMBINE) {\r\n                cPickorder.allPickordersObl = cPickorder.pickordersToSelectObl();\r\n            }\r\n\r\n            mRefreshRecycler();\r\n\r\n        });\r\n    }\r\n\r\n    private void mRefreshRecycler(){\r\n\r\n        if (cPickorder.allPickordersObl.size() == 0) {\r\n            mShowNoOrdersIcon( true);\r\n            cUserInterface.pHideGettingData();\r\n            return;\r\n        }\r\n\r\n        //Fill and show recycler\r\n        mSetPickorderRecycler(cPickorder.allPickordersObl);\r\n        mShowNoOrdersIcon(false);\r\n        if (cSharedPreferences.userPickFilterBln()) {\r\n            mApplyFilter();\r\n        }\r\n\r\n        cUserInterface.pHideGettingData();\r\n\r\n    }\r\n\r\n    private  void mHandlePickorderSelected(){\r\n\r\n        cResult hulpResult;\r\n\r\n        //Try to lock the pickorder\r\n        if (!this.mTryToLockOrderBln()) {\r\n            this.pFillOrders();\r\n            return;\r\n        }\r\n\r\n        //Delete the detail, so we can get them from the webservice\r\n        if (!cPickorder.currentPickOrder.pDeleteDetailsBln()) {\r\n            this.mStepFailed(cAppExtension.context.getString(R.string.error_couldnt_delete_details));\r\n            return;\r\n        }\r\n\r\n        hulpResult =  cPickorder.currentPickOrder.pGetPickDetailsRst();\r\n        if (!hulpResult.resultBln) {\r\n            this.mStepFailed(hulpResult.messagesStr());\r\n            return;\r\n        }\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // If everything went well, then start Lines Activity\r\n                mShowPickLinesActivity();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void mStepFailed(String pvErrorMessageStr){\r\n        cUserInterface.pDoExplodingScreen(pvErrorMessageStr, cPickorder.currentPickOrder.getOrderNumberStr(), true, true );\r\n        cPickorder.currentPickOrder.pLockReleaseViaWebserviceBln(cWarehouseorder.StepCodeEnu.Pick_Picking, cWarehouseorder.WorkflowPickStepEnu.PickPicking);\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        cPickorder.currentPickOrder = null;\r\n    }\r\n\r\n    private void mShowPickLinesActivity() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        final ViewGroup container = cAppExtension.activity.findViewById(R.id.container);\r\n\r\n        Intent intent;\r\n\r\n        if (cPickorder.currentPickOrder.isGeneratedOrderBln()) {\r\n            intent = new Intent(cAppExtension.context, PickorderLinesGeneratedActivity.class);\r\n        }\r\n        else{\r\n            intent = new Intent(cAppExtension.context, PickorderLinesActivity.class);\r\n            PickorderLinesActivity.startedViaOrderSelectBln = true;\r\n        }\r\n\r\n        View clickedOrder = container.findViewWithTag(cPickorder.currentPickOrder.getOrderNumberStr());\r\n\r\n        if (clickedOrder != null) {\r\n            ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(cAppExtension.activity, new Pair<>(clickedOrder, cPublicDefinitions.VIEW_CHOSEN_ORDER));\r\n            ActivityCompat.startActivity(cAppExtension.context,intent, activityOptions.toBundle());\r\n            return;\r\n        }\r\n\r\n        ActivityCompat.startActivity(cAppExtension.context,intent,null);\r\n\r\n    }\r\n\r\n    // End Region Private Methods\r\n\r\n    // Region View Methods\r\n\r\n    //Bottom Sheet\r\n\r\n    private void mInitBottomSheet() {\r\n\r\n        this.bottomSheetBehavior = BottomSheetBehavior.from(constraintFilterOrders);\r\n        this.bottomSheetBehavior.setHideable(true);\r\n        this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);\r\n        this.bottomSheetBehavior.addBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {\r\n            @Override\r\n            public void onStateChanged(@NonNull View bottomSheet, int pvNewStateInt) {\r\n                if (pvNewStateInt == BottomSheetBehavior.STATE_COLLAPSED) {\r\n                    mApplyFilter();\r\n                }\r\n                if (pvNewStateInt == BottomSheetBehavior.STATE_HIDDEN) {\r\n                    mApplyFilter();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onSlide(@NonNull View bottomSheet, float slideOffset) {\r\n\r\n            }\r\n        });\r\n\r\n        this.mFillBottomSheet();\r\n    }\r\n\r\n    private void mInitCombinePickViews(){\r\n\r\n        if (PickorderSelectActivity.currentModusEnu == ModusEnu.NORMAL) {\r\n            this.combinePicksConstraintLayout.setVisibility(View.GONE);\r\n            this.imageStartCombinedOrder.setVisibility(View.GONE);\r\n        }\r\n        else {\r\n            this.combinePicksConstraintLayout.setVisibility(View.VISIBLE);\r\n            this.imageViewNewOrder.setVisibility(View.GONE);\r\n\r\n            if (cPickorder.pickorderSelectedObl().size() > 1) {\r\n                this.imageStartCombinedOrder.setVisibility(View.VISIBLE);\r\n            }\r\n            else {\r\n                this.imageStartCombinedOrder.setVisibility(View.GONE);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void mFillBottomSheet() {\r\n        cAppExtension.fragmentManager.beginTransaction().replace(R.id.constraintFilterOrders, new FilterOrderLinesFragment()).commit();\r\n    }\r\n\r\n    private void mShowHideBottomSheet(Boolean pvShowBln) {\r\n\r\n        if (pvShowBln) {\r\n            this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n            return;\r\n        }\r\n\r\n        this.bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);\r\n\r\n    }\r\n\r\n    private void mSetNewOrderButton() {\r\n\r\n        if (currentModusEnu == ModusEnu.COMBINE) {\r\n            this.imageViewNewOrder.setVisibility(View.INVISIBLE);\r\n            return;\r\n        }\r\n\r\n        if (cSetting.PICK_NEW_WORKFLOWS().size() >= 1) {\r\n            this.imageViewNewOrder.setVisibility(View.VISIBLE);\r\n        }\r\n        else {\r\n            this.imageViewNewOrder.setVisibility(View.INVISIBLE);\r\n        }\r\n\r\n    }\r\n\r\n    private void mSetNewOrderListener() {\r\n        this.imageViewNewOrder.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n                mShowCreatePickActivity();\r\n            }\r\n        });\r\n    }\r\n\r\n    //End Bottom Sheet\r\n\r\n    //Filter\r\n\r\n    private  void mApplyFilter() {\r\n\r\n        this.mShowThatFiltersInUse(cSharedPreferences.userPickFilterBln());\r\n\r\n        List<cPickorder> filteredPicksObl = cPickorder.pGetPicksWithFilterFromDatabasObl();\r\n\r\n        this.mSetPickorderRecycler(filteredPicksObl);\r\n\r\n        this.mShowNoOrdersIcon(filteredPicksObl.size() == 0);\r\n\r\n    }\r\n\r\n    private  void mShowThatFiltersInUse(Boolean pvFiltersInUseBln) {\r\n        if (pvFiltersInUseBln) {\r\n            this.imageViewFilter.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_filter_filled_black_24dp));\r\n        }\r\n        else {\r\n            this.imageViewFilter.setImageDrawable(ContextCompat.getDrawable(cAppExtension.context, R.drawable.ic_filter_black_24dp));\r\n        }\r\n    }\r\n\r\n    private void mSetFilterListener() {\r\n        this.imageViewFilter.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mShowHideBottomSheet(bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_HIDDEN || bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_COLLAPSED);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetOpenCombinedOrderListener() {\r\n        this.imageStartCombinedOrder.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                pPickorderSelected(cPickorder.currentCombinedPickOrder);\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetSwipeRefreshListener() {\r\n        this.swipeRefreshLayout.setOnRefreshListener(this);\r\n        this.swipeRefreshLayout.setColorSchemeColors(getResources().getColor(R.color.colorAccent), getResources().getColor(R.color.colorActive), getResources().getColor(R.color.colorPrimary));\r\n    }\r\n\r\n    private void mShowCreatePickActivity() {\r\n        Intent intent = new Intent(cAppExtension.context, CreatePickActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n    }\r\n\r\n    // End Filter\r\n\r\n    // Recycler View\r\n\r\n    private void mSetPickorderRecycler(List<cPickorder> pvPickorderObl) {\r\n\r\n        this.swipeRefreshLayout.setRefreshing(false);\r\n\r\n        if (pvPickorderObl == null) {\r\n            return;\r\n        }\r\n\r\n        this.imageViewFilter.setVisibility(View.VISIBLE);\r\n\r\n        for (Fragment fragment: cAppExtension.fragmentManager.getFragments()) {\r\n            if (fragment instanceof NoOrdersFragment) {\r\n                cAppExtension.fragmentManager.beginTransaction().remove(fragment).commit();\r\n            }\r\n        }\r\n\r\n        this.recyclerViewPickorders.setHasFixedSize(false);\r\n        this.recyclerViewPickorders.setAdapter(this.getPickorderAdapter());\r\n        this.recyclerViewPickorders.setLayoutManager(new LinearLayoutManager(cAppExtension.context));\r\n\r\n        this.getPickorderAdapter().pFillData(pvPickorderObl);\r\n    }\r\n\r\n    private void mSetRecyclerOnScrollListener() {\r\n        this.recyclerViewPickorders.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(@NonNull RecyclerView pvRecyclerView, int pvNewStateInt) {\r\n                super.onScrollStateChanged(pvRecyclerView, pvNewStateInt);\r\n            }\r\n\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                LinearLayoutManager layoutmanager = (LinearLayoutManager)recyclerView.getLayoutManager();\r\n                if (dy < 0) {\r\n\r\n                    int itemPosition = 0;\r\n                    if (layoutmanager != null) {\r\n                        itemPosition = layoutmanager.findFirstCompletelyVisibleItemPosition();\r\n                    }\r\n\r\n                    if(itemPosition==0){\r\n                        // Prepare the View for the animation\r\n                        recyclerSearchView.setVisibility(View.VISIBLE);\r\n                        recyclerSearchView.setAlpha(0.0f);\r\n\r\n                        // Start the animation\r\n                        recyclerSearchView.animate()\r\n                                .translationY(0)\r\n                                .alpha(1.0f)\r\n                                .setListener(null);\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    int itemPosition = 0;\r\n                    if (layoutmanager != null) {\r\n                        itemPosition = layoutmanager.findFirstCompletelyVisibleItemPosition();\r\n                    }\r\n\r\n                    if(itemPosition>1){// your *second item your recyclerview\r\n                        // Start the animation\r\n                        recyclerSearchView.setVisibility(View.GONE);\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void mSetSearchListener() {\r\n        //make whole view clickable\r\n        this.recyclerSearchView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View pvView) {\r\n                recyclerSearchView.setIconified(false);\r\n            }\r\n        });\r\n\r\n        //query entered\r\n        this.recyclerSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String pvString) {\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String pvQueryTextStr) {\r\n                mApplyFilter();\r\n                getPickorderAdapter().pSetFilter(pvQueryTextStr);\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    // End Recycler View\r\n\r\n    // No orders iconmS\r\n\r\n    private void mShowNoOrdersIcon(final Boolean pvShowBln){\r\n\r\n        cAppExtension.activity.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                cUserInterface.pHideGettingData();\r\n                swipeRefreshLayout.setRefreshing(false);\r\n\r\n                if (pvShowBln) {\r\n\r\n                    recyclerViewPickorders.setVisibility(View.INVISIBLE);\r\n\r\n                    FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                    NoOrdersFragment fragment = new NoOrdersFragment();\r\n                    fragmentTransaction.replace(R.id.pickorderContainer, fragment);\r\n                    fragmentTransaction.commit();\r\n\r\n                    if (cSetting.PICK_AUTO_CREATE_ORDER()) {\r\n                        mAutoOpenCreateActivity();\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                recyclerViewPickorders.setVisibility(View.VISIBLE);\r\n\r\n                List<Fragment> fragments = cAppExtension.fragmentManager.getFragments();\r\n                for (Fragment fragment : fragments) {\r\n                    if (fragment instanceof NoOrdersFragment) {\r\n                        FragmentTransaction fragmentTransaction = cAppExtension.fragmentManager.beginTransaction();\r\n                        fragmentTransaction.remove(fragment);\r\n                        fragmentTransaction.commit();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private boolean mCheckOrderIsLockableBln(cPickorder pvPickorder){\r\n\r\n        //If there is no assigned user, then always oke\r\n        if (pvPickorder.getAssignedUserIdStr().isEmpty()) {\r\n            return true;\r\n        }\r\n\r\n        //If you are allowed to unlock busy order, then no problem\r\n        if (cSetting.GENERIC_UNLOCK_BUSY_ORDERS_ALLOWED()) {\r\n            return true;\r\n        }\r\n\r\n        return cUser.currentUser.getUsernameStr().equalsIgnoreCase(pvPickorder.getAssignedUserIdStr());\r\n\r\n\r\n    }\r\n\r\n    private  void mResetCurrents(){\r\n\r\n        //Reset all current objects\r\n        cPickorder.currentPickOrder = null;\r\n        cPickorderLine.currentPickOrderLine = null;\r\n        cPickorderBarcode.currentPickorderBarcode = null;\r\n        cWorkplace.currentWorkplace = null;\r\n\r\n    }\r\n\r\n    private  boolean mTryToLockOrderBln(){\r\n\r\n        cResult hulpResult;\r\n        hulpResult = cPickorder.currentPickOrder.pLockViaWebserviceRst(cWarehouseorder.StepCodeEnu.Pick_Picking, cWarehouseorder.WorkflowPickStepEnu.PickPicking);\r\n\r\n        //Everything was fine, so we are done\r\n        if (hulpResult.resultBln) {\r\n            return true;\r\n        }\r\n\r\n        //Something went wrong, but no further actions are needed, so ony show reason of failure\r\n        if ( hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Unknown ) {\r\n            mStepFailed(hulpResult.messagesStr());\r\n            return  false;\r\n        }\r\n\r\n        //Something went wrong, the order has been deleted, so show comments and refresh\r\n        if (hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.Delete ||\r\n                hulpResult.activityActionEnu == cWarehouseorder.ActivityActionEnu.NoStart ) {\r\n\r\n\r\n            //If we got any comments, show them\r\n            if (cPickorder.currentPickOrder.pFeedbackCommentObl() != null && cPickorder.currentPickOrder.pFeedbackCommentObl().size() > 0 ) {\r\n                //Process comments from webresult\r\n                this.mShowCommentsFragment(cPickorder.currentPickOrder.pFeedbackCommentObl(), hulpResult.messagesStr());\r\n            }\r\n\r\n            return  false;\r\n        }\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    private  void mShowCommentsFragment(List<cComment> pvDataObl, String pvTitleStr) {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(cPublicDefinitions.KEY_COMMENTHEADER, pvTitleStr);\r\n\r\n        CommentFragment commentFragment = new CommentFragment(pvDataObl);\r\n        commentFragment.setArguments(bundle);\r\n\r\n        commentFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.COMMENTFRAGMENT_TAG);\r\n        cUserInterface.pPlaySound(R.raw.message, 0);\r\n    }\r\n\r\n    private void mReleaseLicense() {\r\n\r\n        if (! cLicense.pReleaseLicenseViaWebserviceBln()) {\r\n            cUserInterface.pShowSnackbarMessage(recyclerViewPickorders, cAppExtension.activity.getString(R.string.message_license_release_error),null, false);\r\n        }\r\n\r\n        cLicense.currentLicenseEnu = cLicense.LicenseEnu.Unknown;\r\n\r\n    }\r\n\r\n    private void mLeaveActivity(){\r\n        cPickorder.pUnselectAllOrders();\r\n        this.mReleaseLicense();\r\n        Intent intent = new Intent(cAppExtension.context, MenuActivity.class);\r\n        cAppExtension.activity.startActivity(intent);\r\n        finish();\r\n\r\n    }\r\n\r\n    private void mAutoOpenCreateActivity(){\r\n\r\n        // We returned in this form, so don't start create activity\r\n        if (!PickorderSelectActivity.startedViaMenuBln) {\r\n            return;\r\n        }\r\n\r\n        if (cSetting.PICK_NEW_WORKFLOWS().size() == 0) {\r\n            return;\r\n        }\r\n\r\n        this.mShowCreatePickctivity(null);\r\n\r\n    }\r\n\r\n    private  void mShowCreatePickctivity(cWarehouseorder.PickMainTypeEnu pvMainTypeEnu) {\r\n\r\n        if (pvMainTypeEnu != null) {\r\n            CreatePickActivity.pickMainTypeEnu = pvMainTypeEnu;\r\n        }\r\n\r\n            if (cSetting.PICK_NEW_WORKFLOWS().size() > 1) {\r\n                this.mShowWorklowFragment();\r\n                return;\r\n            }\r\n\r\n            switch (cSetting.PICK_NEW_WORKFLOWS().get(0).toUpperCase()) {\r\n                case  \"PF\":\r\n                    CreatePickActivity.pickMainTypeEnu = cWarehouseorder.PickMainTypeEnu.PF;\r\n                    break;\r\n                case \"PA\":\r\n                    CreatePickActivity.pickMainTypeEnu = cWarehouseorder.PickMainTypeEnu.PA;\r\n                    break;\r\n            }\r\n\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n        Intent intent = new Intent(cAppExtension.context, CreatePickActivity.class);\r\n        ActivityCompat.startActivity(cAppExtension.context,intent, null);\r\n    }\r\n\r\n    private  void mShowWorklowFragment() {\r\n\r\n        cUserInterface.pCheckAndCloseOpenDialogs();\r\n\r\n        WorkflowFragment workflowFragment = new WorkflowFragment();\r\n        workflowFragment.show(cAppExtension.fragmentManager , cPublicDefinitions.WORKFLOWFRAGMENT_TAG);\r\n    }\r\n\r\n    // End No orders icon\r\n\r\n    // End Region View Method\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderSelectActivity.java	(revision bb390e9cbb523d22c0741f7dbef629b3a6c61030)
+++ app/src/main/java/nl/icsvertex/scansuite/Activities/Pick/PickorderSelectActivity.java	(date 1625144066452)
@@ -962,6 +962,7 @@
         cPickorderLine.currentPickOrderLine = null;
         cPickorderBarcode.currentPickorderBarcode = null;
         cWorkplace.currentWorkplace = null;
+        PickorderLinesActivity.shipFromPickBln = false;
 
     }
 
